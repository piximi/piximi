var pg=Object.defineProperty;var dl=n=>{throw TypeError(n)};var gg=(n,e,t)=>e in n?pg(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var fl=(n,e,t)=>gg(n,typeof e!="symbol"?e+"":e,t),Xi=(n,e,t)=>e.has(n)||dl("Cannot "+t);var zn=(n,e,t)=>(Xi(n,e,"read from private field"),t?t.call(n):e.get(n)),Yi=(n,e,t)=>e.has(n)?dl("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(n):e.set(n,t),Bs=(n,e,t,r)=>(Xi(n,e,"write to private field"),r?r.call(n,t):e.set(n,t),t),ji=(n,e,t)=>(Xi(n,e,"access private method"),t);(function(){"use strict";function _mergeNamespaces(n,e){return e.forEach(function(t){t&&typeof t!="string"&&!Array.isArray(t)&&Object.keys(t).forEach(function(r){if(r!=="default"&&!(r in n)){var s=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(n,r,s.get?s:{enumerable:!0,get:function(){return t[r]}})}})}),Object.freeze(n)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EPSILON_FLOAT32$1=1e-7,EPSILON_FLOAT16$1=1e-4;class DataStorage{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class KernelBackend{refCount(e){return notYetImplemented("refCount")}incRef(e){return notYetImplemented("incRef")}timerAvailable(){return!0}time(e){return notYetImplemented("time")}read(e){return notYetImplemented("read")}readSync(e){return notYetImplemented("readSync")}readToGPU(e,t){return notYetImplemented("readToGPU")}numDataIds(){return notYetImplemented("numDataIds")}disposeData(e,t){return notYetImplemented("disposeData")}write(e,t,r){return notYetImplemented("write")}move(e,t,r,s,i){return notYetImplemented("move")}createTensorFromGPUData(e,t,r){return notYetImplemented("createTensorFromGPUData")}memory(){return notYetImplemented("memory")}floatPrecision(){return notYetImplemented("floatPrecision")}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$1:EPSILON_FLOAT16$1}dispose(){return notYetImplemented("dispose")}}function notYetImplemented(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shuffle(n){let e=n.length,t=0;for(;e>0;)t=Math.random()*e|0,e--,swap(n,e,t)}function clamp$1(n,e,t){return Math.max(n,Math.min(e,t))}function nearestLargerEven(n){return n%2===0?n:n+1}function swap(n,e,t){const r=n[e];n[e]=n[t],n[t]=r}function sum$4(n){let e=0;for(let t=0;t<n.length;t++)e+=n[t];return e}function assert$1(n,e){if(!n)throw new Error(typeof e=="string"?e:e())}function assertShapesMatch(n,e,t=""){assert$1(arraysEqual(n,e),()=>t+` Shapes ${n} and ${e} must match`)}function assertNonNull(n){assert$1(n!=null,()=>"The input to the tensor constructor must be a non-null value.")}function sizeFromShape(n){if(n.length===0)return 1;let e=n[0];for(let t=1;t<n.length;t++)e*=n[t];return e}function arraysEqual(n,e){if(n===e)return!0;if(n==null||e==null||n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(n[t]!==e[t])return!1;return!0}function isInt(n){return n%1===0}function sizeToSquarishShape(n){const e=Math.ceil(Math.sqrt(n));return[e,Math.ceil(n/e)]}function rightPad(n,e){return e<=n.length?n:n+" ".repeat(e-n.length)}function repeatedTry(n,e=s=>0,t,r){return new Promise((s,i)=>{let o=0;const a=()=>{if(n()){s();return}o++;const l=e(o);if(t!=null&&o>=t){i();return}r!=null?r(a,l):setTimeout(a,l)};a()})}function inferFromImplicitShape(n,e){let t=1,r=-1;for(let i=0;i<n.length;++i)if(n[i]>=0)t*=n[i];else if(n[i]===-1){if(r!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${i}`);r=i}else if(n[i]<0)throw Error(`Shapes can not be < 0. Found ${n[i]} at dim ${i}`);if(r===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${n}`);return n}if(t===0)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(e%t!==0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);const s=n.slice();return s[r]=e/t,s}function parseAxisParam(n,e){const t=e.length;return n=n==null?e.map((r,s)=>s):[].concat(n),assert$1(n.every(r=>r>=-t&&r<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${n}`),assert$1(n.every(r=>isInt(r)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(r=>r<0?t+r:r)}function squeezeShape(n,e){const t=[],r=[],s=e!=null&&Array.isArray(e)&&e.length===0,i=e==null||s?null:parseAxisParam(e,n).sort();let o=0;for(let a=0;a<n.length;++a){if(i!=null){if(i[o]===a&&n[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);(i[o]==null||i[o]>a)&&n[a]===1&&(t.push(n[a]),r.push(a)),i[o]<=a&&o++}n[a]!==1&&(t.push(n[a]),r.push(a))}return{newShape:t,keptDims:r}}function getTypedArrayFromDType(n,e){let t=null;if(n==null||n==="float32")t=new Float32Array(e);else if(n==="int32")t=new Int32Array(e);else if(n==="bool")t=new Uint8Array(e);else throw new Error(`Unknown data type ${n}`);return t}function getArrayFromDType(n,e){let t=null;if(n==null||n==="float32")t=new Float32Array(e);else if(n==="int32")t=new Int32Array(e);else if(n==="bool")t=new Uint8Array(e);else if(n==="string")t=new Array(e);else throw new Error(`Unknown data type ${n}`);return t}function checkConversionForErrors(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function isValidDtype(n){return n==="bool"||n==="complex64"||n==="float32"||n==="int32"||n==="string"}function hasEncodingLoss(n,e){return!(e==="complex64"||e==="float32"&&n!=="complex64"||e==="int32"&&n!=="float32"&&n!=="complex64"||e==="bool"&&n==="bool")}function bytesPerElement(n){if(n==="float32"||n==="int32")return 4;if(n==="complex64")return 8;if(n==="bool")return 1;throw new Error(`Unknown dtype ${n}`)}function bytesFromStringArray(n){if(n==null)return 0;let e=0;return n.forEach(t=>e+=t.length),e}function isString(n){return typeof n=="string"||n instanceof String}function isBoolean(n){return typeof n=="boolean"}function isNumber(n){return typeof n=="number"}function inferDtype(n){return Array.isArray(n)?inferDtype(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":isNumber(n)?"float32":isString(n)?"string":isBoolean(n)?"bool":"float32"}function isFunction(n){return!!(n&&n.constructor&&n.call&&n.apply)}function nearestDivisor(n,e){for(let t=e;t<n;++t)if(n%t===0)return t;return n}function computeStrides(n){const e=n.length;if(e<2)return[];const t=new Array(e-1);t[e-2]=n[e-1];for(let r=e-3;r>=0;--r)t[r]=t[r+1]*n[r+1];return t}function createNestedArray(n,e,t,r=!1){const s=new Array;if(e.length===1){const i=e[0]*(r?2:1);for(let o=0;o<i;o++)s[o]=t[n+o]}else{const i=e[0],o=e.slice(1),a=o.reduce((l,c)=>l*c)*(r?2:1);for(let l=0;l<i;l++)s[l]=createNestedArray(n+l*a,o,t,r)}return s}function toNestedArray(n,e,t=!1){if(n.length===0)return e[0];const r=n.reduce((s,i)=>s*i)*(t?2:1);if(r===0)return[];if(r!==e.length)throw new Error(`[${n}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return createNestedArray(0,n,e,t)}function convertBackendValuesAndArrayBuffer(n,e){if(Array.isArray(n))return n;if(e==="float32")return n instanceof Float32Array?n:new Float32Array(n);if(e==="int32")return n instanceof Int32Array?n:new Int32Array(n);if(e==="bool"||e==="string")return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${e}`)}function makeOnesTypedArray(n,e){const t=makeZerosTypedArray(n,e);for(let r=0;r<t.length;r++)t[r]=1;return t}function makeZerosTypedArray(n,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool")return new Uint8Array(n);throw new Error(`Unknown data type ${e}`)}function makeZerosNestedTypedArray(n,e){const t=n.reduce((r,s)=>r*s,1);if(e==null||e==="float32")return toNestedArray(n,new Float32Array(t));if(e==="int32")return toNestedArray(n,new Int32Array(t));if(e==="bool")return toNestedArray(n,new Uint8Array(t));throw new Error(`Unknown data type ${e}`)}function assertNonNegativeIntegerDimensions(n){n.forEach(e=>{assert$1(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function locToIndex(n,e,t){if(e===0)return 0;if(e===1)return n[0];let r=n[n.length-1];for(let s=0;s<n.length-1;++s)r+=t[s]*n[s];return r}function indexToLoc(n,e,t){if(e===0)return[];if(e===1)return[n];const r=new Array(e);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(n/t[s]),n-=r[s]*t[s];return r[r.length-1]=n,r}function isPromise(n){return n&&n.then&&typeof n.then=="function"}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TENSORFLOWJS_FLAGS_PREFIX="tfjsflags";class Environment{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&(env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},this.urlFlags[e]!=null){const s=this.urlFlags[e];env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${s}.`),this.set(e,s)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(isPromise(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const e=this.getQueryParams(this.global.location.search);TENSORFLOWJS_FLAGS_PREFIX in e&&e[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(r=>{const[s,i]=r.split(":");this.urlFlags[s]=parseValue(s,i)})}}function getQueryParams(n){const e={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...r)=>(decodeParam(e,r[0],r[1]),r.join("="))),e}function decodeParam(n,e,t){n[decodeURIComponent(e)]=decodeURIComponent(t||"")}function parseValue(n,e){if(e=e.toLowerCase(),e==="true"||e==="false")return e==="true";if(`${+e}`===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${n}.`)}function env(){return ENV$4}let ENV$4=null;function setEnvironmentGlobal(n){ENV$4=n}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let globalNameSpace;function getGlobalNamespace(){if(globalNameSpace==null){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else if(typeof self<"u")n=self;else throw new Error("Could not find a global object");globalNameSpace=n}return globalNameSpace}function getGlobalMap(){const n=getGlobalNamespace();return n._tfGlobals==null&&(n._tfGlobals=new Map),n._tfGlobals}function getGlobal(n,e){const t=getGlobalMap();if(t.has(n))return t.get(n);{const r=e();return t.set(n,r),t.get(n)}}const Abs="Abs",Acos="Acos",Acosh="Acosh",Add$1="Add",AddN="AddN",All="All",Any="Any",ArgMax="ArgMax",ArgMin="ArgMin",Asin="Asin",Asinh="Asinh",Atan="Atan",Atanh="Atanh",Atan2="Atan2",AvgPool="AvgPool",AvgPoolGrad="AvgPoolGrad",AvgPool3D="AvgPool3D",AvgPool3DGrad="AvgPool3DGrad",BatchMatMul="BatchMatMul",BatchToSpaceND="BatchToSpaceND",Bincount="Bincount",BroadcastTo="BroadcastTo",BroadcastArgs="BroadcastArgs",Cast="Cast",Ceil="Ceil",ClipByValue="ClipByValue",Complex="Complex",ComplexAbs="ComplexAbs",Concat="Concat",Conv2D$1="Conv2D",Conv2DBackpropFilter="Conv2DBackpropFilter",Conv2DBackpropInput="Conv2DBackpropInput",Conv3D$1="Conv3D",Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",Conv3DBackpropInputV2="Conv3DBackpropInputV2",Cos="Cos",Cosh="Cosh",Cumprod="Cumprod",Cumsum="Cumsum",CropAndResize="CropAndResize",DenseBincount="DenseBincount",DepthToSpace="DepthToSpace",DepthwiseConv2dNative="DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",Diag="Diag",Dilation2D="Dilation2D",Dilation2DBackpropInput="Dilation2DBackpropInput",Dilation2DBackpropFilter="Dilation2DBackpropFilter",RealDiv="RealDiv",Einsum="Einsum",Elu$1="Elu",EluGrad="EluGrad",Erf="Erf",Equal="Equal",Exp="Exp",ExpandDims="ExpandDims",Expm1="Expm1",FFT="FFT",Fill="Fill",FlipLeftRight="FlipLeftRight",Floor="Floor",FloorDiv="FloorDiv",FusedBatchNorm="FusedBatchNorm",GatherV2="GatherV2",GatherNd="GatherNd",Greater="Greater",GreaterEqual="GreaterEqual",Identity$1="Identity",IFFT="IFFT",Imag="Imag",IsFinite="IsFinite",IsInf="IsInf",IsNan="IsNan",LeakyRelu="LeakyRelu",Less="Less",LessEqual="LessEqual",LinSpace="LinSpace",Log="Log",Log1p="Log1p",LogicalAnd="LogicalAnd",LogicalNot="LogicalNot",LogicalOr="LogicalOr",LogSoftmax$1="LogSoftmax",LRN="LRN",LRNGrad="LRNGrad",Max="Max",Maximum$1="Maximum",MaxPool="MaxPool",MaxPoolGrad="MaxPoolGrad",MaxPool3D="MaxPool3D",MaxPool3DGrad="MaxPool3DGrad",MaxPoolWithArgmax="MaxPoolWithArgmax",Mean="Mean",Min="Min",Minimum$1="Minimum",MirrorPad="MirrorPad",Mod="Mod",Multinomial="Multinomial",Multiply$1="Multiply",Neg="Neg",NotEqual="NotEqual",NonMaxSuppressionV3="NonMaxSuppressionV3",NonMaxSuppressionV4="NonMaxSuppressionV4",NonMaxSuppressionV5="NonMaxSuppressionV5",OnesLike="OnesLike",OneHot="OneHot",Pack="Pack",PadV2="PadV2",Pow="Pow",Prelu="Prelu",Prod="Prod",RaggedGather="RaggedGather",RaggedRange="RaggedRange",RaggedTensorToTensor="RaggedTensorToTensor",Range="Range",Real="Real",Reciprocal="Reciprocal",Relu$1="Relu",Reshape$1="Reshape",ResizeNearestNeighbor="ResizeNearestNeighbor",ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",ResizeBilinear="ResizeBilinear",ResizeBilinearGrad="ResizeBilinearGrad",Relu6$1="Relu6",Reverse="Reverse",Round="Round",Rsqrt="Rsqrt",ScatterNd="ScatterNd",SearchSorted="SearchSorted",Select="Select",Selu$1="Selu",Slice="Slice",Sin="Sin",Sinh="Sinh",Sign="Sign",Sigmoid$1="Sigmoid",Softplus$1="Softplus",Sqrt="Sqrt",Sum="Sum",SpaceToBatchND="SpaceToBatchND",SplitV="SplitV",Softmax$2="Softmax",SparseFillEmptyRows="SparseFillEmptyRows",SparseReshape="SparseReshape",SparseSegmentMean="SparseSegmentMean",SparseSegmentSum="SparseSegmentSum",SparseToDense="SparseToDense",SquaredDifference="SquaredDifference",Square="Square",StridedSlice="StridedSlice",StringNGrams="StringNGrams",StringSplit="StringSplit",StringToHashBucketFast="StringToHashBucketFast",Sub="Sub",Tan="Tan",Tanh$1="Tanh",Tile="Tile",TopK="TopK",Transform="Transform",Transpose="Transpose",Unique="Unique",Unpack="Unpack",UnsortedSegmentSum="UnsortedSegmentSum",ZerosLike="ZerosLike",Step="Step",FromPixels="FromPixels",RotateWithOffset="RotateWithOffset",_FusedMatMul="_FusedMatMul",FusedConv2D="FusedConv2D",FusedDepthwiseConv2D="FusedDepthwiseConv2D";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function warn(...n){env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(...n)}function log$3(...n){env().getBool("IS_TEST")||env().getBool("PROD")||console.log(...n)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelRegistry=getGlobal("kernelRegistry",()=>new Map),gradRegistry=getGlobal("gradRegistry",()=>new Map);function getKernel$1(n,e){const t=makeKey(n,e);return kernelRegistry.get(t)}function getGradient(n){return gradRegistry.get(n)}function getKernelsForBackend(n){const e=kernelRegistry.entries(),t=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[i,o]=s,[a]=i.split("_");a===n&&t.push(o)}return t}function registerKernel(n){const{kernelName:e,backendName:t}=n,r=makeKey(e,t);kernelRegistry.has(r)&&warn(`The kernel '${e}' for backend '${t}' is already registered`),kernelRegistry.set(r,n)}function registerGradient(n){const{kernelName:e}=n;gradRegistry.has(e)&&env().getBool("DEBUG")&&warn(`Overriding the gradient for '${e}'`),gradRegistry.set(e,n)}function makeKey(n,e){return`${e}_${n}`}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}function getAugmentedNamespace(n){if(n.__esModule)return n;var e=n.default;if(typeof e=="function"){var t=function r(){return this instanceof r?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(n).forEach(function(r){var s=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:function(){return n[r]}})}),t}var long$1,hasRequiredLong;function requireLong(){if(hasRequiredLong)return long$1;hasRequiredLong=1,long$1=e;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function e(O,R,z){this.low=O|0,this.high=R|0,this.unsigned=!!z}e.prototype.__isLong__,Object.defineProperty(e.prototype,"__isLong__",{value:!0});function t(O){return(O&&O.__isLong__)===!0}e.isLong=t;var r={},s={};function i(O,R){var z,X,K;return R?(O>>>=0,(K=0<=O&&O<256)&&(X=s[O],X)?X:(z=a(O,(O|0)<0?-1:0,!0),K&&(s[O]=z),z)):(O|=0,(K=-128<=O&&O<128)&&(X=r[O],X)?X:(z=a(O,O<0?-1:0,!1),K&&(r[O]=z),z))}e.fromInt=i;function o(O,R){if(isNaN(O))return R?S:$;if(R){if(O<0)return S;if(O>=x)return L}else{if(O<=-9223372036854776e3)return D;if(O+1>=y)return P}return O<0?o(-O,R).neg():a(O%g|0,O/g|0,R)}e.fromNumber=o;function a(O,R,z){return new e(O,R,z)}e.fromBits=a;var l=Math.pow;function c(O,R,z){if(O.length===0)throw Error("empty string");if(O==="NaN"||O==="Infinity"||O==="+Infinity"||O==="-Infinity")return $;if(typeof R=="number"?(z=R,R=!1):R=!!R,z=z||10,z<2||36<z)throw RangeError("radix");var X;if((X=O.indexOf("-"))>0)throw Error("interior hyphen");if(X===0)return c(O.substring(1),R,z).neg();for(var K=o(l(z,8)),Y=$,te=0;te<O.length;te+=8){var ie=Math.min(8,O.length-te),Q=parseInt(O.substring(te,te+ie),z);if(ie<8){var se=o(l(z,ie));Y=Y.mul(se).add(o(Q))}else Y=Y.mul(K),Y=Y.add(o(Q))}return Y.unsigned=R,Y}e.fromString=c;function u(O,R){return typeof O=="number"?o(O,R):typeof O=="string"?c(O,R):a(O.low,O.high,typeof R=="boolean"?R:O.unsigned)}e.fromValue=u;var h=65536,d=1<<24,g=h*h,x=g*g,y=x/2,w=i(d),$=i(0);e.ZERO=$;var S=i(0,!0);e.UZERO=S;var _=i(1);e.ONE=_;var T=i(1,!0);e.UONE=T;var k=i(-1);e.NEG_ONE=k;var P=a(-1,2147483647,!1);e.MAX_VALUE=P;var L=a(-1,-1,!0);e.MAX_UNSIGNED_VALUE=L;var D=a(0,-2147483648,!1);e.MIN_VALUE=D;var M=e.prototype;return M.toInt=function(){return this.unsigned?this.low>>>0:this.low},M.toNumber=function(){return this.unsigned?(this.high>>>0)*g+(this.low>>>0):this.high*g+(this.low>>>0)},M.toString=function(R){if(R=R||10,R<2||36<R)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(D)){var z=o(R),X=this.div(z),K=X.mul(z).sub(this);return X.toString(R)+K.toInt().toString(R)}else return"-"+this.neg().toString(R);for(var Y=o(l(R,6),this.unsigned),te=this,ie="";;){var Q=te.div(Y),se=te.sub(Q.mul(Y)).toInt()>>>0,le=se.toString(R);if(te=Q,te.isZero())return le+ie;for(;le.length<6;)le="0"+le;ie=""+le+ie}},M.getHighBits=function(){return this.high},M.getHighBitsUnsigned=function(){return this.high>>>0},M.getLowBits=function(){return this.low},M.getLowBitsUnsigned=function(){return this.low>>>0},M.getNumBitsAbs=function(){if(this.isNegative())return this.eq(D)?64:this.neg().getNumBitsAbs();for(var R=this.high!=0?this.high:this.low,z=31;z>0&&!(R&1<<z);z--);return this.high!=0?z+33:z+1},M.isZero=function(){return this.high===0&&this.low===0},M.eqz=M.isZero,M.isNegative=function(){return!this.unsigned&&this.high<0},M.isPositive=function(){return this.unsigned||this.high>=0},M.isOdd=function(){return(this.low&1)===1},M.isEven=function(){return(this.low&1)===0},M.equals=function(R){return t(R)||(R=u(R)),this.unsigned!==R.unsigned&&this.high>>>31===1&&R.high>>>31===1?!1:this.high===R.high&&this.low===R.low},M.eq=M.equals,M.notEquals=function(R){return!this.eq(R)},M.neq=M.notEquals,M.ne=M.notEquals,M.lessThan=function(R){return this.comp(R)<0},M.lt=M.lessThan,M.lessThanOrEqual=function(R){return this.comp(R)<=0},M.lte=M.lessThanOrEqual,M.le=M.lessThanOrEqual,M.greaterThan=function(R){return this.comp(R)>0},M.gt=M.greaterThan,M.greaterThanOrEqual=function(R){return this.comp(R)>=0},M.gte=M.greaterThanOrEqual,M.ge=M.greaterThanOrEqual,M.compare=function(R){if(t(R)||(R=u(R)),this.eq(R))return 0;var z=this.isNegative(),X=R.isNegative();return z&&!X?-1:!z&&X?1:this.unsigned?R.high>>>0>this.high>>>0||R.high===this.high&&R.low>>>0>this.low>>>0?-1:1:this.sub(R).isNegative()?-1:1},M.comp=M.compare,M.negate=function(){return!this.unsigned&&this.eq(D)?D:this.not().add(_)},M.neg=M.negate,M.add=function(R){t(R)||(R=u(R));var z=this.high>>>16,X=this.high&65535,K=this.low>>>16,Y=this.low&65535,te=R.high>>>16,ie=R.high&65535,Q=R.low>>>16,se=R.low&65535,le=0,he=0,re=0,fe=0;return fe+=Y+se,re+=fe>>>16,fe&=65535,re+=K+Q,he+=re>>>16,re&=65535,he+=X+ie,le+=he>>>16,he&=65535,le+=z+te,le&=65535,a(re<<16|fe,le<<16|he,this.unsigned)},M.subtract=function(R){return t(R)||(R=u(R)),this.add(R.neg())},M.sub=M.subtract,M.multiply=function(R){if(this.isZero())return $;if(t(R)||(R=u(R)),n){var z=n.mul(this.low,this.high,R.low,R.high);return a(z,n.get_high(),this.unsigned)}if(R.isZero())return $;if(this.eq(D))return R.isOdd()?D:$;if(R.eq(D))return this.isOdd()?D:$;if(this.isNegative())return R.isNegative()?this.neg().mul(R.neg()):this.neg().mul(R).neg();if(R.isNegative())return this.mul(R.neg()).neg();if(this.lt(w)&&R.lt(w))return o(this.toNumber()*R.toNumber(),this.unsigned);var X=this.high>>>16,K=this.high&65535,Y=this.low>>>16,te=this.low&65535,ie=R.high>>>16,Q=R.high&65535,se=R.low>>>16,le=R.low&65535,he=0,re=0,fe=0,ge=0;return ge+=te*le,fe+=ge>>>16,ge&=65535,fe+=Y*le,re+=fe>>>16,fe&=65535,fe+=te*se,re+=fe>>>16,fe&=65535,re+=K*le,he+=re>>>16,re&=65535,re+=Y*se,he+=re>>>16,re&=65535,re+=te*Q,he+=re>>>16,re&=65535,he+=X*le+K*se+Y*Q+te*ie,he&=65535,a(fe<<16|ge,he<<16|re,this.unsigned)},M.mul=M.multiply,M.divide=function(R){if(t(R)||(R=u(R)),R.isZero())throw Error("division by zero");if(n){if(!this.unsigned&&this.high===-2147483648&&R.low===-1&&R.high===-1)return this;var z=(this.unsigned?n.div_u:n.div_s)(this.low,this.high,R.low,R.high);return a(z,n.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?S:$;var X,K,Y;if(this.unsigned){if(R.unsigned||(R=R.toUnsigned()),R.gt(this))return S;if(R.gt(this.shru(1)))return T;Y=S}else{if(this.eq(D)){if(R.eq(_)||R.eq(k))return D;if(R.eq(D))return _;var te=this.shr(1);return X=te.div(R).shl(1),X.eq($)?R.isNegative()?_:k:(K=this.sub(R.mul(X)),Y=X.add(K.div(R)),Y)}else if(R.eq(D))return this.unsigned?S:$;if(this.isNegative())return R.isNegative()?this.neg().div(R.neg()):this.neg().div(R).neg();if(R.isNegative())return this.div(R.neg()).neg();Y=$}for(K=this;K.gte(R);){X=Math.max(1,Math.floor(K.toNumber()/R.toNumber()));for(var ie=Math.ceil(Math.log(X)/Math.LN2),Q=ie<=48?1:l(2,ie-48),se=o(X),le=se.mul(R);le.isNegative()||le.gt(K);)X-=Q,se=o(X,this.unsigned),le=se.mul(R);se.isZero()&&(se=_),Y=Y.add(se),K=K.sub(le)}return Y},M.div=M.divide,M.modulo=function(R){if(t(R)||(R=u(R)),n){var z=(this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,R.low,R.high);return a(z,n.get_high(),this.unsigned)}return this.sub(this.div(R).mul(R))},M.mod=M.modulo,M.rem=M.modulo,M.not=function(){return a(~this.low,~this.high,this.unsigned)},M.and=function(R){return t(R)||(R=u(R)),a(this.low&R.low,this.high&R.high,this.unsigned)},M.or=function(R){return t(R)||(R=u(R)),a(this.low|R.low,this.high|R.high,this.unsigned)},M.xor=function(R){return t(R)||(R=u(R)),a(this.low^R.low,this.high^R.high,this.unsigned)},M.shiftLeft=function(R){return t(R)&&(R=R.toInt()),(R&=63)===0?this:R<32?a(this.low<<R,this.high<<R|this.low>>>32-R,this.unsigned):a(0,this.low<<R-32,this.unsigned)},M.shl=M.shiftLeft,M.shiftRight=function(R){return t(R)&&(R=R.toInt()),(R&=63)===0?this:R<32?a(this.low>>>R|this.high<<32-R,this.high>>R,this.unsigned):a(this.high>>R-32,this.high>=0?0:-1,this.unsigned)},M.shr=M.shiftRight,M.shiftRightUnsigned=function(R){if(t(R)&&(R=R.toInt()),R&=63,R===0)return this;var z=this.high;if(R<32){var X=this.low;return a(X>>>R|z<<32-R,z>>>R,this.unsigned)}else return R===32?a(z,0,this.unsigned):a(z>>>R-32,0,this.unsigned)},M.shru=M.shiftRightUnsigned,M.shr_u=M.shiftRightUnsigned,M.toSigned=function(){return this.unsigned?a(this.low,this.high,!1):this},M.toUnsigned=function(){return this.unsigned?this:a(this.low,this.high,!0)},M.toBytes=function(R){return R?this.toBytesLE():this.toBytesBE()},M.toBytesLE=function(){var R=this.high,z=this.low;return[z&255,z>>>8&255,z>>>16&255,z>>>24,R&255,R>>>8&255,R>>>16&255,R>>>24]},M.toBytesBE=function(){var R=this.high,z=this.low;return[R>>>24,R>>>16&255,R>>>8&255,R&255,z>>>24,z>>>16&255,z>>>8&255,z&255]},e.fromBytes=function(R,z,X){return X?e.fromBytesLE(R,z):e.fromBytesBE(R,z)},e.fromBytesLE=function(R,z){return new e(R[0]|R[1]<<8|R[2]<<16|R[3]<<24,R[4]|R[5]<<8|R[6]<<16|R[7]<<24,z)},e.fromBytesBE=function(R,z){return new e(R[4]<<24|R[5]<<16|R[6]<<8|R[7],R[0]<<24|R[1]<<16|R[2]<<8|R[3],z)},long$1}var longExports=requireLong(),long=getDefaultExportFromCjs(longExports),LongExports=_mergeNamespaces({__proto__:null,default:long},[longExports]);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Long=long||LongExports;function hexToLong(n){return Long.fromString(n,!0,16)}const k0=hexToLong("c3a5c85c97cb3127"),k1=hexToLong("b492b66fbe98f273"),k2=hexToLong("9ae16a3b2f90404f");function shiftMix(n){return n.xor(n.shru(47))}function fetch$1(n,e,t){const r=n.slice(e,e+t);return Long.fromBytes(Array.from(r),!0,!0)}function fetch64(n,e){return fetch$1(n,e,8)}function fetch32(n,e){return fetch$1(n,e,4)}function rotate64(n,e){return e===0?n:n.shru(e).or(n.shl(64-e))}function hashLen16(n,e,t=hexToLong("9ddfea08eb382d69")){let r=n.xor(e).mul(t);r=r.xor(r.shru(47));let s=e.xor(r).mul(t);return s=s.xor(s.shru(47)),s=s.mul(t),s}function weakHashLen32WithSeeds(n,e,t,r,s,i){s=s.add(n),i=rotate64(i.add(s).add(r),21);const o=s;return s=s.add(e),s=s.add(t),i=i.add(rotate64(s,44)),[s.add(r),i.add(o)]}function weakHashLen32WithSeedsStr(n,e,t,r){return weakHashLen32WithSeeds(fetch64(n,e),fetch64(n,e+8),fetch64(n,e+16),fetch64(n,e+24),t,r)}function hashLen0to16(n,e=n.length){if(e>=8){const t=k2.add(e*2),r=fetch64(n,0).add(k2),s=fetch64(n,e-8),i=rotate64(s,37).mul(t).add(r),o=rotate64(r,25).add(s).mul(t);return hashLen16(i,o,t)}if(e>=4){const t=k2.add(e*2),r=fetch32(n,0);return hashLen16(r.shl(3).add(e),fetch32(n,e-4),t)}if(e>0){const t=n[0],r=n[e>>1],s=n[e-1],i=t+(r<<8),o=e+(s<<2);return shiftMix(k2.mul(i).xor(k0.mul(o))).mul(k2)}return k2}function hashLen17to32(n,e=n.length){const t=k2.add(e*2),r=fetch64(n,0).mul(k1),s=fetch64(n,8),i=fetch64(n,e-8).mul(t),o=fetch64(n,e-16).mul(k2);return hashLen16(rotate64(r.add(s),43).add(rotate64(i,30)).add(o),r.add(rotate64(s.add(k2),18)).add(i),t)}function hashLen33to64(n,e=n.length){const t=k2.add(e*2),r=fetch64(n,0).mul(k2),s=fetch64(n,8),i=fetch64(n,e-8).mul(t),o=fetch64(n,e-16).mul(k2),a=rotate64(r.add(s),43).add(rotate64(i,30)).add(o),l=hashLen16(a,r.add(rotate64(s.add(k2),18)).add(i),t),c=fetch64(n,16).mul(t),u=fetch64(n,24),h=a.add(fetch64(n,e-32)).mul(t),d=l.add(fetch64(n,e-24)).mul(t);return hashLen16(rotate64(c.add(u),43).add(rotate64(h,30)).add(d),c.add(rotate64(u.add(r),18)).add(h),t)}function fingerPrint64(n,e=n.length){const t=Long.fromNumber(81,!0);if(e<=32)return e<=16?hashLen0to16(n,e):hashLen17to32(n,e);if(e<=64)return hashLen33to64(n,e);let r=t,s=t.mul(k1).add(113),i=shiftMix(s.mul(k2).add(113)).mul(k2),o=[Long.UZERO,Long.UZERO],a=[Long.UZERO,Long.UZERO];r=r.mul(k2).add(fetch64(n,0));let l=0;const c=(e-1>>6)*64,u=c+(e-1&63)-63;do r=rotate64(r.add(s).add(o[0]).add(fetch64(n,l+8)),37).mul(k1),s=rotate64(s.add(o[1]).add(fetch64(n,l+48)),42).mul(k1),r=r.xor(a[1]),s=s.add(o[0]).add(fetch64(n,l+40)),i=rotate64(i.add(a[0]),33).mul(k1),o=weakHashLen32WithSeedsStr(n,l,o[1].mul(k1),r.add(a[0])),a=weakHashLen32WithSeedsStr(n,l+32,i.add(a[1]),s.add(fetch64(n,l+16))),[i,r]=[r,i],l+=64;while(l!==c);const h=k1.add(i.and(255).shl(1));return l=u,a[0]=a[0].add(e-1&63),o[0]=o[0].add(a[0]),a[0]=a[0].add(o[0]),r=rotate64(r.add(s).add(o[0]).add(fetch64(n,l+8)),37).mul(h),s=rotate64(s.add(o[1]).add(fetch64(n,l+48)),42).mul(h),r=r.xor(a[1].mul(9)),s=s.add(o[0].mul(9).add(fetch64(n,l+40))),i=rotate64(i.add(a[0]),33).mul(h),o=weakHashLen32WithSeedsStr(n,l,o[1].mul(h),r.add(a[0])),a=weakHashLen32WithSeedsStr(n,l+32,i.add(a[1]),s.add(fetch64(n,l+16))),[i,r]=[r,i],hashLen16(hashLen16(o[0],a[0],h).add(shiftMix(s).mul(k0)).add(i),hashLen16(o[1],a[1],h).add(r),h)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createScalarValue(n,e){return e==="string"?encodeString(n):toTypedArray([n],e)}function noConversionNeeded(n,e){return n instanceof Float32Array&&e==="float32"||n instanceof Int32Array&&e==="int32"||n instanceof Uint8Array&&e==="bool"}function toTypedArray(n,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=flatten$1(n)),env().getBool("DEBUG")&&checkConversionForErrors(n,e),noConversionNeeded(n,e))return n;if(e==null||e==="float32"||e==="complex64")return new Float32Array(n);if(e==="int32")return new Int32Array(n);if(e==="bool"){const t=new Uint8Array(n.length);for(let r=0;r<t.length;++r)Math.round(n[r])!==0&&(t[r]=1);return t}else throw new Error(`Unknown data type ${e}`)}function now(){return env().platform.now()}function encodeString(n,e="utf-8"){return e=e||"utf-8",env().platform.encode(n,e)}function decodeString(n,e="utf-8"){return e=e||"utf-8",env().platform.decode(n,e)}function isTypedArray(n){return env().platform.isTypedArray(n)}function flatten$1(n,e=[],t=!1){if(e==null&&(e=[]),typeof n=="boolean"||typeof n=="number"||typeof n=="string"||isPromise(n)||n==null||isTypedArray(n)&&t)e.push(n);else if(Array.isArray(n)||isTypedArray(n))for(let r=0;r<n.length;++r)flatten$1(n[r],e,t);else{let r=-1;for(const s of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(s)&&(r=Math.max(r,Number(s)));for(let s=0;s<=r;s++)flatten$1(n[s],e,t)}return e}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Profiler{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new Logger)}profileKernel(e,t,r){let s;const i=()=>{s=r()};let o;const a=now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(i);else{i();for(const c of s)c.dataSync();o=Promise.resolve({kernelMs:now()-a})}if(env().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let c=0;c<s.length;c++){const u=s[c];u.data().then(h=>{checkComputationForErrors(h,u.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:o.then(c=>c.kernelMs),extraInfo:o.then(c=>c.getExtraProfileInfo!=null?c.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:r,timeMs:s,inputs:i,extraInfo:o}=e;r.forEach(a=>{Promise.all([a.data(),s,o]).then(l=>{this.logger.logKernelProfile(t,a,l[0],l[1],i,l[2])})})}}function checkComputationForErrors(n,e,t){if(e!=="float32")return!1;for(let r=0;r<n.length;r++){const s=n[r];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${t}'`),!0}return!1}class Logger{logKernelProfile(e,t,r,s,i,o){const a=typeof s=="number"?rightPad(`${s}ms`,9):s.error,l=rightPad(e,25),c=t.rank,u=t.size,h=rightPad(t.shape.toString(),14);let d="";for(const g in i){const x=i[g];if(x!=null){const y=x.shape||t.shape,w=y.length;d+=`${g}: ${w}D ${w>0?y:""} `}}console.log(`%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${o}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFilteredNodesXToY(n,e,t){const r={},s={};for(let l=0;l<e.length;l++)r[e[l].id]=!0;for(let l=0;l<n.length;l++){const c=n[l],u=c.inputs;for(const h in u){const d=u[h];let g=!1;for(let x=0;x<e.length;x++)if(r[d.id]){c.outputs.forEach(y=>r[y.id]=!0),g=!0,s[c.id]=!0;break}if(g)break}}const i={};i[t.id]=!0;const o={};for(let l=n.length-1;l>=0;l--){const c=n[l],u=c.inputs;for(let h=0;h<c.outputs.length;h++)if(i[c.outputs[h].id]){for(const d in u)i[u[d].id]=!0,o[c.id]=!0;break}}const a=[];for(let l=0;l<n.length;l++){const c=n[l];if(s[c.id]&&o[c.id]){const u={};for(const d in c.inputs){const g=c.inputs[d];r[g.id]&&(u[d]=g)}const h=Object.assign({},c);h.inputs=u,h.outputs=c.outputs,a.push(h)}}return a}function backpropagateGradients(n,e,t,r){for(let s=e.length-1;s>=0;s--){const i=e[s],o=[];if(i.outputs.forEach(l=>{const c=n[l.id];c!=null?o.push(c):o.push(null)}),i.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const a=i.gradient(o);for(const l in i.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);const c=t(()=>a[l]());if(c.dtype!=="float32")throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);const u=i.inputs[l];if(!arraysEqual(c.shape,u.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);if(n[u.id]==null)n[u.id]=c;else{const h=n[u.id];n[u.id]=r(h,c),h.dispose()}}}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FORMAT_LIMIT_NUM_VALS=20,FORMAT_NUM_FIRST_LAST_VALS=3,FORMAT_NUM_SIG_DIGITS=7;function tensorToString(n,e,t,r){const s=computeStrides(e),i=computeMaxSizePerColumn(n,e,t,s),o=e.length,a=subTensorToString(n,e,t,s,i),l=["Tensor"];return r&&(l.push(`  dtype: ${t}`),l.push(`  rank: ${o}`),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(a.map(c=>"    "+c).join(`
`)),l.join(`
`)}function computeMaxSizePerColumn(n,e,t,r){const s=sizeFromShape(e),i=r[r.length-1],o=new Array(i).fill(0),a=e.length,l=t==="complex64"?createComplexTuples(n):n;if(a>1)for(let c=0;c<s/i;c++){const u=c*i;for(let h=0;h<i;h++)o[h]=Math.max(o[h],valToString(l[u+h],0,t).length)}return o}function valToString(n,e,t){let r;return Array.isArray(n)?r=`${parseFloat(n[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ${parseFloat(n[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`:isString(n)?r=`'${n}'`:t==="bool"?r=boolNumToString(n):r=parseFloat(n.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(),rightPad(r,e)}function boolNumToString(n){return n===0?"false":"true"}function subTensorToString(n,e,t,r,s,i=!0){const o=t==="complex64"?2:1,a=e[0],l=e.length;if(l===0){if(t==="complex64"){const y=createComplexTuples(n);return[valToString(y[0],0,t)]}return t==="bool"?[boolNumToString(n[0])]:[n[0].toString()]}if(l===1){if(a>FORMAT_LIMIT_NUM_VALS){const w=FORMAT_NUM_FIRST_LAST_VALS*o;let $=Array.from(n.slice(0,w)),S=Array.from(n.slice((a-FORMAT_NUM_FIRST_LAST_VALS)*o,a*o));return t==="complex64"&&($=createComplexTuples($),S=createComplexTuples(S)),["["+$.map((_,T)=>valToString(_,s[T],t)).join(", ")+", ..., "+S.map((_,T)=>valToString(_,s[a-FORMAT_NUM_FIRST_LAST_VALS+T],t)).join(", ")+"]"]}return["["+(t==="complex64"?createComplexTuples(n):Array.from(n)).map((w,$)=>valToString(w,s[$],t)).join(", ")+"]"]}const c=e.slice(1),u=r.slice(1),h=r[0]*o,d=[];if(a>FORMAT_LIMIT_NUM_VALS){for(let y=0;y<FORMAT_NUM_FIRST_LAST_VALS;y++){const w=y*h,$=w+h;d.push(...subTensorToString(n.slice(w,$),c,t,u,s,!1))}d.push("...");for(let y=a-FORMAT_NUM_FIRST_LAST_VALS;y<a;y++){const w=y*h,$=w+h;d.push(...subTensorToString(n.slice(w,$),c,t,u,s,y===a-1))}}else for(let y=0;y<a;y++){const w=y*h,$=w+h;d.push(...subTensorToString(n.slice(w,$),c,t,u,s,y===a-1))}const g=l===2?",":"";d[0]="["+(a>0?d[0]+g:"");for(let y=1;y<d.length-1;y++)d[y]=" "+d[y]+g;let x=`,
`;for(let y=2;y<l;y++)x+=`
`;return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":x),d}function createComplexTuples(n){const e=[];for(let t=0;t<n.length;t+=2)e.push([n[t],n[t+1]]);return e}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorBuffer{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=sizeFromShape(e),r!=null){const s=r.length;assert$1(s===this.size,()=>`Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||getArrayFromDType(t,this.size),this.strides=computeStrides(e)}set(e,...t){t.length===0&&(t=[0]),assert$1(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const r=this.locToIndex(t);this.values[r]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t]){const i=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(i)}t++}let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=this.strides[s]*e[s];return this.values[r]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];const t=new Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return trackerFn().makeTensor(this.values,this.shape,this.dtype)}}let trackerFn=null,opHandler$1=null;function setTensorTracker(n){trackerFn=n}function setOpHandler(n){opHandler$1=n}class Tensor{constructor(e,t,r,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=sizeFromShape(e),this.strides=computeStrides(e),this.dataId=r,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return opHandler$1.buffer(this.shape,this.dtype,e)}bufferSync(){return opHandler$1.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return toNestedArray(this.shape,e,this.dtype==="complex64")}arraySync(){return toNestedArray(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const e=trackerFn().read(this.dataId);if(this.dtype==="string"){const t=await e;try{return t.map(r=>decodeString(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),trackerFn().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=trackerFn().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>decodeString(t))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await trackerFn().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(trackerFn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return opHandler$1.print(this,e)}clone(){return this.throwIfDisposed(),opHandler$1.clone(this)}toString(e=!1){const t=this.dataSync();return tensorToString(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),opHandler$1.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),trackerFn().makeVariable(this,e,t,r)}}Object.defineProperty(Tensor,Symbol.hasInstance,{value:n=>!!n&&n.data!=null&&n.dataSync!=null&&n.throwIfDisposed!=null});function getGlobalTensorClass(){return getGlobal("Tensor",()=>Tensor)}getGlobalTensorClass();class Variable extends Tensor{constructor(e,t,r,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=r}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!arraysEqual(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);trackerFn().disposeTensor(this),this.dataId=e.dataId,trackerFn().incRef(this,null)}dispose(){trackerFn().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Variable,Symbol.hasInstance,{value:n=>n instanceof Tensor&&n.assign!=null&&n.assign instanceof Function});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Rank;(function(n){n.R0="R0",n.R1="R1",n.R2="R2",n.R3="R3",n.R4="R4",n.R5="R5",n.R6="R6"})(Rank||(Rank={}));var UpcastInt32AndMap;(function(n){n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64"})(UpcastInt32AndMap||(UpcastInt32AndMap={}));var UpcastBoolAndMap;(function(n){n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64"})(UpcastBoolAndMap||(UpcastBoolAndMap={}));var UpcastFloat32AndMap;(function(n){n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64"})(UpcastFloat32AndMap||(UpcastFloat32AndMap={}));var UpcastComplex64AndMap;(function(n){n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64"})(UpcastComplex64AndMap||(UpcastComplex64AndMap={}));const upcastTypeMap={float32:UpcastFloat32AndMap,int32:UpcastInt32AndMap,bool:UpcastBoolAndMap,complex64:UpcastComplex64AndMap};function upcastType(n,e){if(n==="string"||e==="string"){if(n==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${n} with ${e}`)}return upcastTypeMap[n][e]}function sumOutType(n){return upcastType(n,"int32")}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTypesMatch(n,e){if(n.dtype===e.dtype)return[n,e];const t=upcastType(n.dtype,e.dtype);return[n.cast(t),e.cast(t)]}function getTensorsInContainer(n){const e=[];return walkTensorContainer(n,e,new Set),e}function walkTensorContainer(n,e,t){if(n==null)return;if(n instanceof Tensor){e.push(n);return}if(!isIterable(n))return;const r=n;for(const s in r){const i=r[s];t.has(i)||(t.add(i),walkTensorContainer(i,e,t))}}function isIterable(n){return Array.isArray(n)||typeof n=="object"}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isRegisteredKernelInvocation(n){return n.kernelName!=null}class EngineState{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Engine{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t];if(await this.initializeBackend(r).success){await this.setBackend(r);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(e in this.registryFactory){const{asyncInit:t}=this.initializeBackend(e);if(t)return null}else return null;return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;const{success:t,asyncInit:r}=this.initializeBackend(e);if(!(r?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Profiler(this.backendInstance),!0}setupRegisteredKernels(){getKernelsForBackend(this.backendName).forEach(t=>{t.setupFunc!=null&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){getKernelsForBackend(e).forEach(r=>{r.disposeFunc!=null&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=t.factory();if(r&&!(r instanceof KernelBackend)&&typeof r.then=="function"){const s=++this.pendingBackendInitId,i=r.then(o=>s<this.pendingBackendInitId?!1:(this.registry[e]=o,this.pendingBackendInit=null,!0)).catch(o=>(s<this.pendingBackendInitId||(this.pendingBackendInit=null,warn(`Initialization of backend ${e} failed`),warn(o.stack||o.message)),!1));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}else return this.registry[e]=r,{success:!0,asyncInit:!1}}catch(r){return warn(`Initialization of backend ${e} failed`),warn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const r=e[t],{success:s,asyncInit:i}=this.initializeBackend(r);if(i||s)return{name:r,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const r=this.state.tensorInfo.get(t),s=r.backend,i=this.readSync(t),o=s.refCount(t);s.disposeData(t,!0),r.backend=e,e.move(t,i,r.shape,r.dtype,o),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}let s;return this.scopedRun(()=>this.startScope(r),()=>this.endScope(s),()=>(s=t(),s instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),s))}scopedRun(e,t,r){e();try{const s=r();return t(),s}catch(s){throw t(),s}}nextTensorId(){return Engine.nextTensorId++}nextVariableId(){return Engine.nextVariableId++}clone(e){const t=ENGINE.runKernel(Identity$1,{x:e}),r={x:e},s=o=>({x:()=>{const a="float32",l={x:o},c={dtype:a};return ENGINE.runKernel(Cast,l,c)}}),i=[];return this.addTapeNode(this.state.activeScope.name,r,[t],s,i,{}),t}runKernel(e,t,r){if(this.backendName==null&&this.backend,!(getKernel$1(e,this.backendName)!=null))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){const s=this.backend.numDataIds();let i=0;r.forEach(l=>{i+=l.dtype==="complex64"?3:1});const o=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=s-t-i-o;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,r=[];const s=this.isTapeOn(),i=this.state.numBytes,o=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l;const c=isRegisteredKernelInvocation(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(isRegisteredKernelInvocation(e)){const{kernelName:x,inputs:y,attrs:w}=e;this.backendName==null&&this.backend;const $=getKernel$1(x,this.backendName);assert$1($!=null,()=>`Cannot find registered kernel '${x}' for backend '${this.backendName}'`),a=()=>{const S=this.backend.numDataIds();l=$.kernelFunc({inputs:y,attrs:w,backend:this.backend});const _=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(x,S,_);const T=_.map(k=>k.rank!=null?k:this.makeTensorFromTensorInfo(k));if(s){const k=this.getTensorsForGradient(x,y,T);r=this.saveTensorsForBackwardMode(k)}return T}}else{const{forwardFunc:x}=e,y=w=>{s&&(r=w.map($=>this.keep(this.clone($))))};a=()=>{const w=this.backend.numDataIds();l=this.tidy(()=>x(this.backend,y));const $=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,w,$),$}}const{inputs:u,attrs:h}=e,d=isRegisteredKernelInvocation(e)?null:e.backwardsFunc;let g;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?t=a():(g=this.profiler.profileKernel(c,u,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(g),t=g.outputs)}),s&&this.addTapeNode(c,u,t,d,r,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-i,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-o,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map(x=>u[x]!=null?u[x].shape:null),outputShapes:t.map(x=>x.shape),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,t,r){const s=getGradient(e);if(s!=null){const i=s.inputsToSave||[],o=s.outputsToSave||[];let a;s.saveAllInputs?(assert$1(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(c=>t[c])):a=i.map(c=>t[c]);const l=r.filter((c,u)=>o[u]);return a.concat(l)}return[]}makeTensor(e,t,r,s){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");r=r||"float32",s=s||this.backend;let i=e;r==="string"&&isString(e[0])&&(i=e.map(l=>encodeString(l)));const o=s.write(i,t,r),a=new Tensor(t,r,o,this.nextTensorId());if(this.trackTensor(a,s),r==="string"){const l=this.state.tensorInfo.get(o),c=bytesFromStringArray(i);this.state.numBytes+=c-l.bytes,l.bytes=c}return a}makeTensorFromDataId(e,t,r,s){r=r||"float32";const i={dataId:e,shape:t,dtype:r};return this.makeTensorFromTensorInfo(i,s)}makeTensorFromTensorInfo(e,t){const{dataId:r,shape:s,dtype:i}=e,o=new Tensor(s,i,r,this.nextTensorId());return this.trackTensor(o,t),o}makeVariable(e,t=!0,r,s){r=r||this.nextVariableId().toString(),s!=null&&s!==e.dtype&&(e=e.cast(s));const i=new Variable(e,t,r,this.nextTensorId());if(this.state.registeredVariables[i.name]!=null)throw new Error(`Variable with name ${i.name} was already registered`);return this.state.registeredVariables[i.name]=i,this.incRef(i,this.backend),i}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let r=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(r=e.size*bytesPerElement(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Variable||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){const r=e.size*bytesPerElement(e.dtype);this.state.numBytes-=r}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,r=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(s=>s.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,r,s,i,o){const a={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:i},l=getGradient(e);l!=null&&(s=l.gradFunc),s!=null&&(a.gradient=c=>(c=c.map((u,h)=>{if(u==null){const d=r[h],g=makeZerosTypedArray(d.size,d.dtype);return this.makeTensor(g,d.shape,d.dtype)}return u}),s(c.length>1?c:c[0],i,o))),this.state.activeTape.push(a)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=getTensorsInContainer(e),r=new Set(t.map(i=>i.id));for(let i=0;i<this.state.activeScope.track.length;i++){const o=this.state.activeScope.track[i];!o.kept&&!r.has(o.id)&&o.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(i=>{!i.kept&&i.scopeId===s.id&&this.track(i)})}gradients(e,t,r,s=!1){if(assert$1(t.length>0,()=>"gradients() received an empty list of xs."),r!=null&&r.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const i=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));assert$1(i instanceof Tensor,()=>"The result y returned by f() must be a tensor.");const o=getFilteredNodesXToY(this.state.activeTape,t,i);if(!s&&o.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const a={};a[i.id]=r??ones$1(i.shape),backpropagateGradients(a,o,c=>this.tidy(c),add$3);const l=t.map(c=>a[c.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(c=>{for(const u of c.saved)u.dispose()}),this.state.activeTape=null),{value:i,grads:l}})}customGrad(e){return assert$1(isFunction(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{assert$1(t.every(a=>a instanceof Tensor),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let r;const s={};t.forEach((a,l)=>{s[l]=a});const i=(a,l)=>(r=e(...t,l),assert$1(r.value instanceof Tensor,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),assert$1(isFunction(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),o=(a,l)=>{const c=r.gradFunc(a,l),u=Array.isArray(c)?c:[c];assert$1(u.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),assert$1(u.every(d=>d instanceof Tensor),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const h={};return u.forEach((d,g)=>{h[g]=()=>d}),h};return this.runKernelFunc({forwardFunc:i,backwardsFunc:o,inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=now(),r=await this.backend.time(e);return r.wallMs=now()-t,r}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Engine.nextTensorId=0,Engine.nextVariableId=0;function ones$1(n){const e=makeOnesTypedArray(sizeFromShape(n),"float32");return ENGINE.makeTensor(e,n,"float32")}function getOrMakeEngine(){const n=getGlobalNamespace();if(n._tfengine==null){const e=new Environment(n);n._tfengine=new Engine(e)}return setEnvironmentGlobal(n._tfengine.ENV),setTensorTracker(()=>n._tfengine),n._tfengine}const ENGINE=getOrMakeEngine();function add$3(n,e){const t={a:n,b:e};return ENGINE.runKernel(Add$1,t)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _isNavigatorDefined(){return typeof navigator<"u"&&navigator!=null}function isMobile(n){if(n||_isNavigatorDefined()){if(n||(n=navigator),n.product==="ReactNative")return!0;const e=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");if(!e){const t=n;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function isBrowser(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$3=env();ENV$3.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ENV$3.registerFlag("IS_BROWSER",()=>isBrowser()),ENV$3.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),ENV$3.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ENV$3.registerFlag("PROD",()=>!1),ENV$3.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ENV$3.getBool("DEBUG")),ENV$3.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ENV$3.registerFlag("IS_TEST",()=>!1),ENV$3.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),ENV$3.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ENV$3.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ENV$3.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function inferShape(n,e){let t=n;if(isTypedArray(n))return e==="string"?[]:[n.length];if(typeof n=="object"){if("texture"in n){const i=n.channels||"RGBA";return[n.height,n.width*i.length]}else if("buffer"in n&&!(n.buffer instanceof ArrayBuffer))return[n.buffer.size/(e==null?4:bytesPerElement(e))]}if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(t)||isTypedArray(t)&&e!=="string";)s.push(t.length),t=t[0];return Array.isArray(n)&&env().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&deepAssertShapeConsistency(n,s,[]),s}function deepAssertShapeConsistency(n,e,t){if(t=t||[],!Array.isArray(n)&&!isTypedArray(n)){assert$1(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);return}assert$1(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${n.length} elements`),assert$1(n.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${n.length} elements`);const r=e.slice(1);for(let s=0;s<n.length;++s)deepAssertShapeConsistency(n[s],r,t.concat(s))}function assertDtype(n,e,t,r){if(n!=="string_or_numeric"){if(n==null)throw new Error("Expected dtype cannot be null.");if(n!=="numeric"&&n!==e||n==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${r}' must be ${n} tensor, but got ${e} tensor`)}}function convertToTensor(n,e,t,r="numeric"){if(n instanceof Tensor)return assertDtype(r,n.dtype,e,t),n;let s=inferDtype(n);if(s!=="string"&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),assertDtype(r,s,e,t),n==null||!isTypedArray(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string"){const l=n==null?"null":n.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${l}'`)}const i=inferShape(n,s);!isTypedArray(n)&&!Array.isArray(n)&&(n=[n]);const a=s!=="string"?toTypedArray(n,s):flatten$1(n,[],!0);return ENGINE.makeTensor(a,i,s)}function convertToTensorArray(n,e,t,r="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((i,o)=>convertToTensor(i,`${e}[${o}]`,t,r))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OP_SCOPE_SUFFIX="__op";function op(n){const e=Object.keys(n);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0];const r=n[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t=t+OP_SCOPE_SUFFIX;const s=(...i)=>{ENGINE.startScope(t);try{const o=r(...i);return isPromise(o)&&console.error("Cannot return a Promise inside of tidy."),ENGINE.endScope(o),o}catch(o){throw ENGINE.endScope(null),o}};return Object.defineProperty(s,"name",{value:t,configurable:!0}),s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex_(n,e){const t=convertToTensor(n,"real","complex"),r=convertToTensor(e,"imag","complex");assertShapesMatch(t.shape,r.shape,`real and imag shapes, ${t.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:t,imag:r};return ENGINE.runKernel(Complex,s)}const complex$2=op({complex_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTensor(n,e,t,r){if(r==null)r=inferDtype(n);else if(r==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(typeof n=="object"&&("texture"in n||"buffer"in n&&!(n.buffer instanceof ArrayBuffer))){if(r!=="float32"&&r!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return ENGINE.backend.createTensorFromGPUData(n,e||t,r)}if(!isTypedArray(n)&&!Array.isArray(n)&&typeof n!="number"&&typeof n!="boolean"&&typeof n!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){assertNonNegativeIntegerDimensions(e);const s=sizeFromShape(e),i=sizeFromShape(t);assert$1(s===i,()=>`Based on the provided shape, [${e}], the tensor should have ${s} values but has ${i}`);for(let o=0;o<t.length;++o){const a=t[o],l=o===t.length-1?a!==sizeFromShape(e.slice(o)):!0;assert$1(t[o]===e[o]||!l,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return!isTypedArray(n)&&!Array.isArray(n)&&(n=[n]),e=e||t,n=r!=="string"?toTypedArray(n,r):flatten$1(n,[],!0),ENGINE.makeTensor(n,e,r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor(n,e,t){const r=inferShape(n,t);return makeTensor(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NUM_BYTES_STRING_LENGTH=4;async function encodeWeights(n,e){const t=[],r=[],s=Array.isArray(n)?n.map(o=>o.name):Object.keys(n);for(let o=0;o<s.length;++o){const a=s[o],l=Array.isArray(n)?n[o].tensor:n[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);const c={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){const u=new Promise(async h=>{const d=await l.bytes(),g=d.reduce((w,$)=>w+$.length,0)+NUM_BYTES_STRING_LENGTH*d.length,x=new Uint8Array(g);let y=0;for(let w=0;w<d.length;w++){const $=d[w],S=new Uint8Array(new Uint32Array([$.length]).buffer);x.set(S,y),y+=NUM_BYTES_STRING_LENGTH,x.set($,y),y+=$.length}h(x)});r.push(u)}else r.push(l.data());e!=null&&(c.group=e),t.push(c)}const i=await Promise.all(r);return{data:concatenateTypedArrays(i),specs:t}}function concatenateTypedArrays(n){if(n===null)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let e=0;const t=[];n.forEach(i=>{if(e+=i.byteLength,t.push(i.byteLength===i.buffer.byteLength?i:new i.constructor(i)),!(i instanceof Float32Array||i instanceof Int32Array||i instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${i.constructor.name}`)});const r=new Uint8Array(e);let s=0;return t.forEach(i=>{r.set(new Uint8Array(i.buffer),s),s+=i.byteLength}),r.buffer}const useNodeBuffer=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function stringByteLength(n){return useNodeBuffer?Buffer.byteLength(n):new Blob([n]).size}function arrayBufferToBase64String(n){if(useNodeBuffer)return Buffer.from(n).toString("base64");const e=new Uint8Array(n);let t="";for(let r=0,s=e.length;r<s;r++)t+=String.fromCharCode(e[r]);return btoa(t)}function base64StringToArrayBuffer(n){if(useNodeBuffer){const r=Buffer.from(n,"base64");return r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)}const e=atob(n),t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t.set([e.charCodeAt(r)],r);return t.buffer}function concatenateArrayBuffers(n){if(n.length===1)return n[0];let e=0;n.forEach(s=>{e+=s.byteLength});const t=new Uint8Array(e);let r=0;return n.forEach(s=>{t.set(new Uint8Array(s),r),r+=s.byteLength}),t.buffer}function getModelArtifactsInfoForJSON(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:n.modelTopology==null?0:stringByteLength(JSON.stringify(n.modelTopology)),weightSpecsBytes:n.weightSpecs==null?0:stringByteLength(JSON.stringify(n.weightSpecs)),weightDataBytes:n.weightData==null?0:n.weightData.byteLength}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class IORouterRegistry{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return IORouterRegistry.instance==null&&(IORouterRegistry.instance=new IORouterRegistry),IORouterRegistry.instance}static registerSaveRouter(e){IORouterRegistry.getInstance().saveRouters.push(e)}static registerLoadRouter(e){IORouterRegistry.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return IORouterRegistry.getHandlers(e,"save")}static getLoadHandlers(e,t){return IORouterRegistry.getHandlers(e,"load",t)}static getHandlers(e,t,r){const s=[];return(t==="load"?IORouterRegistry.getInstance().loadRouters:IORouterRegistry.getInstance().saveRouters).forEach(o=>{const a=o(e,r);a!==null&&s.push(a)}),s}}const getSaveHandlers=n=>IORouterRegistry.getSaveHandlers(n);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DATABASE_NAME="tensorflowjs",DATABASE_VERSION=1,MODEL_STORE_NAME="models_store",INFO_STORE_NAME="model_info_store";function getIndexedDBFactory(){if(!env().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,e=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function setUpDatabase(n){const e=n.result;e.createObjectStore(MODEL_STORE_NAME,{keyPath:"modelPath"}),e.createObjectStore(INFO_STORE_NAME,{keyPath:"modelPath"})}class BrowserIndexedDB{constructor(e){if(this.indexedDB=getIndexedDBFactory(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((r,s)=>{const i=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);i.onupgradeneeded=()=>setUpDatabase(i),i.onsuccess=()=>{const o=i.result;if(t==null){const a=o.transaction(MODEL_STORE_NAME,"readonly"),c=a.objectStore(MODEL_STORE_NAME).get(this.modelPath);c.onsuccess=()=>{if(c.result==null)return o.close(),s(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=u=>(o.close(),s(c.error)),a.oncomplete=()=>o.close()}else{const a=getModelArtifactsInfoForJSON(t),l=o.transaction(INFO_STORE_NAME,"readwrite");let c=l.objectStore(INFO_STORE_NAME);const u=c.put({modelPath:this.modelPath,modelArtifactsInfo:a});let h;u.onsuccess=()=>{h=o.transaction(MODEL_STORE_NAME,"readwrite");const g=h.objectStore(MODEL_STORE_NAME).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:a});g.onsuccess=()=>r({modelArtifactsInfo:a}),g.onerror=x=>{c=l.objectStore(INFO_STORE_NAME);const y=c.delete(this.modelPath);y.onsuccess=()=>(o.close(),s(g.error)),y.onerror=w=>(o.close(),s(g.error))}},u.onerror=d=>(o.close(),s(u.error)),l.oncomplete=()=>{h==null?o.close():h.oncomplete=()=>o.close()}}},i.onerror=o=>s(i.error)})}}BrowserIndexedDB.URL_SCHEME="indexeddb://";const indexedDBRouter=n=>env().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserIndexedDB.URL_SCHEME)?browserIndexedDB(n.slice(BrowserIndexedDB.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(indexedDBRouter),IORouterRegistry.registerLoadRouter(indexedDBRouter);function browserIndexedDB(n){return new BrowserIndexedDB(n)}function maybeStripScheme$1(n){return n.startsWith(BrowserIndexedDB.URL_SCHEME)?n.slice(BrowserIndexedDB.URL_SCHEME.length):n}class BrowserIndexedDBManager{constructor(){this.indexedDB=getIndexedDBFactory()}async listModels(){return new Promise((e,t)=>{const r=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);r.onupgradeneeded=()=>setUpDatabase(r),r.onsuccess=()=>{const s=r.result,i=s.transaction(INFO_STORE_NAME,"readonly"),a=i.objectStore(INFO_STORE_NAME).getAll();a.onsuccess=()=>{const l={};for(const c of a.result)l[c.modelPath]=c.modelArtifactsInfo;e(l)},a.onerror=l=>(s.close(),t(a.error)),i.oncomplete=()=>s.close()},r.onerror=s=>t(r.error)})}async removeModel(e){return e=maybeStripScheme$1(e),new Promise((t,r)=>{const s=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);s.onupgradeneeded=()=>setUpDatabase(s),s.onsuccess=()=>{const i=s.result,o=i.transaction(INFO_STORE_NAME,"readwrite"),a=o.objectStore(INFO_STORE_NAME),l=a.get(e);let c;l.onsuccess=()=>{if(l.result==null)return i.close(),r(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const u=a.delete(e),h=()=>{c=i.transaction(MODEL_STORE_NAME,"readwrite");const g=c.objectStore(MODEL_STORE_NAME).delete(e);g.onsuccess=()=>t(l.result.modelArtifactsInfo),g.onerror=x=>r(l.error)};u.onsuccess=h,u.onerror=d=>(h(),i.close(),r(l.error))}},l.onerror=u=>(i.close(),r(l.error)),o.oncomplete=()=>{c==null?i.close():c.oncomplete=()=>i.close()}},s.onerror=i=>r(s.error)})}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PATH_SEPARATOR="/",PATH_PREFIX="tensorflowjs_models",INFO_SUFFIX="info",MODEL_TOPOLOGY_SUFFIX="model_topology",WEIGHT_SPECS_SUFFIX="weight_specs",WEIGHT_DATA_SUFFIX="weight_data",MODEL_METADATA_SUFFIX="model_metadata";function getModelKeys(n){return{info:[PATH_PREFIX,n,INFO_SUFFIX].join(PATH_SEPARATOR),topology:[PATH_PREFIX,n,MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),weightSpecs:[PATH_PREFIX,n,WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),weightData:[PATH_PREFIX,n,WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),modelMetadata:[PATH_PREFIX,n,MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)}}function removeItems(n){for(const e of Object.values(n))window.localStorage.removeItem(e)}function getModelPathFromKey(n){const e=n.split(PATH_SEPARATOR);if(e.length<3)throw new Error(`Invalid key format: ${n}`);return e.slice(1,e.length-1).join(PATH_SEPARATOR)}function maybeStripScheme(n){return n.startsWith(BrowserLocalStorage.URL_SCHEME)?n.slice(BrowserLocalStorage.URL_SCHEME.length):n}class BrowserLocalStorage{constructor(e){if(!env().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=getModelKeys(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=getModelArtifactsInfoForJSON(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,arrayBufferToBase64String(e.weightData));const i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,initializerSignature:e.initializerSignature!=null?e.initializerSignature:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:s}}catch{throw removeItems(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(r==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(s==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const i=this.LS.getItem(this.keys.modelMetadata);if(i!=null){const a=JSON.parse(i);t.format=a.format,t.generatedBy=a.generatedBy,t.convertedBy=a.convertedBy,a.signature!=null&&(t.signature=a.signature),a.userDefinedMetadata!=null&&(t.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(t.modelInitializer=a.modelInitializer),a.initializerSignature!=null&&(t.initializerSignature=a.initializerSignature),a.trainingConfig!=null&&(t.trainingConfig=a.trainingConfig)}const o=this.LS.getItem(this.keys.weightData);if(o==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=base64StringToArrayBuffer(o),t}}BrowserLocalStorage.URL_SCHEME="localstorage://";const localStorageRouter=n=>env().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(BrowserLocalStorage.URL_SCHEME)?browserLocalStorage(n.slice(BrowserLocalStorage.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(localStorageRouter),IORouterRegistry.registerLoadRouter(localStorageRouter);function browserLocalStorage(n){return new BrowserLocalStorage(n)}class BrowserLocalStorageManager{constructor(){assert$1(env().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),assert$1(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=PATH_PREFIX+PATH_SEPARATOR,r=PATH_SEPARATOR+INFO_SUFFIX;for(let s=0;s<this.LS.length;++s){const i=this.LS.key(s);if(i.startsWith(t)&&i.endsWith(r)){const o=getModelPathFromKey(i);e[o]=JSON.parse(this.LS.getItem(i))}}return e}async removeModel(e){e=maybeStripScheme(e);const t=getModelKeys(e);if(this.LS.getItem(t.info)==null)throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(t.info));return removeItems(t),r}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const URL_SCHEME_SUFFIX="://";class ModelStoreManagerRegistry{constructor(){this.managers={}}static getInstance(){return ModelStoreManagerRegistry.instance==null&&(ModelStoreManagerRegistry.instance=new ModelStoreManagerRegistry),ModelStoreManagerRegistry.instance}static registerManager(e,t){assert$1(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(URL_SCHEME_SUFFIX)&&(e=e.slice(0,e.indexOf(URL_SCHEME_SUFFIX))),assert$1(e.length>0,()=>"scheme must not be an empty string.");const r=ModelStoreManagerRegistry.getInstance();assert$1(r.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){const t=ModelStoreManagerRegistry.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(ModelStoreManagerRegistry.getInstance().managers)}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PlatformBrowser{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(typeof window>"u"||!env().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",r=>{if(r.source===window&&r.data.name===this.messageName){r.stopPropagation();const s=this.functionRefs[r.data.index];s(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}}if(env().get("IS_BROWSER")){env().setPlatform("browser",new PlatformBrowser);try{ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME,new BrowserLocalStorageManager)}catch{}try{ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME,new BrowserIndexedDBManager)}catch{}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const getNodeFetch={importFetch:()=>require("node-fetch")};let systemFetch;class PlatformNode{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return env().global.fetch!=null?env().global.fetch(e,t):(systemFetch==null&&(systemFetch=getNodeFetch.importFetch()),systemFetch(e,t))}now(){const e=process.hrtime();return e[0]*1e3+e[1]/1e6}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return e.length===0?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}}env().get("IS_NODE")&&!env().get("IS_BROWSER")&&env().setPlatform("node",new PlatformNode);/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function buffer(n,e="float32",t){return e=e||"float32",assertNonNegativeIntegerDimensions(n),new TensorBuffer(n,e,t)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast_(n,e){const t=convertToTensor(n,"x","cast");if(!isValidDtype(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");const r={x:t},s={dtype:e};return ENGINE.runKernel(Cast,r,s)}const cast$3=op({cast_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clone_(n){const t={x:convertToTensor(n,"x","clone","string_or_numeric")};return ENGINE.runKernel(Identity$1,t)}const clone=op({clone_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function print(n,e=!1){console.log(n.toString(e))}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getOrMakeEngine();const opHandler={buffer,cast:cast$3,clone,print};setOpHandler(opHandler);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function engine(){return ENGINE}function memory(){return ENGINE.memory()}function tidy(n,e){return ENGINE.tidy(n,e)}function dispose(n){getTensorsInContainer(n).forEach(t=>t.dispose())}function keep(n){return ENGINE.keep(n)}function registerBackend(n,e,t=1){return ENGINE.registerBackend(n,e,t)}function backend(){return ENGINE.backend}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function add_(n,e){let t=convertToTensor(n,"a","add"),r=convertToTensor(e,"b","add");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Add$1,s)}const add$2=op({add_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floorDiv_(n,e){let t=convertToTensor(n,"a","floorDiv"),r=convertToTensor(e,"b","floorDiv");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(FloorDiv,s)}const floorDiv$2=op({floorDiv_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function div_(n,e){let t=convertToTensor(n,"a","div"),r=convertToTensor(e,"b","div");if([t,r]=makeTypesMatch(t,r),t.dtype==="int32"&&r.dtype==="int32")return floorDiv$2(t,r);const s={a:t,b:r},i={};return ENGINE.runKernel(RealDiv,s,i)}const div$1=op({div_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mul_(n,e){let t=convertToTensor(n,"a","mul"),r=convertToTensor(e,"b","mul");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Multiply$1,s)}const mul=op({mul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function abs_(n){const e=convertToTensor(n,"x","abs");if(e.dtype==="complex64"){const t={x:e};return ENGINE.runKernel(ComplexAbs,t)}else{const t={x:e};return ENGINE.runKernel(Abs,t)}}const abs$3=op({abs_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acos_(n){const t={x:convertToTensor(n,"x","acos")};return ENGINE.runKernel(Acos,t)}const acos$2=op({acos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acosh_(n){const t={x:convertToTensor(n,"x","acosh")};return ENGINE.runKernel(Acosh,t)}const acosh$2=op({acosh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all_(n,e=null,t=!1){const s={x:convertToTensor(n,"x","all","bool")},i={axis:e,keepDims:t};return ENGINE.runKernel(All,s,i)}const all$2=op({all_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any_(n,e=null,t=!1){const s={x:convertToTensor(n,"x","any","bool")},i={axis:e,keepDims:t};return ENGINE.runKernel(Any,s,i)}const any$2=op({any_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax_(n,e=0){const r={x:convertToTensor(n,"x","argMax")},s={axis:e};return ENGINE.runKernel(ArgMax,r,s)}const argMax$2=op({argMax_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin_(n,e=0){const r={x:convertToTensor(n,"x","argMin")},s={axis:e};return ENGINE.runKernel(ArgMin,r,s)}const argMin$2=op({argMin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asin_(n){const t={x:convertToTensor(n,"x","asin")};return ENGINE.runKernel(Asin,t)}const asin$2=op({asin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asinh_(n){const t={x:convertToTensor(n,"x","asinh")};return ENGINE.runKernel(Asinh,t)}const asinh$2=op({asinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan_(n){const t={x:convertToTensor(n,"x","atan")};return ENGINE.runKernel(Atan,t)}const atan$2=op({atan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan2_(n,e){let t=convertToTensor(n,"a","atan2"),r=convertToTensor(e,"b","atan2");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Atan2,s)}const atan2$2=op({atan2_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atanh_(n){const t={x:convertToTensor(n,"x","atanh")};return ENGINE.runKernel(Atanh,t)}const atanh$2=op({atanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeDilation2DInfo(n,e,t,r,s="NHWC",i){const o=n[3],a=[...e,o],l=convertConv2DDataFormat(s);return computeConv2DInfo(n,a,t,i,r,null,null,l)}function computePool2DInfo(n,e,t,r,s,i,o="channelsLast"){const[a,l]=parseTupleParam(e);let c;if(o==="channelsLast")c=[a,l,n[3],n[3]];else if(o==="channelsFirst")c=[a,l,n[1],n[1]];else throw new Error(`Unknown dataFormat ${o}`);return computeConv2DInfo(n,c,t,r,s,i,!1,o)}function computePool3DInfo(n,e,t,r,s,i,o="NDHWC"){const[a,l,c]=parse3TupleParam(e);let u,h;if(o==="NDHWC")h="channelsLast",u=[a,l,c,n[4],n[4]];else if(o==="NCDHW")h="channelsFirst",u=[a,l,c,n[1],n[1]];else throw new Error(`Unknown dataFormat ${o}`);return computeConv3DInfo(n,u,t,r,s,!1,h,i)}function computeConv2DInfo(n,e,t,r,s,i,o=!1,a="channelsLast"){let[l,c,u,h]=[-1,-1,-1,-1];if(a==="channelsLast")[l,c,u,h]=n;else if(a==="channelsFirst")[l,h,c,u]=n;else throw new Error(`Unknown dataFormat ${a}`);const[d,g,,x]=e,[y,w]=parseTupleParam(t),[$,S]=parseTupleParam(r),_=getEffectiveFilterSize(d,$),T=getEffectiveFilterSize(g,S),{padInfo:k,outHeight:P,outWidth:L}=getPadAndOutInfo(s,c,u,y,w,_,T,i,a),D=o?x*h:x;let M;return a==="channelsFirst"?M=[l,D,P,L]:a==="channelsLast"&&(M=[l,P,L,D]),{batchSize:l,dataFormat:a,inHeight:c,inWidth:u,inChannels:h,outHeight:P,outWidth:L,outChannels:D,padInfo:k,strideHeight:y,strideWidth:w,filterHeight:d,filterWidth:g,effectiveFilterHeight:_,effectiveFilterWidth:T,dilationHeight:$,dilationWidth:S,inShape:n,outShape:M,filterShape:e}}function computeConv3DInfo(n,e,t,r,s,i=!1,o="channelsLast",a){let[l,c,u,h,d]=[-1,-1,-1,-1,-1];if(o==="channelsLast")[l,c,u,h,d]=n;else if(o==="channelsFirst")[l,d,c,u,h]=n;else throw new Error(`Unknown dataFormat ${o}`);const[g,x,y,,w]=e,[$,S,_]=parse3TupleParam(t),[T,k,P]=parse3TupleParam(r),L=getEffectiveFilterSize(g,T),D=getEffectiveFilterSize(x,k),M=getEffectiveFilterSize(y,P),{padInfo:O,outDepth:R,outHeight:z,outWidth:X}=get3DPadAndOutInfo(s,c,u,h,$,S,_,L,D,M,a),K=i?w*d:w;let Y;return o==="channelsFirst"?Y=[l,K,R,z,X]:o==="channelsLast"&&(Y=[l,R,z,X,K]),{batchSize:l,dataFormat:o,inDepth:c,inHeight:u,inWidth:h,inChannels:d,outDepth:R,outHeight:z,outWidth:X,outChannels:K,padInfo:O,strideDepth:$,strideHeight:S,strideWidth:_,filterDepth:g,filterHeight:x,filterWidth:y,effectiveFilterDepth:L,effectiveFilterHeight:D,effectiveFilterWidth:M,dilationDepth:T,dilationHeight:k,dilationWidth:P,inShape:n,outShape:Y,filterShape:e}}function computeOutputShape2D(n,e,t,r,s){r==null&&(r=computeDefaultPad(n,e,t));const i=n[0],o=n[1],a=round$4((i-e+2*r)/t+1,s),l=round$4((o-e+2*r)/t+1,s);return[a,l]}function computeOutputShape4D(n,e,t,r,s,i){s==null&&(s=computeDefaultPad(n,e[0],r[0]));const o=[0,0,0,t];for(let a=0;a<3;a++)n[a]+2*s>=e[a]&&(o[a]=round$4((n[a]-e[a]+2*s)/r[a]+1,i));return o}function computeDefaultPad(n,e,t,r=1){const s=getEffectiveFilterSize(e,r);return Math.floor((n[0]*(t-1)-t+s)/2)}function parseTupleParam(n){return typeof n=="number"?[n,n,n]:n.length===2?[n[0],n[1],1]:n}function parse3TupleParam(n){return typeof n=="number"?[n,n,n]:n}function getEffectiveFilterSize(n,e){return e<=1?n:n+(n-1)*(e-1)}function getPadAndOutInfo(n,e,t,r,s,i,o,a,l){let c,u,h;if(typeof n=="number"){c={top:n,bottom:n,left:n,right:n,type:n===0?"VALID":"NUMBER"};const g=computeOutputShape2D([e,t],i,r,n,a);u=g[0],h=g[1]}else if(n==="same"){u=Math.ceil(e/r),h=Math.ceil(t/s);const d=Math.max(0,(u-1)*r+i-e),g=Math.max(0,(h-1)*s+o-t),x=Math.floor(d/2),y=d-x,w=Math.floor(g/2),$=g-w;c={top:x,bottom:y,left:w,right:$,type:"SAME"}}else if(n==="valid")c={top:0,bottom:0,left:0,right:0,type:"VALID"},u=Math.ceil((e-i+1)/r),h=Math.ceil((t-o+1)/s);else if(typeof n=="object"){const d=l==="channelsLast"?n[1][0]:n[2][0],g=l==="channelsLast"?n[1][1]:n[2][1],x=l==="channelsLast"?n[2][0]:n[3][0],y=l==="channelsLast"?n[2][1]:n[3][1];c={top:d,bottom:g,left:x,right:y,type:d===0&&g===0&&x===0&&y===0?"VALID":"EXPLICIT"},u=round$4((e-i+d+g)/r+1,a),h=round$4((t-o+x+y)/s+1,a)}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:c,outHeight:u,outWidth:h}}function get3DPadAndOutInfo(n,e,t,r,s,i,o,a,l,c,u){let h,d,g,x;if(n==="valid"&&(n=0),typeof n=="number"){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:n===0?"VALID":"NUMBER"};const w=computeOutputShape4D([e,t,r,1],[a,l,c],1,[s,i,o],n,u);d=w[0],g=w[1],x=w[2]}else if(n==="same"){d=Math.ceil(e/s),g=Math.ceil(t/i),x=Math.ceil(r/o);const y=(d-1)*s+a-e,w=(g-1)*i+l-t,$=(x-1)*o+c-r,S=Math.floor(y/2),_=y-S,T=Math.floor(w/2),k=w-T,P=Math.floor($/2),L=$-P;h={top:T,bottom:k,left:P,right:L,front:S,back:_,type:"SAME"}}else throw Error(`Unknown padding parameter: ${n}`);return{padInfo:h,outDepth:d,outHeight:g,outWidth:x}}function round$4(n,e){if(!e)return Math.trunc(n);switch(e){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${e}`)}}function tupleValuesAreOne(n){const[e,t,r]=parseTupleParam(n);return e===1&&t===1&&r===1}function eitherStridesOrDilationsAreOne(n,e){return tupleValuesAreOne(n)||tupleValuesAreOne(e)}function stridesOrDilationsArePositive(n){return parseTupleParam(n).every(e=>e>0)}function convertConv2DDataFormat(n){if(n==="NHWC")return"channelsLast";if(n==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function checkPadOnDimRoundingMode(n,e,t){if(t!=null){if(typeof e=="string")throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);if(typeof e=="number")assert$1(isInt(e),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);else if(typeof e=="object")e.forEach(r=>{r.forEach(s=>{assert$1(isInt(s),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${s}.`)})});else throw Error(`Error in ${n}: Unknown padding parameter: ${e}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape_(n,e){const r={x:convertToTensor(n,"x","reshape","string_or_numeric")},s={shape:e};return ENGINE.runKernel(Reshape$1,r,s)}const reshape$2=op({reshape_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool_(n,e,t,r,s){const i=convertToTensor(n,"x","avgPool","float32"),o=1;assert$1(eitherStridesOrDilationsAreOne(t,o),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`);let a=i,l=!1;i.rank===3&&(l=!0,a=reshape$2(i,[1,i.shape[0],i.shape[1],i.shape[2]])),assert$1(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),checkPadOnDimRoundingMode("avgPool",r,s);const c={x:a},u={filterSize:e,strides:t,pad:r,dimRoundingMode:s};let h=ENGINE.runKernel(AvgPool,c,u);return h=cast$3(h,i.dtype),l?reshape$2(h,[h.shape[1],h.shape[2],h.shape[3]]):h}const avgPool$2=op({avgPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3d_(n,e,t,r,s,i="NDHWC"){const o=convertToTensor(n,"x","avgPool3d","float32");let a=o,l=!1;o.rank===4&&(l=!0,a=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),assert$1(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),assert$1(i==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),assert$1(typeof t=="number"&&t>0||Array.isArray(t)&&t[0]>0&&t[1]>0&&t[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${t}'`),checkPadOnDimRoundingMode("avgPool3d",r,s);const c={x:a},u={filterSize:e,strides:t,pad:r,dimRoundingMode:s,dataFormat:i};let h=ENGINE.runKernel(AvgPool3D,c,u);return h=cast$3(h,a.dtype),l?reshape$2(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}const avgPool3d=op({avgPool3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat_(n,e=0){assert$1(n.length>=1,()=>"Pass at least one tensor to concat");const t=convertToTensorArray(n,"tensors","concat","string_or_numeric");if(t[0].dtype==="complex64"&&t.forEach(i=>{if(i.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${i.dtype}. `)}),t.length===1)return clone(t[0]);const r=t,s={axis:e};return ENGINE.runKernel(Concat,r,s)}const concat$2=op({concat_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function matMul_(n,e,t=!1,r=!1){let s=convertToTensor(n,"a","matMul"),i=convertToTensor(e,"b","matMul");[s,i]=makeTypesMatch(s,i);const o={a:s,b:i},a={transposeA:t,transposeB:r};return ENGINE.runKernel(BatchMatMul,o,a)}const matMul$1=op({matMul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoid_(n){const t={x:convertToTensor(n,"x","sigmoid","float32")};return ENGINE.runKernel(Sigmoid$1,t)}const sigmoid$2=op({sigmoid_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice_(n,e,t){const r=convertToTensor(n,"x","slice","string_or_numeric");if(r.rank===0)throw new Error("Slicing scalar is not possible");const s={x:r},i={begin:e,size:t};return ENGINE.runKernel(Slice,s,i)}const slice$2=op({slice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tanh_(n){const t={x:convertToTensor(n,"x","tanh","float32")};return ENGINE.runKernel(Tanh$1,t)}const tanh$2=op({tanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND_(n,e,t){const r=convertToTensor(n,"x","batchToSpaceND"),s=e.reduce((a,l)=>a*l);assert$1(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),assert$1(t.length===e.length,()=>`crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`),assert$1(r.shape[0]%s===0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const i={x:r},o={blockShape:e,crops:t};return ENGINE.runKernel(BatchToSpaceND,i,o)}const batchToSpaceND$2=op({batchToSpaceND_});function xAs4D(n){let e;return n.rank===0||n.rank===1?e=reshape$2(n,[1,1,1,n.size]):n.rank===2?e=reshape$2(n,[1,1,n.shape[0],n.shape[1]]):n.rank===3?e=reshape$2(n,[1,n.shape[0],n.shape[1],n.shape[2]]):e=n,e}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm_(n,e,t,r,s,i){i==null&&(i=.001);const o=convertToTensor(n,"x","batchNorm"),a=convertToTensor(e,"mean","batchNorm"),l=convertToTensor(t,"variance","batchNorm");let c;s!=null&&(c=convertToTensor(s,"scale","batchNorm"));let u;r!=null&&(u=convertToTensor(r,"offset","batchNorm")),assert$1(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$1(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$1(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:xAs4D(o),scale:c,offset:u,mean:a,variance:l},g={varianceEpsilon:i},x=ENGINE.runKernel(FusedBatchNorm,d,g);return reshape$2(x,o.shape)}const batchNorm$2=op({batchNorm_});function batchNorm2d_(n,e,t,r,s,i){const o=convertToTensor(n,"x","batchNorm"),a=convertToTensor(e,"mean","batchNorm"),l=convertToTensor(t,"variance","batchNorm");let c;s!=null&&(c=convertToTensor(s,"scale","batchNorm"));let u;return r!=null&&(u=convertToTensor(r,"offset","batchNorm")),assert$1(o.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`),assert$1(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),assert$1(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),c!=null&&assert$1(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`),u!=null&&assert$1(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`),batchNorm$2(o,a,l,u,c,i)}const batchNorm2d=op({batchNorm2d_});function batchNorm3d_(n,e,t,r,s,i){const o=convertToTensor(n,"x","batchNorm"),a=convertToTensor(e,"mean","batchNorm"),l=convertToTensor(t,"variance","batchNorm");let c;s!=null&&(c=convertToTensor(s,"scale","batchNorm"));let u;return r!=null&&(u=convertToTensor(r,"offset","batchNorm")),assert$1(o.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`),assert$1(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),assert$1(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),c!=null&&assert$1(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`),u!=null&&assert$1(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`),batchNorm$2(o,a,l,u,c,i)}const batchNorm3d=op({batchNorm3d_});function batchNorm4d_(n,e,t,r,s,i){const o=convertToTensor(n,"x","batchNorm"),a=convertToTensor(e,"mean","batchNorm"),l=convertToTensor(t,"variance","batchNorm");let c;s!=null&&(c=convertToTensor(s,"scale","batchNorm"));let u;return r!=null&&(u=convertToTensor(r,"offset","batchNorm")),assert$1(o.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`),assert$1(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),assert$1(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),c!=null&&assert$1(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`),u!=null&&assert$1(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`),batchNorm$2(o,a,l,u,c,i)}const batchNorm4d=op({batchNorm4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount_(n,e,t){const r=convertToTensor(n,"x","bincount"),s=convertToTensor(e,"weights","bincount");assert$1(r.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),assert$1(t>=0,()=>`size must be non-negative, but got ${t}.`),assert$1(s.size===r.size||s.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`);const i={x:r,weights:s},o={size:t};return ENGINE.runKernel(Bincount,i,o)}const bincount$2=op({bincount_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastTo_(n,e){let t=convertToTensor(n,"broadcastTo","x");const r=t.shape;if(assertNonNegativeIntegerDimensions(e),e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){const c=t.shape.slice();for(;c.length<e.length;)c.unshift(1);t=reshape$2(t,c)}const s=t.shape,i=Array.from(e);for(let c=e.length-1;c>=0;c--)if(s[c]===e[c])i[c]=1;else if(t.shape[c]!==1)throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(i.map((c,u)=>c>1?u:-1).filter(c=>c>=0).length===0)return clone(t);const a={x:t},l={reps:i};return ENGINE.runKernel(Tile,a,l)}const broadcastTo=op({broadcastTo_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ceil_(n){const t={x:convertToTensor(n,"x","ceil","float32")};return ENGINE.runKernel(Ceil,t)}const ceil$2=op({ceil_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$3(n,e,t){assertNonNegativeIntegerDimensions(n);const r={shape:n,value:e,dtype:t};return ENGINE.runKernel(Fill,{},r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue_(n,e,t){const r=convertToTensor(n,"x","clipByValue");if(assert$1(e<=t,()=>`Error in clip: min (${e}) must be less than or equal to max (${t}).`),e===t)return fill$3(r.shape,e,r.dtype);const s={x:r},i={clipValueMin:e,clipValueMax:t};return ENGINE.runKernel(ClipByValue,s,i)}const clipByValue$2=op({clipByValue_});function concat1d_(n){return concat$2(n,0)}const concat1d=op({concat1d_});function concat2d_(n,e){return concat$2(n,e)}const concat2d=op({concat2d_});function concat3d_(n,e){return concat$2(n,e)}const concat3d=op({concat3d_});function concat4d_(n,e){return concat$2(n,e)}const concat4d=op({concat4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d_(n,e,t,r,s="NHWC",i=[1,1],o){const a=convertToTensor(n,"x","conv2d","float32"),l=convertToTensor(e,"filter","conv2d","float32");let c=a,u=!1;a.rank===3&&(u=!0,c=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$1(c.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`),assert$1(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),checkPadOnDimRoundingMode("conv2d",r,o);const h=s==="NHWC"?c.shape[3]:c.shape[1];assert$1(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),assert$1(eitherStridesOrDilationsAreOne(t,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`),assert$1(stridesOrDilationsArePositive(i),()=>"Error in conv2D: Dilated rates should be larger than 0."),assert$1(stridesOrDilationsArePositive(t),()=>"Error in conv2D: Strides should be larger than 0.");const d={x:c,filter:l},g={strides:t,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o},x=ENGINE.runKernel(Conv2D$1,d,g);return u?reshape$2(x,[x.shape[1],x.shape[2],x.shape[3]]):x}const conv2d$2=op({conv2d_});function conv1d_(n,e,t,r,s="NWC",i=1,o){const a=convertToTensor(n,"x","conv1d"),l=convertToTensor(e,"filter","conv1d");let c=a,u=!1;a.rank===2&&(u=!0,c=reshape$2(a,[1,a.shape[0],a.shape[1]])),assert$1(c.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`),assert$1(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),checkPadOnDimRoundingMode("conv1d",r,o),assert$1(c.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`),assert$1(eitherStridesOrDilationsAreOne(t,i),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${i}'`),assert$1(stridesOrDilationsArePositive(i),()=>"Error in conv1D: Dilated rates should be larger than 0."),assert$1(stridesOrDilationsArePositive(t),()=>"Error in conv1D: Stride should be larger than 0."),assert$1(s==="NWC",()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=reshape$2(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=reshape$2(c,[c.shape[0],1,c.shape[1],c.shape[2]]),w=conv2d$2(d,h,[1,t],r,"NHWC",[1,i],o);return u?reshape$2(w,[w.shape[2],w.shape[3]]):reshape$2(w,[w.shape[0],w.shape[2],w.shape[3]])}const conv1d=op({conv1d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput_(n,e,t,r,s,i="NHWC",o){assert$1(n.length===e.rank,()=>`Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);let a=n,l=e,c=!1;e.rank===3&&(c=!0,l=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2]]),a=[1,n[0],n[1],n[2]]),assert$1(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),assert$1(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),assert$1(t.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);const u=i==="NHWC"?a[3]:a[1],h=i==="NHWC"?l.shape[3]:l.shape[1];assert$1(u===t.shape[2],()=>`Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${t.shape[2]}.`),assert$1(h===t.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${t.shape[3]}.`),checkPadOnDimRoundingMode("conv2dDerInput",s,o);const d={dy:l,filter:t},g={strides:r,pad:s,dataFormat:i,dimRoundingMode:o,inputShape:a},x=ENGINE.runKernel(Conv2DBackpropInput,d,g);return c?reshape$2(x,[x.shape[1],x.shape[2],x.shape[3]]):x}const conv2DBackpropInput$2=op({conv2DBackpropInput_});function conv2dTranspose_(n,e,t,r,s,i){const o=convertToTensor(n,"x","conv2dTranspose"),a=convertToTensor(e,"filter","conv2dTranspose");return conv2DBackpropInput$2(t,o,a,r,s,"NHWC",i)}const conv2dTranspose=op({conv2dTranspose_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3d_(n,e,t,r,s="NDHWC",i=[1,1,1]){const o=convertToTensor(n,"x","conv3d"),a=convertToTensor(e,"filter","conv3d");let l=o,c=!1;o.rank===4&&(c=!0,l=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),assert$1(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),assert$1(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),assert$1(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),assert$1(eitherStridesOrDilationsAreOne(t,i),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`),assert$1(s==="NDHWC",()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`),assert$1(stridesOrDilationsArePositive(i),()=>"Error in conv3D: Dilated rates should be larger than 0."),assert$1(stridesOrDilationsArePositive(t),()=>"Error in conv3D: Strides should be larger than 0.");const u={x:l,filter:a},h={strides:t,pad:r,dataFormat:s,dilations:i},d=ENGINE.runKernel(Conv3D$1,u,h);return c?reshape$2(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}const conv3d=op({conv3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput_(n,e,t,r,s){assert$1(n.length===e.rank,()=>`Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);let i=n,o=e,a=!1;e.rank===4&&(a=!0,o=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),i=[1,n[0],n[1],n[2],n[3]]);const l=i[4],c=o.shape[4];assert$1(i.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`),assert$1(o.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`),assert$1(t.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`),assert$1(l===t.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[3]}.`),assert$1(c===t.shape[4],()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${t.shape[4]}.`);const u={dy:o,filter:t},h={pad:s,strides:r,inputShape:i},d=ENGINE.runKernel(Conv3DBackpropInputV2,u,h);return a?reshape$2(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}const conv3DBackpropInput$1=op({conv3DBackpropInput_});function conv3dTranspose_(n,e,t,r,s){const i=convertToTensor(n,"x","conv3dTranspose"),o=convertToTensor(e,"filter","conv3dTranspose");return conv3DBackpropInput$1(t,i,o,r,s)}const conv3dTranspose=op({conv3dTranspose_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cos_(n){const t={x:convertToTensor(n,"x","cos","float32")};return ENGINE.runKernel(Cos,t)}const cos$2=op({cos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cosh_(n){const t={x:convertToTensor(n,"x","cosh","float32")};return ENGINE.runKernel(Cosh,t)}const cosh$2=op({cosh_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod_(n,e=0,t=!1,r=!1){const i={x:convertToTensor(n,"x","cumprod")},o={axis:e,exclusive:t,reverse:r};return ENGINE.runKernel(Cumprod,i,o)}const cumprod$2=op({cumprod_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum_(n,e=0,t=!1,r=!1){const i={x:convertToTensor(n,"x","cumsum")},o={axis:e,exclusive:t,reverse:r};return ENGINE.runKernel(Cumsum,i,o)}const cumsum$2=op({cumsum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount_(n,e,t,r=!1){const s=convertToTensor(n,"x","denseBincount"),i=convertToTensor(e,"weights","denseBincount");assert$1(s.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`),assert$1(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),assert$1(t>=0,()=>`size must be non-negative, but got ${t}.`),assert$1(i.size===s.size||i.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${i.shape}.`);const o={x:s,weights:i},a={size:t,binaryOutput:r};return ENGINE.runKernel(DenseBincount,o,a)}const denseBincount$2=op({denseBincount_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace_(n,e,t="NHWC"){const r=convertToTensor(n,"x","depthToSpace","float32"),s=t==="NHWC"?r.shape[1]:r.shape[2],i=t==="NHWC"?r.shape[2]:r.shape[3],o=t==="NHWC"?r.shape[3]:r.shape[1];assert$1(e>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`),assert$1(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${e}  for depthToSpace with input shape
    ${r.shape}`),assert$1(i*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${i} and ${e} for depthToSpace with input shape
        ${r.shape}`),assert$1(o%(e*e)===0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${o} for depthToSpace with input shape ${r.shape}`);const a={x:r},l={blockSize:e,dataFormat:t};return ENGINE.runKernel(DepthToSpace,a,l)}const depthToSpace$2=op({depthToSpace_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2d_(n,e,t,r,s="NHWC",i=[1,1],o){const a=convertToTensor(n,"x","depthwiseConv2d","float32"),l=convertToTensor(e,"filter","depthwiseConv2d","float32");let c=a,u=!1;a.rank===3&&(u=!0,c=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$1(c.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`),assert$1(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h=s==="NHWC"?c.shape[3]:c.shape[1];assert$1(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),checkPadOnDimRoundingMode("depthwiseConv2d",r,o);const d={x:c,filter:l},g={strides:t,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o},x=ENGINE.runKernel(DepthwiseConv2dNative,d,g);return u?reshape$2(x,[x.shape[1],x.shape[2],x.shape[3]]):x}const depthwiseConv2d$1=op({depthwiseConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2d_(n,e,t,r,s=[1,1],i="NHWC"){const o=convertToTensor(n,"x","dilation2d"),a=convertToTensor(e,"filter","dilation2d");assert$1(o.rank===3||o.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`),assert$1(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),assert$1(i==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`);let l=o,c=!1;o.rank===3&&(l=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=!0),assert$1(l.shape[3]===a.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`);const u={x:l,filter:a},h={strides:t,pad:r,dilations:s},d=ENGINE.runKernel(Dilation2D,u,h);return c?reshape$2(d,[d.shape[1],d.shape[2],d.shape[3]]):d}const dilation2d=op({dilation2d_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getBroadcastDims$1(n,e){const t=n.length,r=[];for(let s=0;s<t;s++){const i=t-1-s,o=n[i]||1;(e[e.length-1-s]||1)>1&&o===1&&r.unshift(i)}return r}function getReductionAxes(n,e){const t=[];for(let r=0;r<e.length;r++){const s=n[n.length-r-1],i=e.length-r-1,o=e[i];(s==null||s===1&&o>1)&&t.unshift(i)}return t}function assertAndGetBroadcastShape(n,e){const t=[],r=Math.max(n.length,e.length);for(let s=0;s<r;s++){let i=n[n.length-s-1];i==null&&(i=1);let o=e[e.length-s-1];if(o==null&&(o=1),i===1)t.unshift(o);else if(o===1)t.unshift(i);else if(i!==o){const a=`Operands could not be broadcast together with shapes ${n} and ${e}.`;throw Error(a)}else t.unshift(i)}return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function equal_(n,e){let t=convertToTensor(n,"a","equal","string_or_numeric"),r=convertToTensor(e,"b","equal","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Equal,s)}const equal$2=op({equal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function where_(n,e,t){const r=convertToTensor(e,"a","where"),s=convertToTensor(t,"b","where"),i=convertToTensor(n,"condition","where","bool"),o=assertAndGetBroadcastShape(assertAndGetBroadcastShape(i.shape,r.shape),s.shape),a=broadcastTo(i,o),l=broadcastTo(r,o),c=broadcastTo(s,o),u={condition:a,t:l,e:c};return ENGINE.runKernel(Select,u)}const where=op({where_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike_(n){const t={x:convertToTensor(n,"x","zerosLike")};return ENGINE.runKernel(ZerosLike,t)}const zerosLike$2=op({zerosLike_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function divNoNan_(n,e){let t=convertToTensor(n,"a","div"),r=convertToTensor(e,"b","div");[t,r]=makeTypesMatch(t,r);const s=div$1(t,r),i=zerosLike$2(s),o=equal$2(r,i);return where(o,i,s)}const divNoNan=op({divNoNan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dot_(n,e){const t=convertToTensor(n,"t1","dot"),r=convertToTensor(e,"t2","dot");assert$1((t.rank===1||t.rank===2)&&(r.rank===1||r.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${r.rank}.`);const s=t.rank===1?t.size:t.shape[1],i=r.rank===1?r.size:r.shape[0];if(assert$1(s===i,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${i}.`),t.rank===1&&r.rank===1){const o=reshape$2(t,[1,-1]),a=reshape$2(r,[-1,1]),l=matMul$1(o,a);return reshape$2(l,[])}else if(t.rank===1&&r.rank===2){const o=reshape$2(t,[1,-1]),a=reshape$2(r,[r.shape[0],r.shape[1]]),l=matMul$1(o,a);return reshape$2(l,[l.size])}else if(t.rank===2&&r.rank===1){const o=reshape$2(r,[-1,1]),a=matMul$1(t,o);return reshape$2(a,[a.size])}else{const o=reshape$2(r,[r.shape[0],r.shape[1]]);return matMul$1(t,o)}}const dot$1=op({dot_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function elu_(n){const t={x:convertToTensor(n,"x","elu","float32")};return ENGINE.runKernel(Elu$1,t)}const elu$3=op({elu_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function erf_(n){let e=convertToTensor(n,"x","erf");assert$1(e.dtype==="int32"||e.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),e.dtype==="int32"&&(e=cast$3(e,"float32"));const t={x:e};return ENGINE.runKernel(Erf,t)}const erf$2=op({erf_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function axesAreInnerMostDims(n,e){for(let t=0;t<n.length;++t)if(n[n.length-t-1]!==e-1-t)return!1;return!0}function combineLocations(n,e,t){const r=n.length+e.length,s=[];let i=0,o=0;for(let a=0;a<r;a++)t.indexOf(a)===-1?s.push(n[i++]):s.push(e[o++]);return s}function computeOutAndReduceShapes(n,e){const t=[],r=n.length;for(let i=0;i<r;i++)e.indexOf(i)===-1&&t.push(n[i]);const s=e.map(i=>n[i]);return[t,s]}function expandShapeToKeepDim(n,e){const t=e.map(r=>1);return combineLocations(n,t,e)}function assertAxesAreInnerMostDims(n,e,t){assert$1(axesAreInnerMostDims(e,t),()=>`${n} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function getAxesPermutation(n,e){if(axesAreInnerMostDims(n,e))return null;const t=[];for(let r=0;r<e;++r)n.indexOf(r)===-1&&t.push(r);return n.forEach(r=>t.push(r)),t}function getUndoAxesPermutation(n){return n.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function getInnerMostAxes(n,e){const t=[];for(let r=e-n;r<e;++r)t.push(r);return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max_(n,e=null,t=!1){const s={x:convertToTensor(n,"x","max")},i={reductionIndices:e,keepDims:t};return ENGINE.runKernel(Max,s,i)}const max$6=op({max_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min_(n,e=null,t=!1){const s={x:convertToTensor(n,"x","min")},i={axis:e,keepDims:t};return ENGINE.runKernel(Min,s,i)}const min$6=op({min_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pow_(n,e){let t=convertToTensor(n,"base","pow"),r=convertToTensor(e,"exp","pow");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Pow,s)}const pow$2=op({pow_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scalar(n,e){if((isTypedArray(n)&&e!=="string"||Array.isArray(n))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&isTypedArray(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return makeTensor(n,[],[],e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sqrt_(n){const t={x:convertToTensor(n,"x","sqrt","float32")};return ENGINE.runKernel(Sqrt,t)}const sqrt$2=op({sqrt_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function square_(n){const e=convertToTensor(n,"x","square"),t={};return ENGINE.runKernel("Square",{x:e},t)}const square$2=op({square_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum_(n,e=null,t=!1){let r=convertToTensor(n,"x","sum");r.dtype==="bool"&&(r=cast$3(r,"int32"));const s={x:r},i={axis:e,keepDims:t};return ENGINE.runKernel(Sum,s,i)}const sum$3=op({sum_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function norm_(n,e="euclidean",t=null,r=!1){n=convertToTensor(n,"x","norm");const s=normImpl(n,e,t);let i=s.shape;if(r){const o=parseAxisParam(t,n.shape);i=expandShapeToKeepDim(s.shape,o)}return reshape$2(s,i)}function normImpl(n,e,t=null){if(n.rank===0)return abs$3(n);if(n.rank!==1&&t===null)return normImpl(reshape$2(n,[-1]),e,t);if(n.rank===1||typeof t=="number"||Array.isArray(t)&&t.length===1){if(e===1)return sum$3(abs$3(n),t);if(e===1/0)return max$6(abs$3(n),t);if(e===-1/0)return min$6(abs$3(n),t);if(e==="euclidean"||e===2)return sqrt$2(sum$3(pow$2(abs$3(n),scalar(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(t)&&t.length===2){if(e===1)return max$6(sum$3(abs$3(n),t[0]),t[1]-1);if(e===1/0)return max$6(sum$3(abs$3(n),t[1]),t[0]);if(e===-1/0)return min$6(sum$3(abs$3(n),t[1]),t[0]);if(e==="fro"||e==="euclidean")return sqrt$2(sum$3(square$2(n),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}const norm=op({norm_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function euclideanNorm_(n,e=null,t=!1){return norm(n,"euclidean",e,t)}const euclideanNorm=op({euclideanNorm_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function exp_(n){const t={x:convertToTensor(n,"x","exp")};return ENGINE.runKernel(Exp,t)}const exp$2=op({exp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims_(n,e=0){const t=convertToTensor(n,"x","expandDims","string_or_numeric");assert$1(e<=t.rank,()=>"Axis must be <= rank of the tensor");const r={input:t},s={dim:e};return ENGINE.runKernel(ExpandDims,r,s)}const expandDims$3=op({expandDims_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expm1_(n){const t={x:convertToTensor(n,"x","expm1")};return ENGINE.runKernel(Expm1,t)}const expm1$2=op({expm1_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile_(n,e){const t=convertToTensor(n,"x","tile","string_or_numeric");assert$1(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);const r={x:t},s={reps:e};return ENGINE.runKernel(Tile,r,s)}const tile$3=op({tile_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eye_(n,e,t,r="float32"){e==null&&(e=n);const s=buffer([n,e],r),i=n<=e?n:e;for(let a=0;a<i;++a)s.set(1,a,a);const o=reshape$2(s.toTensor(),[n,e]);if(t==null)return o;if(t.length===1)return tile$3(expandDims$3(o,0),[t[0],1,1]);if(t.length===2)return tile$3(expandDims$3(expandDims$3(o,0),0),[t[0],t[1],1,1]);if(t.length===3)return tile$3(expandDims$3(expandDims$3(expandDims$3(o,0),0),0),[t[0],t[1],t[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`)}const eye=op({eye_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floor_(n){const t={x:convertToTensor(n,"x","floor","float32")};return ENGINE.runKernel(Floor,t)}const floor$2=op({floor_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gather_(n,e,t=0,r=0){const s=convertToTensor(n,"x","gather"),i=convertToTensor(e,"indices","gather","int32"),o={x:s,indices:i},a={axis:t,batchDims:r};return ENGINE.runKernel(GatherV2,o,a)}const gather$1=op({gather_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greater_(n,e){let t=convertToTensor(n,"a","greater","string_or_numeric"),r=convertToTensor(e,"b","greater","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Greater,s)}const greater$2=op({greater_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greaterEqual_(n,e){let t=convertToTensor(n,"a","greaterEqual","string_or_numeric"),r=convertToTensor(e,"b","greaterEqual","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(GreaterEqual,s)}const greaterEqual$2=op({greaterEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag_(n){const t={input:convertToTensor(n,"input","imag")};return ENGINE.runKernel(Imag,t)}const imag$2=op({imag_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isFinite_(n){const t={x:convertToTensor(n,"x","isFinite")};return ENGINE.runKernel(IsFinite,t)}const isFinite$3=op({isFinite_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isInf_(n){const t={x:convertToTensor(n,"x","isInf")};return ENGINE.runKernel(IsInf,t)}const isInf$2=op({isInf_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isNaN_(n){const t={x:convertToTensor(n,"x","isNaN")};return ENGINE.runKernel(IsNan,t)}const isNaN$3=op({isNaN_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu_(n,e=.2){const r={x:convertToTensor(n,"x","leakyRelu")},s={alpha:e};return ENGINE.runKernel(LeakyRelu,r,s)}const leakyRelu$2=op({leakyRelu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function less_(n,e){let t=convertToTensor(n,"a","less","string_or_numeric"),r=convertToTensor(e,"b","less","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Less,s)}const less$2=op({less_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lessEqual_(n,e){let t=convertToTensor(n,"a","lessEqual","string_or_numeric"),r=convertToTensor(e,"b","lessEqual","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(LessEqual,s)}const lessEqual$2=op({lessEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalization_(n,e=5,t=1,r=1,s=.5){const i=convertToTensor(n,"x","localResponseNormalization");assert$1(i.rank===4||i.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${i.rank}.`),assert$1(isInt(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let o=i,a=!1;i.rank===3&&(a=!0,o=reshape$2(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const l={x:o},c={depthRadius:e,bias:t,alpha:r,beta:s},u=ENGINE.runKernel(LRN,l,c);return a?reshape$2(u,[u.shape[1],u.shape[2],u.shape[3]]):u}const localResponseNormalization=op({localResponseNormalization_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log_(n){const t={x:convertToTensor(n,"x","log","float32")};return ENGINE.runKernel(Log,t)}const log$2=op({log_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log1p_(n){const t={x:convertToTensor(n,"x","log1p")};return ENGINE.runKernel(Log1p,t)}const log1p$2=op({log1p_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variableGrads(n,e){assert$1(isFunction(n),()=>"The f passed in variableGrads(f) must be a function"),assert$1(e==null||Array.isArray(e)&&e.every(c=>c instanceof Variable),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const t=e!=null;if(!t){e=[];for(const c in ENGINE.registeredVariables)e.push(ENGINE.registeredVariables[c])}const r=t?e.filter(c=>!c.trainable):null,s=e.length;e=e.filter(c=>c.trainable),assert$1(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const i=!0,{value:o,grads:a}=ENGINE.gradients(n,e,null,i);assert$1(a.some(c=>c!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),assert$1(o.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);const l={};return e.forEach((c,u)=>{a[u]!=null&&(l[c.name]=a[u])}),r!=null&&r.forEach(c=>l[c.name]=null),{value:o,grads:l}}function customGrad(n){return ENGINE.customGrad(n)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function neg_(n){const t={x:convertToTensor(n,"x","neg")};return ENGINE.runKernel(Neg,t)}const neg$2=op({neg_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softplus_(n){const t={x:convertToTensor(n,"x","softplus")};return ENGINE.runKernel(Softplus$1,t)}const softplus$2=op({softplus_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSigmoid_(n){const e=convertToTensor(n,"x","logSigmoid");return customGrad(r=>({value:neg$2(softplus$2(neg$2(r))),gradFunc:o=>mul(o,sigmoid$2(neg$2(r)))}))(e)}const logSigmoid=op({logSigmoid_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sub_(n,e){let t=convertToTensor(n,"a","sub"),r=convertToTensor(e,"b","sub");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Sub,s)}const sub$2=op({sub_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSoftmax_(n,e=-1){const t=convertToTensor(n,"logits","logSoftmax");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);return customGrad((s,i)=>{const a=max$6(s,e,!0),l=sub$2(s,a),c=sub$2(cast$3(l,"float32"),log$2(sum$3(exp$2(l),e,!0)));return i([c]),{value:c,gradFunc:(h,d)=>{const[g]=d,x=!0,y=exp$2(g);return sub$2(h,mul(sum$3(h,e,x),y))}}})(t)}const logSoftmax=op({logSoftmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSumExp_(n,e=null,t=!1){const r=convertToTensor(n,"x","logSumExp"),s=parseAxisParam(e,r.shape),i=max$6(r,s,!0),o=sub$2(r,i),a=exp$2(o),l=sum$3(a,s),c=log$2(l),u=add$2(reshape$2(i,c.shape),c);if(t){const h=expandShapeToKeepDim(u.shape,s);return reshape$2(u,h)}return u}const logSumExp=op({logSumExp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalAnd_(n,e){const t=convertToTensor(n,"a","logicalAnd","bool"),r=convertToTensor(e,"b","logicalAnd","bool");assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(LogicalAnd,s)}const logicalAnd$2=op({logicalAnd_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalNot_(n){const t={x:convertToTensor(n,"x","logicalNot","bool")};return ENGINE.runKernel(LogicalNot,t)}const logicalNot$2=op({logicalNot_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalOr_(n,e){const t=convertToTensor(n,"a","logicalOr","bool"),r=convertToTensor(e,"b","logicalOr","bool");assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(LogicalOr,s)}const logicalOr$2=op({logicalOr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalXor_(n,e){const t=convertToTensor(n,"a","logicalXor","bool"),r=convertToTensor(e,"b","logicalXor","bool");return assertAndGetBroadcastShape(t.shape,r.shape),logicalAnd$2(logicalOr$2(n,e),logicalNot$2(logicalAnd$2(n,e)))}const logicalXor=op({logicalXor_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool_(n,e,t,r,s){const i=convertToTensor(n,"x","maxPool"),o=1;let a=i,l=!1;i.rank===3&&(l=!0,a=reshape$2(i,[1,i.shape[0],i.shape[1],i.shape[2]])),assert$1(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),assert$1(eitherStridesOrDilationsAreOne(t,o),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`),checkPadOnDimRoundingMode("maxPool",r,s);const c={x:a},u={filterSize:e,strides:t,pad:r,dimRoundingMode:s},h=ENGINE.runKernel(MaxPool,c,u);return l?reshape$2(h,[h.shape[1],h.shape[2],h.shape[3]]):h}const maxPool$2=op({maxPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d_(n,e=[1,1,1],t,r,s,i="NDHWC"){const o=convertToTensor(n,"x","maxPool3d");let a=o,l=!1;o.rank===4&&(l=!0,a=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),assert$1(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),assert$1(i==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),checkPadOnDimRoundingMode("maxPool3d",r,s);const c={x:a},u={filterSize:e,strides:t,pad:r,dimRoundingMode:s,dataFormat:i},h=ENGINE.runKernel(MaxPool3D,c,u);return l?reshape$2(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}const maxPool3d$1=op({maxPool3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maximum_(n,e){let t=convertToTensor(n,"a","maximum"),r=convertToTensor(e,"b","maximum");[t,r]=makeTypesMatch(t,r),t.dtype==="bool"&&(t=cast$3(t,"int32"),r=cast$3(r,"int32")),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Maximum$1,s)}const maximum$2=op({maximum_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean_(n,e=null,t=!1){const s={x:convertToTensor(n,"x","mean")},i={axis:e,keepDims:t};return ENGINE.runKernel(Mean,s,i)}const mean$4=op({mean_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros$1(n,e="float32"){if(assertNonNegativeIntegerDimensions(n),e==="complex64"){const r=zeros$1(n,"float32"),s=zeros$1(n,"float32");return complex$2(r,s)}const t=makeZerosTypedArray(sizeFromShape(n),e);return ENGINE.makeTensor(t,n,e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ones(n,e="float32"){if(assertNonNegativeIntegerDimensions(n),e==="complex64"){const r=ones(n,"float32"),s=zeros$1(n,"float32");return complex$2(r,s)}const t=makeOnesTypedArray(sizeFromShape(n),e);return ENGINE.makeTensor(t,n,e)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function minimum_(n,e){let t=convertToTensor(n,"a","minimum"),r=convertToTensor(e,"b","minimum");[t,r]=makeTypesMatch(t,r),t.dtype==="bool"&&(t=cast$3(t,"int32"),r=cast$3(r,"int32")),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(Minimum$1,s)}const minimum$3=op({minimum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad_(n,e,t){assert$1(t==="reflect"||t==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);const r=convertToTensor(n,"x","mirrorPad");if(r.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");assert$1(e.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`);const s=t==="reflect"?1:0;for(let a=0;a<r.rank;a++)assert$1(e[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),assert$1(e[a][0]>=0&&e[a][0]<=r.shape[a]-s&&e[a][1]>=0&&e[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal to ${r.shape[a]-s} or less than 0 for input of shape ${r.shape}`);const i={paddings:e,mode:t},o={x:r};return ENGINE.runKernel(MirrorPad,o,i)}const mirrorPad$1=op({mirrorPad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mod_(n,e){let t=convertToTensor(n,"a","mod"),r=convertToTensor(e,"b","mod");[t,r]=makeTypesMatch(t,r);const s={a:t,b:r};return ENGINE.runKernel(Mod,s)}const mod$2=op({mod_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function moments_(n,e=null,t=!1){n=convertToTensor(n,"x","moments");const r=parseAxisParam(e,n.shape),s=mean$4(n,r,t);let i=s.shape;t||(i=expandShapeToKeepDim(s.shape,r));const o=square$2(sub$2(cast$3(n,"float32"),reshape$2(s,i))),a=mean$4(o,r,t);return{mean:s,variance:a}}const moments$1=op({moments_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function notEqual_(n,e){let t=convertToTensor(n,"a","notEqual","string_or_numeric"),r=convertToTensor(e,"b","notEqual","string_or_numeric");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r};return ENGINE.runKernel(NotEqual,s)}const notEqual$2=op({notEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot_(n,e,t=1,r=0,s="int32"){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const o={indices:convertToTensor(n,"indices","oneHot","int32")},a={dtype:s,depth:e,onValue:t,offValue:r};return ENGINE.runKernel(OneHot,o,a)}const oneHot$2=op({oneHot_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike_(n){const t={x:convertToTensor(n,"x","onesLike")};return ENGINE.runKernel(OnesLike,t)}const onesLike$2=op({onesLike_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pad_(n,e,t=0){const r=convertToTensor(n,"x","pad");if(r.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:t},i={x:r};return ENGINE.runKernel(PadV2,i,s)}const pad$1=op({pad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND_(n,e,t){const r=convertToTensor(n,"x","spaceToBatchND");assert$1(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),assert$1(t.length===e.length,()=>`paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`),assert$1(r.shape.reduce((o,a,l)=>l>0&&l<=e.length?o&&(a+t[l-1][0]+t[l-1][1])%e[l-1]===0:o,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},i={blockShape:e,paddings:t};return ENGINE.runKernel(SpaceToBatchND,s,i)}const spaceToBatchND$2=op({spaceToBatchND_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool_(n,e,t,r,s,i,o){s==null&&(s=[1,1]),i==null&&(i=1),r===0&&(r="valid");const a=convertToTensor(n,"x","maxPool");let l=a,c=!1;a.rank===3&&(c=!0,l=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2]])),assert$1(eitherStridesOrDilationsAreOne(i,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${s}'`);const u=computePool2DInfo(l.shape,e,i,s,r),h=[u.dilationHeight,u.dilationWidth];let d;r==="same"?d=withSpaceToBatchBasePaddings([u.filterHeight,u.filterWidth],h):d=[[0,0],[0,0]];const g=h[0]===1&&h[1]===1,[x,y]=requiredSpaceToBatchPaddings([u.inHeight,u.inWidth],h,d),w=g?r:"valid",$=g?l:spaceToBatchND$2(l,h,x),_=(t==="avg"?()=>avgPool$2($,e,i,w,o):()=>maxPool$2($,e,i,w,o))(),T=g?_:batchToSpaceND$2(_,h,y);return c?reshape$2(T,[T.shape[1],T.shape[2],T.shape[3]]):T}function requiredSpaceToBatchPaddings(n,e,t){const r=t.map(u=>u[0]),s=t.map(u=>u[1]),i=n.concat(r,s),o=e.map((u,h)=>(u-i[h]%u)%u),a=s.map((u,h)=>u+o[h]),l=e.map((u,h)=>[r[h],a[h]]),c=e.map((u,h)=>[0,o[h]]);return[l,c]}function withSpaceToBatchBasePaddings(n,e){const r=n.map((o,a)=>o+(o-1)*(e[a]-1)).map(o=>o-1),s=r.map(o=>Math.floor(o/2)),i=r.map((o,a)=>o-s[a]);return r.map((o,a)=>[s[a],i[a]])}const pool$1=op({pool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prelu_(n,e){const t=convertToTensor(n,"x","prelu"),r=convertToTensor(e,"alpha","prelu"),s={x:t,alpha:r};return ENGINE.runKernel(Prelu,s)}const prelu$2=op({prelu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod_(n,e=null,t=!1){let r=convertToTensor(n,"x","prod");r.dtype==="bool"&&(r=cast$3(r,"int32"));const s={x:r},i={axis:e,keepDims:t};return ENGINE.runKernel(Prod,s,i)}const prod$2=op({prod_});var alea$1={exports:{}},alea=alea$1.exports,hasRequiredAlea;function requireAlea(){return hasRequiredAlea||(hasRequiredAlea=1,function(n){(function(e,t,r){function s(l){var c=this,u=a();c.next=function(){var h=2091639*c.s0+c.c*23283064365386963e-26;return c.s0=c.s1,c.s1=c.s2,c.s2=h-(c.c=h|0)},c.c=1,c.s0=u(" "),c.s1=u(" "),c.s2=u(" "),c.s0-=u(l),c.s0<0&&(c.s0+=1),c.s1-=u(l),c.s1<0&&(c.s1+=1),c.s2-=u(l),c.s2<0&&(c.s2+=1),u=null}function i(l,c){return c.c=l.c,c.s0=l.s0,c.s1=l.s1,c.s2=l.s2,c}function o(l,c){var u=new s(l),h=c&&c.state,d=u.next;return d.int32=function(){return u.next()*4294967296|0},d.double=function(){return d()+(d()*2097152|0)*11102230246251565e-32},d.quick=d,h&&(typeof h=="object"&&i(h,u),d.state=function(){return i(u,{})}),d}function a(){var l=4022871197,c=function(u){u=String(u);for(var h=0;h<u.length;h++){l+=u.charCodeAt(h);var d=.02519603282416938*l;l=d>>>0,d-=l,d*=l,l=d>>>0,d-=l,l+=d*4294967296}return(l>>>0)*23283064365386963e-26};return c}t.exports?t.exports=o:this.alea=o})(alea,n)}(alea$1)),alea$1.exports}var xor128$1={exports:{}},xor128=xor128$1.exports,hasRequiredXor128;function requireXor128(){return hasRequiredXor128||(hasRequiredXor128=1,function(n){(function(e,t,r){function s(a){var l=this,c="";l.x=0,l.y=0,l.z=0,l.w=0,l.next=function(){var h=l.x^l.x<<11;return l.x=l.y,l.y=l.z,l.z=l.w,l.w^=l.w>>>19^h^h>>>8},a===(a|0)?l.x=a:c+=a;for(var u=0;u<c.length+64;u++)l.x^=c.charCodeAt(u)|0,l.next()}function i(a,l){return l.x=a.x,l.y=a.y,l.z=a.z,l.w=a.w,l}function o(a,l){var c=new s(a),u=l&&l.state,h=function(){return(c.next()>>>0)/4294967296};return h.double=function(){do var d=c.next()>>>11,g=(c.next()>>>0)/4294967296,x=(d+g)/(1<<21);while(x===0);return x},h.int32=c.next,h.quick=h,u&&(typeof u=="object"&&i(u,c),h.state=function(){return i(c,{})}),h}t.exports?t.exports=o:this.xor128=o})(xor128,n)}(xor128$1)),xor128$1.exports}var xorwow$1={exports:{}},xorwow=xorwow$1.exports,hasRequiredXorwow;function requireXorwow(){return hasRequiredXorwow||(hasRequiredXorwow=1,function(n){(function(e,t,r){function s(a){var l=this,c="";l.next=function(){var h=l.x^l.x>>>2;return l.x=l.y,l.y=l.z,l.z=l.w,l.w=l.v,(l.d=l.d+362437|0)+(l.v=l.v^l.v<<4^(h^h<<1))|0},l.x=0,l.y=0,l.z=0,l.w=0,l.v=0,a===(a|0)?l.x=a:c+=a;for(var u=0;u<c.length+64;u++)l.x^=c.charCodeAt(u)|0,u==c.length&&(l.d=l.x<<10^l.x>>>4),l.next()}function i(a,l){return l.x=a.x,l.y=a.y,l.z=a.z,l.w=a.w,l.v=a.v,l.d=a.d,l}function o(a,l){var c=new s(a),u=l&&l.state,h=function(){return(c.next()>>>0)/4294967296};return h.double=function(){do var d=c.next()>>>11,g=(c.next()>>>0)/4294967296,x=(d+g)/(1<<21);while(x===0);return x},h.int32=c.next,h.quick=h,u&&(typeof u=="object"&&i(u,c),h.state=function(){return i(c,{})}),h}t.exports?t.exports=o:this.xorwow=o})(xorwow,n)}(xorwow$1)),xorwow$1.exports}var xorshift7$1={exports:{}},xorshift7=xorshift7$1.exports,hasRequiredXorshift7;function requireXorshift7(){return hasRequiredXorshift7||(hasRequiredXorshift7=1,function(n){(function(e,t,r){function s(a){var l=this;l.next=function(){var u=l.x,h=l.i,d,g;return d=u[h],d^=d>>>7,g=d^d<<24,d=u[h+1&7],g^=d^d>>>10,d=u[h+3&7],g^=d^d>>>3,d=u[h+4&7],g^=d^d<<7,d=u[h+7&7],d=d^d<<13,g^=d^d<<9,u[h]=g,l.i=h+1&7,g};function c(u,h){var d,g=[];if(h===(h|0))g[0]=h;else for(h=""+h,d=0;d<h.length;++d)g[d&7]=g[d&7]<<15^h.charCodeAt(d)+g[d+1&7]<<13;for(;g.length<8;)g.push(0);for(d=0;d<8&&g[d]===0;++d);for(d==8?g[7]=-1:g[d],u.x=g,u.i=0,d=256;d>0;--d)u.next()}c(l,a)}function i(a,l){return l.x=a.x.slice(),l.i=a.i,l}function o(a,l){a==null&&(a=+new Date);var c=new s(a),u=l&&l.state,h=function(){return(c.next()>>>0)/4294967296};return h.double=function(){do var d=c.next()>>>11,g=(c.next()>>>0)/4294967296,x=(d+g)/(1<<21);while(x===0);return x},h.int32=c.next,h.quick=h,u&&(u.x&&i(u,c),h.state=function(){return i(c,{})}),h}t.exports?t.exports=o:this.xorshift7=o})(xorshift7,n)}(xorshift7$1)),xorshift7$1.exports}var xor4096$1={exports:{}},xor4096=xor4096$1.exports,hasRequiredXor4096;function requireXor4096(){return hasRequiredXor4096||(hasRequiredXor4096=1,function(n){(function(e,t,r){function s(a){var l=this;l.next=function(){var u=l.w,h=l.X,d=l.i,g,x;return l.w=u=u+1640531527|0,x=h[d+34&127],g=h[d=d+1&127],x^=x<<13,g^=g<<17,x^=x>>>15,g^=g>>>12,x=h[d]=x^g,l.i=d,x+(u^u>>>16)|0};function c(u,h){var d,g,x,y,w,$=[],S=128;for(h===(h|0)?(g=h,h=null):(h=h+"\0",g=0,S=Math.max(S,h.length)),x=0,y=-32;y<S;++y)h&&(g^=h.charCodeAt((y+32)%h.length)),y===0&&(w=g),g^=g<<10,g^=g>>>15,g^=g<<4,g^=g>>>13,y>=0&&(w=w+1640531527|0,d=$[y&127]^=g+w,x=d==0?x+1:0);for(x>=128&&($[(h&&h.length||0)&127]=-1),x=127,y=4*128;y>0;--y)g=$[x+34&127],d=$[x=x+1&127],g^=g<<13,d^=d<<17,g^=g>>>15,d^=d>>>12,$[x]=g^d;u.w=w,u.X=$,u.i=x}c(l,a)}function i(a,l){return l.i=a.i,l.w=a.w,l.X=a.X.slice(),l}function o(a,l){a==null&&(a=+new Date);var c=new s(a),u=l&&l.state,h=function(){return(c.next()>>>0)/4294967296};return h.double=function(){do var d=c.next()>>>11,g=(c.next()>>>0)/4294967296,x=(d+g)/(1<<21);while(x===0);return x},h.int32=c.next,h.quick=h,u&&(u.X&&i(u,c),h.state=function(){return i(c,{})}),h}t.exports?t.exports=o:this.xor4096=o})(xor4096,n)}(xor4096$1)),xor4096$1.exports}var tychei$1={exports:{}},tychei=tychei$1.exports,hasRequiredTychei;function requireTychei(){return hasRequiredTychei||(hasRequiredTychei=1,function(n){(function(e,t,r){function s(a){var l=this,c="";l.next=function(){var h=l.b,d=l.c,g=l.d,x=l.a;return h=h<<25^h>>>7^d,d=d-g|0,g=g<<24^g>>>8^x,x=x-h|0,l.b=h=h<<20^h>>>12^d,l.c=d=d-g|0,l.d=g<<16^d>>>16^x,l.a=x-h|0},l.a=0,l.b=0,l.c=-1640531527,l.d=1367130551,a===Math.floor(a)?(l.a=a/4294967296|0,l.b=a|0):c+=a;for(var u=0;u<c.length+20;u++)l.b^=c.charCodeAt(u)|0,l.next()}function i(a,l){return l.a=a.a,l.b=a.b,l.c=a.c,l.d=a.d,l}function o(a,l){var c=new s(a),u=l&&l.state,h=function(){return(c.next()>>>0)/4294967296};return h.double=function(){do var d=c.next()>>>11,g=(c.next()>>>0)/4294967296,x=(d+g)/(1<<21);while(x===0);return x},h.int32=c.next,h.quick=h,u&&(typeof u=="object"&&i(u,c),h.state=function(){return i(c,{})}),h}t.exports?t.exports=o:this.tychei=o})(tychei,n)}(tychei$1)),tychei$1.exports}var seedrandom$2={exports:{}},__viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze({__proto__:null,default:__viteBrowserExternal}),require$$0$4=getAugmentedNamespace(__viteBrowserExternal$1),seedrandom$1=seedrandom$2.exports,hasRequiredSeedrandom$1;function requireSeedrandom$1(){return hasRequiredSeedrandom$1||(hasRequiredSeedrandom$1=1,function(n){(function(e,t,r){var s=256,i=6,o=52,a="random",l=r.pow(s,i),c=r.pow(2,o),u=c*2,h=s-1,d;function g(T,k,P){var L=[];k=k==!0?{entropy:!0}:k||{};var D=$(w(k.entropy?[T,_(t)]:T??S(),3),L),M=new x(L),O=function(){for(var R=M.g(i),z=l,X=0;R<c;)R=(R+X)*s,z*=s,X=M.g(1);for(;R>=u;)R/=2,z/=2,X>>>=1;return(R+X)/z};return O.int32=function(){return M.g(4)|0},O.quick=function(){return M.g(4)/4294967296},O.double=O,$(_(M.S),t),(k.pass||P||function(R,z,X,K){return K&&(K.S&&y(K,M),R.state=function(){return y(M,{})}),X?(r[a]=R,z):R})(O,D,"global"in k?k.global:this==r,k.state)}function x(T){var k,P=T.length,L=this,D=0,M=L.i=L.j=0,O=L.S=[];for(P||(T=[P++]);D<s;)O[D]=D++;for(D=0;D<s;D++)O[D]=O[M=h&M+T[D%P]+(k=O[D])],O[M]=k;(L.g=function(R){for(var z,X=0,K=L.i,Y=L.j,te=L.S;R--;)z=te[K=h&K+1],X=X*s+te[h&(te[K]=te[Y=h&Y+z])+(te[Y]=z)];return L.i=K,L.j=Y,X})(s)}function y(T,k){return k.i=T.i,k.j=T.j,k.S=T.S.slice(),k}function w(T,k){var P=[],L=typeof T,D;if(k&&L=="object")for(D in T)try{P.push(w(T[D],k-1))}catch{}return P.length?P:L=="string"?T:T+"\0"}function $(T,k){for(var P=T+"",L,D=0;D<P.length;)k[h&D]=h&(L^=k[h&D]*19)+P.charCodeAt(D++);return _(k)}function S(){try{var T;return d&&(T=d.randomBytes)?T=T(s):(T=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(T)),_(T)}catch{var k=e.navigator,P=k&&k.plugins;return[+new Date,e,P,e.screen,_(t)]}}function _(T){return String.fromCharCode.apply(0,T)}if($(r.random(),t),n.exports){n.exports=g;try{d=require$$0$4}catch{}}else r["seed"+a]=g})(typeof self<"u"?self:seedrandom$1,[],Math)}(seedrandom$2)),seedrandom$2.exports}var seedrandom,hasRequiredSeedrandom;function requireSeedrandom(){if(hasRequiredSeedrandom)return seedrandom;hasRequiredSeedrandom=1;var n=requireAlea(),e=requireXor128(),t=requireXorwow(),r=requireXorshift7(),s=requireXor4096(),i=requireTychei(),o=requireSeedrandom$1();return o.alea=n,o.xor128=e,o.xorwow=t,o.xorshift7=r,o.xor4096=s,o.tychei=i,seedrandom=o,seedrandom}var seedrandomExports=requireSeedrandom();/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MPRandGauss{constructor(e,t,r,s,i){this.mean=e,this.stdDev=t,this.dtype=r,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);const o=i||Math.random();this.random=seedrandomExports.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const s=this.nextVal;return this.nextVal=NaN,s}let e,t,r=!1;for(;!r;){let s,i,o;do s=2*this.random()-1,i=2*this.random()-1,o=s*s+i*i;while(o>=1||o===0);const a=Math.sqrt(-2*Math.log(o)/o);e=this.mean+this.stdDev*s*a,t=this.mean+this.stdDev*i*a,(!this.truncated||this.isValidTruncated(e))&&(r=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return this.dtype==null||this.dtype==="float32"?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class UniformRandom{constructor(e=0,t=1,r,s){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=e,this.range=t-e,this.dtype=r,s==null&&(s=Math.random()),typeof s=="number"&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=seedrandomExports.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomNormal_(n,e=0,t=1,r,s){if(assertNonNegativeIntegerDimensions(n),r!=null&&r==="bool")throw new Error(`Unsupported data type ${r}`);const i=new MPRandGauss(e,t,r,!1,s),o=buffer(n,r);for(let a=0;a<o.values.length;a++)o.values[a]=i.nextValue();return o.toTensor()}const randomNormal$1=op({randomNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomUniform_(n,e=0,t=1,r="float32",s){assertNonNegativeIntegerDimensions(n);const i=buffer(n,r),o=new UniformRandom(e,t,null,s);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}const randomUniform=op({randomUniform_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$3(n,e,t=1,r="float32"){if(t===0)throw new Error("Cannot have a step of zero");const s={start:n,stop:e,step:t,dtype:r};return ENGINE.runKernel(Range,{},s)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real_(n){const t={input:convertToTensor(n,"input","real")};return ENGINE.runKernel(Real,t)}const real$2=op({real_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reciprocal_(n){const t={x:convertToTensor(n,"x","reciprocal")};return ENGINE.runKernel(Reciprocal,t)}const reciprocal$2=op({reciprocal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu_(n){const t={x:convertToTensor(n,"x","relu")};return ENGINE.runKernel(Relu$1,t)}const relu$2=op({relu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu6_(n){const t={x:convertToTensor(n,"x","relu6")};return ENGINE.runKernel(Relu6$1,t)}const relu6$2=op({relu6_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse_(n,e){const r={x:convertToTensor(n,"x","reverse")},s={dims:e};return ENGINE.runKernel(Reverse,r,s)}const reverse$2=op({reverse_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function round_(n){const t={x:convertToTensor(n,"x","round")};return ENGINE.runKernel(Round,t)}const round$3=op({round_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rsqrt_(n){const t={x:convertToTensor(n,"x","rsqrt","float32")};return ENGINE.runKernel(Rsqrt,t)}const rsqrt$2=op({rsqrt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function selu_(n){const t={x:convertToTensor(n,"x","selu")};return ENGINE.runKernel(Selu$1,t)}const selu$2=op({selu_});function separableConv2d_(n,e,t,r,s,i=[1,1],o="NHWC"){const a=convertToTensor(n,"x","separableConv2d"),l=convertToTensor(e,"depthwiseFilter","separableConv2d"),c=convertToTensor(t,"pointwiseFilter","separableConv2d");let u=a,h=!1;if(a.rank===3&&(h=!0,u=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2]])),o==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");assert$1(u.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`),assert$1(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),assert$1(c.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),assert$1(c.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`),assert$1(c.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);const d=l.shape[2],g=l.shape[3];assert$1(c.shape[2]===d*g,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*g}, but got ${c.shape[2]}.`);const x=depthwiseConv2d$1(u,l,r,s,o,i),w=conv2d$2(x,c,1,"valid",o);return h?reshape$2(w,[w.shape[1],w.shape[2],w.shape[3]]):w}const separableConv2d=op({separableConv2d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sign_(n){const t={x:convertToTensor(n,"x","sign")};return ENGINE.runKernel(Sign,t)}const sign$2=op({sign_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sin_(n){const t={x:convertToTensor(n,"x","sin","float32")};return ENGINE.runKernel(Sin,t)}const sin$2=op({sin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sinh_(n){const t={x:convertToTensor(n,"x","sinh")};return ENGINE.runKernel(Sinh,t)}const sinh$2=op({sinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice1d_(n,e,t){const r=convertToTensor(n,"x","slice1d");return assert$1(r.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),slice$2(r,[e],[t])}const slice1d=op({slice1d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice2d_(n,e,t){const r=convertToTensor(n,"x","slice2d");return assert$1(r.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),slice$2(r,e,t)}const slice2d=op({slice2d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice3d_(n,e,t){const r=convertToTensor(n,"x","slice3d");return assert$1(r.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),slice$2(r,e,t)}const slice3d=op({slice3d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice4d_(n,e,t){const r=convertToTensor(n,"x","slice4d");return assert$1(r.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),slice$2(r,e,t)}const slice4d=op({slice4d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax_(n,e=-1){const t=convertToTensor(n,"logits","softmax","float32");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);const r={logits:t},s={dim:e};return ENGINE.runKernel(Softmax$2,r,s)}const softmax$2=op({softmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft_(n){assert$1(n.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);const e={input:n};return ENGINE.runKernel(FFT,e)}const fft$3=op({fft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft_(n){assert$1(n.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);const e={input:n};return ENGINE.runKernel(IFFT,e)}const ifft$2=op({ifft_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function irfft_(n){const e=n.shape[n.shape.length-1],t=n.size/e;let r;if(e<=2){const s=reshape$2(n,[t,e]);r=ifft$2(s)}else{const s=[t,2*(e-1)],i=reshape$2(real$2(n),[t,e]),o=reshape$2(imag$2(n),[t,e]),a=reverse$2(slice$2(i,[0,1],[t,e-2]),1),l=mul(reverse$2(slice$2(o,[0,1],[t,e-2]),1),scalar(-1)),c=concat$2([i,a],1),u=concat$2([o,l],1),h=reshape$2(complex$2(c,u),[s[0],s[1]]);r=ifft$2(h)}if(r=real$2(r),n.rank===3&&n.shape[0]!==0){const s=r,i=n.shape[0];r=reshape$2(r,[i,r.shape[0]/i,r.shape[1]]),s.dispose()}return r}const irfft=op({irfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split_(n,e,t=0){const s={x:convertToTensor(n,"x","split")},i={numOrSizeSplits:e,axis:t};return ENGINE.runKernel(SplitV,s,i)}const split$2=op({split_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rfft_(n,e){assert$1(n.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let t=n.shape[n.shape.length-1];const r=n.size/t;let s;if(e!=null&&e<t){const x=n.shape.map(w=>0),y=n.shape.map(w=>w);y[n.shape.length-1]=e,s=slice$2(n,x,y),t=e}else if(e!=null&&e>t){const x=n.shape.map(y=>y);x[n.shape.length-1]=e-t,s=concat$2([n,zeros$1(x)],n.shape.length-1),t=e}else s=n;const i=zerosLike$2(s),o=reshape$2(complex$2(s,i),[r,t]),a=fft$3(o),l=Math.floor(t/2)+1,c=real$2(a),u=imag$2(a),h=split$2(c,[l,t-l],c.shape.length-1),d=split$2(u,[l,t-l],u.shape.length-1),g=s.shape.slice();return g[s.shape.length-1]=l,reshape$2(complex$2(h[0],d[0]),g)}const rfft=op({rfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squaredDifference_(n,e){let t=convertToTensor(n,"a","squaredDifference"),r=convertToTensor(e,"b","squaredDifference");[t,r]=makeTypesMatch(t,r),assertAndGetBroadcastShape(t.shape,r.shape);const s={a:t,b:r},i={};return ENGINE.runKernel(SquaredDifference,s,i)}const squaredDifference$2=op({squaredDifference_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squeeze_(n,e){const t=convertToTensor(n,"x","squeeze","string_or_numeric");return reshape$2(t,squeezeShape(t.shape,e).newShape)}const squeeze=op({squeeze_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stack_(n,e=0){const t=convertToTensorArray(n,"tensors","stack","string_or_numeric");assert$1(t.length>=1,()=>"Pass at least one tensor to tf.stack"),t.length>0&&assert$1(e<=t[0].rank,()=>"Axis must be <= rank of the tensor");const r=t,s={axis:e};return ENGINE.runKernel(Pack,r,s)}const stack=op({stack_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step_(n,e=0){const r={x:convertToTensor(n,"x","step")},s={alpha:e};return ENGINE.runKernel(Step,r,s)}const step$2=op({step_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice_(n,e,t,r,s=0,i=0,o=0,a=0,l=0){const u={x:convertToTensor(n,"x","stridedSlice","string_or_numeric")},h={begin:e,end:t,strides:r,beginMask:s,endMask:i,ellipsisMask:o,newAxisMask:a,shrinkAxisMask:l};return ENGINE.runKernel(StridedSlice,u,h)}const stridedSlice$2=op({stridedSlice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tan_(n){const t={x:convertToTensor(n,"x","tan","float32")};return ENGINE.runKernel(Tan,t)}const tan$2=op({tan_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor1d(n,e){assertNonNull(n);const t=inferShape(n,e);if(t.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return makeTensor(n,null,t,e)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor2d(n,e,t){if(assertNonNull(n),e!=null&&e.length!==2)throw new Error("tensor2d() requires shape to have two numbers");const r=inferShape(n,t);if(r.length!==2&&r.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return makeTensor(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor4d(n,e,t){assertNonNull(n);const r=inferShape(n,t);if(r.length!==4&&r.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(r.length===1&&e==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return makeTensor(n,e,r,t)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topk_(n,e=1,t=!0){const r=convertToTensor(n,"x","topk");if(r.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const i={x:r},o={k:e,sorted:t},[a,l]=ENGINE.runKernel(TopK,i,o);return{values:a,indices:l}}const topk=op({topk_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function truncatedNormal_(n,e=0,t=1,r,s){if(assertNonNegativeIntegerDimensions(n),r!=null&&r==="bool")throw new Error("Unsupported data type $ { dtype }");const i=new MPRandGauss(e,t,r,!0,s),o=buffer(n,r);for(let a=0;a<o.values.length;a++)o.values[a]=i.nextValue();return o.toTensor()}const truncatedNormal=op({truncatedNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique_(n,e=0){const t=convertToTensor(n,"x","unique","string_or_numeric");assert$1(t.rank>0,()=>"The input tensor must be at least 1D");const r={x:t},s={axis:e},[i,o]=ENGINE.runKernel(Unique,r,s);return{values:i,indices:o}}const unique$3=op({unique_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum_(n,e,t){const r=convertToTensor(n,"x","unsortedSegmentSum"),s=convertToTensor(e,"segmentIds","unsortedSegmentSum","int32");assert$1(isInt(t),()=>"numSegments must be of dtype int");const i={x:r,segmentIds:s},o={numSegments:t};return ENGINE.runKernel(UnsortedSegmentSum,i,o)}const unsortedSegmentSum$2=op({unsortedSegmentSum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unstack_(n,e=0){const t=convertToTensor(n,"x","unstack","string_or_numeric");assert$1(e>=-t.shape.length&&e<t.shape.length,()=>`Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);const r={value:t},s={axis:e};return ENGINE.runKernel(Unpack,r,s)}const unstack=op({unstack_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variable(n,e=!0,t,r){return ENGINE.makeVariable(n,e,t,r)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function whereImpl$2(n,e){const t=[];for(let i=0;i<e.length;i++)e[i]&&t.push(i);const r=buffer(n,"int32"),s=buffer([t.length,n.length],"int32");for(let i=0;i<t.length;i++){const o=r.indexToLoc(t[i]),a=i*n.length;s.values.set(o,a)}return s.toTensor()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function whereAsync_(n){const e=convertToTensor(n,"condition","whereAsync","bool"),t=await e.data(),r=whereImpl$2(e.shape,t);return n!==e&&e.dispose(),r}const whereAsync=whereAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function booleanMaskAsync_(n,e,t){const r=convertToTensor(n,"tensor","boolMask"),s=convertToTensor(e,"mask","boolMask","bool"),i=t??0,o=s.rank,a=r.shape;assert$1(o>0,()=>"mask cannot be scalar"),assertShapesMatch(a.slice(i,i+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let y=i;y<i+o;y++)l*=a[y];const c=a.slice(0,i).concat([l],a.slice(i+o)),u=reshape$2(r,c),h=reshape$2(s,[-1]),d=await whereAsync(h),g=squeeze(d,[1]),x=gather$1(u,g,i);return n!==r&&r.dispose(),e!==s&&s.dispose(),g.dispose(),u.dispose(),h.dispose(),d.dispose(),x}const booleanMaskAsync=booleanMaskAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose_(n,e,t){const r=convertToTensor(n,"x","transpose");if(e==null&&(e=r.shape.map((o,a)=>a).reverse()),assert$1(r.rank===e.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${e}.`),e.forEach(o=>{assert$1(o>=0&&o<r.rank,()=>`All entries in 'perm' must be between 0 and ${r.rank-1} but got ${e}`)}),r.rank<=1)return r.clone();const s={x:r},i={perm:e};return r.dtype==="complex64"?tidy(()=>{let o=real$2(r),a=imag$2(r);return o=ENGINE.runKernel(Transpose,{x:o},i),a=ENGINE.runKernel(Transpose,{x:a},i),t&&(a=neg$2(a)),complex$2(o,a)}):ENGINE.runKernel(Transpose,s,i)}const transpose$2=op({transpose_});function validateUpdateShape(n,e,t){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${n}, sliceDim: ${r}, and batchDim: ${s}.`;if(t.rank<s)throw new Error(i+` update.rank < ${s}. `);if(n.length<r+(t.rank-s))throw new Error(i+` Output shape length < ${r+(t.rank-s)}`);if(t.rank!==s+n.length-r)throw new Error(i+` update.rank != ${s+n.length-r}`);for(let o=0;o<s;++o)if(t.shape[o]!==e.shape[o])throw new Error(i+` updates.shape[${o}] (${t.shape[o]}) != indices.shape[${o}] (${e.shape[o]}).`);for(let o=0;o<t.rank-s;++o)if(t.shape[o+s]!==n[o+r])throw new Error(i+` updates.shape[${o+s}] (${t.shape[o+s]}) != shape[${o+s}] (${n[o+s]})`)}function validateInput(n,e,t){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if(e.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(t.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);if(t.length===0){if(e.size===0)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(n.size===0)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}validateUpdateShape(t,e,n)}function calculateShapes(n,e,t){const r=e.shape.length,s=r>1?e.shape[r-1]:1,i=t.length;let o=1;for(let h=s;h<i;++h)o*=t[h];const a=s<1?1:s,l=sizeFromShape(e.shape)/a,c=[...computeStrides(t.slice(0,s)),1],u=sizeFromShape(t);return{sliceRank:s,numUpdates:l,sliceSize:o,strides:c,outputSize:u}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getNoiseShape(n,e){if(e==null)return n.shape.slice();if(arraysEqual(n.shape,e))return e;if(n.shape.length===e.length){const t=[];for(let r=0;r<n.shape.length;r++)e[r]==null&&n.shape[r]!=null?t.push(n.shape[r]):t.push(e[r]);return t}return e}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dropout_(n,e,t,r){const s=convertToTensor(n,"x","dropout");if(assert$1(s.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),assert$1(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),e===0)return n instanceof Tensor?s.clone():s;const i=getNoiseShape(s,t),o=1-e,a=div$1(floor$2(add$2(randomUniform(i,0,1,"float32",r),o)),o);return mul(s,a)}const dropout$1=op({dropout_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter_(n,e,t,r,s,i="NHWC",o){let a=n;n.rank===3&&(a=reshape$2(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=e;l.rank===3&&(l=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2]])),assert$1(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),assert$1(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),assert$1(t.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);const c=i==="NHWC"?a.shape[3]:a.shape[1],u=i==="NHWC"?l.shape[3]:l.shape[1];assert$1(c===t[2],()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${t[2]}.`),assert$1(u===t[3],()=>`Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${t[3]}).`),checkPadOnDimRoundingMode("conv2dDerFilter",s,o);const h={x:a,dy:l},d={strides:r,pad:s,dataFormat:i,dimRoundingMode:o,filterShape:t};return ENGINE.runKernel(Conv2DBackpropFilter,h,d)}const conv2DBackpropFilter$2=op({conv2DBackpropFilter_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFusedDyActivation(n,e,t){if(t==null||t==="linear")return n;if(t==="relu")return mul(n,step$2(e));throw new Error(`Cannot compute gradient for fused activation ${t}.`)}function getFusedBiasGradient(n,e){let t=e;const r=getReductionAxes(n.shape,e.shape);return r.length>0&&(t=sum$3(t,r)),reshape$2(t,n.shape)}function applyActivation$1(n,e,t,r){if(e==="linear")return n;if(e==="relu")return relu$2(n);if(e==="elu")return elu$3(n);if(e==="relu6")return relu6$2(n);if(e==="prelu")return prelu$2(n,t);if(e==="leakyrelu")return leakyRelu$2(n,r);if(e==="sigmoid")return sigmoid$2(n);throw new Error(`Unknown fused activation ${e}.`)}const shouldFuse=(n,e)=>!(n>0)||e==="linear";/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d_({x:n,filter:e,strides:t,pad:r,dataFormat:s="NHWC",dilations:i=[1,1],dimRoundingMode:o,bias:a,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:u}){if(l=l||"linear",shouldFuse(ENGINE.state.gradientDepth,l)===!1){assert$1(s==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let P=conv2d$2(n,e,t,r,s,i,o);return a!=null&&(P=add$2(P,a)),applyActivation$1(P,l,c,u)}const h=convertToTensor(n,"x","conv2d","float32"),d=convertToTensor(e,"filter","conv2d","float32");let g=h,x=!1;h.rank===3&&(x=!0,g=reshape$2(h,[1,h.shape[0],h.shape[1],h.shape[2]])),assert$1(g.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${g.rank}.`),assert$1(d.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),checkPadOnDimRoundingMode("fused conv2d",r,o);const y=s==="NHWC"?g.shape[3]:g.shape[1];assert$1(d.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${d.shape[2]}.`),assert$1(eitherStridesOrDilationsAreOne(t,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`);const w=computeConv2DInfo(g.shape,d.shape,t,i,r,o);let $;a!=null&&($=convertToTensor(a,"bias","fused conv2d"),[$]=makeTypesMatch($,h),s==="NHWC"?assertAndGetBroadcastShape(w.outShape,$.shape):(assert$1($.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${$.shape.length}.`),assert$1($.shape.length===0||$.shape[0]===w.outChannels||$.shape[0]===1,()=>`Error in fused conv2d: bias shape (${$.shape}) is not compatible with the number of output channels (${w.outChannels})`)));let S;if(c!=null){const P=c.shape;if(assert$1(P.length<=1||P.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${P.length}.`),P.length===1)assert$1(P[0]===1||P[0]===w.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${P}) is not compatible with the number of output channels (${w.outChannels}).`);else if(P.length===3)try{assertAndGetBroadcastShape(P,w.outShape)}catch{const D=`Error in fused conv2d: PReLU activation weights (${P}) is not compatible with the output shape of the conv2d (${w.outShape}).`;throw Error(D)}S=convertToTensor(c,"prelu weights","fused conv2d")}const _=(P,L)=>{assert$1(s==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[D,M,O,R]=L,z=getFusedDyActivation(P,O,l);assert$1(tupleValuesAreOne(i),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`);const X=conv2DBackpropInput$2(M.shape,z,D,t,r),K=conv2DBackpropFilter$2(M,z,D.shape,t,r),Y=[X,K];if(R!=null){const te=getFusedBiasGradient(R,z);Y.push(te)}return Y},T={x:g,filter:d,bias:$,preluActivationWeights:S},k={strides:t,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o,activation:l,leakyreluAlpha:u};return a==null?customGrad((L,D,M)=>{let O=ENGINE.runKernel(FusedConv2D,T,k);return M([D,L,O]),x&&(O=reshape$2(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:_}})(g,d):customGrad((L,D,M,O)=>{let R=ENGINE.runKernel(FusedConv2D,T,k);return O([D,L,R,M]),x&&(R=reshape$2(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:_}})(g,d,$)}const conv2d$1=op({fusedConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter_(n,e,t,r,s,i=[1,1],o){let a=n;n.rank===3&&(a=reshape$2(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=e;l.rank===3&&(l=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const c={x:a,dy:l},u={strides:r,pad:s,dimRoundingMode:o,dilations:i,filterShape:t};return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter,c,u)}const depthwiseConv2dNativeBackpropFilter$2=op({depthwiseConv2dNativeBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput_(n,e,t,r,s,i=[1,1],o){let a=e,l=!1;e.rank===3&&(l=!0,a=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const c={dy:a,filter:t},u={strides:r,pad:s,dimRoundingMode:o,dilations:i,inputShape:n},h=ENGINE.runKernel(DepthwiseConv2dNativeBackpropInput,c,u);return l?reshape$2(h,[h.shape[1],h.shape[2],h.shape[3]]):h}const depthwiseConv2dNativeBackpropInput$2=op({depthwiseConv2dNativeBackpropInput_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedMatMul_({a:n,b:e,transposeA:t=!1,transposeB:r=!1,bias:s,activation:i="linear",preluActivationWeights:o,leakyreluAlpha:a=.2}){if(shouldFuse(ENGINE.state.gradientDepth,i)===!1){let R=matMul$1(n,e,t,r);return s!=null&&(R=add$2(R,s)),applyActivation$1(R,i,o,a)}let l=convertToTensor(n,"a","fused matMul"),c=convertToTensor(e,"b","fused matMul");[l,c]=makeTypesMatch(l,c);const u=t?l.shape[l.rank-2]:l.shape[l.rank-1],h=r?c.shape[c.rank-1]:c.shape[c.rank-2],d=t?l.shape[l.rank-1]:l.shape[l.rank-2],g=r?c.shape[c.rank-2]:c.shape[c.rank-1],x=l.shape.slice(0,-2),y=c.shape.slice(0,-2),w=sizeFromShape(x),$=sizeFromShape(y);assert$1(u===h,()=>`Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${t} and transposeB=${r} must match.`);const _=assertAndGetBroadcastShape(l.shape.slice(0,-2),c.shape.slice(0,-2)).concat([d,g]),T=t?reshape$2(l,[w,u,d]):reshape$2(l,[w,d,u]),k=r?reshape$2(c,[$,g,h]):reshape$2(c,[$,h,g]);let P;s!=null&&(P=convertToTensor(s,"bias","fused matMul"),[P]=makeTypesMatch(P,l),assertAndGetBroadcastShape(_,P.shape));let L;o!=null&&(L=convertToTensor(o,"prelu weights","fused matMul"));const D=(R,z)=>{const[X,K,Y,te]=z,ie=getFusedDyActivation(reshape$2(R,Y.shape),Y,i);let Q,se;if(!t&&!r?(Q=matMul$1(ie,K,!1,!0),se=matMul$1(X,ie,!0,!1)):!t&&r?(Q=matMul$1(ie,K,!1,!1),se=matMul$1(ie,X,!0,!1)):t&&!r?(Q=matMul$1(K,ie,!1,!0),se=matMul$1(X,ie,!1,!1)):(Q=matMul$1(K,ie,!0,!0),se=matMul$1(ie,X,!0,!0)),s!=null){const le=getFusedBiasGradient(te,ie);return[Q,se,le]}else return[Q,se]},M={a:T,b:k,bias:P,preluActivationWeights:L},O={transposeA:t,transposeB:r,activation:i,leakyreluAlpha:a};return s==null?customGrad((z,X,K)=>{const Y=ENGINE.runKernel(_FusedMatMul,M,O);return K([z,X,Y]),{value:reshape$2(Y,_),gradFunc:D}})(T,k):customGrad((z,X,K,Y)=>{const te=ENGINE.runKernel(_FusedMatMul,M,O);return Y([z,X,te,K]),{value:reshape$2(te,_),gradFunc:D}})(T,k,P)}const matMul=op({fusedMatMul_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize_(n,e,t,r,s="bilinear",i=0){const o=convertToTensor(n,"image","cropAndResize"),a=convertToTensor(e,"boxes","cropAndResize","float32"),l=convertToTensor(t,"boxInd","cropAndResize","int32"),c=a.shape[0];assert$1(o.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),assert$1(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`),assert$1(l.rank===1&&l.shape[0]===c,()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`),assert$1(r.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),assert$1(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),assert$1(s==="bilinear"||s==="nearest",()=>`method must be bilinear or nearest, but was ${s}`);const u={image:o,boxes:a,boxInd:l},h={method:s,extrapolationValue:i,cropSize:r};return ENGINE.runKernel(CropAndResize,u,h)}const cropAndResize$3=op({cropAndResize_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function flipLeftRight_(n){const e=convertToTensor(n,"image","flipLeftRight","float32");assert$1(e.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const t={image:e};return ENGINE.runKernel(FlipLeftRight,t,{})}const flipLeftRight=op({flipLeftRight_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function grayscaleToRGB_(n){const e=convertToTensor(n,"image","grayscaleToRGB"),t=e.rank-1,r=e.shape[t];assert$1(e.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`),assert$1(r===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(e.rank);return s.fill(1,0,t),s[t]=3,tile$3(e,s)}const grayscaleToRGB=op({grayscaleToRGB_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rotateWithOffset_(n,e,t=0,r=.5){const s=convertToTensor(n,"image","rotateWithOffset","float32");assert$1(s.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const i={image:s},o={radians:e,fillValue:t,center:r};return ENGINE.runKernel(RotateWithOffset,i,o)}const rotateWithOffset=op({rotateWithOffset_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppSanityCheck(n,e,t,r,s,i){r==null&&(r=.5),s==null&&(s=Number.NEGATIVE_INFINITY),i==null&&(i=0);const o=n.shape[0];return t=Math.min(t,o),assert$1(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),assert$1(n.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),assert$1(n.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),assert$1(e.rank===1,()=>"scores must be a 1D tensor"),assert$1(e.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`),assert$1(0<=i&&i<=1,()=>`softNmsSigma must be in [0, 1], but was '${i}'`),{maxOutputSize:t,iouThreshold:r,scoreThreshold:s,softNmsSigma:i}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppression_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY){const i=convertToTensor(n,"boxes","nonMaxSuppression","float32"),o=convertToTensor(e,"scores","nonMaxSuppression","float32"),a=nonMaxSuppSanityCheck(i,o,t,r,s);t=a.maxOutputSize,r=a.iouThreshold,s=a.scoreThreshold;const l={maxOutputSize:t,iouThreshold:r,scoreThreshold:s};return ENGINE.runKernel(NonMaxSuppressionV3,{boxes:i,scores:o},l)}const nonMaxSuppression=op({nonMaxSuppression_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryInsert(n,e,t){const r=binarySearch(n,e,t),s=r<0?-(r+1):r;n.splice(s,0,e)}function binarySearch(n,e,t){return binarySearch_(n,e,t)}function binarySearch_(n,e,t){let r=0,s=n.length,i=0,o=!1;for(;r<s;){i=r+(s-r>>>1);const a=t(e,n[i]);a>0?r=i+1:(s=i,o=!a)}return o?r:-r-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3Impl$2(n,e,t,r,s){return nonMaxSuppressionImpl_(n,e,t,r,s,0)}function nonMaxSuppressionV4Impl$2(n,e,t,r,s,i){return nonMaxSuppressionImpl_(n,e,t,r,s,0,!1,i,!0)}function nonMaxSuppressionV5Impl$2(n,e,t,r,s,i){return nonMaxSuppressionImpl_(n,e,t,r,s,i,!0)}function nonMaxSuppressionImpl_(n,e,t,r,s,i,o=!1,a=!1,l=!1){const c=[];for(let w=0;w<e.length;w++)e[w]>s&&c.push({score:e[w],boxIndex:w,suppressBeginIndex:0});c.sort(ascendingComparator);const u=i>0?-.5/i:0,h=[],d=[];for(;h.length<t&&c.length>0;){const w=c.pop(),{score:$,boxIndex:S,suppressBeginIndex:_}=w;if($<s)break;let T=!1;for(let k=h.length-1;k>=_;--k){const P=intersectionOverUnion(n,S,h[k]);if(P>=r){T=!0;break}if(w.score=w.score*suppressWeight(r,u,P),w.score<=s)break}w.suppressBeginIndex=h.length,T||(w.score===$?(h.push(S),d.push(w.score)):w.score>s&&binaryInsert(c,w,ascendingComparator))}const g=h.length,x=t-g;a&&x>0&&(h.push(...new Array(x).fill(0)),d.push(...new Array(x).fill(0)));const y={selectedIndices:h};return o&&(y.selectedScores=d),l&&(y.validOutputs=g),y}function intersectionOverUnion(n,e,t){const r=n.subarray(e*4,e*4+4),s=n.subarray(t*4,t*4+4),i=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),a=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),c=Math.min(s[0],s[2]),u=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),g=(a-i)*(l-o),x=(h-c)*(d-u);if(g<=0||x<=0)return 0;const y=Math.max(i,c),w=Math.max(o,u),$=Math.min(a,h),S=Math.min(l,d),_=Math.max($-y,0)*Math.max(S-w,0);return _/(g+x-_)}function suppressWeight(n,e,t){const r=Math.exp(e*t*t);return t<=n?r:0}function ascendingComparator(n,e){return n.score-e.score||n.score===e.score&&e.boxIndex-n.boxIndex}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY){const i=convertToTensor(n,"boxes","nonMaxSuppressionAsync"),o=convertToTensor(e,"scores","nonMaxSuppressionAsync"),a=nonMaxSuppSanityCheck(i,o,t,r,s);t=a.maxOutputSize,r=a.iouThreshold,s=a.scoreThreshold;const l=await Promise.all([i.data(),o.data()]),c=l[0],u=l[1],{selectedIndices:h}=nonMaxSuppressionV3Impl$2(c,u,t,r,s);return i!==n&&i.dispose(),o!==e&&o.dispose(),tensor1d(h,"int32")}const nonMaxSuppressionAsync=nonMaxSuppressionAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionWithScore_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const o=convertToTensor(n,"boxes","nonMaxSuppression"),a=convertToTensor(e,"scores","nonMaxSuppression"),l=nonMaxSuppSanityCheck(o,a,t,r,s,i);t=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,i=l.softNmsSigma;const c={boxes:o,scores:a},u={maxOutputSize:t,iouThreshold:r,scoreThreshold:s,softNmsSigma:i},h=ENGINE.runKernel(NonMaxSuppressionV5,c,u);return{selectedIndices:h[0],selectedScores:h[1]}}const nonMaxSuppressionWithScore=op({nonMaxSuppressionWithScore_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionWithScoreAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const o=convertToTensor(n,"boxes","nonMaxSuppressionAsync"),a=convertToTensor(e,"scores","nonMaxSuppressionAsync"),l=nonMaxSuppSanityCheck(o,a,t,r,s,i);t=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,i=l.softNmsSigma;const c=await Promise.all([o.data(),a.data()]),u=c[0],h=c[1],{selectedIndices:d,selectedScores:g}=nonMaxSuppressionV5Impl$2(u,h,t,r,s,i);return o!==n&&o.dispose(),a!==e&&a.dispose(),{selectedIndices:tensor1d(d,"int32"),selectedScores:tensor1d(g)}}const nonMaxSuppressionWithScoreAsync=nonMaxSuppressionWithScoreAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionPadded_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const o=convertToTensor(n,"boxes","nonMaxSuppression"),a=convertToTensor(e,"scores","nonMaxSuppression"),l=nonMaxSuppSanityCheck(o,a,t,r,s,null),c=l.maxOutputSize,u=l.iouThreshold,h=l.scoreThreshold,d={boxes:o,scores:a},g={maxOutputSize:c,iouThreshold:u,scoreThreshold:h,padToMaxOutputSize:i},x=ENGINE.runKernel(NonMaxSuppressionV4,d,g);return{selectedIndices:x[0],validOutputs:x[1]}}const nonMaxSuppressionPadded=op({nonMaxSuppressionPadded_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionPaddedAsync_(n,e,t,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const o=convertToTensor(n,"boxes","nonMaxSuppressionAsync"),a=convertToTensor(e,"scores","nonMaxSuppressionAsync"),l=nonMaxSuppSanityCheck(o,a,t,r,s,null),c=l.maxOutputSize,u=l.iouThreshold,h=l.scoreThreshold,[d,g]=await Promise.all([o.data(),a.data()]),{selectedIndices:x,validOutputs:y}=nonMaxSuppressionV4Impl$2(d,g,c,u,h,i);return o!==n&&o.dispose(),a!==e&&a.dispose(),{selectedIndices:tensor1d(x,"int32"),validOutputs:scalar(y,"int32")}}const nonMaxSuppressionPaddedAsync=nonMaxSuppressionPaddedAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear_(n,e,t=!1,r=!1){const s=convertToTensor(n,"images","resizeBilinear");assert$1(s.rank===3||s.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),assert$1(e.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`),assert$1(r===!1||t===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let i=s,o=!1;s.rank===3&&(o=!0,i=reshape$2(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const a={images:i},l={alignCorners:t,halfPixelCenters:r,size:e},c=ENGINE.runKernel(ResizeBilinear,a,l);return o?reshape$2(c,[c.shape[1],c.shape[2],c.shape[3]]):c}const resizeBilinear$3=op({resizeBilinear_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor_(n,e,t=!1,r=!1){const s=convertToTensor(n,"images","resizeNearestNeighbor");assert$1(s.rank===3||s.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),assert$1(e.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`),assert$1(s.dtype==="float32"||s.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),assert$1(r===!1||t===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let i=s,o=!1;s.rank===3&&(o=!0,i=reshape$2(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const a={images:i},l={alignCorners:t,halfPixelCenters:r,size:e},c=ENGINE.runKernel(ResizeNearestNeighbor,a,l);return o?reshape$2(c,[c.shape[1],c.shape[2],c.shape[3]]):c}const resizeNearestNeighbor$2=op({resizeNearestNeighbor_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function threshold_(n,e="binary",t=!1,r=.5){const s=convertToTensor(n,"image","threshold"),i=.2989,o=.587,a=.114,l=s.shape[0]*s.shape[1];let c=mul(tensor1d([r]),255),u,h,d,g;if(assert$1(s.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),assert$1(s.shape[2]===3||s.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),assert$1(s.dtype==="int32"||s.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),assert$1(e==="otsu"||e==="binary",()=>`Method must be binary or otsu, but was ${e}`),s.shape[2]===3){[u,h,d]=split$2(s,[1,1,1],-1);const w=mul(u,i),$=mul(h,o),S=mul(d,a);g=add$2(add$2(w,$),S)}else g=n;if(e==="otsu"){const w=bincount$2(cast$3(round$3(g),"int32"),tensor([]),256);c=otsu$1(w,l)}const x=t?lessEqual$2(g,c):greater$2(g,c);return cast$3(mul(x,255),"int32")}function otsu$1(n,e){let t=tensor1d([-1]),r=tensor1d([0]),s=tensor1d([0]),i,o,a,l,c,u;for(let h=0;h<n.size-1;h++){i=slice$2(n,0,h+1),o=slice$2(n,h+1),c=div$1(sum$3(i),e),u=div$1(sum$3(o),e);const d=sum$3(mul(i,range$3(0,i.size)));a=div$1(d,sum$3(i));const g=fill$3(o.shape,i.size),x=add$2(range$3(0,o.size),g),y=mul(o,x);l=div$1(sum$3(y),sum$3(o));const w=sub$2(a,l),$=sub$2(a,l),S=mul(c,u);s=mul(mul(S,w),$);const _=greater$2(s,r);r=where(_,s,r),t=where(_,tensor1d([h]),t)}return t}const threshold$1=op({threshold_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform_(n,e,t="nearest",r="constant",s=0,i){const o=convertToTensor(n,"image","transform","float32"),a=convertToTensor(e,"transforms","transform","float32");assert$1(o.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),assert$1(a.rank===2&&(a.shape[0]===o.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),assert$1(i==null||i.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`);const l={image:o,transforms:a},c={interpolation:t,fillMode:r,fillValue:s,outputShape:i};return ENGINE.runKernel(Transform,l,c)}const transform$2=op({transform_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bandPart_(n,e,t){assert$1(e%1===0,()=>`bandPart(): numLower must be an integer, got ${e}.`),assert$1(t%1===0,()=>`bandPart(): numUpper must be an integer, got ${t}.`);const r=convertToTensor(n,"a","bandPart");assert$1(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[i,o]=r.shape.slice(-2);if(!(e<=i))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${i}).`);if(!(t<=o))throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${o}).`);e<0&&(e=i),t<0&&(t=o);const a=reshape$2(range$3(0,i,1,"int32"),[-1,1]),l=range$3(0,o,1,"int32"),c=sub$2(a,l),u=logicalAnd$2(lessEqual$2(c,scalar(+e,"int32")),greaterEqual$2(c,scalar(-t,"int32"))),h=zeros$1([i,o],r.dtype);return reshape$2(stack(unstack(reshape$2(r,[-1,i,o])).map(d=>where(u,d,h))),s)}const bandPart=op({bandPart_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gramSchmidt_(n){let e;if(Array.isArray(n)){e=!1,assert$1(n!=null&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const s=n[0].shape[0];for(let i=1;i<n.length;++i)assert$1(n[i].shape[0]===s,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[i].shape[0]} vs. ${s})`)}else e=!0,n=split$2(n,n.shape[0],0).map(s=>squeeze(s,[0]));assert$1(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const t=[],r=n;for(let s=0;s<n.length;++s)t.push(ENGINE.tidy(()=>{let i=r[s];if(s>0)for(let o=0;o<s;++o){const a=mul(sum$3(mul(t[o],i)),t[o]);i=sub$2(i,a)}return div$1(i,norm(i,"euclidean"))}));return e?stack(t,0):t}const gramSchmidt=op({gramSchmidt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function qr_(n,e=!1){if(assert$1(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),n.rank===2)return qr2d(n,e);{const t=n.shape.slice(0,n.shape.length-2).reduce((l,c)=>l*c),r=unstack(reshape$2(n,[t,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),s=[],i=[];r.forEach(l=>{const[c,u]=qr2d(l,e);s.push(c),i.push(u)});const o=reshape$2(stack(s,0),n.shape),a=reshape$2(stack(i,0),n.shape);return[o,a]}}function qr2d(n,e=!1){return ENGINE.tidy(()=>{assert$1(n.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const t=n.shape[0],r=n.shape[1];let s=eye(t),i=clone(n);const o=tensor2d([[1]],[1,1]);let a=clone(o);const l=t>=r?r:t;for(let c=0;c<l;++c){const u=i,h=a,d=s;[a,i,s]=ENGINE.tidy(()=>{const g=slice$2(i,[c,c],[t-c,1]),x=norm(g),y=slice$2(i,[c,c],[1,1]),w=where(greater$2(y,0),tensor2d([[-1]]),tensor2d([[1]])),$=sub$2(y,mul(w,x)),S=div$1(g,$);S.shape[0]===1?a=clone(o):a=concat$2([o,slice$2(S,[1,0],[S.shape[0]-1,S.shape[1]])],0);const _=neg$2(div$1(matMul$1(w,$),x)),T=slice$2(i,[c,0],[t-c,r]),k=mul(_,a),P=transpose$2(a);if(c===0)i=sub$2(T,matMul$1(k,matMul$1(P,T)));else{const M=sub$2(T,matMul$1(k,matMul$1(P,T)));i=concat$2([slice$2(i,[0,0],[c,r]),M],0)}const L=transpose$2(k),D=slice$2(s,[0,c],[t,s.shape[1]-c]);if(c===0)s=sub$2(D,matMul$1(matMul$1(D,a),L));else{const M=sub$2(D,matMul$1(matMul$1(D,a),L));s=concat$2([slice$2(s,[0,0],[t,c]),M],1)}return[a,i,s]}),dispose([u,h,d])}return!e&&t>r&&(s=slice$2(s,[0,0],[t,r]),i=slice$2(i,[0,0],[r,r])),[s,i]})}const qr=op({qr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const image={flipLeftRight,grayscaleToRGB,resizeNearestNeighbor:resizeNearestNeighbor$2,resizeBilinear:resizeBilinear$3,rotateWithOffset,cropAndResize:cropAndResize$3,nonMaxSuppression,nonMaxSuppressionAsync,nonMaxSuppressionWithScore,nonMaxSuppressionWithScoreAsync,nonMaxSuppressionPadded,nonMaxSuppressionPaddedAsync,threshold:threshold$1,transform:transform$2},linalg={bandPart,gramSchmidt,qr};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Serializable{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class SerializationMap{constructor(){this.classNameMap={}}static getMap(){return SerializationMap.instance==null&&(SerializationMap.instance=new SerializationMap),SerializationMap.instance}static register(e){SerializationMap.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function registerClass(n){assert$1(n.className!=null,()=>"Class being registered does not have the static className property defined."),assert$1(typeof n.className=="string",()=>"className is required to be a string, but got type "+typeof n.className),assert$1(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),SerializationMap.register(n)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Optimizer extends Serializable{minimize(e,t=!1,r){const{value:s,grads:i}=this.computeGradients(e,r);if(r!=null){const o=r.map(a=>({name:a.name,tensor:i[a.name]}));this.applyGradients(o)}else this.applyGradients(i);return dispose(i),t?s:(s.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return variableGrads(e,t)}dispose(){this.iterations_!=null&&dispose(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:scalar(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Optimizer,Symbol.hasInstance,{value:n=>n.minimize!=null&&n.computeGradients!=null&&n.applyGradients!=null});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdadeltaOptimizer extends Optimizer{constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],r==null&&(this.epsilon=ENGINE.backend.epsilon())}static get className(){return"Adadelta"}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const i=ENGINE.registeredVariables[r],o=!1;this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accum_grad`,variable:tidy(()=>zerosLike$2(i).variable(o))}),this.accumulatedUpdates[s]==null&&(this.accumulatedUpdates[s]={originalName:`${r}/accum_var`,variable:tidy(()=>zerosLike$2(i).variable(o))});const a=Array.isArray(e)?e[s].tensor:e[r];if(a==null)return;const l=this.accumulatedGrads[s].variable,c=this.accumulatedUpdates[s].variable;tidy(()=>{const u=add$2(mul(l,this.rho),mul(square$2(a),1-this.rho)),h=mul(div$1(sqrt$2(add$2(c,this.epsilon)),sqrt$2(add$2(l,this.epsilon))),a),d=add$2(mul(c,this.rho),mul(square$2(h),1-this.rho));l.assign(u),c.assign(d);const g=add$2(mul(h,-this.learningRate),i);i.assign(g)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(dispose(this.accumulatedGrads.map(e=>e.variable)),dispose(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=e.length/2,r=!1;this.accumulatedGrads=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedUpdates=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdagradOptimizer extends Optimizer{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}static get className(){return"Adagrad"}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const i=ENGINE.registeredVariables[r];this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${r}/accumulator`,variable:tidy(()=>fill$3(i.shape,this.initialAccumulatorValue).variable(!1))});const o=Array.isArray(e)?e[s].tensor:e[r];if(o==null)return;const a=this.accumulatedGrads[s].variable;tidy(()=>{const l=add$2(a,square$2(o));a.assign(l);const c=add$2(mul(div$1(o,sqrt$2(add$2(l,ENGINE.backend.epsilon()))),-this.learningRate),i);i.assign(c)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&dispose(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulatedGrads=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamOptimizer extends Optimizer{constructor(e,t,r,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],tidy(()=>{this.accBeta1=scalar(t).variable(),this.accBeta2=scalar(r).variable()}),s==null&&(this.epsilon=ENGINE.backend.epsilon())}static get className(){return"Adam"}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy(()=>{const r=sub$2(1,this.accBeta1),s=sub$2(1,this.accBeta2);t.forEach((i,o)=>{const a=ENGINE.registeredVariables[i],l=!1;this.accumulatedFirstMoment[o]==null&&(this.accumulatedFirstMoment[o]={originalName:`${i}/m`,variable:tidy(()=>zerosLike$2(a).variable(l))}),this.accumulatedSecondMoment[o]==null&&(this.accumulatedSecondMoment[o]={originalName:`${i}/v`,variable:tidy(()=>zerosLike$2(a).variable(l))});const c=Array.isArray(e)?e[o].tensor:e[i];if(c==null)return;const u=this.accumulatedFirstMoment[o].variable,h=this.accumulatedSecondMoment[o].variable,d=add$2(mul(u,this.beta1),mul(c,1-this.beta1)),g=add$2(mul(h,this.beta2),mul(square$2(c),1-this.beta2)),x=div$1(d,r),y=div$1(g,s);u.assign(d),h.assign(g);const w=add$2(mul(div$1(x,add$2(sqrt$2(y),this.epsilon)),-this.learningRate),a);a.assign(w)}),this.accBeta1.assign(mul(this.accBeta1,this.beta1)),this.accBeta2.assign(mul(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&dispose(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),tidy(()=>{this.accBeta1.assign(pow$2(this.beta1,this.iterations_+1)),this.accBeta2.assign(pow$2(this.beta2,this.iterations_+1))});const t=e.length/2,r=!1;this.accumulatedFirstMoment=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedSecondMoment=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamaxOptimizer extends Optimizer{constructor(e,t,r,s=null,i=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.decay=i,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],tidy(()=>{this.iteration=scalar(0).variable(),this.accBeta1=scalar(t).variable()}),s==null&&(this.epsilon=ENGINE.backend.epsilon())}static get className(){return"Adamax"}applyGradients(e){const t=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);tidy(()=>{const r=sub$2(1,this.accBeta1),s=div$1(-this.learningRate,add$2(mul(this.iteration,this.decay),1));t.forEach((i,o)=>{const a=ENGINE.registeredVariables[i],l=!1;this.accumulatedFirstMoment[o]==null&&(this.accumulatedFirstMoment[o]={originalName:`${i}/m`,variable:zerosLike$2(a).variable(l)}),this.accumulatedWeightedInfNorm[o]==null&&(this.accumulatedWeightedInfNorm[o]={originalName:`${i}/v`,variable:zerosLike$2(a).variable(l)});const c=Array.isArray(e)?e[o].tensor:e[i];if(c==null)return;const u=this.accumulatedFirstMoment[o].variable,h=this.accumulatedWeightedInfNorm[o].variable,d=add$2(mul(u,this.beta1),mul(c,1-this.beta1)),g=mul(h,this.beta2),x=abs$3(c),y=maximum$2(g,x);u.assign(d),h.assign(y);const w=add$2(mul(div$1(s,r),div$1(d,add$2(y,this.epsilon))),a);a.assign(w)}),this.iteration.assign(add$2(this.iteration,1)),this.accBeta1.assign(mul(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&dispose(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SGDOptimizer extends Optimizer{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}static get className(){return"SGD"}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const i=Array.isArray(e)?e[s].tensor:e[r];if(i==null)return;const o=ENGINE.registeredVariables[r];tidy(()=>{const a=add$2(mul(this.c,i),o);o.assign(a)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=keep(scalar(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(e=await this.extractIterations(e),e.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MomentumOptimizer extends SGDOptimizer{constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=scalar(this.momentum)}static get className(){return"Momentum"}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const i=ENGINE.registeredVariables[r];this.accumulations[s]==null&&(this.accumulations[s]={originalName:`${r}/momentum`,variable:tidy(()=>zerosLike$2(i).variable(!1))});const o=this.accumulations[s].variable,a=Array.isArray(e)?e[s].tensor:e[r];a!=null&&tidy(()=>{let l;const c=add$2(mul(this.m,o),a);this.useNesterov?l=add$2(mul(this.c,add$2(a,mul(c,this.m))),i):l=add$2(mul(this.c,c),i),o.assign(c),i.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&dispose(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=!1;this.accumulations=e.map(r=>({originalName:r.name,variable:r.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RMSPropOptimizer extends Optimizer{constructor(e,t=.9,r=0,s=null,i=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=i,s==null&&(this.epsilon=ENGINE.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}static get className(){return"RMSProp"}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,s)=>{const i=ENGINE.registeredVariables[r],o=!1;this.accumulatedMeanSquares[s]==null&&(this.accumulatedMeanSquares[s]={originalName:`${r}/rms`,variable:tidy(()=>zerosLike$2(i).variable(o))}),this.accumulatedMoments[s]==null&&(this.accumulatedMoments[s]={originalName:`${r}/momentum`,variable:tidy(()=>zerosLike$2(i).variable(o))}),this.accumulatedMeanGrads[s]==null&&this.centered&&(this.accumulatedMeanGrads[s]={originalName:`${r}/mg`,variable:tidy(()=>zerosLike$2(i).variable(o))});const a=Array.isArray(e)?e[s].tensor:e[r];if(a==null)return;const l=this.accumulatedMeanSquares[s].variable,c=this.accumulatedMoments[s].variable;tidy(()=>{const u=add$2(mul(l,this.decay),mul(square$2(a),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[s].variable,d=add$2(mul(h,this.decay),mul(a,1-this.decay)),g=div$1(mul(a,this.learningRate),sqrt$2(sub$2(u,add$2(square$2(d),this.epsilon)))),x=add$2(mul(c,this.momentum),g);l.assign(u),h.assign(d),c.assign(x);const y=sub$2(i,x);i.assign(y)}else{const h=add$2(mul(l,this.decay),mul(square$2(a),1-this.decay)),d=add$2(mul(c,this.momentum),div$1(mul(a,this.learningRate),sqrt$2(add$2(h,this.epsilon))));l.assign(h),c.assign(d);const g=sub$2(i,d);i.assign(g)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&dispose(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&dispose(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&dispose(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,r=!1;this.accumulatedMeanSquares=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.accumulatedMoments=e.slice(t,t*2).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})),this.centered&&(this.accumulatedMeanGrads=e.slice(t*2,t*3).map(s=>({originalName:s.name,variable:s.tensor.variable(r)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OPTIMIZERS=[AdadeltaOptimizer,AdagradOptimizer,AdamOptimizer,AdamaxOptimizer,MomentumOptimizer,RMSPropOptimizer,SGDOptimizer];function registerOptimizers(){for(const n of OPTIMIZERS)registerClass(n)}function prepareAndValidate(n,e){const t=n.shape.length,r=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${t}`);if(sizeFromShape(n.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const s=e.shape,i=s[s.length-1];let o=1;for(let h=0;h<s.length-1;++h)o*=s[h];const a=n.shape,l=s.slice();l.pop();let c=1;for(let h=i;h<t;++h)c*=a[h],l.push(a[h]);const u=[...computeStrides(n.shape).map(h=>h/c),1].slice(0,i);return[l,o,c,u]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEW_AXIS=-2,SHRINK_AXIS=-1;function assertParamsValid(n,e,t){const r=n.shape.length;assert$1(r===e.length,()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`),assert$1(r===t.length,()=>`Error in slice${r}D: Length of size ${t} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)assert$1(e[s]+t[s]<=n.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+t[s]}) would overflow input.shape[${s}] (${n.shape[s]})`)}function maskToAxes(n){const e=[];let t=0;for(;n>0;)n&1&&e.push(t),n/=2,t++;return e}function computeOutShape$2(n,e,t){const r=[];for(let s=0;s<n.length;s++)r[s]=Math.ceil((e[s]-n[s])/t[s]);return r}function stridesWithElidedDims(n,e,t,r){const s=[...n];for(let i=s.length;i<r.length;i++)s.push(1);for(let i=0;i<t;i++)i===0?s[e]=1:(s.splice(e,0,1),s.pop());return s}function unnormalizeAxis(n,e,t){return t<=n?t:t-(e-1)}function getElidedAxes(n,e){const t=[];for(let r=0;r<n;r++)t.push(e+r);return t}function getNormalizedAxes(n,e,t,r,s,i,o,a,l){const c=n.length;let u=new Array(c),h=new Array(c),d=new Array(c);if(e.length&&t>0){const g=e[0],x=t+1;u=startIndicesWithElidedDims(o,g,x,r,n),h=stopIndicesWithElidedDims(a,g,x,s,n),d=stridesWithElidedDims(i,g,x,n)}else for(let g=0;g<c;g++)u[g]=startForAxis(o,r,i,n,g,l),h[g]=stopForAxis(a,s,i,n,g,l),d[g]=stridesForAxis(i,g,l);return{begin:u,end:h,strides:d}}function startIndicesWithElidedDims(n,e,t,r,s){const i=[...s],o=getElidedAxes(t,e);for(let a=0;a<i.length;a++)if(o.indexOf(a)>-1)i[a]=0;else{const l=unnormalizeAxis(e,t,a);let c=r[l];n&1<<l&&(c=0),i[a]=c}return i}function stopIndicesWithElidedDims(n,e,t,r,s){const i=[...s],o=getElidedAxes(t,e);for(let a=0;a<i.length;a++)if(o.indexOf(a)>-1)i[a]=Number.MAX_SAFE_INTEGER;else{const l=unnormalizeAxis(e,t,a);let c=r[l];n&1<<l&&(c=Number.MAX_SAFE_INTEGER),i[a]=c}for(let a=0;a<i.length;a++){const l=s[a];i[a]<0&&(i[a]+=l),i[a]=clamp$1(0,i[a],s[a])}return i}function stridesForAxis(n,e,t){let r=n[e];return(t&1<<e||r==null)&&(r=1),r}function startForAxis(n,e,t,r,s,i){let o=e[s];const a=t[s]||1;(n&1<<s||i&1<<s||o==null)&&(a>0?o=Number.MIN_SAFE_INTEGER:o=Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=clamp$1(0,o,l-1),o}function stopForAxis(n,e,t,r,s,i){let o=e[s];const a=t[s]||1;(n&1<<s||i&1<<s||o==null)&&(a>0?o=Number.MAX_SAFE_INTEGER:o=Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),a>0?o=clamp$1(0,o,l):o=clamp$1(-1,o,l-1),o}function isSliceContinous(n,e,t){let r=t.length;for(let s=0;s<t.length;s++)if(t[s]>1){r=s;break}for(let s=r+1;s<t.length;s++)if(e[s]>0||t[s]!==n[s])return!1;return!0}function computeFlatOffset(n,e){let t=n.length>0?n[n.length-1]:1;for(let r=0;r<n.length-1;r++)t+=n[r]*e[r];return t}function parseSliceParams(n,e,t){let r;const s=n.shape.length;typeof e=="number"?r=[e,...new Array(s-1).fill(0)]:e.length<s?r=e.concat(new Array(s-e.length).fill(0)):r=e.slice(),r.forEach(o=>{assert$1(o!==-1,()=>"slice() does not support negative begin indexing.")});let i;return t==null?i=new Array(s).fill(-1):typeof t=="number"?i=[t,...new Array(s-1).fill(-1)]:t.length<s?i=t.concat(new Array(s-t.length).fill(-1)):i=t,i=i.map((o,a)=>o>=0?o:(assert$1(o===-1,()=>`Negative size values should be exactly -1 but got ${o} for the slice() size at index ${a}.`),n.shape[a]-r[a])),[r,i]}function sliceInfo(n,e,t,r,s,i,o,a,l){let c;if(r==null?(c=new Array(e.length),c.fill(1)):c=r,o!=null&&o&o-1)throw new Error("Multiple ellipses in slice is not allowed.");let u=!1;const h={dims:c.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:t.slice(),strides:c.slice(),beginMask:s,endMask:i,ellipsisMask:o,newAxisMask:a,shrinkAxisMask:l};for(let _=0;_<h.dims;_++)u&&1<<_&a&&h.numAddAxisAfterEllipsis++,1<<_&o&&(u=!0);u||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};buildDenseSpec(h,d);let g=!0,x=!0,y=!0;const w=[],$=[];for(let _=0;_<n.length;++_){if(d.strides[_]===0)throw Error(`strides[${_}] must be non-zero`);const T=!!(d.shrinkAxisMask&1<<_),k=n[_];if(k===-1){w.push(T?1:-1);continue}const P=[d.beginMask&1<<_,d.endMask&1<<_],L=[d.strides[_]>0?0:-1,d.strides[_]>0?k:k-1];if(T&&d.strides[_]<=0)throw Error("only stride 1 allowed on non-range indexing.");y=y&&d.strides[_]===1;const D=!!(d.beginMask&1<<_&&d.endMask&1<<_);if(d.beginValid&&d.endValid){if(T){const z=d.begin[_]<0?k+d.begin[_]:d.begin[_];if(d.begin[_]=z,d.end[_]=d.begin[_]+1,z<0||z>=k)throw Error(`slice index ${d.begin[_]} of dimension ${_} out of bounds.`)}else d.begin[_]=canonical(d.begin[_],0,d.strides[_],k,P,L),d.end[_]=canonical(d.end[_],1,d.strides[_],k,P,L);const R=d.strides[_]===1&&d.begin[_]===0&&d.end[_]===k;g=g&&R,x=x&&(_===0&&d.strides[_]===1||R)}else g=g&&d.strides[_]===1&&D,x=x&&(_===0&&d.strides[_]===1||D);let M,O=!1;if(d.beginValid&&d.endValid?(M=d.end[_]-d.begin[_],O=!0):T?(M=1,O=!0):D&&k>=0&&(d.strides[_]<0?M=-k:M=k,O=!0),O){let R;M===0||M<0!=d.strides[_]<0?R=0:R=Math.trunc(M/d.strides[_])+(M%d.strides[_]!==0?1:0),w.push(R)}else w.push(-1)}for(let _=0;_<d.finalShapeGatherIndices.length;++_){const T=d.finalShapeGatherIndices[_];T>=0?$.push(w[T]):T===NEW_AXIS&&$.push(1)}return{finalShapeSparse:$.filter((_,T)=>d.finalShapeGatherIndices[T]!==NEW_AXIS),finalShape:$,isIdentity:g,sliceDim0:x,isSimpleSlice:y,begin:d.begin,end:d.end,strides:d.strides}}function buildDenseSpec(n,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let t=0;e.beginValid=n.begin!=null,e.endValid=n.end!=null,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let r=0;r<n.dims;r++)if(1<<r&n.ellipsisMask){const s=Math.min(e.dims-(n.dims-r)+1+n.numAddAxisAfterEllipsis,e.dims);for(;t<s;t++)e.begin[t]=0,e.end[t]=0,e.strides[t]=1,e.beginMask|=1<<t,e.endMask|=1<<t,e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[t]=r}else if(1<<r&n.newAxisMask)e.finalShapeGatherIndices.push(NEW_AXIS),e.finalShapeGatherIndicesSparse.push(-1);else{if(t===e.begin.length)throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);n.begin!=null&&(e.begin[t]=n.begin[r]),n.end!=null&&(e.end[t]=n.end[r]),e.strides[t]=n.strides[r],n.beginMask&1<<r&&(e.beginMask|=1<<t),n.endMask&1<<r&&(e.endMask|=1<<t),n.shrinkAxisMask&1<<r?(e.finalShapeGatherIndices.push(SHRINK_AXIS),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<t):(e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(r)),e.inputShapeGatherIndicesSparse[t]=r,t++}}function canonical(n,e,t,r,s,i){if(s[e])return t>0?i[e]:i[e+1&1];{const o=n<0?r+n:n;return o<i[0]?i[0]:o>i[1]?i[1]:o}}var slice_util=Object.freeze({__proto__:null,assertParamsValid,computeFlatOffset,computeOutShape:computeOutShape$2,getNormalizedAxes,isSliceContinous,maskToAxes,parseSliceParams,sliceInfo,startForAxis,startIndicesWithElidedDims,stopForAxis,stopIndicesWithElidedDims,stridesForAxis,stridesWithElidedDims});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OptimizerConstructors{static sgd(e){return new SGDOptimizer(e)}static momentum(e,t,r=!1){return new MomentumOptimizer(e,t,r)}static rmsprop(e,t=.9,r=0,s=null,i=!1){return new RMSPropOptimizer(e,t,r,s,i)}static adam(e=.001,t=.9,r=.999,s=null){return new AdamOptimizer(e,t,r,s)}static adadelta(e=.001,t=.95,r=null){return new AdadeltaOptimizer(e,t,r)}static adamax(e=.002,t=.9,r=.999,s=null,i=0){return new AdamaxOptimizer(e,t,r,s,i)}static adagrad(e,t=.1){return new AdagradOptimizer(e,t)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const train=OptimizerConstructors;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const delayCallback=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function nextFrame(){return new Promise(n=>delayCallback(()=>n()))}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertParamsConsistent(n,e){const t=n[0].length;n.forEach((s,i)=>{assert$1(s.length===t,()=>`Error in concat${t}D: rank of tensors[${i}] must be the same as the rank of the rest (${t})`)}),assert$1(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);const r=n[0];n.forEach((s,i)=>{for(let o=0;o<t;o++)assert$1(o===e||s[o]===r[o],()=>`Error in concat${t}D: Shape of tensors[${i}] (${s}) does not match the shape of the rest (${r}) along the non-concatenated axis ${i}.`)})}function computeOutShape$1(n,e){const t=n[0].slice();for(let r=1;r<n.length;r++)t[e]+=n[r][e];return t}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$1;(function(n){n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS"})(RowPartitionType$1||(RowPartitionType$1={}));function combineRaggedTensorToTensorShapes(n,e,t){let r=new Array;if(t==null&&e==null)return r;if(e==null)for(;r.length<n+t.length;)r.push(-1);else r=e.slice();if(t==null)return r;if(n+t.length!==r.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${n+t.length}, but shape.rank = ${r.length}`);for(let s=1;s<t.length;++s){const i=t[s],o=r[r.length-t.length+s],a=r[o];if(i>=0)if(a>=0){if(a!==i)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${s+n}] = ${i} but shape[${s+n}] = ${a}`)}else r[o]=i}return r}function getRowPartitionTypesHelper(n){const e={FIRST_DIM_SIZE:RowPartitionType$1.FIRST_DIM_SIZE,VALUE_ROWIDS:RowPartitionType$1.VALUE_ROWIDS,ROW_LENGTHS:RowPartitionType$1.ROW_LENGTHS,ROW_SPLITS:RowPartitionType$1.ROW_SPLITS,ROW_LIMITS:RowPartitionType$1.ROW_LIMITS,ROW_STARTS:RowPartitionType$1.ROW_STARTS},t=[];for(const r of n)if(r in e)t.push(e[r]);else break;return t}function getRaggedRank(n){return n.length===0?0:n[0]===RowPartitionType$1.FIRST_DIM_SIZE?n.length-1:n.length}function validateDefaultValueShape(n,e){if(n==null||e==null)return;const t=n.length,r=e.length;if(t>=r)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(t,r-1);++s){const i=n[s],o=e[s+1];if(i>=0&&o>=0&&i!==1&&i!==o)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${s-n.length}] = ${i} but ragged tensor input.flatValues.shape[${s-n.length}] = ${o}`)}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PARALLELIZE_THRESHOLD=30;function computeOptimalWindowSize(n){return n<=PARALLELIZE_THRESHOLD?n:nearestDivisor(n,Math.floor(Math.sqrt(n)))}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getImageCenter(n,e,t){const r=t*(typeof n=="number"?n:n[0]),s=e*(typeof n=="number"?n:n[1]);return[r,s]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReshaped(n,e,t,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(n[0]/t),s=s.concat(n.slice(1));else{s=s.concat(n[0]);const i=e.length;for(let o=0;o<i;++o)s=s.concat([n[o+1]/e[o],e[o]]);s=s.concat(n.slice(i+1))}return s}function getPermuted(n,e,t=!0){const r=[];if(t){r.push(e);for(let s=e+1;s<n;++s)s<=2*e?(r.push(s),r.push(s-(e+1))):r.push(s)}else{const s=[],i=[];for(let o=1;o<n;++o)o>=e*2+1||o%2===1?i.push(o):s.push(o);r.push(...s),r.push(0),r.push(...i)}return r}function getReshapedPermuted(n,e,t,r=!0){const s=[];r?s.push(n[0]/t):s.push(n[0]*t);for(let i=1;i<n.length;++i)i<=e.length?r?s.push(e[i-1]*n[i]):s.push(n[i]/e[i-1]):s.push(n[i]);return s}function getSliceBeginCoords(n,e){const t=[0];for(let r=0;r<e;++r)t.push(n[r][0]);return t}function getSliceSize(n,e,t){const r=n.slice(0,1);for(let s=0;s<t;++s)r.push(n[s+1]-e[s][0]-e[s][1]);return r}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU_SCALEALPHA=1.7580993408473768,SELU_SCALE=1.0507009873554805;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF_P=.3275911,ERF_A1=.254829592,ERF_A2=-.284496736,ERF_A3=1.421413741,ERF_A4=-1.453152027,ERF_A5=1.061405429;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mergeRealAndImagArrays(n,e){if(n.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${e.length}.`);const t=new Float32Array(n.length*2);for(let r=0;r<t.length;r+=2)t[r]=n[r/2],t[r+1]=e[r/2];return t}function splitRealAndImagArrays(n){const e=new Float32Array(n.length/2),t=new Float32Array(n.length/2);for(let r=0;r<n.length;r+=2)e[r/2]=n[r],t[r/2]=n[r+1];return{real:e,imag:t}}function complexWithEvenIndex(n){const e=Math.ceil(n.length/4),t=new Float32Array(e),r=new Float32Array(e);for(let s=0;s<n.length;s+=4)t[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:t,imag:r}}function complexWithOddIndex(n){const e=Math.floor(n.length/4),t=new Float32Array(e),r=new Float32Array(e);for(let s=2;s<n.length;s+=4)t[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:t,imag:r}}function getComplexWithIndex(n,e){const t=n[e*2],r=n[e*2+1];return{real:t,imag:r}}function assignToTypedArray(n,e,t,r){n[r*2]=e,n[r*2+1]=t}function exponents(n,e){const t=new Float32Array(n/2),r=new Float32Array(n/2);for(let s=0;s<Math.ceil(n/2);s++){const i=(e?2:-2)*Math.PI*(s/n);t[s]=Math.cos(i),r[s]=Math.sin(i)}return{real:t,imag:r}}function exponent(n,e,t){const r=(t?2:-2)*Math.PI*(n/e),s=Math.cos(r),i=Math.sin(r);return{real:s,imag:i}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ARROW="->",ARROW_REGEX=/->/g,COMMA=",",ELLIPSIS="...";function decodeEinsumEquation(n,e){n=n.replace(/\s/g,"");const t=(n.length-n.replace(ARROW_REGEX,"").length)/ARROW.length;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);const[r,s]=n.split(ARROW);assert$1(r.indexOf(ELLIPSIS)===-1,()=>`The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);const i=r.split(COMMA),o=i.length;if(e!==o)throw new Error(`Expected ${o} input tensors, received ${e}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const a=[];for(let d=0;d<s.length;++d){const g=s[d];if(!i.some(x=>x.indexOf(g)!==-1))throw new Error(`Output subscripts contain the label ${g} not present in the input subscripts.`);a.indexOf(g)===-1&&a.push(g)}for(let d=0;d<r.length;++d){const g=r[d];a.indexOf(g)===-1&&g!==COMMA&&a.push(g)}const l=new Array(i.length);for(let d=0;d<o;++d){if(new Set(i[d].split("")).size!==i[d].length)throw new Error(`Found duplicate axes in input component ${i[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let g=0;g<i[d].length;++g)l[d].push(a.indexOf(i[d][g]))}const c=a.length,u=s.length,h=[];for(let d=u;d<c;++d)h.push(d);return{allDims:a,summedDims:h,idDims:l}}function getEinsumPermutation(n,e){let t=new Array(n);t.fill(-1);for(let s=0;s<e.length;++s)t[e[s]]=s;const r=[];for(let s=0;s<n;++s)t[s]===-1&&r.push(s);return t=t.filter(s=>s!==-1),{permutationIndices:t,expandDims:r}}function checkEinsumDimSizes(n,e,t){const r=new Array(n);for(let s=0;s<t.length;++s){const i=t[s].shape;for(let o=0;o<e[s].length;++o)r[e[s][o]]===void 0?r[e[s][o]]=i[o]:assert$1(r[e[s][o]]===i[o],()=>`Expected dimension ${r[e[s][o]]} at axis ${o} of input shaped ${JSON.stringify(i)}, but got dimension ${i[o]}`)}}function getEinsumComputePath(n,e){const t=n,r=[];let s=0;n.length===0&&t.push(-1),s=n.length+1;for(let o=0;o<s;++o)r.push([]);const i=[];for(let o=0;o<t.length;++o){const a=t[o],l=findTermsWithDim(e,a);for(const c of l)i.indexOf(c)===-1&&(r[o].push(c),i.push(c))}return{path:t,steps:r}}function isIdentityPermutation(n){return n.every((e,t)=>e===t)}function findTermsWithDim(n,e){const t=[];for(let r=0;r<n.length;++r)(n[r].length===0||n[r].indexOf(e)!==-1||e===-1)&&t.push(r);return t}function prepareSplitSize(n,e,t=0){let r=[];if(typeof e=="number")assert$1(n.shape[t]%e===0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(n.shape[t]/e);else{const s=e.reduce((o,a)=>(a===-1&&(o+=1),o),0);assert$1(s<=1,()=>"There should be only one negative value in split array.");const i=e.indexOf(-1);if(i!==-1){const o=e.reduce((a,l)=>l>0?a+l:a);e[i]=n.shape[t]-o}assert$1(n.shape[t]===e.reduce((o,a)=>o+a),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseFillEmptyRowsIndicesDenseShapeMismatch(n){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`}function getSparseFillEmptyRowsNegativeIndexErrorMessage(n,e){return`indices(${n}, 0) is invalid: ${e} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(n,e,t){return`indices(${n}, 0) is invalid: ${e} >= ${t}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(n,e){return`only one output dimension may be -1, not both ${n} and ${e}`}function getSparseReshapeNegativeOutputDimErrorMessage(n,e){return`size ${n} must be non-negative, not ${e}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage(n,e){const t=sizeFromShape(n),r=sizeFromShape(e);return`Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${r}. inputShape=${n} outputShape= ${e}`}function getSparseReshapeInputOutputMismatchErrorMessage(n,e){const t=sizeFromShape(n),r=sizeFromShape(e);return`Input to reshape is a tensor with ${t} dense values, but the requested shape has ${r}. inputShape=${n} outputShape=${e}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseSegmentReductionNegativeSegmentIdsErrorMessage(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(n,e){return`Segment id ${n} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,e,t){return`Bad: indices[${n}] == ${e} out of range [0, ${t})`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function segOpComputeOptimalWindowSize(n,e){let t=!1,r;for(n<=PARALLELIZE_THRESHOLD?(r=n,t=!0):r=nearestDivisor(n,Math.floor(Math.sqrt(n)));!t;)r>e||r===n?t=!0:r=nearestDivisor(n,r+1);return r}function computeOutShape(n,e,t){const r=[],s=n.length;for(let i=0;i<s;i++)i!==e?r.push(n[i]):r.push(t);return r}function collectGatherOpShapeInfo(n,e,t,r){const s=e.shape.length,i=n.shape.length;if(r!==0&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>i)throw new Error(`batchDims (${r}) must be less than rank(x) (
    ${i}).`);if(t<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${t}).`);for(let h=0;h<r;++h)if(n.shape[h]!==e.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${e.shape[h]}.`);const o=n.shape[t],a=[];let l=1,c=1,u=1;for(let h=0;h<r;++h)a.push(n.shape[h]),l*=n.shape[h];for(let h=r;h<t;h++)a.push(n.shape[h]),c*=n.shape[h];for(let h=r;h<s;h++)a.push(e.shape[h]);for(let h=t+1;h<i;h++)a.push(n.shape[h]),u*=n.shape[h];return{batchSize:l,sliceSize:u,outerSize:c,dimSize:o,outputShape:a}}var segment_util=Object.freeze({__proto__:null,collectGatherOpShapeInfo,computeOutShape,segOpComputeOptimalWindowSize});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fromUint8ToStringArray(n){try{return n.map(e=>decodeString(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function fromStringArrayToUint8(n){return n.map(e=>encodeString(e))}var backend_util=Object.freeze({__proto__:null,ERF_A1,ERF_A2,ERF_A3,ERF_A4,ERF_A5,ERF_P,PARALLELIZE_THRESHOLD,get RowPartitionType(){return RowPartitionType$1},SELU_SCALE,SELU_SCALEALPHA,applyActivation:applyActivation$1,assertAndGetBroadcastShape,assertAxesAreInnerMostDims,assertParamsConsistent,assignToTypedArray,axesAreInnerMostDims,calculateShapes,checkEinsumDimSizes,checkPadOnDimRoundingMode,combineLocations,combineRaggedTensorToTensorShapes,complexWithEvenIndex,complexWithOddIndex,computeConv2DInfo,computeConv3DInfo,computeDefaultPad,computeDilation2DInfo,computeOptimalWindowSize,computeOutAndReduceShapes,computeOutShape:computeOutShape$1,computePool2DInfo,computePool3DInfo,convertConv2DDataFormat,decodeEinsumEquation,eitherStridesOrDilationsAreOne,expandShapeToKeepDim,exponent,exponents,fromStringArrayToUint8,fromUint8ToStringArray,getAxesPermutation,getBroadcastDims:getBroadcastDims$1,getComplexWithIndex,getEinsumComputePath,getEinsumPermutation,getFusedBiasGradient,getFusedDyActivation,getImageCenter,getInnerMostAxes,getPermuted,getRaggedRank,getReductionAxes,getReshaped,getReshapedPermuted,getRowPartitionTypesHelper,getSliceBeginCoords,getSliceSize,getSparseFillEmptyRowsIndicesDenseShapeMismatch,getSparseFillEmptyRowsNegativeIndexErrorMessage,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage,getSparseReshapeInputOutputMismatchErrorMessage,getSparseReshapeInputOutputMultipleErrorMessage,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage,getSparseReshapeNegativeOutputDimErrorMessage,getSparseSegmentReductionIndicesOutOfRangeErrorMessage,getSparseSegmentReductionNegativeSegmentIdsErrorMessage,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage,getUndoAxesPermutation,isIdentityPermutation,log:log$3,mergeRealAndImagArrays,prepareAndValidate,prepareSplitSize,segment_util,shouldFuse,slice_util,splitRealAndImagArrays,stridesOrDilationsArePositive,tupleValuesAreOne,upcastType,validateDefaultValueShape,validateInput,validateUpdateShape,warn});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerOptimizers();/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const absGradConfig={kernelName:Abs,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,step$2(cast$3(t,"float32"),-1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosGradConfig={kernelName:Acos,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=square$2(cast$3(t,"float32")),s=sqrt$2(sub$2(scalar(1),r));return neg$2(div$1(n,s))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acoshGradConfig={kernelName:Acosh,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=sqrt$2(sub$2(square$2(cast$3(t,"float32")),1));return div$1(n,r)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addGradConfig={kernelName:Add$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{let a=n;const l=getReductionAxes(t.shape,s);return l.length>0&&(a=sum$3(a,l)),reshape$2(a,t.shape)},b:()=>{let a=n;const l=getReductionAxes(r.shape,s);return l.length>0&&(a=sum$3(a,l)),reshape$2(a,r.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addNGradConfig={kernelName:AddN,saveAllInputs:!0,gradFunc:(n,e)=>{const t={};return e.forEach((r,s)=>{t[s]=()=>n.clone()}),t}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMaxGradConfig={kernelName:ArgMax,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>zerosLike$2(t)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMinGradConfig={kernelName:ArgMin,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>zerosLike$2(t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinGradConfig={kernelName:Asin,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,sqrt$2(sub$2(scalar(1),square$2(cast$3(t,"float32")))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinhGradConfig={kernelName:Asinh,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=sqrt$2(add$2(scalar(1),square$2(cast$3(t,"float32"))));return div$1(n,r)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2GradConfig={kernelName:Atan2,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{const a=add$2(square$2(t),square$2(r));let l=mul(n,div$1(r,a));const c=getReductionAxes(t.shape,s);return c.length>0&&(l=sum$3(l,c)),reshape$2(l,t.shape)},b:()=>{const a=add$2(square$2(t),square$2(r));let l=neg$2(mul(n,div$1(t,a)));const c=getReductionAxes(r.shape,s);return c.length>0&&(l=sum$3(l,c)),reshape$2(l,r.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanGradConfig={kernelName:Atan,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,add$2(square$2(cast$3(t,"float32")),1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanhGradConfig={kernelName:Atanh,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,sub$2(scalar(1),square$2(cast$3(t,"float32"))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3dGrad_(n,e,t,r,s,i){const o=convertToTensor(n,"dy","avgPool3dGrad"),a=convertToTensor(e,"input","avgPool3dGrad");let l=o,c=a,u=!1;a.rank===4&&(u=!0,l=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),assert$1(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),assert$1(c.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`),checkPadOnDimRoundingMode("avgPool3dGrad",s,i);const h={dy:l,input:c},d={filterSize:t,strides:r,pad:s,dimRoundingMode:i},g=ENGINE.runKernel(AvgPool3DGrad,h,d);return u?reshape$2(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}const avgPool3dGrad=op({avgPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPool3DGradConfig$2={kernelName:AvgPool3D,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{filterSize:s,strides:i,pad:o,dimRoundingMode:a}=t;return{x:()=>avgPool3dGrad(n,r,s,i,o,a)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad_(n,e,t,r,s){const i=convertToTensor(n,"dy","avgPoolGrad"),o=convertToTensor(e,"input","avgPoolGrad");assert$1(o.rank===i.rank,()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`);let a=o,l=i,c=!1;o.rank===3&&(c=!0,a=reshape$2(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=reshape$2(i,[1,i.shape[0],i.shape[1],i.shape[2]])),assert$1(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),assert$1(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);const u={dy:l,input:a},h={filterSize:t,strides:r,pad:s},d=ENGINE.runKernel(AvgPoolGrad,u,h);return c?reshape$2(d,[d.shape[1],d.shape[2],d.shape[3]]):d}const avgPoolGrad$2=op({avgPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPoolGradConfig$2={kernelName:AvgPool,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{filterSize:s,strides:i,pad:o}=t;return{x:()=>avgPoolGrad$2(n,r,s,i,o)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchMatMulGradConfig={kernelName:BatchMatMul,inputsToSave:["a","b"],gradFunc:(n,e,t)=>{const[r,s]=e,{transposeA:i,transposeB:o}=t;return!i&&!o?{a:()=>matMul$1(n,s,!1,!0),b:()=>matMul$1(r,n,!0,!1)}:!i&&o?{a:()=>matMul$1(n,s,!1,!1),b:()=>matMul$1(n,r,!0,!1)}:i&&!o?{a:()=>matMul$1(s,n,!1,!0),b:()=>matMul$1(r,n,!1,!1)}:{a:()=>matMul$1(s,n,!0,!0),b:()=>matMul$1(n,r,!0,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceNDGradConfig={kernelName:BatchToSpaceND,gradFunc:(n,e,t)=>{const{blockShape:r,crops:s}=t;return{x:()=>spaceToBatchND$2(n,r,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const broadcastToGradConfig={kernelName:BroadcastTo,gradFunc:(n,e,t)=>{const r=t,s=r.inputShape,i=r.shape,o=Array.from(i);for(let l=s.length-1;l>=0;l--)if(s[l]===i[l])o[l]=1;else if(s[l]!==1)throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${i}].`);const a=[];for(let l=0;l<o.length;l++)o[l]>1&&a.push(l);return{x:()=>sum$3(n,a,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const castGradConfig={kernelName:Cast,gradFunc:n=>({x:()=>n.clone()})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilGradConfig={kernelName:Ceil,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValueGradConfig={kernelName:ClipByValue,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{clipValueMin:s,clipValueMax:i}=t;return{x:()=>where(logicalAnd$2(greaterEqual$2(r,s),lessEqual$2(r,i)),n,zerosLike$2(n))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbsGradConfig={kernelName:ComplexAbs,inputsToSave:["x"],gradFunc:absGradConfig.gradFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const concatGradConfig={kernelName:Concat,saveAllInputs:!0,gradFunc:(n,e,t)=>{const r=e.map(l=>l.shape),{axis:s}=t,i=parseAxisParam(s,e[0].shape)[0],o=r.map(l=>l[i]);return split$2(n,o,i).map(l=>()=>l)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DGradConfig={kernelName:Conv2D$1,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,{dilations:i,strides:o,pad:a,dataFormat:l}=t;return assert$1(tupleValuesAreOne(i),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`),{x:()=>conv2DBackpropInput$2(r.shape,n,s,o,a,l),filter:()=>conv2DBackpropFilter$2(r,n,s.shape,o,a,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DBackpropInputGradConfig={kernelName:Conv2DBackpropInput,inputsToSave:["dy","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,{strides:i,pad:o,dataFormat:a,dimRoundingMode:l}=t;return{dy:()=>conv2d$2(n,s,i,o,a,1,l),filter:()=>conv2DBackpropFilter$2(n,r,s.shape,i,o,a,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilter_(n,e,t,r,s){let i=n;n.rank===4&&(i=reshape$2(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let o=e;o.rank===4&&(o=reshape$2(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),assert$1(i.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`),assert$1(o.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`),assert$1(t.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`),assert$1(i.shape[4]===t[3],()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${t[3]}.`),assert$1(o.shape[4]===t[4],()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${t[4]}).`);const a={x:i,dy:o},l={strides:r,pad:s,filterShape:t};return ENGINE.runKernel(Conv3DBackpropFilterV2,a,l)}const conv3DBackpropFilter=op({conv3DBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv3DGradConfig={kernelName:Conv3D$1,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const{dilations:r,strides:s,pad:i}=t;assert$1(tupleValuesAreOne(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[o,a]=e;return{x:()=>conv3DBackpropInput$1(o.shape,n,a,s,i),filter:()=>conv3DBackpropFilter(o,n,a.shape,s,i)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosGradConfig={kernelName:Cos,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(neg$2(sin$2(cast$3(t,"float32"))),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const coshGradConfig={kernelName:Cosh,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(sinh$2(cast$3(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cumsumGradConfig={kernelName:Cumsum,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s,exclusive:i,reverse:o}=t;return{x:()=>{const a=getAxesPermutation([s],r.rank);let l=cumsum$2(n,s,i,!o);return a!=null&&(l=transpose$2(l,a)),l}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const depthwiseConv2dNativeGradConfig={kernelName:DepthwiseConv2dNative,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const{dilations:r,strides:s,pad:i,dimRoundingMode:o}=t,a=r??[1,1];assert$1(tupleValuesAreOne(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[l,c]=e;return assert$1(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),assert$1(c.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`),assert$1(l.shape[3]===c.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`),assert$1(eitherStridesOrDilationsAreOne(s,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${a}'.`),checkPadOnDimRoundingMode("depthwiseConv2d",i,o),{x:()=>depthwiseConv2dNativeBackpropInput$2(l.shape,n,c,s,i,a,o),filter:()=>depthwiseConv2dNativeBackpropFilter$2(l,n,c.shape,s,i,a,o)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2dGradConfig={kernelName:Dilation2D,inputsToSave:["x","filter"],gradFunc:(n,e,t)=>{const[r,s]=e,i={x:r,filter:s,dy:n},o={x:r,filter:s,dy:n};return{x:()=>ENGINE.runKernel(Dilation2DBackpropInput,i,t),filter:()=>ENGINE.runKernel(Dilation2DBackpropFilter,o,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const eluGradConfig$2={kernelName:Elu$1,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e,r={dy:n,y:t};return{x:()=>ENGINE.runKernel(EluGrad,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const erfGradConfig={kernelName:Erf,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e,r=mul(exp$2(neg$2(square$2(t))),2/Math.sqrt(Math.PI));return{x:()=>mul(n,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expGradConfig={kernelName:Exp,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expandDimsGradConfig={kernelName:ExpandDims,inputsToSave:["input"],gradFunc:(n,e)=>{const[t]=e;return{input:()=>reshape$2(n,t.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1GradConfig={kernelName:Expm1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,exp$2(t))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorGradConfig={kernelName:Floor,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivGradConfig={kernelName:FloorDiv,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{const a=div$1(n,cast$3(r,"float32")),l=getReductionAxes(t.shape,s);return l.length>0?reshape$2(sum$3(a,l),t.shape):a},b:()=>{let a=mul(n,cast$3(t,"float32"));const l=getReductionAxes(r.shape,s);l.length>0&&(a=reshape$2(sum$3(a,l),r.shape));const c=square$2(r);return neg$2(div$1(a,cast$3(c,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fusedBatchNormGradConfig={kernelName:FusedBatchNorm,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,e,t)=>{const{varianceEpsilon:r}=t,[s,i,o,a]=e,l=a??scalar(1),c=getReductionAxes(i.shape,s.shape),u=[];if(i.rank===1){for(let T=0;T<s.shape.length-1;++T)u.push(s.shape[T]);u.push(1)}const h=sub$2(s,i),d=mul(n,l),g=rsqrt$2(add$2(o,scalar(r))),x=mul(mul(mul(g,g),g),scalar(-.5));return{x:()=>i.rank===1?reshape$2(mul(mul(n,tile$3(reshape$2(g,[1,1,1,i.shape[0]]),u)),l),s.shape):reshape$2(mul(mul(n,g),l),s.shape),mean:()=>{let T=mul(mul(g,scalar(-1)),d);return i.rank===1&&(T=sum$3(T,c)),reshape$2(T,i.shape)},variance:()=>{let T=mul(mul(x,h),d);return i.rank===1&&(T=sum$3(T,c)),reshape$2(T,i.shape)},scale:()=>{const T=mul(h,g);let k=mul(n,T);return i.rank===1&&(k=sum$3(k,c)),reshape$2(k,i.shape)},offset:()=>{let T=n;return i.rank===1&&(T=sum$3(T,c)),reshape$2(T,i.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gatherGradConfig={kernelName:GatherV2,inputsToSave:["x","indices"],gradFunc:(n,e,t)=>{const[r,s]=e,{axis:i}=t,o=parseAxisParam(i,r.shape)[0];return{x:()=>{const l=r.shape,c=s.size,u=l.slice(0,o),h=u.length,d=l.slice(i,l.length).slice(1),g=d.length,x=arrayRange(0,h),y=arrayRange(h+1,h+1+g),w=arrayConcat([u,[c],d]),$=reshape$2(n,w),S=reshape$2(s,[c]),_=arrayConcat([[h],x,y]),T=transpose$2($,_);let k=unsortedSegmentSum$2(T,S,r.shape[o]);const P=getUndoAxesPermutation(_);return k=transpose$2(k,P),k},indices:()=>s}}};function arrayRange(n,e){const t=[];for(let r=n;r<e;++r)t.push(r);return t}function arrayConcat(n){const e=[];for(let t=0;t<n.length;++t)for(let r=0;r<n[t].length;++r)e.push(n[t][r]);return e}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualGradConfig={kernelName:GreaterEqual,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>zerosLike$2(t),b:()=>zerosLike$2(r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const identityGradConfig={kernelName:Identity$1,gradFunc:n=>({x:()=>cast$3(n,"float32")})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFiniteGradConfig={kernelName:IsFinite,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInfGradConfig={kernelName:IsInf,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNanGradConfig={kernelName:IsNan,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const leakyReluGradConfig={kernelName:LeakyRelu,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{alpha:s}=t,i=greater$2(r,0);return{x:()=>where(i,n,mul(n,s))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1pGradConfig={kernelName:Log1p,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,add$2(t,1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logGradConfig={kernelName:Log,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,cast$3(t,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logSoftmaxGradConfig={kernelName:LogSoftmax$1,inputsToSave:[],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t;return{logits:()=>{const o=exp$2(r);return sub$2(n,mul(sum$3(n,s,!0),o))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalizationBackprop_(n,e,t,r=5,s=1,i=1,o=.5){const a={x:n,y:e,dy:t},l={depthRadius:r,bias:s,alpha:i,beta:o};return ENGINE.runKernel(LRNGrad,a,l)}const localResponseNormalizationBackprop=op({localResponseNormalizationBackprop_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGradConfig={kernelName:LRN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{depthRadius:i,bias:o,alpha:a,beta:l}=t;return{x:()=>localResponseNormalizationBackprop(r,s,n,i,o,a,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gradForMinAndMax(n,e,t,r){return e.rank<t.rank&&(e=reshape$2(e,expandShapeToKeepDim(e.shape,r))),n.rank<t.rank&&(n=reshape$2(n,expandShapeToKeepDim(n.shape,r))),{x:()=>mul(n,cast$3(equal$2(t,e),n.dtype))}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxGradConfig={kernelName:Max,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const r=t,{reductionIndices:s}=r,i=e[0],o=e[1],a=parseAxisParam(s,i.shape),l=gradForMinAndMax(n,o,i,a);return{x:()=>l.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumGradConfig={kernelName:Maximum$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>mul(n,cast$3(greaterEqual$2(t,r),"float32")),b:()=>mul(n,cast$3(less$2(t,r),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3dGrad_(n,e,t,r,s,i,o){const a=convertToTensor(n,"dy","maxPool3dGrad"),l=convertToTensor(e,"input","maxPool3dGrad"),c=convertToTensor(t,"output","maxPool3dGrad");let u=a,h=l,d=c,g=!1;l.rank===4&&(g=!0,u=reshape$2(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),h=reshape$2(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=reshape$2(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),assert$1(u.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`),assert$1(h.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),assert$1(d.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),checkPadOnDimRoundingMode("maxPool3dGrad",i,o);const x={dy:u,input:h,output:d},y={filterSize:r,strides:s,pad:i,dimRoundingMode:o},w=ENGINE.runKernel(MaxPool3DGrad,x,y);return g?reshape$2(w,[w.shape[1],w.shape[2],w.shape[3],w.shape[4]]):w}const maxPool3dGrad=op({maxPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPool3DGradConfig$2={kernelName:MaxPool3D,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:l}=t;return{x:()=>maxPool3dGrad(n,r,s,i,o,a,l)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad_(n,e,t,r,s,i,o){const a=convertToTensor(n,"dy","maxPoolGrad"),l=convertToTensor(e,"input","maxPoolGrad"),c=convertToTensor(t,"output","maxPoolGrad");assert$1(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),assert$1(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),assert$1(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),checkPadOnDimRoundingMode("maxPoolGrad",i,o);const u={dy:a,input:l,output:c},h={filterSize:r,strides:s,pad:i,dimRoundingMode:o};return ENGINE.runKernel(MaxPoolGrad,u,h)}const maxPoolGrad$2=op({maxPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolGradConfig$2={kernelName:MaxPool,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r,s]=e,{filterSize:i,strides:o,pad:a}=t;return{x:()=>maxPoolGrad$2(n,r,s,i,o,a)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanGradConfig={kernelName:Mean,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t,i=parseAxisParam(s,r.shape),a=computeOutAndReduceShapes(r.shape,i)[1],l=sizeFromShape(a);return{x:()=>{const u=r.shape.slice();i.forEach(g=>{u[g]=1});const h=reshape$2(n,u);return div$1(mul(h,ones(r.shape,"float32")),l)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minGradConfig={kernelName:Min,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,e,t)=>{const r=t,{axis:s}=r,[i,o]=e,a=parseAxisParam(s,i.shape),l=gradForMinAndMax(n,o,i,a);return{x:()=>l.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumGradConfig={kernelName:Minimum$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e;return{a:()=>mul(n,cast$3(lessEqual$2(t,r),"float32")),b:()=>mul(n,cast$3(greater$2(t,r),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadGradConfig={kernelName:MirrorPad,inputsToSave:["x"],gradFunc:(n,e,t)=>{const r=e[0],{paddings:s}=t,i=s.map(o=>o[0]);return{x:()=>slice$2(n,i,r.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modGradConfig={kernelName:Mod,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{const a=getReductionAxes(t.shape,s);return a.length>0?reshape$2(sum$3(n,a),t.shape):n},b:()=>{const a=mul(n,neg$2(floor$2(div$1(t,r)))),l=getReductionAxes(r.shape,s);return l.length>0?reshape$2(sum$3(a,l),r.shape):a}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyGradConfig={kernelName:Multiply$1,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{const a=mul(n,cast$3(r,"float32")),l=getReductionAxes(t.shape,s);return l.length>0?reshape$2(sum$3(a,l),t.shape):a},b:()=>{const a=mul(n,cast$3(t,"float32")),l=getReductionAxes(r.shape,s);return l.length>0?reshape$2(sum$3(a,l),r.shape):a}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const negGradConfig={kernelName:Neg,gradFunc:n=>({x:()=>neg$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHotGradConfig={kernelName:OneHot,inputsToSave:["indices"],gradFunc:(n,e)=>{const t=e[0];return{indices:()=>zeros$1(t.shape,"float32")}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const onesLikeGradConfig={kernelName:OnesLike,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const packGradConfig={kernelName:Pack,saveAllInputs:!0,gradFunc:(n,e,t)=>{const{axis:r}=t;return unstack(n,r).map(i=>()=>i)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2GradConfig={kernelName:PadV2,inputsToSave:["x"],gradFunc:(n,e,t)=>{const r=e[0],{paddings:s}=t,i=s.map(o=>o[0]);return{x:()=>slice$2(n,i,r.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powGradConfig={kernelName:Pow,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,e)=>{const[t,r,s]=e,i=t,o=r,a=assertAndGetBroadcastShape(i.shape,o.shape);return{a:()=>{const u=cast$3(o,"float32");let h=mul(n,mul(u,pow$2(i,sub$2(u,scalar(1)))));const d=getReductionAxes(i.shape,a);return d.length>0&&(h=sum$3(h,d)),reshape$2(h,i.shape)},b:()=>{const u=greater$2(i,0),h=where(u,log$2(i),zerosLike$2(i));let d=mul(n,mul(s,h));const g=getReductionAxes(o.shape,a);return g.length>0&&(d=sum$3(d,g)),reshape$2(d,o.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluGradConfig={kernelName:Prelu,inputsToSave:["x","alpha"],gradFunc:(n,e)=>{const[t,r]=e,s=greater$2(t,0);return{x:()=>where(s,n,mul(n,r)),alpha:()=>{let i=where(s,zerosLike$2(n),mul(n,t));const o=getReductionAxes(r.shape,n.shape);return o.length>0&&(i=sum$3(i,o)),reshape$2(i,r.shape)}}}};/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodGradFn_(n,e,t){const r=n.shape.slice();r[t]=1;const s=reshape$2(e,r),i=cumprod$2(n,t,!0,!1),o=cumprod$2(n,t,!0,!0),a=mul(i,o);return mul(s,a)}function prodsGradFn_(n,e,t){const r=n.shape.length,s=r-t.length,i=getAxesPermutation(t,r);let o=n;i!=null&&(o=transpose$2(n,i));const a=o.shape.slice(),c=a.splice(r-t.length,t.length).reduce((d,g)=>d*g,1);a.push(c);const u=o.reshape(a);let h=prodGradFn_(u,e,s);if(h=h.reshape(o.shape),i!=null){const d=getUndoAxesPermutation(i);h=transpose$2(h,d)}return h}const prodGradConfig={kernelName:Prod,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{axis:s}=t;let i=[];return s==null?i=r.shape.map((o,a)=>a):typeof s=="number"?i=[s]:i=s,{x:()=>prodsGradFn_(r,n,i)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const divGradConfig={kernelName:RealDiv,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{const a=div$1(n,cast$3(r,"float32")),l=getReductionAxes(t.shape,s);return l.length>0?reshape$2(sum$3(a,l),t.shape):a},b:()=>{let a=mul(n,cast$3(t,"float32"));const l=getReductionAxes(r.shape,s);l.length>0&&(a=reshape$2(sum$3(a,l),r.shape));const c=square$2(r);return neg$2(div$1(a,cast$3(c,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocalGradConfig={kernelName:Reciprocal,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,neg$2(square$2(t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6GradConfig={kernelName:Relu6$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e,r=mul(lessEqual$2(t,6),step$2(t));return{x:()=>mul(n,cast$3(r,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reluGradConfig={kernelName:Relu$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,cast$3(step$2(t),"float32"))}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reshapeGradConfig={kernelName:Reshape$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>reshape$2(n,t.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeBilinearGradConfig$2={kernelName:ResizeBilinear,inputsToSave:["images"],gradFunc:(n,e,t)=>{const[r]=e,s={dy:n,images:r};return{images:()=>ENGINE.runKernel(ResizeBilinearGrad,s,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeNearestNeighborGradConfig$2={kernelName:ResizeNearestNeighbor,inputsToSave:["images"],gradFunc:(n,e,t)=>{const[r]=e,s={dy:n,images:r};return{images:()=>ENGINE.runKernel(ResizeNearestNeighborGrad,s,t)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reverseGradConfig={kernelName:Reverse,gradFunc:(n,e,t)=>{const{dims:r}=t,s=parseAxisParam(r,n.shape);return{x:()=>reverse$2(n,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const roundGradConfig={kernelName:Round,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtGradConfig={kernelName:Rsqrt,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>neg$2(div$1(n,mul(pow$2(t,1.5),2)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const selectGradConfig={kernelName:Select,inputsToSave:["condition"],gradFunc:(n,e)=>{const[t]=e;return{condition:()=>cast$3(zerosLike$2(t),"float32"),t:()=>mul(n,cast$3(t,n.dtype)),e:()=>mul(n,cast$3(logicalNot$2(t),n.dtype))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const seluGradConfig={kernelName:Selu$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>{const r=greater$2(t,scalar(0)),s=scalar(SELU_SCALEALPHA),i=scalar(SELU_SCALE),o=mul(n,i),a=mul(mul(n,s),exp$2(cast$3(t,"float32")));return where(r,o,a)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidGradConfig={kernelName:Sigmoid$1,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,mul(t,sub$2(scalar(1),t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const signGradConfig={kernelName:Sign,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinGradConfig={kernelName:Sin,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(cos$2(cast$3(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinhGradConfig={kernelName:Sinh,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(cosh$2(cast$3(t,"float32")),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sliceGradConfig={kernelName:Slice,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{begin:s,size:i}=t,o=r.shape,[a,l]=parseSliceParams(r,s,i),c=[];for(let u=0;u<n.rank;u++)c.push([a[u],o[u]-a[u]-l[u]]);return{x:()=>pad$1(n,c)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softmaxGradConfig={kernelName:Softmax$2,outputsToSave:[!0],gradFunc:(n,e,t)=>{const[r]=e,{dim:s}=t,i=!0,o=mul(n,r);return{logits:()=>sub$2(o,mul(sum$3(o,[s],i),r))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softplusGradConfig={kernelName:Softplus$1,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,sigmoid$2(t))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchNDGradConfig={kernelName:SpaceToBatchND,gradFunc:(n,e,t)=>{const{blockShape:r,paddings:s}=t;return{x:()=>batchToSpaceND$2(n,r,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const splitVGradConfig={kernelName:SplitV,gradFunc:(n,e,t)=>{const{axis:r}=t;return{x:()=>concat$2(n,r)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtGradConfig={kernelName:Sqrt,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,mul(sqrt$2(cast$3(t,"float32")),2))}}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareGradConfig={kernelName:Square,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(n,mul(cast$3(t,"float32"),2))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceGradConfig={kernelName:SquaredDifference,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=scalar(2);return{a:()=>mul(n,mul(s,sub$2(t,r))),b:()=>mul(n,mul(s,sub$2(r,t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const stepGradConfig={kernelName:Step,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subGradConfig={kernelName:Sub,inputsToSave:["a","b"],gradFunc:(n,e)=>{const[t,r]=e,s=assertAndGetBroadcastShape(t.shape,r.shape);return{a:()=>{let a=n;const l=getReductionAxes(t.shape,s);return l.length>0&&(a=sum$3(a,l)),reshape$2(a,t.shape)},b:()=>{let a=n;const l=getReductionAxes(r.shape,s);return l.length>0&&(a=sum$3(a,l)),reshape$2(neg$2(a),r.shape)}}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sumGradConfig={kernelName:Sum,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,s=r.shape.slice(),{axis:i}=t;parseAxisParam(i,r.shape).forEach(c=>{s[c]=1});const a=reshape$2(n,s),l=mul(a,ones(r.shape,"float32"));return{x:()=>l}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanGradConfig={kernelName:Tan,inputsToSave:["x"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>div$1(n,square$2(cos$2(t)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanhGradConfig={kernelName:Tanh$1,outputsToSave:[!0],gradFunc:(n,e)=>{const[t]=e;return{x:()=>mul(sub$2(scalar(1),square$2(t)),n)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tileGradConfig={kernelName:Tile,inputsToSave:["x"],gradFunc:(n,e,t)=>{const[r]=e,{reps:s}=t;return{x:()=>{let o=zerosLike$2(r);if(r.rank===1)for(let a=0;a<s[0];++a)o=add$2(o,slice$2(n,[a*r.shape[0]],[r.shape[0]]));else if(r.rank===2)for(let a=0;a<s[0];++a)for(let l=0;l<s[1];++l)o=add$2(o,slice$2(n,[a*r.shape[0],l*r.shape[1]],[r.shape[0],r.shape[1]]));else if(r.rank===3)for(let a=0;a<s[0];++a)for(let l=0;l<s[1];++l)for(let c=0;c<s[2];++c)o=add$2(o,slice$2(n,[a*r.shape[0],l*r.shape[1],c*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else if(r.rank===4)for(let a=0;a<s[0];++a)for(let l=0;l<s[1];++l)for(let c=0;c<s[2];++c)for(let u=0;u<s[3];++u)o=add$2(o,slice$2(n,[a*r.shape[0],l*r.shape[1],c*r.shape[2],u*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);return o}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const transposeGradConfig={kernelName:Transpose,gradFunc:(n,e,t)=>{const r=t,{perm:s}=r,i=getUndoAxesPermutation(s);return{x:()=>transpose$2(n,i)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unpackGradConfig={kernelName:Unpack,gradFunc:(n,e,t)=>{const r=t,{axis:s}=r;return{value:()=>stack(n,s)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unsortedSegmentSumGradConfig={kernelName:UnsortedSegmentSum,inputsToSave:["segmentIds"],gradFunc:(n,e)=>{const[t]=e;return{x:()=>gatherDropNegatives(n,t)}}};function gatherDropNegatives(n,e){const t=maximum$2(e,zerosLike$2(e)),r=gather$1(n,t);let s=greaterEqual$2(e,scalar(0,"int32"));const i=r.rank-s.rank;for(let a=0;a<i;++a)s=expandDims$3(s,a+1);s=logicalAnd$2(s,ones(r.shape,"bool"));const o=zerosLike$2(r);return where(s,r,o)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const zerosLikeGradConfig={kernelName:ZerosLike,gradFunc:n=>({x:()=>zerosLike$2(n)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gradConfigs=[absGradConfig,acosGradConfig,acoshGradConfig,addGradConfig,addNGradConfig,argMaxGradConfig,argMinGradConfig,asinGradConfig,asinhGradConfig,atan2GradConfig,atanGradConfig,atanhGradConfig,avgPool3DGradConfig$2,avgPoolGradConfig$2,batchMatMulGradConfig,batchToSpaceNDGradConfig,broadcastToGradConfig,castGradConfig,ceilGradConfig,clipByValueGradConfig,complexAbsGradConfig,concatGradConfig,conv2DBackpropInputGradConfig,conv2DGradConfig,conv3DGradConfig,cosGradConfig,coshGradConfig,cumsumGradConfig,depthwiseConv2dNativeGradConfig,dilation2dGradConfig,divGradConfig,eluGradConfig$2,erfGradConfig,expGradConfig,expandDimsGradConfig,expm1GradConfig,floorDivGradConfig,floorGradConfig,fusedBatchNormGradConfig,gatherGradConfig,greaterEqualGradConfig,identityGradConfig,isFiniteGradConfig,isInfGradConfig,isNanGradConfig,leakyReluGradConfig,log1pGradConfig,logGradConfig,logSoftmaxGradConfig,lrnGradConfig,maxGradConfig,maxGradConfig,maximumGradConfig,maxPool3DGradConfig$2,maxPoolGradConfig$2,meanGradConfig,minGradConfig,minimumGradConfig,mirrorPadGradConfig,modGradConfig,multiplyGradConfig,negGradConfig,oneHotGradConfig,onesLikeGradConfig,packGradConfig,padV2GradConfig,padV2GradConfig,powGradConfig,preluGradConfig,prodGradConfig,reciprocalGradConfig,relu6GradConfig,reluGradConfig,reshapeGradConfig,resizeBilinearGradConfig$2,resizeNearestNeighborGradConfig$2,reverseGradConfig,roundGradConfig,rsqrtGradConfig,selectGradConfig,seluGradConfig,sigmoidGradConfig,signGradConfig,sinGradConfig,sinhGradConfig,sliceGradConfig,softmaxGradConfig,softplusGradConfig,spaceToBatchNDGradConfig,spaceToBatchNDGradConfig,splitVGradConfig,splitVGradConfig,sqrtGradConfig,squaredDifferenceGradConfig,squareGradConfig,stepGradConfig,subGradConfig,sumGradConfig,tanGradConfig,tanhGradConfig,tileGradConfig,transposeGradConfig,unpackGradConfig,unsortedSegmentSumGradConfig,zerosLikeGradConfig];for(const n of gradConfigs)registerGradient(n);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.abs=function(){return this.throwIfDisposed(),abs$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.acos=function(){return this.throwIfDisposed(),acos$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.acosh=function(){return this.throwIfDisposed(),acosh$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.add=function(n){return this.throwIfDisposed(),add$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.all=function(n,e){return this.throwIfDisposed(),all$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.any=function(n,e){return this.throwIfDisposed(),any$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.argMax=function(n){return this.throwIfDisposed(),argMax$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.argMin=function(n){return this.throwIfDisposed(),argMin$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.asScalar=function(){return this.throwIfDisposed(),assert$1(this.size===1,()=>"The array must have only 1 element."),reshape$2(this,[])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.asType=function(n){return this.throwIfDisposed(),cast$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.as1D=function(){return this.throwIfDisposed(),reshape$2(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.as2D=function(n,e){return this.throwIfDisposed(),reshape$2(this,[n,e])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.as3D=function(n,e,t){return this.throwIfDisposed(),reshape$2(this,[n,e,t])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.as4D=function(n,e,t,r){return this.throwIfDisposed(),reshape$2(this,[n,e,t,r])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.as5D=function(n,e,t,r,s){return this.throwIfDisposed(),reshape$2(this,[n,e,t,r,s])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.asin=function(){return this.throwIfDisposed(),asin$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.asinh=function(){return this.throwIfDisposed(),asinh$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.atan=function(){return this.throwIfDisposed(),atan$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.atan2=function(n){return this.throwIfDisposed(),atan2$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.atanh=function(){return this.throwIfDisposed(),atanh$2(this)},getGlobalTensorClass().prototype.avgPool=function(n,e,t,r){return this.throwIfDisposed(),avgPool$2(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.batchToSpaceND=function(n,e){return this.throwIfDisposed(),batchToSpaceND$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.batchNorm=function(n,e,t,r,s){return this.throwIfDisposed(),batchNorm$2(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.broadcastTo=function(n){return this.throwIfDisposed(),broadcastTo(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.cast=function(n){return this.throwIfDisposed(),cast$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.ceil=function(){return this.throwIfDisposed(),ceil$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.clipByValue=function(n,e){return this.throwIfDisposed(),clipByValue$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.concat=function(n,e){return this.throwIfDisposed(),n instanceof Tensor&&(n=[n]),concat$2([this,...n],e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.conv1d=function(n,e,t,r,s,i){return this.throwIfDisposed(),conv1d(this,n,e,t,r,s,i)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.conv2dTranspose=function(n,e,t,r,s){return this.throwIfDisposed(),conv2dTranspose(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.conv2d=function(n,e,t,r,s,i){return this.throwIfDisposed(),conv2d$2(this,n,e,t,r,s,i)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.cos=function(){return this.throwIfDisposed(),cos$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.cosh=function(){return this.throwIfDisposed(),cosh$2(this)};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.cumprod=function(n,e,t){return this.throwIfDisposed(),cumprod$2(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.cumsum=function(n,e,t){return this.throwIfDisposed(),cumsum$2(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.depthToSpace=function(n,e){return this.throwIfDisposed(),depthToSpace$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.depthwiseConv2d=function(n,e,t,r,s,i){return this.throwIfDisposed(),depthwiseConv2d$1(this,n,e,t,r,s,i)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.dilation2d=function(n,e,t,r,s){return this.throwIfDisposed(),dilation2d(this,n,e,t,r,s)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.divNoNan=function(n){return this.throwIfDisposed(),divNoNan(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.div=function(n){return this.throwIfDisposed(),div$1(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.dot=function(n){return this.throwIfDisposed(),dot$1(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.elu=function(){return this.throwIfDisposed(),elu$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.equal=function(n){return this.throwIfDisposed(),equal$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.erf=function(){return this.throwIfDisposed(),erf$2(this)};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.euclideanNorm=function(n,e){return this.throwIfDisposed(),euclideanNorm(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.exp=function(){return this.throwIfDisposed(),exp$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.expandDims=function(n){return this.throwIfDisposed(),expandDims$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.expm1=function(){return this.throwIfDisposed(),expm1$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.fft=function(){return this.throwIfDisposed(),fft$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.flatten=function(){return this.throwIfDisposed(),reshape$2(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.floor=function(){return this.throwIfDisposed(),floor$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.floorDiv=function(n){return this.throwIfDisposed(),floorDiv$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.gather=function(n,e){return this.throwIfDisposed(),gather$1(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.greaterEqual=function(n){return this.throwIfDisposed(),greaterEqual$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.greater=function(n){return this.throwIfDisposed(),greater$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.ifft=function(){return this.throwIfDisposed(),ifft$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.irfft=function(){return this.throwIfDisposed(),irfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.isFinite=function(){return this.throwIfDisposed(),isFinite$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.isInf=function(){return this.throwIfDisposed(),isInf$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.isNaN=function(){return this.throwIfDisposed(),isNaN$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.leakyRelu=function(n){return this.throwIfDisposed(),leakyRelu$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.lessEqual=function(n){return this.throwIfDisposed(),lessEqual$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.less=function(n){return this.throwIfDisposed(),less$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.localResponseNormalization=function(n,e,t,r){return this.throwIfDisposed(),localResponseNormalization(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logSigmoid=function(){return this.throwIfDisposed(),logSigmoid(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logSoftmax=function(n){return this.throwIfDisposed(),logSoftmax(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logSumExp=function(n,e){return this.throwIfDisposed(),logSumExp(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.log=function(){return this.throwIfDisposed(),log$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.log1p=function(){return this.throwIfDisposed(),log1p$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logicalAnd=function(n){return this.throwIfDisposed(),logicalAnd$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logicalNot=function(){return this.throwIfDisposed(),logicalNot$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logicalOr=function(n){return this.throwIfDisposed(),logicalOr$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.logicalXor=function(n){return this.throwIfDisposed(),logicalXor(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.matMul=function(n,e,t){return this.throwIfDisposed(),matMul$1(this,n,e,t)},getGlobalTensorClass().prototype.maxPool=function(n,e,t,r){return this.throwIfDisposed(),maxPool$2(this,n,e,t,r)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.max=function(n,e){return this.throwIfDisposed(),max$6(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.maximum=function(n){return this.throwIfDisposed(),maximum$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.mean=function(n,e){return this.throwIfDisposed(),mean$4(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.min=function(n,e){return this.throwIfDisposed(),min$6(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.minimum=function(n){return this.throwIfDisposed(),minimum$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.mirrorPad=function(n,e){return this.throwIfDisposed(),mirrorPad$1(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.mod=function(n){return this.throwIfDisposed(),mod$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.mul=function(n){return this.throwIfDisposed(),mul(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.neg=function(){return this.throwIfDisposed(),neg$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.norm=function(n,e,t){return this.throwIfDisposed(),norm(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.notEqual=function(n){return this.throwIfDisposed(),notEqual$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.oneHot=function(n,e=1,t=0){return this.throwIfDisposed(),oneHot$2(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.onesLike=function(){return this.throwIfDisposed(),onesLike$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.pad=function(n,e){return this.throwIfDisposed(),pad$1(this,n,e)},getGlobalTensorClass().prototype.pool=function(n,e,t,r,s,i){return this.throwIfDisposed(),pool$1(this,n,e,t,r,s,i)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.pow=function(n){return this.throwIfDisposed(),pow$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.prelu=function(n){return this.throwIfDisposed(),prelu$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.prod=function(n,e){return this.throwIfDisposed(),prod$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.reciprocal=function(){return this.throwIfDisposed(),reciprocal$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.relu=function(){return this.throwIfDisposed(),relu$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.relu6=function(){return this.throwIfDisposed(),relu6$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.reshapeAs=function(n){return this.throwIfDisposed(),reshape$2(this,n.shape)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.reshape=function(n){return this.throwIfDisposed(),reshape$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.resizeBilinear=function(n,e,t){return this.throwIfDisposed(),resizeBilinear$3(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.resizeNearestNeighbor=function(n,e,t){return this.throwIfDisposed(),resizeNearestNeighbor$2(this,n,e,t)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.reverse=function(n){return this.throwIfDisposed(),reverse$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.rfft=function(){return this.throwIfDisposed(),rfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.round=function(){return this.throwIfDisposed(),round$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.rsqrt=function(){return this.throwIfDisposed(),rsqrt$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.selu=function(){return this.throwIfDisposed(),selu$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.separableConv2d=function(n,e,t,r,s,i){return this.throwIfDisposed(),separableConv2d(this,n,e,t,r,s,i)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sigmoid=function(){return this.throwIfDisposed(),sigmoid$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sign=function(){return this.throwIfDisposed(),sign$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sin=function(){return this.throwIfDisposed(),sin$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sinh=function(){return this.throwIfDisposed(),sinh$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.slice=function(n,e){return this.throwIfDisposed(),slice$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.softmax=function(n){return this.throwIfDisposed(),softmax$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.softplus=function(){return this.throwIfDisposed(),softplus$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.spaceToBatchND=function(n,e){return this.throwIfDisposed(),spaceToBatchND$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.split=function(n,e){return this.throwIfDisposed(),split$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sqrt=function(){return this.throwIfDisposed(),sqrt$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.square=function(){return this.throwIfDisposed(),square$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.squaredDifference=function(n){return this.throwIfDisposed(),squaredDifference$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.squeeze=function(n){return this.throwIfDisposed(),squeeze(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.stack=function(n,e){this.throwIfDisposed();const t=n instanceof Tensor?[this,n]:[this,...n];return stack(t,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.step=function(n){return this.throwIfDisposed(),step$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.stridedSlice=function(n,e,t,r,s,i,o,a){return this.throwIfDisposed(),stridedSlice$2(this,n,e,t,r,s,i,o,a)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sub=function(n){return this.throwIfDisposed(),sub$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.sum=function(n,e){return this.throwIfDisposed(),sum$3(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.tan=function(){return this.throwIfDisposed(),tan$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.tanh=function(){return this.throwIfDisposed(),tanh$2(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.tile=function(n){return this.throwIfDisposed(),tile$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.toBool=function(){return this.throwIfDisposed(),cast$3(this,"bool")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.toFloat=function(){return this.throwIfDisposed(),cast$3(this,"float32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.toInt=function(){return this.throwIfDisposed(),cast$3(this,"int32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.topk=function(n,e){return this.throwIfDisposed(),topk(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.transpose=function(n){return this.throwIfDisposed(),transpose$2(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.unique=function(n){return this.throwIfDisposed(),unique$3(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.unsortedSegmentSum=function(n,e){return this.throwIfDisposed(),unsortedSegmentSum$2(this,n,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.unstack=function(n){return this.throwIfDisposed(),unstack(this,n)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.where=function(n,e){return this.throwIfDisposed(),where(n,this,e)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass().prototype.zerosLike=function(){return this.throwIfDisposed(),zerosLike$2(this)};/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class AttributeError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AttributeError.prototype)}}class RuntimeError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,RuntimeError.prototype)}}class ValueError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ValueError.prototype)}}class NotImplementedError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,NotImplementedError.prototype)}}class AssertionError extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AssertionError.prototype)}}/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class LruCache{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const r=this.cache.keys().next().value;this.cache.delete(r)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const r=this.cache.keys().next().value;this.cache.delete(r)}this.maxEntries=e}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pyListRepeat(n,e){if(Array.isArray(n)){let t=[];for(let r=0;r<e;r++)t=t.concat(n);return t}else{const t=new Array(e);return t.fill(n),t}}function assert(n,e){if(!n)throw new AssertionError(e)}function count(n,e){let t=0;for(const r of n)r===e&&t++;return t}function singletonOrArray(n){return n.length===1?n[0]:n}function toList(n){return Array.isArray(n)?n:[n]}function toSnakeCase(n){const t=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return t[0]!=="_"?t:"private"+t}function toCamelCase(n){return n.length<=1||n.indexOf("_")===-1?n:n.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let _GLOBAL_CUSTOM_OBJECTS={};function serializeKerasObject(n){if(n==null)return null;const e={};return e.className=n.getClassName(),e.config=n.getConfig(),e}function convertNDArrayScalarsInConfig(n){if(!(n==null||typeof n!="object"))if(Array.isArray(n))n.forEach(e=>convertNDArrayScalarsInConfig(e));else{const e=Object.keys(n);for(const t of e){const r=n[t];r!=null&&typeof r=="object"&&(!Array.isArray(r)&&r.type==="ndarray"&&typeof r.value=="number"?n[t]=r.value:convertNDArrayScalarsInConfig(r))}}}function deserializeKerasObject(n,e={},t={},r="object",s=!1){if(typeof n=="string"){const i=n;let o;if(i in t)o=t[i];else if(i in _GLOBAL_CUSTOM_OBJECTS)o=_GLOBAL_CUSTOM_OBJECTS[i];else if(o=e[i],o==null)throw new ValueError(`Unknown ${r}: ${n}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return o}else{const i=n;if(i.className==null||i.config==null)throw new ValueError(`${r}: Improper config format: ${JSON.stringify(i)}.
'className' and 'config' must set.`);const o=i.className;let a,l;if(o in t?[a,l]=t[o]:o in _GLOBAL_CUSTOM_OBJECTS?[a,l]=_GLOBAL_CUSTOM_OBJECTS.className:o in e&&([a,l]=e[o]),a==null)throw new ValueError(`Unknown ${r}: ${o}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){const c={};for(const g of Object.keys(_GLOBAL_CUSTOM_OBJECTS))c[g]=_GLOBAL_CUSTOM_OBJECTS[g];for(const g of Object.keys(t))c[g]=t[g];const u=i.config;u.customObjects=c;const h=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const g of Object.keys(t))_GLOBAL_CUSTOM_OBJECTS[g]=t[g];convertNDArrayScalarsInConfig(i.config);const d=l(a,i.config,t,s);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},h),d}else{const c=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const h of Object.keys(t))_GLOBAL_CUSTOM_OBJECTS[h]=t[h];const u=new a(i.config);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},c),u}}}function numberCompare(n,e){return n<e?-1:n>e?1:0}function reverseNumberCompare(n,e){return-1*numberCompare(n,e)}function unique$2(n){if(n==null)return n;const e=[];for(const t of n)e.indexOf(t)===-1&&e.push(t);return e}function isObjectEmpty(n){if(n==null)throw new ValueError(`Invalid value in obj: ${JSON.stringify(n)}`);for(const e in n)if(n.hasOwnProperty(e))return!1;return!0}function checkStringTypeUnionValue(n,e,t){if(t!=null&&n.indexOf(t)<0)throw new ValueError(`${t} is not a valid ${e}.  Valid values are ${n} or null/undefined.`)}function checkArrayTypeAndLength(n,e,t=0,r=1/0){return assert(t>=0),assert(r>=t),Array.isArray(n)&&n.length>=t&&n.length<=r&&n.every(s=>typeof s===e)}function assertPositiveInteger(n,e){Array.isArray(n)?(assert$1(n.length>0,()=>`${e} is unexpectedly an empty array.`),n.forEach((t,r)=>assertPositiveInteger(t,`element ${r+1} of ${e}`))):assert$1(Number.isInteger(n)&&n>0,()=>`Expected ${e} to be a positive integer, but got ${formatAsFriendlyString(n)}.`)}function formatAsFriendlyString(n){return n===null?"null":Array.isArray(n)?"["+n.map(e=>formatAsFriendlyString(e)).join(",")+"]":typeof n=="string"?`"${n}"`:`${n}`}function debounce(n,e,t){let r=t!=null?t():now(),s;return(...o)=>{const a=t!=null?t():now();return a-r<e||(r=a,s=n(...o)),s}}function mapActivationToFusedKernel(n){return n==="relu"?"relu":n==="linear"?"linear":n==="elu"?"elu":null}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _nextUniqueTensorId=0;function getNextUniqueTensorId(){return _nextUniqueTensorId++}const _uidPrefixes={};function getUid(n=""){return n in _uidPrefixes||(_uidPrefixes[n]=0),_uidPrefixes[n]+=1,n+_uidPrefixes[n].toString()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_DATA_FORMAT_VALUES=["channelsFirst","channelsLast"],VALID_INTERPOLATION_FORMAT_VALUES=["nearest","bilinear"],VALID_PADDING_MODE_VALUES=["valid","same","causal"],VALID_POOL_MODE_VALUES=["max","avg"],VALID_BIDIRECTIONAL_MERGE_MODES=["sum","mul","concat","ave"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const nameMap=new Map;function checkDataFormat(n){checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES,"DataFormat",n)}function checkInterpolationFormat(n){checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES,"InterpolationFormat",n)}function checkPaddingMode(n){checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES,"PaddingMode",n)}function checkPoolMode(n){checkStringTypeUnionValue(VALID_POOL_MODE_VALUES,"PoolMode",n)}const _nameScopeStack=[],_nameScopeDivider="/";function nameScope(n,e){_nameScopeStack.push(n);try{const t=e();return _nameScopeStack.pop(),t}catch(t){throw _nameScopeStack.pop(),t}}function currentNameScopePrefix(){return _nameScopeStack.length===0?"":_nameScopeStack.join(_nameScopeDivider)+_nameScopeDivider}function getScopedTensorName(n){if(!isValidTensorName(n))throw new Error("Not a valid tensor name: '"+n+"'");return currentNameScopePrefix()+n}function getUniqueTensorName(n){if(!isValidTensorName(n))throw new Error("Not a valid tensor name: '"+n+"'");nameMap.has(n)||nameMap.set(n,0);const e=nameMap.get(n);if(nameMap.set(n,nameMap.get(n)+1),e>0){const t=`${n}_${e}`;return nameMap.set(t,1),t}else return n}const tensorNameRegex=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function isValidTensorName(n){return!!n.match(tensorNameRegex)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isInteger$2(n){return n===parseInt(n.toString(),10)}function arrayProd(n,e,t){e==null&&(e=0),t==null&&(t=n.length);let r=1;for(let s=e;s<t;++s)r*=n[s];return r}function min$5(n){if(n.length===0)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let t=0;t<n.length;t++){const r=n[t];r<e&&(e=r)}return e}function max$5(n){if(n.length===0)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let t=0;t<n.length;t++){const r=n[t];r>e&&(e=r)}return e}function range$2(n,e){if(e<n)throw new ValueError(`end (${e}) < begin (${n}) is forbidden.`);const t=[];for(let r=n;r<e;++r)t.push(r);return t}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _epsilon;function epsilon$1(){return _epsilon==null&&(_epsilon=backend().epsilon()),_epsilon}function imageDataFormat(){return"channelsLast"}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function cast$2(n,e){return cast$3(n,e)}function expandDims$2(n,e=-1){const t=n.shape.slice();return e<0&&(e=t.length+e+1),t.splice(e,0,1),reshape$2(n,t)}function repeat(n,e){return tidy(()=>{if(n.shape.length!==2)throw new ValueError(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);const t=expandDims$2(n,1);return tile$2(t,[1,e,1])})}function flatten(n){const e=[arrayProd(n.shape)];return reshape$2(n,e)}function batchFlatten(n){if(n.rank<=1)throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const e=[n.shape[0],arrayProd(n.shape,1)];return reshape$2(n,e)}function sliceAlongFirstAxis(n,e,t){return tidy(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:return slice2d(n,[e,0],[t,n.shape[1]]);case 3:return slice3d(n,[e,0,0],[t,n.shape[1],n.shape[2]]);case 4:return slice4d(n,[e,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3]]);case 5:return slice$2(n,[e,0,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return slice$2(n,[e,0,0,0,0,0],[t,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function sliceAlongLastAxis(n,e,t){return tidy(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:return slice2d(n,[0,e],[n.shape[0],t]);case 3:return slice3d(n,[0,0,e],[n.shape[0],n.shape[1],t]);case 4:return slice4d(n,[0,0,0,e],[n.shape[0],n.shape[1],n.shape[2],t]);default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function sliceAlongAxis(n,e,t,r){return tidy(()=>{switch(n.rank){case 1:return slice1d(n,e,t);case 2:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return slice3d(n,[0,e,0],[n.shape[0],t,n.shape[2]]);case 3:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return sliceAlongFirstAxis(n,e,t);case 2:return slice4d(n,[0,e,0,0],[n.shape[0],t,n.shape[2],n.shape[3]]);case 3:return slice4d(n,[0,0,e,0],[n.shape[0],n.shape[1],t,n.shape[3]]);case 4:return sliceAlongLastAxis(n,e,t);default:throw new ValueError(`The axis is not within the rank of the tensor ${r}`)}default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function concatenate(n,e=-1){let t;return e<0&&(t=n[0].rank,t!==0?e=t:e=0),e===n[0].rank&&(e=-1),concat$2(n,e)}function concatAlongFirstAxis(n,e){switch(n.rank){case 1:return concat1d([n,e]);case 2:return concat2d([n,e],0);case 3:return concat3d([n,e],0);case 4:return concat4d([n,e],0);default:throw new ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function tile$2(n,e){if(Array.isArray(e)||(e=[e]),n.rank!==e.length)throw new ValueError(`The length of input n (${e.length}) does not match the number of dimensions in input x (${n.rank})`);return tile$3(n,e)}function randomNormal(n,e=0,t=1,r,s){return randomNormal$1(n,e,t,r,s)}function dot(n,e,t,r){if(n.rank<2||e.rank<2)throw new NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${e.shape}`);if(e.rank>=3){const s=n.shape.slice(-1)[0],i=e.shape.slice(-2)[0];if(s!==i)throw new NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${e.shape}`)}if(n.rank===2&&e.rank===2)return matMul({a:n,b:e,transposeA:!1,transposeB:!1,bias:r?reshapeBias(n.rank,r,imageDataFormat()):null,activation:t});{const s=n.shape.slice(),i=s.pop();n=reshape$2(n,[-1,i]);const o=e.shape.slice(),a=o.pop(),l=o.pop(),c=[...o,a],u=Array.from({length:e.rank},(x,y)=>y===0?e.rank-2:y<=e.rank-2?y-1:y);e=reshape$2(transpose$2(e,u),[l,-1]);const h=[...s,...c];return reshape$2(matMul({a:n,b:e,transposeA:!1,transposeB:!1,bias:r?reshapeBias(n.rank,r,imageDataFormat()):null,activation:t}),h)}}function gather(n,e,t){return tidy(()=>(Array.isArray(e)?e=tensor1d(e,"int32"):e=cast$3(e,"int32"),gather$1(n,e,t)))}function square$1(n){return mul(n,n)}function reshapeBias(n,e,t){const r=e.shape;if(e.rank!==1&&e.rank!==n)throw new ValueError(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${n}`);if(n===5){if(t==="channelsFirst")return r.length===1?reshape$2(e,[1,r[0],1,1,1]):reshape$2(e,[1,r[3],r[0],r[1],r[2]]);if(t==="channelsLast")return r.length===1?reshape$2(e,[1,1,1,1,r[0]]):reshape$2(e,[1].concat(r))}else if(n===4){if(t==="channelsFirst")return r.length===1?reshape$2(e,[1,r[0],1,1]):reshape$2(e,[1,r[2],r[0],r[1]]);if(t==="channelsLast")return r.length===1?reshape$2(e,[1,1,1,r[0]]):reshape$2(e,[1].concat(r))}else if(n===3){if(t==="channelsFirst")return r.length===1?reshape$2(e,[1,r[0],1]):reshape$2(e,[1,r[1],r[0]]);if(t==="channelsLast")return r.length===1?reshape$2(e,[1,1,r[0]]):reshape$2(e,[1].concat(r))}else if(n<3)return e;throw new ValueError(`Unsupported input rank by biasAdd: ${e.rank}`)}function biasAdd(n,e,t){return tidy(()=>(t==null&&(t=imageDataFormat()),checkDataFormat(t),add$2(n,reshapeBias(n.rank,e,t))))}function elu$2(n,e=1){if(e!==1)throw new NotImplementedError(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return elu$3(n)}function softsign(n){return tidy(()=>div$1(n,add$2(abs$3(n),1)))}function dropout(n,e,t,r){return tidy(()=>dropout$1(n,e,t,r))}function hardSigmoid(n){return tidy(()=>{const e=add$2(.5,mul(.2,n));return clipByValue$2(e,0,1)})}function inTrainPhase(n,e,t=!1){return t?n():e()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_FAN_MODE_VALUES=["fanIn","fanOut","fanAvg"],VALID_DISTRIBUTION_VALUES=["normal","uniform","truncatedNormal"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkFanMode(n){checkStringTypeUnionValue(VALID_FAN_MODE_VALUES,"FanMode",n)}function checkDistribution(n){checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES,"Distribution",n)}class Initializer extends Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Zeros extends Initializer{apply(e,t){return zeros$1(e,t)}}Zeros.className="Zeros",registerClass(Zeros);class Ones extends Initializer{apply(e,t){return ones(e,t)}}Ones.className="Ones",registerClass(Ones);class Constant extends Initializer{constructor(e){if(super(),typeof e!="object")throw new ValueError(`Expected argument of type ConstantConfig but got ${e}`);if(e.value===void 0)throw new ValueError(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return tidy(()=>mul(scalar(this.value),ones(e,t)))}getConfig(){return{value:this.value}}}Constant.className="Constant",registerClass(Constant);class RandomUniform extends Initializer{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return randomUniform(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}RandomUniform.className="RandomUniform",registerClass(RandomUniform);class RandomNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`randomNormal does not support dType ${t}.`);return randomNormal(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}RandomNormal.className="RandomNormal",registerClass(RandomNormal);class TruncatedNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`truncatedNormal does not support dType ${t}.`);return truncatedNormal(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}TruncatedNormal.className="TruncatedNormal",registerClass(TruncatedNormal);class Identity extends Initializer{constructor(e){super(),this.gain=e.gain!=null?e.gain:1}apply(e,t){return tidy(()=>{if(e.length!==2||e[0]!==e[1])throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");return mul(this.gain,eye(e[0]))})}getConfig(){return{gain:this.gain}}}Identity.className="Identity",registerClass(Identity);function computeFans(n,e="channelsLast"){let t,r;if(checkDataFormat(e),n.length===2)t=n[0],r=n[1];else if([3,4,5].indexOf(n.length)!==-1){if(e==="channelsFirst"){const s=arrayProd(n,2);t=n[1]*s,r=n[0]*s}else if(e==="channelsLast"){const s=arrayProd(n,0,n.length-2);t=n[n.length-2]*s,r=n[n.length-1]*s}}else{const s=arrayProd(n);t=Math.sqrt(s),r=Math.sqrt(s)}return[t,r]}class VarianceScaling extends Initializer{constructor(e){if(super(),e.scale<0)throw new ValueError(`scale must be a positive float. Got: ${e.scale}`);this.scale=e.scale==null?1:e.scale,this.mode=e.mode==null?"fanIn":e.mode,checkFanMode(this.mode),this.distribution=e.distribution==null?"normal":e.distribution,checkDistribution(this.distribution),this.seed=e.seed}apply(e,t){const r=computeFans(e),s=r[0],i=r[1];let o=this.scale;if(this.mode==="fanIn"?o/=Math.max(1,s):this.mode==="fanOut"?o/=Math.max(1,i):o/=Math.max(1,(s+i)/2),this.distribution==="normal"){const a=Math.sqrt(o);if(t=t||"float32",t!=="float32"&&t!=="int32")throw new NotImplementedError(`${this.getClassName()} does not support dType ${t}.`);return truncatedNormal(e,0,a,t,this.seed)}else{const a=Math.sqrt(3*o);return randomUniform(e,-a,a,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}VarianceScaling.className="VarianceScaling",registerClass(VarianceScaling);class GlorotUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotUniform.className="GlorotUniform",registerClass(GlorotUniform);class GlorotNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotNormal.className="GlorotNormal",registerClass(GlorotNormal);class HeNormal extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}HeNormal.className="HeNormal",registerClass(HeNormal);class HeUniform extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}HeUniform.className="HeUniform",registerClass(HeUniform);class LeCunNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunNormal.className="LeCunNormal",registerClass(LeCunNormal);class LeCunUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunUniform.className="LeCunUniform",registerClass(LeCunUniform);class Orthogonal extends Initializer{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=e.gain==null?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,this.seed!=null)throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return tidy(()=>{if(e.length<2)throw new NotImplementedError("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const r=e[0]>e[1]?[e[1],e[0]]:e,s=randomNormal(r,0,1,"float32");let i=linalg.gramSchmidt(s);return e[0]>e[1]&&(i=transpose$2(i)),mul(this.gain,i)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Orthogonal.className="Orthogonal",registerClass(Orthogonal);const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function deserializeInitializer(n,e={}){return deserializeKerasObject(n,SerializationMap.getMap().classNameMap,e,"initializer")}function serializeInitializer(n){return serializeKerasObject(n)}function getInitializer(n){if(typeof n=="string"){const e=n in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n;if(e==="GlorotNormal")return new GlorotNormal;if(e==="GlorotUniform")return new GlorotUniform;if(e==="HeNormal")return new HeNormal;if(e==="HeUniform")return new HeUniform;if(e==="LeCunNormal")return new LeCunNormal;if(e==="LeCunUniform")return new LeCunUniform;{const t={};return t.className=e,t.config={},deserializeInitializer(t)}}else return n instanceof Initializer?n:deserializeInitializer(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayOfShapes(n){return Array.isArray(n)&&Array.isArray(n[0])}function normalizeShapeList(n){return n.length===0?[]:Array.isArray(n[0])?n:[n]}function getExactlyOneTensor(n){let e;if(Array.isArray(n)){if(n.length!==1)throw new ValueError(`Expected Tensor length to be 1; got ${n.length}`);e=n[0]}else e=n;return e}function getExactlyOneShape(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(n.length===1)return n=n,n[0];throw new ValueError(`Expected exactly 1 Shape; got ${n.length}`)}else return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function countParamsInWeights(n){let e=0;for(const t of n)t.shape.length===0?e+=1:e+=t.shape.reduce((r,s)=>r*s);return e}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VARIABLE_NAME_PREFIX="Variable";class LayerVariable{constructor(e,t="float32",r=DEFAULT_VARIABLE_NAME_PREFIX,s=!0,i=null){this.dtype=t??"float32",this.shape=e.shape,this.id=getNextUniqueTensorId(),r=r??DEFAULT_VARIABLE_NAME_PREFIX,this.originalName=getScopedTensorName(r),this.name=getUniqueTensorName(this.originalName),this.trainable_=s,this.constraint=i,this.val=variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),checkShapesMatch(this.val,e),this.val.id!==e.id&&(this.val.assign(e),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function checkShapesMatch(n,e){if(n.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(e.shape))}function batchGetValue(n){return n.map(e=>e.read())}function batchSetValue(n){n.forEach(e=>{e[0].write(e[1])})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputSpec{constructor(e){this.dtype=e.dtype,this.shape=e.shape,e.shape!=null?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class SymbolicTensor{constructor(e,t,r,s,i,o,a){this.dtype=e,this.shape=t,this.sourceLayer=r,this.inputs=s,this.callArgs=i,this.outputTensorIndex=a,this.id=getNextUniqueTensorId(),o!=null&&(this.originalName=getScopedTensorName(o),this.name=getUniqueTensorName(this.originalName)),this.rank=t.length}}let _nextNodeID=0,Node$1=class{constructor(e,t){this.callArgs=t,this.id=_nextNodeID++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const r of e.inboundLayers)r!=null&&r.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)t!=null?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},_nextLayerID=0;class Layer extends Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=_nextLayerID++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const r=this.getClassName();t=toSnakeCase(r)+"_"+getUid(r)}if(this.name=t,this.trainable_=e.trainable==null?!0:e.trainable,e.inputShape!=null||e.batchInputShape!=null){let r;if(e.batchInputShape!=null)r=e.batchInputShape;else if(e.inputShape!=null){let i=null;e.batchSize!=null&&(i=e.batchSize),r=[i].concat(e.inputShape)}this.batchInputShape=r;let s=e.dtype;s==null&&(s=e.inputDType),s==null&&(s="float32"),this.dtype=s}e.weights!=null?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(this.inboundNodes.length===0)throw new RuntimeError(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new ValueError(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return singletonOrArray(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return singletonOrArray(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} is not connected, no input to return.`);return singletonOrArray(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return singletonOrArray(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=toList(e),this.inputSpec==null||this.inputSpec.length===0)return;const t=toList(this.inputSpec);if(e.length!==t.length)throw new ValueError(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let r=0;r<e.length;r++){const s=e[r],i=t[r];if(i==null)continue;const o=s.rank;if(i.ndim!=null&&o!==i.ndim)throw new ValueError(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${o}`);if(i.maxNDim!=null&&o>i.maxNDim)throw new ValueError(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${o}`);if(i.minNDim!=null&&o<i.minNDim)throw new ValueError(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${o}.`);if(i.dtype!=null&&s.dtype!==i.dtype)throw new ValueError(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${s.dtype}.`);if(i.axes){const a=s.shape;for(const l in i.axes){const c=Number(l),u=i.axes[l],h=c>=0?a[c]:a[a.length+c];if(u!=null&&[u,null].indexOf(h)===-1)throw new ValueError(`Input ${r} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${a}.`)}}if(i.shape!=null)for(let a=0;a<i.shape.length;++a){const l=i.shape[a],c=s.shape[a];if(l!=null&&c!=null&&l!==c)throw new ValueError(`Input ${r} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){this._callHook!=null&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const r=toList(e);let s=!0;for(const o of r)if(!(o instanceof SymbolicTensor)){s=!1;break}let i=!0;for(const o of r)if(o instanceof SymbolicTensor){i=!1;break}if(s===i)throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return nameScope(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const o=[];for(const a of toList(e))o.push(a.shape);this.build(singletonOrArray(o)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&i&&(this._refCount=1)}if(this.assertInputCompatibility(e),i){let o=this.call(e,t);const a=toList(o),l=[];for(let c of a)r.indexOf(c)!==-1&&(c=c.clone()),l.push(c);if(o=singletonOrArray(l),this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return o}else{const o=collectInputShape(e),a=this.computeOutputShape(o);let l;const c=guessOutputDType(e);if(this.warnOnIncompatibleInputShape(Array.isArray(e)?o[0]:o),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((u,h)=>new SymbolicTensor(c,u,this,toList(e),t,this.name,h)):l=new SymbolicTensor(c,a,this,toList(e),t,this.name),this.addInboundNode(e,l,null,null,o,a,t),this._refCount++,this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(e){if(this.batchInputShape!=null)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((r,s)=>{r!=null&&e[s]!=null&&e[s]!==r&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const r=JSON.stringify(t.outputShapes);e.indexOf(r)===-1&&e.push(r)}if(e.length===1){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&t.length===1?t[0]:t}else throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return countParamsInWeights(this.weights)}build(e){this.built=!0}getWeights(e=!1){return batchGetValue(e?this.trainableWeights:this.weights)}setWeights(e){tidy(()=>{const t=this.weights;if(t.length!==e.length)throw new ValueError(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(t.length===0)return;const r=[],s=batchGetValue(t);for(let i=0;i<s.length;++i){const o=s[i],a=t[i],l=e[i];if(!arraysEqual(o.shape,l.shape))throw new ValueError(`Layer weight shape ${o.shape} not compatible with provided weight shape ${l.shape}`);r.push([a,l])}batchSetValue(r)})}addWeight(e,t,r,s,i,o,a,l){if(this._addedWeightNames.indexOf(e)!==-1)throw new ValueError(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),r==null&&(r="float32"),this.fastWeightInitDuringBuild&&(s=l!=null?l():getInitializer("zeros"));const c=s.apply(t,r),u=new LayerVariable(c,r,e,o,a);return c.dispose(),i!=null&&this.addLoss(()=>i.apply(u.read())),o==null&&(o=!0),o?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){e==null||Array.isArray(e)&&e.length===0||(e=toList(e),this._losses!==void 0&&this._losses!==null&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(t!=null)if(Array.isArray(t))t.forEach(r=>{if(r!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return t}addInboundNode(e,t,r,s,i,o,a=null){const l=toList(e);t=toList(t),r=toList(r),s=toList(s),i=normalizeShapeList(i),o=normalizeShapeList(o);const c=[],u=[],h=[];for(const d of l)c.push(d.sourceLayer),u.push(d.nodeIndex),h.push(d.tensorIndex);new Node$1({outboundLayer:this,inboundLayers:c,nodeIndices:u,tensorIndices:h,inputTensors:l,outputTensors:t,inputMasks:r,outputMasks:s,inputShapes:i,outputShapes:o},a);for(let d=0;d<t.length;d++)t[d].sourceLayer=this,t[d].nodeIndex=this.inboundNodes.length-1,t[d].tensorIndex=d}getConfig(){const e={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(e.batchInputShape=this.batchInputShape),this.dtype!=null&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return--this._refCount===0&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function collectInputShape(n){n=toList(n);const e=[];for(const t of n)e.push(t.shape);return singletonOrArray(e)}function guessOutputDType(n){return"float32"}function getSourceInputs(n,e,t){if((e==null||t!=null&&t>0)&&(e=n.sourceLayer,t=n.nodeIndex),e.inboundNodes.length===0)return[n];{const r=e.inboundNodes[t];if(r.inboundLayers.length===0)return r.inputTensors;{const s=[];for(let i=0;i<r.inboundLayers.length;i++){const o=r.inputTensors[i],a=r.inboundLayers[i],l=r.nodeIndices[i],c=getSourceInputs(o,a,l);for(const u of c)s.indexOf(u)===-1&&s.push(u)}return s}}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputLayer extends Layer{constructor(e){if(super({dtype:e.dtype,name:e.name!=null?e.name:getUid("input").toString()}),e.batchSize==null&&(e.batchSize=null),e.sparse==null&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,e.inputShape!=null&&e.batchInputShape!=null)throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(t==null){if(e.inputShape==null)throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(e.batchSize!=null)throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=t,this.dtype=r,this.inputSpec=[{shape:t}];const s=new SymbolicTensor(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Node$1({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}InputLayer.className="InputLayer",registerClass(InputLayer);function Input(n){if(n.batchShape==null&&n.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(n.batchShape!=null&&n.shape!=null)throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=n.batchShape;n.shape!=null&&e==null&&(e=[null].concat(n.shape));let t=n.dtype;return t==null&&(t="float32"),new InputLayer({batchInputShape:e,name:n.name,dtype:t,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertFeedCompatibility(n,e){if(n.dtype==null||n.dtype===e.dtype)return e;try{return cast$3(e,n.dtype)}catch{throw new ValueError(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}class FeedDict{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof FeedDict)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(e==null)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,r){if(this.id2Value[e.id]==null)this.id2Value[e.id]=assertFeedCompatibility(e,t),this.name2Id[e.name]=e.id,r!=null&&(this.id2Mask[e.id]=r);else throw new ValueError(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return this.id2Value[e.id]!=null}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof SymbolicTensor){if(this.id2Value[e.id]==null)throw new ValueError(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}else{const t=this.name2Id[e];if(t==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof SymbolicTensor){if(this.id2Value[e.id]==null)throw new ValueError(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}else{const t=this.name2Id[e];if(t==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){this.id2Mask!=null&&dispose(this.id2Mask)}}const cachedSorted=new LruCache,cachedRecipientCounts=new LruCache;function updateCacheMaxEntries(n){cachedSorted!=null&&cachedSorted.setMaxEntries(n),cachedRecipientCounts!=null&&cachedRecipientCounts.setMaxEntries(n)}function execute(n,e,t,r){const s=t==null?!1:t.training,i=Array.isArray(n),o=i?n:[n],a=o.map(x=>x.name),l=[],c=e.names();for(const x of a)c.indexOf(x)!==-1?l.push(e.getValue(x)):l.push(null);const u=a.join(",")+"|"+e.names().sort().join(",");let h=cachedSorted.get(u),d;if(h==null){const x=getTopologicalSortAndRecipientCounts(o,e);h=x.sorted,d=x.recipientCounts,cachedSorted.put(u,h),cachedRecipientCounts.put(u,d)}d={},s||Object.assign(d,cachedRecipientCounts.get(u));const g=new FeedDict(e);for(let x=0;x<h.length;++x){const y=h[x],w=y.sourceLayer;if(w instanceof InputLayer)continue;const $=[],S=[],_=[];let T=!1;for(const M of y.inputs){const O=g.getValue(M),R=g.getMask(M);$.push(O),S.push(R),R!=null&&(T=!0),s||(d[M.name]--,d[M.name]===0&&!e.hasKey(M)&&a.indexOf(M.name)===-1&&!O.isDisposed&&M.sourceLayer.stateful!==!0&&_.push(O))}T&&(t=t||{},t.mask=S[0]);const k=toList(w.apply($,t));let P=null;w.supportsMasking&&(P=w.computeMask($,S));const L=getNodeOutputs(y),D=Array.isArray(L)?L:[L];for(let M=0;M<D.length;++M){g.hasKey(D[M])||g.add(D[M],k[M],Array.isArray(P)?P[0]:P);const O=a.indexOf(D[M].name);O!==-1&&(l[O]=k[M])}s||dispose(_)}return g.disposeMasks(),i?l:l[0]}function getTopologicalSortAndRecipientCounts(n,e){assert$1(n!=null&&n.length>0,()=>"Expected at least one fetch, got none");let t=[],r={};if(n.length===1){const s=getTopologicalSortAndRecipientCountsForOneFetch(n[0],e);t=s.sorted,r=s.recipientMap}else{const s=new Set;for(const i of n){const{sorted:o,recipientMap:a}=getTopologicalSortAndRecipientCountsForOneFetch(i,e);for(const l of o)s.has(l.name)||(t.push(l),s.add(l.name));for(const l in a)r[l]==null&&(r[l]=new Set),a[l].forEach(c=>r[l].add(c))}}return{sorted:t,recipientCounts:recipientMap2Counts(r)}}function recipientMap2Counts(n){const e={};for(const t in n)e[t]=n[t].size;return e}function getTopologicalSortAndRecipientCountsForOneFetch(n,e){const t=new Set,r=[],s={};for(const a of e.names())t.add(a);const i=[],o=[];for(i.push(n);i.length>0;){const a=i[i.length-1];if(t.has(a.name)){i.pop();continue}const l=o[o.length-1]===i.length-1;if(a.inputs.length===0||l)i.pop(),r.push(a),t.add(a.name),l&&o.pop();else{o.push(i.length-1);for(const c of a.inputs)s[c.name]==null&&(s[c.name]=new Set),s[c.name].add(a.name),!t.has(c.name)&&i.push(c)}}return{sorted:r,recipientMap:s}}function getNodeOutputs(n){let e;if(n.sourceLayer.inboundNodes.length===1)e=n.sourceLayer.output;else{let t=null;for(let r=0;r<n.sourceLayer.inboundNodes.length;++r)for(const s of n.sourceLayer.inboundNodes[r].outputTensors)if(s.id===n.id){t=r;break}e=n.sourceLayer.getOutputAt(t)}return e}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$2=env();ENV$2.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,updateCacheMaxEntries);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function calcL2Norms(n,e){return tidy(()=>sqrt$2(sum$3(mul(n,n),e,!0)))}class Constraint extends Serializable{getConfig(){return{}}}class MaxNorm extends Constraint{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy(()=>{const t=calcL2Norms(e,this.axis),r=clipByValue$2(t,0,this.maxValue);return mul(e,div$1(r,add$2(epsilon$1(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}MaxNorm.className="MaxNorm",registerClass(MaxNorm);class UnitNorm extends Constraint{constructor(e){super(),this.defaultAxis=0,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy(()=>div$1(e,add$2(epsilon$1(),calcL2Norms(e,this.axis))))}getConfig(){return{axis:this.axis}}}UnitNorm.className="UnitNorm",registerClass(UnitNorm);class NonNeg extends Constraint{apply(e){return relu$2(e)}}NonNeg.className="NonNeg",registerClass(NonNeg);class MinMaxNorm extends Constraint{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=e.minValue!=null?e.minValue:this.defaultMinValue,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.rate=e.rate!=null?e.rate:this.defaultRate,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return tidy(()=>{const t=calcL2Norms(e,this.axis),r=add$2(mul(this.rate,clipByValue$2(t,this.minValue,this.maxValue)),mul(1-this.rate,t));return mul(e,div$1(r,add$2(epsilon$1(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}MinMaxNorm.className="MinMaxNorm",registerClass(MinMaxNorm);const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function serializeConstraint(n){return serializeKerasObject(n)}function deserializeConstraint(n,e={}){return deserializeKerasObject(n,SerializationMap.getMap().classNameMap,e,"constraint")}function getConstraint(n){if(n==null)return null;if(typeof n=="string"){const t={className:n in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP?CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n,config:{}};return deserializeConstraint(t)}else return n instanceof Constraint?n:deserializeConstraint(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */async function resolveScalarsInLogs(n){if(n==null)return;const e=[],t=[],r=[];for(const s in n){const i=n[s];if(typeof i!="number"){const o=i;e.push(o.data()),t.push(s),r.push(o)}}if(e.length>0){const s=await Promise.all(e);for(let i=0;i<s.length;++i)n[t[i]]=s[i][0];dispose(r)}}function disposeTensorsInLogs(n){if(n!=null)for(const e in n){const t=n[e];typeof t!="number"&&t.dispose()}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var ModelLoggingVerbosity;(function(n){n[n.SILENT=0]="SILENT",n[n.VERBOSE=1]="VERBOSE"})(ModelLoggingVerbosity||(ModelLoggingVerbosity={}));const DEFAULT_YIELD_EVERY_MS=125;class BaseCallback{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class CallbackList{constructor(e,t=10){e==null&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onEpochBegin(e,t)}async onEpochEnd(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onEpochEnd(e,t)}async onBatchBegin(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onBatchBegin(e,t)}async onBatchEnd(e,t){t==null&&(t={});for(const r of this.callbacks)await r.onBatchEnd(e,t)}async onTrainBegin(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class BaseLogger extends BaseCallback{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){t==null&&(t={});const r=t.size==null?0:t.size;this.seen+=r;for(const s in t){const i=t[s];if(typeof i=="number")this.totals.hasOwnProperty(s)||(this.totals[s]=0),this.totals[s]=this.totals[s]+i*r;else{let o;s in this.totals?o=this.totals[s]:this.totals[s]=0;const a=tidy(()=>add$2(this.totals[s],mul(i,r)));this.totals[s]=a,o!=null&&o.dispose()}}}async onEpochEnd(e,t){if(t!=null)for(const r of this.params.metrics)this.totals[r]!=null&&(typeof this.totals[r]=="number"?t[r]=this.totals[r]/this.seen:tidy(()=>{const s=mul(div$1(1,this.seen),this.totals[r]);t[r]=s,this.totals[r].dispose(),keep(t[r])}))}}class History extends BaseCallback{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){t==null&&(t={}),this.epoch.push(e);for(const r in t)this.history[r]==null&&(this.history[r]=[]),this.history[r].push(t[r])}async syncData(){const e=[],t=[],r=[];for(const i in this.history){const o=this.history[i];for(let a=0;a<o.length;++a)if(typeof o[a]!="number"){const l=o[a];e.push(l.data()),t.push(i),r.push(a)}}const s=await Promise.all(e);for(let i=0;i<s.length;++i)this.history[t[i]][r[i]].dispose(),this.history[t[i]][r[i]]=s[i][0]}}class CustomCallback extends BaseCallback{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||nextFrame,this.yieldEvery=t||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=DEFAULT_YIELD_EVERY_MS),this.yieldEvery==="never"&&e.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");isNumber(this.yieldEvery)&&(this.maybeWait=debounce(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,r){const s=[];this.yield!=null&&(await resolveScalarsInLogs(r),s.push(this.yield(e,t,r))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,this.epochBegin!=null&&(await resolveScalarsInLogs(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const r=[];this.epochEnd!=null&&(await resolveScalarsInLogs(t),r.push(this.epochEnd(e,t))),this.yieldEvery==="epoch"&&r.push(this.nextFrameFunc()),await Promise.all(r)}async onBatchBegin(e,t){this.batchBegin!=null&&(await resolveScalarsInLogs(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const r=[];this.batchEnd!=null&&(await resolveScalarsInLogs(t),r.push(this.batchEnd(e,t))),this.yieldEvery==="batch"?r.push(this.nextFrameFunc()):isNumber(this.yieldEvery)&&r.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(r)}async onTrainBegin(e){this.trainBegin!=null&&(await resolveScalarsInLogs(e),await this.trainBegin(e))}async onTrainEnd(e){this.trainEnd!=null&&(await resolveScalarsInLogs(e),await this.trainEnd(e))}}function standardizeCallbacks(n,e){return n==null&&(n={}),n instanceof BaseCallback?[n]:Array.isArray(n)&&n[0]instanceof BaseCallback?n:toList(n).map(r=>new CustomCallback(r,e))}class CallbackConstructorRegistry{constructor(){}static registerCallbackConstructor(e,t){assert$1(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),CallbackConstructorRegistry.checkForDuplicate(t),CallbackConstructorRegistry.constructors[e]==null&&(CallbackConstructorRegistry.constructors[e]=[]),CallbackConstructorRegistry.constructors[e].push(t)}static checkForDuplicate(e){for(const t in CallbackConstructorRegistry.constructors)CallbackConstructorRegistry.constructors[+t].forEach(s=>{if(s===e)throw new ValueError("Duplicate callback constructor.")})}static clear(){CallbackConstructorRegistry.constructors={}}static createCallbacks(e){const t=[];for(const r in CallbackConstructorRegistry.constructors){const s=+r;e>=s&&t.push(...CallbackConstructorRegistry.constructors[s])}return t.map(r=>new r)}}CallbackConstructorRegistry.constructors={};function configureCallbacks(n,e,t,r,s,i,o,a,l){const c=new History,u=[new BaseLogger,...CallbackConstructorRegistry.createCallbacks(e)];n!=null&&u.push(...n),u.push(c);const h=new CallbackList(u);return h.setParams({epochs:t,initialEpoch:r,samples:s,steps:i,batchSize:o,verbose:e,doValidation:a,metrics:l}),{callbackList:h,history:c}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function deserialize(n,e={},t=!1){return deserializeKerasObject(n,SerializationMap.getMap().classNameMap,e,"layer",t)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function l2Normalize(n,e){return tidy(()=>{n.dtype!=="float32"&&(n=cast$3(n,"float32"));const t=sum$3(square$1(n),e,!0),r=fill$3(t.shape,epsilon$1()),s=sqrt$2(maximum$2(t,r));return div$1(n,s)})}function meanSquaredError(n,e){return tidy(()=>mean$4(square$1(sub$2(e,n)),-1))}function meanAbsoluteError(n,e){return tidy(()=>mean$4(abs$3(sub$2(e,n)),-1))}function meanAbsolutePercentageError(n,e){return tidy(()=>{const t=sub$2(n,e),r=clipByValue$2(abs$3(n),epsilon$1(),Number.MAX_VALUE),s=abs$3(div$1(t,r));return mul(100,mean$4(s,-1))})}function meanSquaredLogarithmicError(n,e){return tidy(()=>{const t=clipByValue$2(e,epsilon$1(),Number.MAX_VALUE),r=log$2(add$2(1,t)),s=clipByValue$2(n,epsilon$1(),Number.MAX_VALUE),i=log$2(add$2(1,s));return mean$4(square$1(sub$2(r,i)),-1)})}function squaredHinge(n,e){return tidy(()=>{const t=maximum$2(0,sub$2(1,mul(n,e)));return mean$4(square$1(t),-1)})}function hinge(n,e){return tidy(()=>{const t=maximum$2(0,sub$2(1,mul(n,e)));return mean$4(t,-1)})}function categoricalHinge(n,e){return tidy(()=>{const t=sum$3(mul(n,e),-1),r=max$6(mul(sub$2(1,n),e),-1);return maximum$2(0,add$2(1,sub$2(r,t)))})}function logcosh(n,e){return tidy(()=>{const t=Math.log(2),r=sub$2(e,n),s=sub$2(add$2(r,softplus$2(mul(-2,r))),t);return mean$4(s,-1)})}function categoricalCrossentropy$1(n,e,t=!1){return tidy(()=>{if(t)e=softmax$2(e);else{const r=sum$3(e,e.shape.length-1,!0);e=div$1(e,r)}return e=clipByValue$2(e,epsilon$1(),1-epsilon$1()),neg$2(sum$3(mul(cast$3(n,"float32"),log$2(e)),e.shape.length-1))})}function sparseCategoricalCrossentropy$1(n,e,t=!1){return tidy(()=>{const r=cast$3(floor$2(flatten(n)),"int32");e=clipByValue$2(e,epsilon$1(),1-epsilon$1());const s=e.shape,i=reshape$2(oneHot$2(r,s[s.length-1]),s);return categoricalCrossentropy$1(i,e,t)})}function sigmoidCrossEntropyWithLogits(n,e){if(!arraysEqual(n.shape,e.shape))throw new ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(e.shape)}`);return tidy(()=>{const t=relu$2(e),r=neg$2(abs$3(e));return add$2(sub$2(t,mul(e,n)),log1p$2(exp$2(r)))})}function binaryCrossentropy$1(n,e){return tidy(()=>{let t;return t=clipByValue$2(e,epsilon$1(),1-epsilon$1()),t=log$2(div$1(t,sub$2(1,t))),mean$4(sigmoidCrossEntropyWithLogits(n,t),-1)})}function kullbackLeiblerDivergence(n,e){return tidy(()=>{const t=clipByValue$2(n,epsilon$1(),1),r=clipByValue$2(e,epsilon$1(),1);return sum$3(mul(n,log$2(div$1(t,r))),-1)})}function poisson(n,e){return tidy(()=>{const t=log$2(add$2(epsilon$1(),e));return mean$4(sub$2(e,mul(n,t)),-1)})}function cosineProximity(n,e){return tidy(()=>{const t=l2Normalize(n,-1),r=l2Normalize(e,-1),s=mul(t,r);return neg$2(sum$3(s,-1))})}const lossesMap={meanSquaredError,meanAbsoluteError,meanAbsolutePercentageError,meanSquaredLogarithmicError,squaredHinge,hinge,categoricalHinge,logcosh,categoricalCrossentropy:categoricalCrossentropy$1,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy$1,binaryCrossentropy:binaryCrossentropy$1,kullbackLeiblerDivergence,poisson,cosineProximity};function get$1(n){if(typeof n=="string"){if(n in lossesMap)return lossesMap[n];let e=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new ValueError(e)}else return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function binaryAccuracy(n,e){return tidy(()=>{const t=mul(.5,onesLike$2(e)),r=cast$2(greater$2(e,t),n.dtype);return mean$4(equal$2(n,r),-1)})}function categoricalAccuracy(n,e){return tidy(()=>cast$2(equal$2(argMax$2(n,-1),argMax$2(e,-1)),"float32"))}function truePositives(n,e){return tidy(()=>cast$3(sum$3(logicalAnd$2(equal$2(n,1),equal$2(e,1))),"float32"))}function falsePositives(n,e){return tidy(()=>cast$3(sum$3(logicalAnd$2(equal$2(n,0),equal$2(e,1))),"float32"))}function precision(n,e){return tidy(()=>{const t=truePositives(n,e),r=falsePositives(n,e),s=add$2(t,r);return cast$3(where(greater$2(s,0),div$1(t,s),0),"float32")})}function binaryCrossentropy(n,e){return binaryCrossentropy$1(n,e)}function sparseCategoricalAccuracy(n,e){return n.rank===e.rank&&(n=squeeze(n,[n.rank-1])),e=argMax$2(e,-1),e.dtype!==n.dtype&&(e=cast$3(e,n.dtype)),cast$3(equal$2(n,e),"float32")}const mse=meanSquaredError,MSE=meanSquaredError,mae=meanAbsoluteError,MAE=meanAbsoluteError,mape=meanAbsolutePercentageError,MAPE=meanAbsolutePercentageError,categoricalCrossentropy=categoricalCrossentropy$1,cosine=cosineProximity,sparseCategoricalCrossentropy=sparseCategoricalCrossentropy$1,metricsMap={binaryAccuracy,categoricalAccuracy,precision,categoricalCrossentropy,sparseCategoricalCrossentropy,mse,MSE,mae,MAE,mape,MAPE,cosine};function get(n){if(typeof n=="string"&&n in metricsMap)return metricsMap[n];if(typeof n!="string"&&n!=null)return n;throw new ValueError(`Unknown metric ${n}`)}function getLossOrMetricName(n){if(assert(n!==null,`Unknown LossOrMetricFn ${n}`),typeof n=="string")return n;{let e;for(const t of Object.keys(lossesMap))if(lossesMap[t]===n){e=t;break}if(e!==void 0)return e;for(const t of Object.keys(metricsMap))if(metricsMap[t]===n){e=t;break}return e!==void 0?e:n.name}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function getOptimizer(n){const e={Adagrad:()=>train.adagrad(.01),Adadelta:()=>train.adadelta(1,.95,epsilon$1()),Adam:()=>train.adam(.001,.9,.999,epsilon$1()),Adamax:()=>train.adamax(.002,.9,.999,epsilon$1(),0),RMSProp:()=>train.rmsprop(.001,.9,0,epsilon$1()),SGD:()=>train.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,n in e)return e[n]();throw new ValueError(`Unknown Optimizer ${n}`)}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH=1*1024*1024;function checkUserDefinedMetadata(n,e,t=!1){if(n==null||typeof n!="object"||Object.getPrototypeOf(n)!==Object.prototype||!plainObjectCheck(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(t){const r=JSON.stringify(n);r.length>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${r.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`)}}function plainObjectCheck(n){if(n===null)return!0;if(typeof n=="object")if(Object.getPrototypeOf(n)===Object.prototype){const e=Object.keys(n);for(const t of e)if(typeof t!="string"||!plainObjectCheck(n[t]))return!1;return!0}else if(Array.isArray(n)){for(const e of n)if(!plainObjectCheck(e))return!1;return!0}else return!1;else{const e=typeof n;return e==="string"||e==="number"||e==="boolean"}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function printSummary(n,e,t,r=console.log){const s=isModelSequentialLike(n),i=["Layer (type)","Input Shape","Output shape","Param #"];s?(e=e||90,t=t||[.32,.61,.89,1]):(e=e||115,t=t||[.24,.48,.7,.8,1]),t[t.length-1]<=1&&(t=t.map(u=>Math.floor(e*u)));let o;if(!s){i.push("Receives inputs"),o=[];for(const u in n.nodesByDepth)o.push(...n.nodesByDepth[u])}r("_".repeat(e)),printRow(i,t,r),r("=".repeat(e));const a=n.layers;for(let u=0;u<a.length;++u)s?printLayerSummary(a[u],t,r):printLayerSummaryWithConnections(a[u],t,o,r),r((u===a.length-1?"=":"_").repeat(e));n.checkTrainableWeightsConsistency();const l=countTrainableParams(n),c=countParamsInWeights(n.nonTrainableWeights);r(`Total params: ${l+c}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${c}`),r("_".repeat(e))}function countTrainableParams(n){let e;return n.collectedTrainableWeights!=null?e=countParamsInWeights(n.collectedTrainableWeights):e=countParamsInWeights(n.trainableWeights),e}function isModelSequentialLike(n){let e=!0;const t=[],r=[];for(const s in n.nodesByDepth)t.push(n.nodesByDepth[s]);for(const s of t){if(s.length>1||s.length===1&&s[0].inboundLayers.length>1){e=!1;break}r.push(...s)}if(e)for(const s of n.layers){let i=!1;for(const o of s.inboundNodes)if(r.indexOf(o)!==-1)if(i){e=!1;break}else i=!0;if(!e)break}return e}function printRow(n,e,t=console.log){let r="";for(let s=0;s<n.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=n[s],r=r.slice(0,e[s]),r+=" ".repeat(e[s]-r.length);t(r)}function printLayerSummary(n,e,t){let r,s;try{s=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{s="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const i=n.name,o=n.getClassName(),a=[`${i} (${o})`,s,r,n.countParams().toString()];printRow(a,e,t)}function printLayerSummaryWithConnections(n,e,t,r){let s,i;try{i=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{i="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}const o=[];for(const h of n.inboundNodes)if(!(t!=null&&t.length>0&&t.indexOf(h)===-1))for(let d=0;d<h.inboundLayers.length;++d){const g=h.inboundLayers[d].name,x=h.nodeIndices[d],y=h.tensorIndices[d];o.push(`${g}[${x}][${y}]`)}const a=n.name,l=n.getClassName(),c=o.length===0?"":o[0],u=[`${a} (${l})`,i,s,n.countParams().toString(),c];printRow(u,e,r);for(let h=1;h<o.length;++h)printRow(["","","","",o[h]],e,r)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayItemInputOrOutputName(n,e,t){return(n==="inboundNodes"||n==="outputLayers"||n==="inputLayers")&&e===0&&typeof t=="string"}function convertPythonicToTs(n,e){if(n===null)return null;if(typeof n=="string")return toCamelCase(n);if(typeof n=="number"||typeof n=="boolean")return n;if(n instanceof Array){const t=[],r=n.length;for(let s=0;s<r;++s){const i=n[s];isArrayItemInputOrOutputName(e,s,i)?t.push(i):t.push(convertPythonicToTs(i,e))}return t}else{const t={};for(const r of Object.keys(n)){const s=n[r];if(r==="name"&&typeof s=="string")t[r]=s;else{const i=toCamelCase(r);t[i]=convertPythonicToTs(s,i)}}return t}}function convertTsToPythonic(n,e){if(n==null)return null;if(typeof n=="string")return toSnakeCase(n);if(typeof n=="number"||typeof n=="boolean")return n;if(n instanceof Array){const t=[],r=n.length;for(let s=0;s<r;++s){const i=n[s];isArrayItemInputOrOutputName(e,s,i)?t.push(i):t.push(convertTsToPythonic(i,e))}return t}else{const t={};for(const r of Object.keys(n)){const s=n[r],i=toSnakeCase(r);(r==="name"||r==="className")&&typeof s=="string"?t[i]=s:t[i]=convertTsToPythonic(s,r)}return t}}/** @license See the LICENSE file. */const version$1="4.2.0";/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Container extends Layer{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,this.name==null){const S=this.getClassName().toLowerCase();this.name=getUid(S)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],unique$2(this.inputs).length!==this.inputs.length)throw new ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(S=>S.name)}`);unique$2(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(S=>S.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const S of this.outputs){const _=S.sourceLayer,T=S.nodeIndex,k=S.tensorIndex;this.outputLayers.push(_),this.outputLayersNodeIndices.push(T),this.outputLayersTensorIndices.push(k)}for(const S of this.inputs){const _=S.sourceLayer,T=S.nodeIndex,k=S.tensorIndex;assert(T===0,"input layer has >1 nodes"),assert(k===0,"input layer has >1 tensors"),this.inputLayers.push(_),this.inputLayersNodeIndices.push(T),this.inputLayersTensorIndices.push(k)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let S=0;S<this.inputLayers.length;S++){const _=this.inputLayers[S];if(!(_ instanceof InputLayer))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${S} (0-based) originates from layer type ${_.getClassName()}.`);this.inputNames.push(_.name),this.feedInputShapes.push(_.batchInputShape),this.feedInputNames.push(_.name)}for(const S of this.outputLayers)this.outputNames.push(S.name);this.internalInputShapes=this.inputs.map(S=>S.shape),this.internalOutputShapes=this.outputs.map(S=>S.shape);const t={},r={},s={},i={},o={},a=[],l=(S,_,T,k,P,L)=>{(k==null||P==null||L==null)&&(k=S.sourceLayer,P=S.nodeIndex,L=S.tensorIndex);const D=k.inboundNodes[P];if(T.indexOf(D)!==-1)throw new RuntimeError(`The tensor ${S.name} at layer "${k.name}" is part of a cycle.`);if(_.indexOf(D)!==-1)return;this.containerNodes.add(Container.nodeKey(k,P)),k.id in o||(o[k.id]=Object.keys(o).length),T.indexOf(D)===-1&&T.push(D);const M=D.inboundLayers.length;for(let O=0;O<M;O++){const R=D.inputTensors[O],z=D.inboundLayers[O],X=D.nodeIndices[O],K=D.tensorIndices[O];l(R,_,T,z,X,K)}for(_.push(D);T.indexOf(D)>=0;)T.splice(T.indexOf(D),1);a.push(D)},c=[],u=[];for(const S of this.outputs)l(S,c,u);const h=a.slice().reverse();for(const S of h){r[S.id]=S,S.id in t||(t[S.id]=0);let _=t[S.id];const T=s[S.outboundLayer.id]==null?0:s[S.outboundLayer.id];_=Math.max(_,T),s[S.outboundLayer.id]=_,i[S.outboundLayer.id]=S.outboundLayer,t[S.id]=_;for(let k=0;k<S.inboundLayers.length;k++){const P=S.inboundLayers[k],L=S.nodeIndices[k],D=P.inboundNodes[L],M=t[D.id]==null?0:t[D.id];t[D.id]=Math.max(_+1,M),r[D.id]=D}}const d={};for(const S in t){const _=t[S];_ in d||(d[_]=[]),d[_].push(r[S])}const g={};for(const S in s){const _=s[S];_ in g||(g[_]=[]),g[_].push(i[S])}let x=Object.keys(g).map(S=>parseInt(S,10)).sort(reverseNumberCompare);this.layers=[];for(const S of x){const _=g[S];_.sort((T,k)=>{const P=o[T.id],L=o[k.id];return P<L?-1:P>L?1:0});for(const T of _)T instanceof Container&&this.internalContainerRefs.push(T),this.layers.push(T)}this.layersByDepth=g,x=Object.keys(d).map(S=>parseInt(S,10)).sort(reverseNumberCompare);const y=this.inputs.slice(),w=[];for(const S of x)for(const _ of d[S]){const T=_.outboundLayer;if(T!=null){for(const k of _.inputTensors)if(y.indexOf(k)===-1)throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${k} at layer "${T.name}". The following previous layers were accessed without issue: ${w}`);for(const k of _.outputTensors)y.push(k);w.push(T.name)}}this.nodesByDepth=d;const $=this.layers.map(S=>S.name);for(const S of $){const _=$.filter(T=>T===S).length;if(_!==1)throw new RuntimeError(`The name "${S}" is used ${_} times in the model. All layer names should be unique. Layer names: `+JSON.stringify($))}this.outboundNodes=[],this.inboundNodes=[],new Node$1({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(S=>null),outputMasks:this.outputs.map(S=>null),inputShapes:this.inputs.map(S=>S.shape),outputShapes:this.outputs.map(S=>S.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(r=>r.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const r of this.layers)t.push(...r.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const r={};let s=0;for(const o of this.layers)for(const a of o.weights){if(r[a.originalName]!=null)throw new ValueError(`Duplicate weight name: ${a.originalName}`);r[a.originalName]=a,s++}const i=[];for(const o in e){let a=o;if(r[o]==null){const l=o.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(r[a]!=null)i.push([r[a],e[o]]);else if(t)throw new ValueError(`Provided weight data has no target variable: ${o}`);delete r[a]}if(t){const o=[];for(const a in r)o.push(a);if(o.length>0)throw new ValueError(`${o.length} of ${s} weights are not set: ${o}`)}batchSetValue(i)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${version$1}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const r=convertTsToPythonic(this.updatedConfig());return t?JSON.stringify(r):r}call(e,t){return tidy(()=>{e=toList(e);const r=new FeedDict;for(let s=0;s<this.inputs.length;++s)r.add(this.inputs[s],e[s]);return execute(this.outputs,r,t)})}computeMask(e,t){return tidy(()=>{e=toList(e);let r;return t==null?r=pyListRepeat(null,e.length):r=toList(t),this.runInternalGraph(e,r)[1]})}computeOutputShape(e){const t=normalizeShapeList(e);if(t.length!==this.inputLayers.length)throw new ValueError(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const r={};for(let a=0;a<t.length;a++){const l=this.inputLayers[a],c=t[a],u=l.name+"_0_0";r[u]=c}const s=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(reverseNumberCompare);if(s.length>1)for(const a of s){const l=this.nodesByDepth[a];for(const c of l){const u=c.outboundLayer;if(this.inputLayers.map(y=>y.id).indexOf(u.id)!==-1)continue;const h=[];for(let y=0;y<c.inboundLayers.length;y++){const w=c.inboundLayers[y],$=c.nodeIndices[y],S=c.tensorIndices[y],_=`${w.name}_${$}_${S}`,T=r[_];h.push(T)}const d=u.computeOutputShape(singletonOrArray(h)),g=normalizeShapeList(d),x=u.inboundNodes.indexOf(c);for(let y=0;y<g.length;y++){const w=`${u.name}_${x}_${y}`;r[w]=g[y]}}}const i=[],o=[];for(let a=0;a<this.outputLayers.length;a++){const l=this.outputLayers[a],c=this.outputLayersNodeIndices[a],u=this.outputLayersTensorIndices[a],h=`${l.name}_${c}_${u}`;o.push(h)}for(let a=0;a<o.length;a++){const l=o[a];assert(l in r),i.push(r[l])}return singletonOrArray(i)}runInternalGraph(e,t){t==null&&(t=pyListRepeat(null,e.length));const r={};for(let l=0;l<this.inputs.length;++l){const c=this.inputs[l],u=e[l],h=t[l];r[c.id]=[u,h]}const s=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(reverseNumberCompare);for(const l of s){const c=this.nodesByDepth[l];for(const u of c){const h=u.outboundLayer,d=u.inputTensors,g=u.outputTensors,x=new Array;for(const y of d)y.id in r&&x.push(r[y.id]);if(x.length===d.length){let y={},w,$,S,_;if(u.callArgs!=null&&(y=u.callArgs),x.length===1){const[T,k]=x[0];y.mask==null&&(y.mask=k),S=toList(h.call(T,y)),_=toList(h.computeMask(T,k)),w=[T],$=[k]}else w=x.map(T=>T[0]),$=x.map(T=>T[1]),y.mask==null&&(y.mask=$),S=toList(h.call(w,y)),_=toList(h.computeMask(w,$));if(h.activityRegularizer)throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let T=0;T<g.length;++T){const k=g[T],P=S[T],L=_[T];r[k.id]=[P,L]}}}}const i=[],o=[],a=[];for(const l of this.outputs){assert(l.id in r,`Could not compute output ${l.name} : ${l.id}`);const[c,u]=r[l.id];a.push(c.shape),i.push(c),o.push(u)}return[i,o,a]}buildNodeConversionMap(e){const t={};let r;for(const s of this.layers){r=s instanceof Container?1:0;for(let i=0;i<s.inboundNodes.length;i++){const o=Container.nodeKey(s,i);this.containerNodes.has(o)&&(t[o]=r,r+=1)}}return t}getLayer(e,t){if(t!=null){if(this.layers.length<=t)throw new ValueError(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}else if(e==null)throw new ValueError("Provide either a layer name or layer index");for(const r of this.layers)if(r.name===e)return r;throw new ValueError(`No such layer: ${e}`)}calculateLosses(){return tidy(()=>{const e=[];for(const t of this.layers)for(let r=0;r<t.inboundNodes.length;++r){const s=Container.nodeKey(t,r);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),r=[];for(const o of this.layers){const a=o.getClassName(),l=o.getConfig(),c=[];for(let h=0;h<o.inboundNodes.length;h++){const d=o.inboundNodes[h],g=Container.nodeKey(o,h);let x={};if(this.containerNodes.has(g)){if(d.callArgs)try{JSON.stringify(d.callArgs),x=d.callArgs}catch{console.warn(`Layer ${o.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),x={}}if(d.inboundLayers.length>0){const y=[];for(let w=0;w<d.inboundLayers.length;w++){const $=d.inboundLayers[w],S=d.nodeIndices[w],_=d.tensorIndices[w],T=Container.nodeKey($,S);let k=t[T];k==null&&(k=0),y.push([$.name,k,_,x])}c.push(y)}}}const u={};u.name=o.name,u.className=a,u.config=l,u.inboundNodes=c,r.push(u)}e.layers=r;const s=[];for(let o=0;o<this.inputLayers.length;o++){const a=this.inputLayers[o],l=this.inputLayersNodeIndices[o],c=Container.nodeKey(a,l);if(!this.containerNodes.has(c))continue;let u=t[c];u==null&&(u=0);const h=this.inputLayersTensorIndices[o];s.push([a.name,u,h])}e.inputLayers=s;const i=[];for(let o=0;o<this.outputLayers.length;o++){const a=this.outputLayers[o],l=this.outputLayersNodeIndices[o],c=Container.nodeKey(a,l);if(!this.containerNodes.has(c))continue;let u=t[c];u==null&&(u=0);const h=this.outputLayersTensorIndices[o];i.push([a.name,u,h])}return e.outputLayers=i,e}static fromConfig(e,t,r={},s=!1){const i={},o={};function a(w,$){w.name in o?o[w.name].push($):o[w.name]=[$]}function l(w,$){const S=[];let _;for(const T of $){const k=T[0],P=T[1],L=T[2];if(_=T[3]==null?{}:T[3],!(k in i)){a(w,$);return}const D=i[k];if(D.inboundNodes.length<=P){a(w,$);return}const M=D.inboundNodes[P];S.push(M.outputTensors[L])}S.length>0&&w.apply(singletonOrArray(S),_)}function c(w){const $=w.name,S=deserialize(w,t.customObjects!=null?t.customObjects:{});S.setFastWeightInitDuringBuild(s),i[$]=S,w.inboundNodes.forEach(T=>{if(!(T instanceof Array))throw new ValueError(`Corrupted configuration, expected array for nodeData: ${T}`);a(S,T)})}const u=t.name,h=t.layers;for(const w of h)c(w);for(;!isObjectEmpty(o);)for(const w of h){const $=i[w.name];if($.name in o){const S=o[$.name];delete o[$.name];for(const _ of S)l($,_)}}const d=[],g=[],x=t.inputLayers;for(const w of x){const $=w[0],S=w[1],_=w[2];assert($ in i);const k=i[$].inboundNodes[S].outputTensors;d.push(k[_])}const y=t.outputLayers;for(const w of y){const $=w[0],S=w[1],_=w[2];assert($ in i);const k=i[$].inboundNodes[S].outputTensors;g.push(k[_])}return new e({inputs:d,outputs:g,name:u})}get stateful(){if(this._stateful)throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){tidy(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeSampleOrClassWeights(n,e,t){const r=e.length;if(n==null||Array.isArray(n)&&n.length===0)return e.map(s=>null);if(r===1)return Array.isArray(n)&&n.length===1?n:typeof n=="object"&&e[0]in n?[n[e[0]]]:[n];if(Array.isArray(n)){if(n.length!==r)throw new Error(`Provided ${t} is an array of ${n.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return n}else if(typeof n=="object"&&Object.keys(n).length>0&&typeof n[Object.keys(n)[0]]=="object"){const s=[];return e.forEach(i=>{i in n?s.push(n[i]):s.push(null)}),s}else throw new Error(`The model has multiple (${r}) outputs, so ${t} must be either an array with ${r} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(n)}`)}function standardizeClassWeights(n,e){return standardizeSampleOrClassWeights(n,e,"classWeight")}async function standardizeWeights(n,e,t,r){if(t!=null){const s=tidy(()=>{if(n.shape.length===1)return clone(n);if(n.shape.length===2){if(n.shape[1]>1)return argMax$2(n,1);if(n.shape[1]===1)return reshape$2(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),i=Array.from(await s.data());dispose(s);const o=[];return i.forEach(a=>{if(t[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);o.push(t[a])}),tensor1d(o,"float32")}else return null}function computeWeightedLoss(n,e){return mul(n,e)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VALIDATION_BATCH_SIZE=32;function standardizeDataIteratorOutput(n,e){let t,r;const s=e;t=s.xs,r=s.ys,assert$1(t!=null&&r!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);const i=flattenTensorOrArrayOrMap("input",n.inputNames,t),o=flattenTensorOrArrayOrMap("output",n.outputNames,r),a=i[0].shape[0];assert$1(i.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),assert$1(o.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<i.length;l++)assert$1(i[l].shape[0]===a,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);for(let l=0;l<o.length;l++)assert$1(o[l].shape[0]===a,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);return{xs:i,ys:o}}function flattenTensorOrArrayOrMap(n,e,t){if(t instanceof Tensor)return[t];if(Array.isArray(t))return assert$1(t.length===e.length,()=>`Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${n} keys ${e}.`),t;{const r=[];for(const s of e){if(t[s]==null)throw new ValueError(`The feature data generated by the dataset lacks the required ${n} key '${s}'.`);r.push(t[s])}return r}}function standardizeTensorValidationData(n){if(n.length===3)throw new NotImplementedError("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}async function fitDataset(n,e,t){const r=t.batchesPerEpoch!=null;if(assert$1(n.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),assert$1(t!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),assert$1(t.epochs!=null&&t.epochs>0&&Number.isInteger(t.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`),assert$1(!r||t.batchesPerEpoch>0&&Number.isInteger(t.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`),assert$1(t.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const s=t.validationData!=null;let i,o;if(s)if(isDatasetObject(t.validationData))assert$1(t.validationBatches==null||t.validationBatches>0&&Number.isInteger(t.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);else{const w=standardizeTensorValidationData(t.validationData);i=w.xs,o=w.ys}const a=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let c;s?c=l.slice().concat(l.map(w=>"val_"+w)):c=l.slice();const u=standardizeCallbacks(t.callbacks,t.yieldEvery),h=t.verbose==null?1:t.verbose,{callbackList:d,history:g}=configureCallbacks(u,h,t.epochs,null,null,getStepsPerEpoch(e,t),null,s,c);d.setModel(n),n.history=g,await d.onTrainBegin(),n.stopTraining_=!1;let x=t.initialEpoch==null?0:t.initialEpoch,y=await e.iterator();for(;x<t.epochs;){const w={};await d.onEpochBegin(x);let $=0,S=0;for(r||(y=await e.iterator());!r||$<t.batchesPerEpoch;){const _=await y.next();if(r&&_.done){console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${$} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch*t.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(_.value!=null){const{xs:T,ys:k}=standardizeDataIteratorOutput(n,_.value),P={};P.batch=S,P.size=T[0].shape[0],await d.onBatchBegin(S,P);const L=[];if(t.classWeight!=null){const O=standardizeClassWeights(t.classWeight,n.outputNames);for(let R=0;R<O.length;++R)L.push(await standardizeWeights(k[R],null,O[R]))}const D=T.concat(k).concat(L),M=a(D);dispose(D);for(let O=0;O<l.length;++O){const R=l[O],z=M[O];P[R]=z,keep(z)}await d.onBatchEnd(S,P),disposeTensorsInLogs(P),S++,$++}if(r?$>=t.batchesPerEpoch:_.done){if(s){let T;isDatasetObject(t.validationData)?T=toList(await n.evaluateDataset(t.validationData,{batches:t.validationBatches})):T=toList(n.evaluate(i,o,{batchSize:t.validationBatchSize==null?DEFAULT_VALIDATION_BATCH_SIZE:t.validationBatchSize,verbose:0}));for(let k=0;k<n.metricsNames.length;++k)w[`val_${n.metricsNames[k]}`]=T[k]}break}if(n.stopTraining_)break}if(await d.onEpochEnd(x,w),x++,n.stopTraining_)break}return await d.onTrainEnd(),await n.history.syncData(),n.history}finally{n.isTraining=!1}}function getStepsPerEpoch(n,e){let t=null;return e.batchesPerEpoch!=null?t=e.batchesPerEpoch:Number.isFinite(n.size)&&(t=n.size),t}function isDatasetObject(n){return typeof n.iterator=="function"}function isLazyIteratorObject(n){return typeof n.next=="function"}async function evaluateDataset(n,e,t){t=t||{};const r=t.batches!=null,s=n.testFunction;let i=[];if(t.verbose>0)throw new NotImplementedError("Verbose mode is not implemented yet.");assert$1(!r||t.batches>0&&Number.isInteger(t.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);const o=isLazyIteratorObject(e)?e:await e.iterator();let a=0,l=0;for(;!r||l<t.batches;){const c=await o.next();if(i=tidy(()=>{if(c.value){const{xs:u,ys:h}=standardizeDataIteratorOutput(n,c.value),d=u.concat(h),g=tidy(()=>s(d));if(dispose(d),l===0)for(let y=0;y<g.length;++y)i.push(scalar(0));const x=d[0].shape[0];for(let y=0;y<g.length;++y){const w=g[y],$=i[y];i[y]=tidy(()=>add$2(i[y],mul(x,w))),l>0&&dispose($)}dispose(g),a+=x,++l}return i}),c.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let c=0;c<i.length;++c){const u=i[c];i[c]=div$1(i[c],a),dispose(u)}return singletonOrArray(i)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkBatchSize(n){assert$1(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function sliceArrays(n,e,t){return n==null?[null]:Array.isArray(n)?n.map(r=>sliceAlongFirstAxis(r,e,t-e)):sliceAlongFirstAxis(n,e,t-e)}function sliceArraysByIndices(n,e){return tidy(()=>n==null?null:Array.isArray(n)?n.map(t=>sliceArraysByIndices(t,e)):gather(n,e.dtype==="int32"?e:cast$3(e,"int32")))}function makeBatches(n,e){const t=[];let r=0,s=null;for(;r<n;)s=r+e,s>=n&&(s=n),t.push([r,s]),r=s;return t}function ensureTensorsRank2OrHigher(n){const e=[];n instanceof Tensor&&(n=[n]);for(let t=0;t<n.length;++t){const r=n[t];if(r.rank===1)e.push(expandDims$2(r,1));else{if(r.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function disposeNewTensors(n,e){if(n==null)return;const t=[];if(e instanceof Tensor)t.push(e.id);else if(Array.isArray(e))e.forEach(s=>t.push(s.id));else if(e!=null)for(const s in e){const i=e[s];t.push(i.id)}const r=[];if(n instanceof Tensor)t.indexOf(n.id)===-1&&r.push(n);else if(Array.isArray(n))n.forEach(s=>{t.indexOf(s.id)===-1&&r.push(s)});else if(n!=null)for(const s in n){const i=n[s];t.indexOf(i.id)===-1&&r.push(i)}r.forEach(s=>{s.isDisposed||s.dispose()})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isDataTensor(n){return n instanceof Tensor}function isDataArray(n){return Array.isArray(n)}function isDataDict(n){return!isDataTensor(n)&&!isDataArray(n)}function standardizeInputData(n,e,t,r=!0,s=""){if(e==null||e.length===0){if(n!=null){let o=!1;if(isDataArray(n)&&n.length>0)o=!0;else if(isDataDict(n)){for(const a in n)if(n.hasOwnProperty(a)){o=!0;break}}else o=!0;if(o)throw new ValueError(`Error when checking model ${s} expected no data, but got ${n}`)}return[]}if(n==null)return e.map(o=>null);let i;if(isDataDict(n)){n=n,i=[];for(const o of e){if(n[o]==null)throw new ValueError(`No data provided for "${o}". Need data for each key in: ${e}`);i.push(n[o])}}else if(isDataArray(n)){if(n=n,n.length!==e.length)throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);i=n}else{if(n=n,e.length>1)throw new ValueError(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);i=[n]}if(i=ensureTensorsRank2OrHigher(i),t!=null)for(let o=0;o<e.length;++o){if(t[o]==null)continue;const a=i[o];if(a.shape.length!==t[o].length)throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have ${t[o].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<t[o].length;++l){if(l===0&&!r)continue;const c=a.shape[l],u=t[o][l];if(u!=null&&u>=0&&c!==u)throw new ValueError(`${s} expected a batch of elements where each example has shape [${t[o].slice(1,t[o].length)}] (i.e.,tensor shape [*,${t[o].slice(1,t[o].length)}]) but the ${s} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return i}function checkArrayLengths(n,e,t){const r=unique$2(n.map(i=>i.shape[0]));r.sort();const s=unique$2(e.map(i=>i.shape[0]));if(s.sort(),r.length>1)throw new ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(i=>i.shape))}`);if(s.length>1)throw new ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(i=>i.shape))}`);if(r.length>0&&s.length>0&&!arraysEqual(r,s))throw new ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}function checkLossAndTargetCompatibility(n,e,t){const r=[meanSquaredError,binaryCrossentropy$1,categoricalCrossentropy$1];for(let s=0;s<n.length;++s){const i=n[s],o=e[s],a=t[s];if(o!=null){if(o===categoricalCrossentropy$1&&i.shape[i.shape.length-1]===1)throw new ValueError(`You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(r.indexOf(o)!==-1){const l=i.shape.slice(1),c=a.slice(1);for(let u=0;u<l.length;++u){const h=l[u],d=c[u];if(d!=null&&h!==d)throw new ValueError(`A target Tensor with shape ${i.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function checkInputData(n,e,t,r=!0,s=""){let i;if(Array.isArray(n)){if(n.length!==e.length)throw new ValueError(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${n.length} Tensors(s).`);i=n}else{if(e.length>1)throw new ValueError(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);i=[n]}if(t!=null)for(let o=0;o<e.length;++o){if(t[o]==null)continue;const a=i[o];if(a.shape.length!==t[o].length)throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have ${t[o].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<t[o].length;++l){if(l===0&&!r)continue;const c=a.shape[l],u=t[o][l];if(u!=null&&u!==c)throw new ValueError(`Error when checking ${s}: expected ${e[o]} to have shape ${JSON.stringify(t[o])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function collectMetrics(n,e){if(n==null||Array.isArray(n)&&n.length===0)return e.map(r=>[]);let t;if(typeof n=="string"||typeof n=="function")t=[n];else if(Array.isArray(n)||typeof n=="object")t=n;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);if(Array.isArray(t))return e.map(r=>t);{const r=[];for(const s of e){let i=t.hasOwnProperty(s)?t[s]:[];Array.isArray(i)||(i=[i]),r.push(i)}return r}}const LAYERS_MODEL_FORMAT_NAME="layers-model";class LayersModel extends Container{constructor(e){super(e),this.isTraining=!1}summary(e,t,r=console.log){if(!this.built)throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");printSummary(this,e,t,r)}compile(e){if(e.loss==null&&(e.loss=[]),this.loss=e.loss,typeof e.optimizer=="string")this.optimizer_=getOptimizer(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Optimizer))throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(!Array.isArray(e.loss)&&typeof e.loss!="string"&&typeof e.loss!="function"){e.loss=e.loss;for(const o in e.loss)if(this.outputNames.indexOf(o)===-1)throw new ValueError(`Unknown entry in loss dictionary: "${o}". Only expected the following keys: ${this.outputNames}`);for(const o of this.outputNames)e.loss[o]==null&&console.warn(`Output "${o}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${o} during training`),t.push(get$1(e.loss[o]))}else if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(a=>get$1(a))}else{const o=get$1(e.loss);this.outputs.forEach(a=>{t.push(o)})}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let o=0;o<this.outputs.length;++o){const a=this.internalOutputShapes[o],l=this.outputNames[o];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[o])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],nameScope("loss",()=>{for(let o=0;o<this.outputs.length;++o){if(r.indexOf(o)!==-1)continue;const a=this.lossFunctions[o];this.outputs.length>1&&(this.metricsTensors.push([a,o]),this.metricsNames.push(this.outputNames[o]+"_loss"))}});const s=collectMetrics(e.metrics,this.outputNames),i=(o,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[o]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,o])};nameScope("metric",()=>{for(let o=0;o<this.outputs.length;++o){if(r.indexOf(o)!==-1)continue;const a=s[o];(c=>{const u="";let h,d,g;for(const x of c){if(typeof x=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(x)!==-1){const w=this.internalOutputShapes[o];w[w.length-1]===1||this.lossFunctions[o]===binaryCrossentropy$1?["accuracy","acc"].indexOf(x)!==-1?d=binaryAccuracy:["crossentropy","ce"].indexOf(x)!==-1&&(d=binaryCrossentropy):this.lossFunctions[o]===sparseCategoricalCrossentropy$1?["accuracy","acc"].indexOf(x)!==-1?d=sparseCategoricalAccuracy:["crossentropy","ce"].indexOf(x)!==-1&&(d=sparseCategoricalCrossentropy):["accuracy","acc"].indexOf(x)!==-1?d=categoricalAccuracy:["crossentropy","ce"].indexOf(x)!==-1&&(d=categoricalCrossentropy);let $;["accuracy","acc"].indexOf(x)!==-1?$="acc":["crossentropy","ce"].indexOf(x)!==-1&&($="ce"),g=d,h=u+$}else g=get(x),h=u+getLossOrMetricName(x);let y;nameScope(h,()=>{y=g}),i(o,h,y)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,r={}){const s=r.batchSize==null?32:r.batchSize;checkBatchSize(s);const o=this.standardizeUserDataXY(e,t,!0,s);try{const a=o[0].concat(o[1]);this.makeTestFunction();const l=this.testFunction,c=this.testLoop(l,a,s,r.verbose,r.steps);return singletonOrArray(c)}finally{disposeNewTensors(o[0],e),disposeNewTensors(o[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),evaluateDataset(this,e,t)}checkNumSamples(e,t,r,s="steps"){let i;if(r!=null){if(i=null,t!=null)throw new ValueError(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(e!=null)Array.isArray(e)?i=e[0].shape[0]:i=e.shape[0];else throw new ValueError(`Either the input data should have a defined shape, or ${s} shoud be specified.`);return i}execute(e,t){if(Array.isArray(t)&&t.length===0)throw new ValueError("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(t),s=r?t:[t],i=this.retrieveSymbolicTensors(s),o=new FeedDict;if(e instanceof Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new ValueError(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)o.add(this.inputs[l],e[l])}else for(const l of this.inputs){const c=e[l.name];if(c==null)throw new ValueError(`No value is provided for the model's input ${l.name}`);o.add(l,c)}const a=execute(i,o);return r?a:a[0]}retrieveSymbolicTensors(e){const t=pyListRepeat(null,e.length);let r=e.length;for(const s of this.layers){const i=Array.isArray(s.output)?s.output:[s.output],o=i.map(a=>a.name);for(let a=0;a<e.length;++a){const l=o.indexOf(e[a]);if(l!==-1&&(t[a]=i[l],r--),r===0)break}if(r===0)break}if(r>0){const s=[];throw t.forEach((i,o)=>{i==null&&s.push(e[o])}),new ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(s)}`)}return t}predictLoop(e,t=32,r=!1){return tidy(()=>{const s=this.checkNumSamples(e);if(r)throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");const i=makeBatches(s,t),o=this.outputs.map(a=>[]);for(let a=0;a<i.length;++a)tidy(()=>{const c=i[a][0],u=i[a][1],h=sliceArrays(e,c,u),d=[];if(Array.isArray(h))for(let x=0;x<h.length;++x)d.push({key:this.inputs[x],value:h[x]});else d.push({key:this.inputs[0],value:h});const g=new FeedDict(d);return execute(this.outputs,g)}).forEach((c,u)=>o[u].push(c));return singletonOrArray(o.map(a=>concat$2(a,0)))})}predict(e,t={}){const r=ensureTensorsRank2OrHigher(e);checkInputData(r,this.inputNames,this.feedInputShapes,!1);try{const s=t.batchSize==null?32:t.batchSize;return checkBatchSize(s),this.predictLoop(r,s)}finally{disposeNewTensors(r,e)}}predictOnBatch(e){checkInputData(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,r=!0,s){if(this.optimizer_==null)throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const i=[];for(let o=0;o<this.feedOutputShapes.length;++o){const a=this.feedOutputShapes[o];this.feedLossFns[o]===sparseCategoricalCrossentropy$1?i.push(a.slice(0,a.length-1).concat([1])):i.push(a)}if(e=standardizeInputData(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=standardizeInputData(t,this.feedOutputNames,i,!1,"target"),checkArrayLengths(e,t),checkLossAndTargetCompatibility(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&s!=null&&s>0&&e[0].shape[0]%s!==0)throw new ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,r,s,i=!0,o){const[a,l]=this.standardizeUserDataXY(e,t,i,o);if(r!=null)throw new Error("sample weight is not supported yet.");let c=null;if(s!=null){const u=standardizeClassWeights(s,this.outputNames);c=[];for(let h=0;h<u.length;++h)c.push(await standardizeWeights(l[h],null,u[h]))}return[a,l,c]}testLoop(e,t,r,s=0,i){return tidy(()=>{const o=this.checkNumSamples(t,r,i,"steps"),a=[];if(s>0)throw new NotImplementedError("Verbose mode is not implemented yet.");if(i!=null)throw new NotImplementedError("steps mode in testLoop() is not implemented yet");{const l=makeBatches(o,r),c=tensor1d(range$2(0,o));for(let u=0;u<l.length;++u){const h=l[u][0],d=l[u][1],g=sliceAlongFirstAxis(c,h,d-h),x=sliceArraysByIndices(t,g),y=e(x);if(u===0)for(let w=0;w<y.length;++w)a.push(scalar(0));for(let w=0;w<y.length;++w){const $=y[w];a[w]=add$2(a[w],mul(d-h,$))}}for(let u=0;u<a.length;++u)a[u]=div$1(a[u],o)}return a})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let r=0;r<e.length;++r){const s=e[r];let i=s;if(count(e,s)>1){const o=count(e.slice(0,r),s);i+=`_${o}`}t.push(i)}return t}makeTrainFunction(){return e=>{const t=[],r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),o=[],a=()=>{const h=[];for(let y=0;y<this.inputs.length;++y)h.push({key:this.inputs[y],value:r[y]});const d=new FeedDict(h),g=execute(this.outputs,d,{training:!0});let x;for(let y=0;y<this.lossFunctions.length;++y){const w=this.lossFunctions[y];let $=w(s[y],g[y]);i[y]!=null&&($=computeWeightedLoss($,i[y]));const S=mean$4($);t.push(S),y===0?x=$:x=add$2(x,$)}for(let y=0;y<this.metricsTensors.length;++y){let w;if(this.outputs.length>1&&y<this.outputs.length)w=t[y];else{const $=this.metricsTensors[y][0],S=this.metricsTensors[y][1];w=mean$4($(s[S],g[S]))}keep(w),o.push(w)}return x=mean$4(x),this.calculateLosses().forEach(y=>{x=add$2(x,y)}),x},l=this.collectedTrainableWeights.map(h=>h.read());return[this.optimizer_.minimize(a,!0,l)].concat(o)}}makeTestFunction(){this.testFunction=e=>tidy(()=>{const t=[];let r;const s=e.slice(0,this.inputs.length),i=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),o=[];for(let c=0;c<this.inputs.length;++c)o.push({key:this.inputs[c],value:s[c]});const a=new FeedDict(o),l=execute(this.outputs,a);for(let c=0;c<this.lossFunctions.length;++c){const u=this.lossFunctions[c],h=mean$4(u(i[c],l[c]));c===0?r=h:r=add$2(r,h),t.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const u=this.metricsTensors[c][0],h=this.metricsTensors[c][1],d=mean$4(u(i[h],l[h]));t.push(d)}return t})}async fit(e,t,r={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;let s,i,o,a,l,c,u,h,d;try{const g=r.batchSize==null?32:r.batchSize;checkBatchSize(g);const y=await this.standardizeUserData(e,t,r.sampleWeight,r.classWeight,!1,g);s=y[0],i=y[1],d=y[2];let w=!1,$;if(r.validationData!=null&&r.validationData.length>0){if(w=!0,r.validationData.length===2)l=r.validationData[0],c=r.validationData[1];else throw r.validationData.length===3?new NotImplementedError("validationData including sample weights is not supported yet."):new ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);const O=await this.standardizeUserData(l,c,null,null,!0,g);u=O[0],h=O[1],$=u.concat(h)}else if(r.validationSplit!=null&&r.validationSplit>0&&r.validationSplit<1){w=!0;const M=Math.floor(s[0].shape[0]*(1-r.validationSplit)),O=s[0].shape[0];u=sliceArrays(s,M,O),o=s,s=sliceArrays(s,0,M),h=sliceArrays(i,M,O),a=i,i=sliceArrays(i,0,M),$=u.concat(h)}else r.validationSteps!=null&&(w=!0);const S=s.concat(i).concat(d);this.checkTrainableWeightsConsistency();const _=this.makeTrainFunction(),T=this.getDedupedMetricsNames();let k,P;w?(this.makeTestFunction(),k=this.testFunction,P=T.slice().concat(T.map(M=>"val_"+M))):(k=null,$=[],P=T.slice());const L=standardizeCallbacks(r.callbacks,r.yieldEvery);return await this.fitLoop(_,S,T,g,r.epochs,r.verbose,L,k,$,r.shuffle,P,r.initialEpoch,null,null)}finally{this.isTraining=!1,disposeNewTensors(s,e),disposeNewTensors(i,t),disposeNewTensors(o,e),disposeNewTensors(a,t),disposeNewTensors(u,l),disposeNewTensors(h,c),d!=null&&dispose(d)}}async fitLoop(e,t,r,s,i,o,a,l,c,u,h,d,g,x){s==null&&(s=32),i==null&&(i=1),u==null&&(u=!0),d==null&&(d=0);let y=!1;if(l!=null&&c!=null&&(y=!0),x!=null&&(y=!0,g==null))throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const w=this.checkNumSamples(t,s,g,"steps_per_epoch");let $;w!=null&&($=range$2(0,w)),o==null&&(o=1);const{callbackList:S,history:_}=configureCallbacks(a,o,i,d,w,g,s,y,h);S.setModel(this),this.history=_,await S.onTrainBegin(),this.stopTraining_=!1;for(let T=d;T<i;++T){await S.onEpochBegin(T);const k={};if(g!=null)throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");{if(u==="batch")throw new NotImplementedError("batch shuffling is not implemneted yet");u&&shuffle($);const P=tensor1d($),L=makeBatches(w,s);for(let D=0;D<L.length;++D){const M={};if(await S.onBatchBegin(D,M),tidy(()=>{const O=L[D][0],R=L[D][1],z=sliceAlongFirstAxis(P,O,R-O);M.batch=D,M.size=R-O;const X=sliceArraysByIndices(t,z),K=e(X);for(let Y=0;Y<r.length;++Y){const te=r[Y],ie=K[Y];M[te]=ie,keep(ie)}if(D===L.length-1&&y){const Y=this.testLoop(l,c,s);for(let te=0;te<r.length;++te){const ie=r[te],Q=Y[te];keep(Q),k["val_"+ie]=Q}}}),await S.onBatchEnd(D,M),disposeTensorsInLogs(M),this.stopTraining_)break}P.dispose()}if(await S.onEpochEnd(T,k),this.stopTraining_)break}return await S.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return fitDataset(this,e,t)}async trainOnBatch(e,t){const r=await this.standardizeUserData(e,t),s=r[0],i=r[1],a=this.makeTrainFunction()(s.concat(i)),l=[];for(const c of a){const u=await c.data();l.push(u[0])}return dispose(a),disposeNewTensors(r[0],e),disposeNewTensors(r[1],t),singletonOrArray(l)}getNamedWeights(e){const t=[],r=e!=null&&e.trainableOnly,s=r?this.trainableWeights:this.weights,i=this.getWeights(r);for(let o=0;o<s.length;++o)r&&!s[o].trainable||t.push({name:s[o].originalName,tensor:i[o]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(e.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){const t=memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-memory().numTensors}return e}getLossIdentifiers(){let e;if(typeof this.loss=="string")e=toSnakeCase(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if(typeof t!="string")throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(t=>toSnakeCase(t))}else{const t=Object.keys(this.loss);e={};const r=this.loss;for(const s of t)if(typeof r[s]=="string")e[s]=toSnakeCase(r[s]);else throw new Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[toSnakeCase(getLossOrMetricName(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>toSnakeCase(getLossOrMetricName(e)));{const e={};for(const t in this.metrics)e[t]=toSnakeCase(getLossOrMetricName(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(e.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(e.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(e.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");const t=convertPythonicToTs(e.optimizer_config),r=deserialize(t);let s;if(typeof e.loss=="string")s=toCamelCase(e.loss);else if(Array.isArray(e.loss))s=e.loss.map(o=>toCamelCase(o));else if(e.loss!=null){s={};for(const o in e.loss)s[o]=toCamelCase(e.loss[o])}let i;if(Array.isArray(e.metrics))i=e.metrics.map(o=>toCamelCase(o));else if(e.metrics!=null){i={};for(const o in e.metrics)i[o]=toCamelCase(e.metrics[o])}this.compile({loss:s,metrics:i,optimizer:r})}async save(e,t){if(typeof e=="string"){const c=getSaveHandlers(e);if(c.length===0)throw new ValueError(`Cannot find any save handlers for URL '${e}'`);if(c.length>1)throw new ValueError(`Found more than one (${c.length}) save handlers for URL '${e}'`);e=c[0]}if(e.save==null)throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const r=await encodeWeights(this.getNamedWeights(t)),a={modelTopology:this.toJSON(null,!1),format:LAYERS_MODEL_FORMAT_NAME,generatedBy:`TensorFlow.js tfjs-layers v${version$1}`,convertedBy:null};if((t==null?!1:t.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();const c="optimizer",{data:u,specs:h}=await encodeWeights(await this.optimizer.getWeights(),c);r.specs.push(...h),r.data=concatenateArrayBuffers([r.data,u])}return this.userDefinedMetadata!=null&&(checkUserDefinedMetadata(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=r.data,a.weightSpecs=r.specs,e.save(a)}setUserDefinedMetadata(e){checkUserDefinedMetadata(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}LayersModel.className="Model",registerClass(LayersModel);class Functional extends LayersModel{}Functional.className="Functional",registerClass(Functional);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Sequential extends LayersModel{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=e.name!=null?e.name:getUid("sequential_"),e.layers!=null)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new ValueError(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Sequential||e instanceof LayersModel;let r;if(t){if(r=e,r.outputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(r.inputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(e.inboundNodes.length===0){if(e.batchInputShape==null)throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const s=Input({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(s)}if(t)this.outputs=r.outputs,this.inputs=r.inputs;else{if(e.inboundNodes.length!==1)throw new ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(e.inboundNodes[0].outputTensors.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=getSourceInputs(this.outputs[0])}this.inboundNodes=[],new Node$1({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(s=>s.shape),outputShapes:this.outputs[0].shape})}else{const s=e.apply(this.outputs[0]);if(Array.isArray(s))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[s],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return this.model==null&&this.build(),this.model.call(e,t)}build(e){if(getExactlyOneShape(e),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,r=console.log){this.built||this.build(),super.summary(e,t,r)}setWeights(e){this.model==null&&this.build(),this.model.setWeights(e)}evaluate(e,t,r={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e,t,r)}async evaluateDataset(e,t){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return this.model==null&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return this.model==null&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,r={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fit(e,t,r)}async fitDataset(e,t){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,r={},s=!1){let i,o={};if(t instanceof Array){if(t[0].className==null||t[0].className==="Merge")throw new ValueError("Legacy serialization format not supported yet.");i=t}else assert$1(t.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),i=t.layers,delete t.layers,o=t;const a=new e(o);if(!(a instanceof Sequential))throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(const l of i){const u=deserialize(l,void 0,s);s&&u.setFastWeightInitDuringBuild(!0),a.add(u)}return a}set stopTraining(e){if(this.model==null)throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(this.model==null)throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const r={};r.className=t.getClassName(),r.config=t.getConfig(),e.push(r)}return{name:this.name,layers:e}}}Sequential.className="Sequential",registerClass(Sequential);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let Activation$1=class extends Serializable{getConfig(){return{}}};class Elu extends Activation$1{apply(e,t=1){return elu$2(e,t)}}Elu.className="elu",registerClass(Elu);class Selu extends Activation$1{apply(e){return selu$2(e)}}Selu.className="selu",registerClass(Selu);class Relu extends Activation$1{apply(e){return relu$2(e)}}Relu.className="relu",registerClass(Relu);class Relu6 extends Activation$1{apply(e){return tidy(()=>minimum$3(6,relu$2(e)))}}Relu6.className="relu6",registerClass(Relu6);class Linear extends Activation$1{apply(e){return e}}Linear.className="linear",registerClass(Linear);class Sigmoid extends Activation$1{apply(e){return sigmoid$2(e)}}Sigmoid.className="sigmoid",registerClass(Sigmoid);class HardSigmoid extends Activation$1{apply(e){return hardSigmoid(e)}}HardSigmoid.className="hardSigmoid",registerClass(HardSigmoid);class Softplus extends Activation$1{apply(e){return softplus$2(e)}}Softplus.className="softplus",registerClass(Softplus);class Softsign extends Activation$1{apply(e){return softsign(e)}}Softsign.className="softsign",registerClass(Softsign);class Tanh extends Activation$1{apply(e){return tanh$2(e)}}Tanh.className="tanh",registerClass(Tanh);let Softmax$1=class extends Activation$1{apply(e,t=-1){return softmax$2(e,t)}};Softmax$1.className="softmax",registerClass(Softmax$1);class LogSoftmax extends Activation$1{apply(e,t=-1){return logSoftmax(e,t)}}LogSoftmax.className="logSoftmax",registerClass(LogSoftmax);class Swish extends Activation$1{apply(e,t=1){return tidy(()=>mul(sigmoid$2(mul(e,t)),e))}}Swish.className="swish",registerClass(Swish);class Mish extends Activation$1{apply(e){return tidy(()=>mul(e,tanh$2(softplus$2(e))))}}Mish.className="mish",registerClass(Mish);function serializeActivation(n){return n.getClassName()}function deserializeActivation(n,e={}){return deserializeKerasObject(n,SerializationMap.getMap().classNameMap,e,"activation")}function getActivation(n){if(n==null){const e={};return e.className="linear",e.config={},deserializeActivation(e)}if(typeof n=="string"){const e={};return e.className=n,e.config={},deserializeActivation(e)}else return n instanceof Activation$1?n:deserializeActivation(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertObjectArgs(n){if(n!=null&&typeof n!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}class Regularizer extends Serializable{}class L1L2 extends Regularizer{constructor(e){super(),assertObjectArgs(e),this.l1=e==null||e.l1==null?.01:e.l1,this.l2=e==null||e.l2==null?.01:e.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(e){return tidy(()=>{let t=zeros$1([1]);return this.hasL1&&(t=add$2(t,sum$3(mul(this.l1,abs$3(e))))),this.hasL2&&(t=add$2(t,sum$3(mul(this.l2,square$1(e))))),reshape$2(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}L1L2.className="L1L2",registerClass(L1L2);const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={l1l2:"L1L2"};function serializeRegularizer(n){return serializeKerasObject(n)}function deserializeRegularizer(n,e={}){return deserializeKerasObject(n,SerializationMap.getMap().classNameMap,e,"regularizer")}function getRegularizer(n){if(n==null)return null;if(typeof n=="string"){const t={className:n in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[n]:n,config:{}};return deserializeRegularizer(t)}else return n instanceof Regularizer?n:deserializeRegularizer(n)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class ReLU extends Layer{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null&&(this.maxValue=e.maxValue)}call(e,t){e=getExactlyOneTensor(e);let r=relu$2(e);return this.maxValue!=null&&(r=clipByValue$2(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}ReLU.className="ReLU",registerClass(ReLU);class LeakyReLU extends Layer{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,e==null&&(e={}),this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const r=getExactlyOneTensor(e);return leakyRelu$2(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}LeakyReLU.className="LeakyReLU",registerClass(LeakyReLU);class PReLU extends Layer{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",e==null&&(e={}),this.supportsMasking=!0,this.alphaInitializer=getInitializer(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=getRegularizer(e.alphaRegularizer),this.alphaConstraint=getConstraint(e.alphaConstraint),e.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if(typeof e.sharedAxes=="number")this.sharedAxes=[e.sharedAxes];else throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){e=getExactlyOneShape(e);const t=e.slice(1);if(this.sharedAxes!=null)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(this.sharedAxes!=null)for(let s=1;s<e.length;++s)r[s]=e[s];this.inputSpec=[new InputSpec({ndim:e.length,axes:r})],this.built=!0}call(e,t){return e=getExactlyOneTensor(e),prelu$2(e,this.alpha.read())}getConfig(){const e={alphaInitializer:serializeInitializer(this.alphaInitializer),alphaRegularizer:serializeRegularizer(this.alphaRegularizer),alphaConstraint:serializeConstraint(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}PReLU.className="PReLU",registerClass(PReLU);let ELU$3=class extends Layer{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,e==null&&(e={}),e.alpha!=null&&e.alpha!==this.DEFAULT_ALPHA)throw new NotImplementedError(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const r=getExactlyOneTensor(e);return elu$3(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}};ELU$3.className="ELU",registerClass(ELU$3);class ThresholdedReLU extends Layer{constructor(e){super(e??{}),this.DEFAULT_THETA=1,e==null&&(e={}),this.theta=e.theta==null?this.DEFAULT_THETA:e.theta}call(e,t){const r=getExactlyOneTensor(e);return mul(r,cast$3(greater$2(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}ThresholdedReLU.className="ThresholdedReLU",registerClass(ThresholdedReLU);class Softmax extends Layer{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,e==null&&(e={}),this.softmax=new Softmax$1().apply,this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis}call(e,t){const r=getExactlyOneTensor(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}Softmax.className="Softmax",registerClass(Softmax);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function normalizeArray(n,e,t){if(typeof n=="number")return pyListRepeat(n,e);if(n.length!==e)throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${n.length} elements.`);for(let r=0;r<e;++r){const s=n[r];if(!isInteger$2(s))throw new ValueError(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(n)} including a non-integer number ${s}`)}return n}function convOutputLength(n,e,t,r,s=1){if(n==null)return n;const i=e+(e-1)*(s-1);let o;return t==="same"?o=n:o=n-i+1,Math.floor((o+r-1)/r)}function deconvLength(n,e,t,r){if(n==null)return null;if(r==="valid")n=n*e+max$5([t-e,0]);else if(r==="same")n=n*e;else throw new ValueError(`Unsupport padding mode: ${r}.`);return n}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function preprocessConv2DInput(n,e){return tidy(()=>(checkDataFormat(e),e==="channelsFirst"?transpose$2(n,[0,2,3,1]):n))}function preprocessConv3DInput(n,e){return tidy(()=>(checkDataFormat(e),e==="channelsFirst"?transpose$2(n,[0,2,3,4,1]):n))}function conv1dWithBias(n,e,t,r=1,s="valid",i,o=1){return tidy(()=>{if(i==null&&(i=imageDataFormat()),checkDataFormat(i),n.shape.length!==3)throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(e.shape.length!==3)throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(t!=null&&t.shape.length!==1)throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if(i==="channelsFirst"&&(n=transpose$2(n,[0,2,1])),s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=conv1d(n,e,r,s==="same"?"same":"valid","NWC",o);return t!=null&&(a=biasAdd(a,t)),a})}function conv2dWithBiasActivation(n,e,t,r=[1,1],s="valid",i,o,a=null){return tidy(()=>{if(i==null&&(i=imageDataFormat()),checkDataFormat(i),n.rank!==3&&n.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(e.rank!==3&&e.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=preprocessConv2DInput(n,i);if(s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=conv2d$1({x:l,filter:e,strides:r,pad:s==="same"?"same":"valid",dilations:o,dataFormat:"NHWC",bias:t,activation:a}),i==="channelsFirst"&&(l=transpose$2(l,[0,3,1,2])),l})}function conv3dWithBias(n,e,t,r=[1,1,1],s="valid",i,o){return tidy(()=>{if(i==null&&(i=imageDataFormat()),checkDataFormat(i),n.rank!==4&&n.rank!==5)throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(e.rank!==4&&e.rank!==5)throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let a=preprocessConv3DInput(n,i);if(s==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=conv3d(a,e,r,s==="same"?"same":"valid","NDHWC",o),t!=null&&(a=biasAdd(a,t)),i==="channelsFirst"&&(a=transpose$2(a,[0,4,1,2,3])),a})}class BaseConv extends Layer{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",BaseConv.verifyArgs(t),this.rank=e,assertPositiveInteger(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=normalizeArray(t.kernelSize,e,"kernelSize"),this.strides=normalizeArray(t.strides==null?1:t.strides,e,"strides"),this.padding=t.padding==null?"valid":t.padding,checkPaddingMode(this.padding),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,checkDataFormat(this.dataFormat),this.activation=getActivation(t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.biasInitializer=getInitializer(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=getConstraint(t.biasConstraint),this.biasRegularizer=getRegularizer(t.biasRegularizer),this.activityRegularizer=getRegularizer(t.activityRegularizer),this.dilationRate=normalizeArray(t.dilationRate==null?1:t.dilationRate,e,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(assert("kernelSize"in e,"required key 'kernelSize' not in config"),typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,3))throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:serializeActivation(this.activation),useBias:this.useBias,biasInitializer:serializeInitializer(this.biasInitializer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),biasConstraint:serializeConstraint(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Conv extends BaseConv{constructor(e,t){super(e,t),this.kernel=null,Conv.verifyArgs(t),this.filters=t.filters,assertPositiveInteger(this.filters,"filters"),this.kernelInitializer=getInitializer(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=getConstraint(t.kernelConstraint),this.kernelRegularizer=getRegularizer(t.kernelRegularizer)}build(e){e=getExactlyOneShape(e);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${e[t]}`);const r=e[t],s=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:r}}],this.built=!0}call(e,t){return tidy(()=>{e=getExactlyOneTensor(e);let r;const s=this.bias==null?null:this.bias.read(),i=mapActivationToFusedKernel(this.activation.getClassName());if(i!=null&&this.rank===2)r=conv2dWithBiasActivation(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate,i);else{if(this.rank===1)r=conv1dWithBias(e,this.kernel.read(),s,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)r=conv2dWithBiasActivation(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)r=conv3dWithBias(e,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(r=this.activation.apply(r))}return r})}computeOutputShape(e){e=getExactlyOneShape(e);const t=[],r=this.dataFormat==="channelsLast"?e.slice(1,e.length-1):e.slice(2);for(let i=0;i<r.length;++i){const o=convOutputLength(r[i],this.kernelSize[i],this.padding,this.strides[i],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[i]);t.push(o)}let s=[e[0]];return this.dataFormat==="channelsLast"?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:serializeInitializer(this.kernelInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||typeof e.filters!="number"||e.filters<1)throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Conv2D extends Conv{constructor(e){super(2,e),Conv2D.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,2))throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Conv2D.className="Conv2D",registerClass(Conv2D);class Conv3D extends Conv{constructor(e){super(3,e),Conv3D.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!(Array.isArray(e.kernelSize)&&(e.kernelSize.length===1||e.kernelSize.length===3)))throw new ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Conv3D.className="Conv3D",registerClass(Conv3D);class Conv2DTranspose extends Conv2D{constructor(e){if(super(e),this.inputSpec=[new InputSpec({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=getExactlyOneShape(e),e.length!==4)throw new ValueError("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:4,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy(()=>{let r=getExactlyOneTensor(e);if(r.shape.length!==4)throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const s=r.shape,i=s[0];let o,a;this.dataFormat==="channelsFirst"?(o=2,a=3):(o=1,a=2);const l=s[o],c=s[a],u=this.kernelSize[0],h=this.kernelSize[1],d=this.strides[0],g=this.strides[1],x=deconvLength(l,d,u,this.padding),y=deconvLength(c,g,h,this.padding),w=[i,x,y,this.filters];this.dataFormat!=="channelsLast"&&(r=transpose$2(r,[0,2,3,1]));let $=conv2dTranspose(r,this.kernel.read(),w,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&($=transpose$2($,[0,3,1,2])),this.bias!=null&&($=biasAdd($,this.bias.read(),this.dataFormat)),this.activation!=null&&($=this.activation.apply($)),$})}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();let r,s,i;this.dataFormat==="channelsFirst"?(r=1,s=2,i=3):(r=3,s=1,i=2);const o=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],c=this.strides[1];return t[r]=this.filters,t[s]=deconvLength(t[s],l,o,this.padding),t[i]=deconvLength(t[i],c,a,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Conv2DTranspose.className="Conv2DTranspose",registerClass(Conv2DTranspose);class Conv3DTranspose extends Conv3D{constructor(e){if(super(e),this.inputSpec=[new InputSpec({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=getExactlyOneShape(e),e.length!==5)throw new ValueError("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:5,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy(()=>{let r=getExactlyOneTensor(e);if(r.shape.length!==5)throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const s=r.shape,i=s[0];let o,a,l;this.dataFormat==="channelsFirst"?(l=2,o=3,a=4):(l=1,o=2,a=3);const c=s[l],u=s[o],h=s[a],d=this.kernelSize[0],g=this.kernelSize[1],x=this.kernelSize[2],y=this.strides[0],w=this.strides[1],$=this.strides[2],S=deconvLength(c,y,d,this.padding),_=deconvLength(u,w,g,this.padding),T=deconvLength(h,$,x,this.padding),k=[i,S,_,T,this.filters];this.dataFormat!=="channelsLast"&&(r=transpose$2(r,[0,2,3,4,1]));let P=conv3dTranspose(r,this.kernel.read(),k,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(P=transpose$2(P,[0,4,1,2,3])),this.bias!==null&&(P=biasAdd(P,this.bias.read(),this.dataFormat)),this.activation!==null&&(P=this.activation.apply(P)),P})}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();let r,s,i,o;this.dataFormat==="channelsFirst"?(r=1,s=2,i=3,o=4):(r=4,s=1,i=2,o=3);const a=this.kernelSize[0],l=this.kernelSize[1],c=this.kernelSize[2],u=this.strides[0],h=this.strides[1],d=this.strides[2];return t[r]=this.filters,t[s]=deconvLength(t[s],u,a,this.padding),t[i]=deconvLength(t[i],h,l,this.padding),t[o]=deconvLength(t[o],d,c,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Conv3DTranspose.className="Conv3DTranspose",registerClass(Conv3DTranspose);class SeparableConv extends Conv{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,t.filters==null)throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(t.kernelInitializer!=null||t.kernelRegularizer!=null||t.kernelConstraint!=null)throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(t.padding!=null&&t.padding!=="same"&&t.padding!=="valid")throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=getInitializer(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=getRegularizer(t.depthwiseRegularizer),this.depthwiseConstraint=getConstraint(t.depthwiseConstraint),this.pointwiseInitializer=getInitializer(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=getRegularizer(t.pointwiseRegularizer),this.pointwiseConstraint=getConstraint(t.pointwiseConstraint)}build(e){if(e=getExactlyOneShape(e),e.length<this.rank+2)throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null||e[t]<0)throw new ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const r=e[t],s=this.kernelSize.concat([r,this.depthMultiplier]),i=[];for(let a=0;a<this.rank;++a)i.push(1);i.push(r*this.depthMultiplier,this.filters);const o=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,o,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",i,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,o,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,o,this.biasConstraint):this.bias=null,this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:{[t]:r}})],this.built=!0}call(e,t){return tidy(()=>{e=getExactlyOneTensor(e);let r;if(this.rank===1)throw new NotImplementedError("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(e=transpose$2(e,[0,2,3,1])),r=separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=biasAdd(r,this.bias.read(),this.dataFormat)),this.activation!=null&&(r=this.activation.apply(r)),this.dataFormat==="channelsFirst"&&(r=transpose$2(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),e.pointwiseInitializer=serializeInitializer(this.pointwiseInitializer),e.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),e.pointwiseRegularizer=serializeRegularizer(this.pointwiseRegularizer),e.depthwiseConstraint=serializeConstraint(this.depthwiseConstraint),e.pointwiseConstraint=serializeConstraint(this.pointwiseConstraint),e}}SeparableConv.className="SeparableConv";class SeparableConv2D extends SeparableConv{constructor(e){super(2,e)}}SeparableConv2D.className="SeparableConv2D",registerClass(SeparableConv2D);class Conv1D extends Conv{constructor(e){super(1,e),Conv1D.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!checkArrayTypeAndLength(e.kernelSize,"number",1,1))throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Conv1D.className="Conv1D",registerClass(Conv1D);class Cropping2D extends Layer{constructor(e){super(e),typeof e.cropping=="number"?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:typeof e.cropping[0]=="number"?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=e.dataFormat===void 0?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return this.dataFormat==="channelsFirst"?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return tidy(()=>{if(e=getExactlyOneTensor(e),this.dataFormat==="channelsLast"){const r=sliceAlongAxis(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return sliceAlongAxis(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{const r=sliceAlongAxis(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return sliceAlongAxis(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Cropping2D.className="Cropping2D",registerClass(Cropping2D);class UpSampling2D extends Layer{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=e.size==null?this.DEFAULT_SIZE:e.size,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),this.interpolation=e.interpolation==null?"nearest":e.interpolation,checkInterpolationFormat(this.interpolation)}computeOutputShape(e){if(this.dataFormat==="channelsFirst"){const t=e[2]==null?null:this.size[0]*e[2],r=e[3]==null?null:this.size[1]*e[3];return[e[0],e[1],t,r]}else{const t=e[1]==null?null:this.size[0]*e[1],r=e[2]==null?null:this.size[1]*e[2];return[e[0],t,r,e[3]]}}call(e,t){return tidy(()=>{let r=getExactlyOneTensor(e);const s=r.shape;if(this.dataFormat==="channelsFirst"){r=transpose$2(r,[0,2,3,1]);const i=this.size[0]*s[2],o=this.size[1]*s[3],a=this.interpolation==="nearest"?image.resizeNearestNeighbor(r,[i,o]):image.resizeBilinear(r,[i,o]);return transpose$2(a,[0,3,1,2])}else{const i=this.size[0]*s[1],o=this.size[1]*s[2];return this.interpolation==="nearest"?image.resizeNearestNeighbor(r,[i,o]):image.resizeBilinear(r,[i,o])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}UpSampling2D.className="UpSampling2D",registerClass(UpSampling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function depthwiseConv2d(n,e,t=[1,1],r="valid",s,i){return tidy(()=>{s==null&&(s=imageDataFormat()),checkDataFormat(s);let o=preprocessConv2DInput(n,s);if(n.rank!==4)throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(e.rank!==4)throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return o=depthwiseConv2d$1(o,e,t,r==="same"?"same":"valid","NHWC",i),s==="channelsFirst"&&(o=transpose$2(o,[0,3,1,2])),o})}class DepthwiseConv2D extends BaseConv{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=getInitializer(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=getConstraint(e.depthwiseConstraint),this.depthwiseRegularizer=getRegularizer(e.depthwiseRegularizer)}build(e){if(e=getExactlyOneShape(e),e.length<4)throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t=this.dataFormat==="channelsFirst"?1:3;if(e[t]==null||e[t]<0)throw new ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const r=e[t],s=[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy(()=>{e=getExactlyOneTensor(e);let r=depthwiseConv2d(e,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=biasAdd(r,this.bias.read(),this.dataFormat)),this.activation!=null&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=getExactlyOneShape(e);const t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2],s=this.dataFormat==="channelsFirst"?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,i=convOutputLength(t,this.kernelSize[0],this.padding,this.strides[0]),o=convOutputLength(r,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[e[0],s,i,o]:[e[0],i,o,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),e.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),e.depthwiseConstraint=serializeConstraint(this.depthwiseRegularizer),e}}DepthwiseConv2D.className="DepthwiseConv2D",registerClass(DepthwiseConv2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeArgs(n,e,t,r){if(Array.isArray(n)){if(e!=null||t!=null)throw new ValueError("When inputs is an array, neither initialState or constants should be provided");r!=null&&(t=n.slice(n.length-r,n.length),n=n.slice(0,n.length-r)),n.length>1&&(e=n.slice(1,n.length)),n=n[0]}function s(i){return i==null||Array.isArray(i)?i:[i]}return e=s(e),t=s(t),{inputs:n,initialState:e,constants:t}}function rnn(n,e,t,r=!1,s,i,o=!1,a=!1){return tidy(()=>{const l=e.shape.length;if(l<3)throw new ValueError(`Input should be at least 3D, but is ${l}D.`);const c=[1,0].concat(range$2(2,l));e=transpose$2(e,c),o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),s!=null&&(s=cast$3(cast$3(s,"bool"),"float32"),s.rank===l-1&&(s=expandDims$3(s,-1)),s=transpose$2(s,c)),r&&(e=reverse$2(e,0),s!=null&&(s=reverse$2(s,0)));const u=[];let h,d=t;const g=e.shape[0],x=unstack(e);let y;s!=null&&(y=unstack(s));for(let $=0;$<g;++$){const S=x[$],_=tidy(()=>n(S,d));if(s==null)h=_[0],d=_[1];else{const T=tidy(()=>{const k=y[$],P=sub$2(onesLike$2(k),k),L=add$2(mul(_[0],k),mul(d[0],P)),D=d.map((M,O)=>add$2(mul(_[1][O],k),mul(M,P)));return{output:L,newStates:D}});h=T.output,d=T.newStates}a&&u.push(h)}let w;return a&&(w=stack(u,1)),[h,w,d]})}class RNN extends Layer{constructor(e){super(e);let t;if(e.cell==null)throw new ValueError("cell property is missing for the constructor of RNN.");if(Array.isArray(e.cell)?t=new StackedRNNCells({cells:e.cell}):t=e.cell,t.stateSize==null)throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=e.returnSequences==null?!1:e.returnSequences,this.returnState=e.returnState==null?!1:e.returnState,this.goBackwards=e.goBackwards==null?!1:e.goBackwards,this._stateful=e.stateful==null?!1:e.stateful,this.unroll=e.unroll==null?!1:e.unroll,this.supportsMasking=!0,this.inputSpec=[new InputSpec({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return range$2(0,e).map(t=>null)}else return this.states_}setStates(e){this.states_=e}computeOutputShape(e){isArrayOfShapes(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const r=t[0];let s;if(this.returnSequences?s=[e[0],e[1],r]:s=[e[0],r],this.returnState){const i=[];for(const o of t)i.push([e[0],o]);return[s].concat(i)}else return s}computeMask(e,t){return tidy(()=>{Array.isArray(t)&&(t=t[0]);const r=this.returnSequences?t:null;if(this.returnState){const s=this.states.map(i=>null);return[r].concat(s)}else return r})}get states(){if(this.states_==null){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let r=0;r<e;++r)t.push(null);return t}else return this.states_}set states(e){this.states_=e}build(e){if(this.numConstants!=null)throw new NotImplementedError("Constants support is not implemented in RNN yet.");isArrayOfShapes(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,r=e.slice(2);this.inputSpec[0]=new InputSpec({shape:[t,null,...r]});const s=[e[0]].concat(e.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!arraysEqual(this.stateSpec.map(o=>o.shape[o.shape.length-1]),i))throw new ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(o=>new InputSpec({shape:[null,o]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){tidy(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(r==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(s=>zeros$1([r,s])):this.states_=[zeros$1([r,this.cell.stateSize])];else if(e==null)dispose(this.states_),this.keptStates!=null&&(dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(s=>zeros$1([r,s])):this.states_[0]=zeros$1([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t===!0?this.keptStates.push(this.states_.slice()):dispose(this.states_);for(let s=0;s<this.states_.length;++s){const i=e[s],o=Array.isArray(this.cell.stateSize)?this.cell.stateSize[s]:this.cell.stateSize,a=[r,o];if(!arraysEqual(i.shape,a))throw new ValueError(`State ${s} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${i.shape}`);this.states_[s]=i}}this.states_=this.states_.map(s=>keep(s.clone()))})}apply(e,t){let r=t==null?null:t.initialState,s=t==null?null:t.constants;t==null&&(t={});const i=standardizeArgs(e,r,s,this.numConstants);e=i.inputs,r=i.initialState,s=i.constants;let o=[],a=[];if(r!=null){t.initialState=r,o=o.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new InputSpec({shape:c.shape}));a=a.concat(this.stateSpec)}if(s!=null&&(t.constants=s,o=o.concat(s),this.numConstants=s.length),o[0]instanceof SymbolicTensor){const c=[e].concat(o),u=this.inputSpec.concat(a),h=this.inputSpec;this.inputSpec=u;const d=super.apply(c,t);return this.inputSpec=h,d}else return super.apply(e,t)}call(e,t){return tidy(()=>{const r=t==null?null:t.mask,s=t==null?null:t.training;let i=t==null?null:t.initialState;e=getExactlyOneTensor(e),i==null&&(this.stateful?i=this.states_:i=this.getInitialState(e));const o=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(i.length!==o)throw new ValueError(`RNN Layer has ${o} state(s) but was passed ${i.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const a={training:s},c=rnn((x,y)=>{const w=this.cell.call([x].concat(y),a);return[w[0],w.slice(1)]},e,i,this.goBackwards,r,null,this.unroll,this.returnSequences),u=c[0],h=c[1],d=c[2];this.stateful&&this.resetStates(d,s);const g=this.returnSequences?h:u;return this.returnState?[g].concat(d):g})}getInitialState(e){return tidy(()=>{let t=zeros$1(e.shape);return t=sum$3(t,[1,2]),t=expandDims$2(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?tile$2(t,[1,r]):t):this.cell.stateSize>1?[tile$2(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(t.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===RNN.className&&(t.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),t)}static fromConfig(e,t,r={}){const s=t.cell,i=deserialize(s,r);return new e(Object.assign(t,{cell:i}))}}RNN.className="RNN",registerClass(RNN);class RNNCell extends Layer{}class SimpleRNNCell extends RNNCell{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation==null?this.DEFAULT_ACTIVATION:e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$5([1,max$5([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$5([1,max$5([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=getExactlyOneShape(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy(()=>{if(e=e,e.length!==2)throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const s=t.training==null?!1:t.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$2(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$2(r),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));let i;const o=this.dropoutMask,a=this.recurrentDropoutMask;o!=null?i=dot(mul(e,o),this.kernel.read()):i=dot(e,this.kernel.read()),this.bias!=null&&(i=biasAdd(i,this.bias.read())),a!=null&&(r=mul(r,a));let l=add$2(i,dot(r,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}SimpleRNNCell.className="SimpleRNNCell",registerClass(SimpleRNNCell);class SimpleRNN extends RNN{constructor(e){e.cell=new SimpleRNNCell(e),super(e)}call(e,t){return tidy(()=>{this.cell.dropoutMask!=null&&(dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,i=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:i})})}static fromConfig(e,t){return new e(t)}}SimpleRNN.className="SimpleRNN",registerClass(SimpleRNN);class GRUCell extends RNNCell{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new ValueError("GRUCell does not support reset_after parameter set to true.");this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=getActivation(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$5([1,max$5([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$5([1,max$5([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=getExactlyOneShape(e);const t=e[e.length-1];this.kernel=this.addWeight("kernel",[t,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return tidy(()=>{if(e=e,e.length!==2)throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=t.training==null?!1:t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$2(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$2(s),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=this.recurrentDropoutMask;let a,l,c;0<this.dropout&&this.dropout<1&&(e=mul(e,i[0]));let u=dot(e,this.kernel.read());this.useBias&&(u=biasAdd(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=mul(s,o[0]));const h=this.recurrentKernel.read(),[d,g]=split$2(h,[2*this.units,this.units],h.rank-1),x=dot(s,d),[y,w,$]=split$2(u,3,u.rank-1),[S,_]=split$2(x,2,x.rank-1);a=this.recurrentActivation.apply(add$2(y,S)),l=this.recurrentActivation.apply(add$2(w,_));const T=dot(mul(l,s),g);c=this.activation.apply(add$2($,T));const k=add$2(mul(a,s),mul(add$2(1,neg$2(a)),c));return[k,k]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}GRUCell.className="GRUCell",registerClass(GRUCell);class GRU extends RNN{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new GRUCell(e),super(e)}call(e,t){return tidy(()=>{this.cell.dropoutMask!=null&&(dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,i=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:i})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}GRU.className="GRU",registerClass(GRU);class LSTMCell extends RNNCell{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=getActivation(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.recurrentRegularizer=getRegularizer(e.recurrentRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.kernelConstraint=getConstraint(e.kernelConstraint),this.recurrentConstraint=getConstraint(e.recurrentConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.dropout=min$5([1,max$5([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=min$5([1,max$5([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;e=getExactlyOneShape(e);const r=e[e.length-1];this.kernel=this.addWeight("kernel",[r,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let s;if(this.useBias){if(this.unitForgetBias){const i=this.biasInitializer,o=this.units;s=new(t=class extends Initializer{apply(l,c){const u=i.apply([o]),h=new Ones().apply([o]),d=i.apply([o*2]);return concatAlongFirstAxis(concatAlongFirstAxis(u,h),d)}},t.className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return tidy(()=>{const r=t.training==null?!1:t.training;if(e=e,e.length!==3)throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const i=e[2];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$2(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$2(s),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,a=this.recurrentDropoutMask;let l,c,u,h;0<this.dropout&&this.dropout<1&&(e=mul(e,o[0]));let d=dot(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=mul(s,a[0])),d=add$2(d,dot(s,this.recurrentKernel.read())),this.useBias&&(d=biasAdd(d,this.bias.read()));const[g,x,y,w]=split$2(d,4,d.rank-1);l=this.recurrentActivation.apply(g),c=this.recurrentActivation.apply(x),u=add$2(mul(c,i),mul(l,this.activation.apply(y))),h=this.recurrentActivation.apply(w);const $=mul(h,this.activation.apply(u));return[$,$,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}LSTMCell.className="LSTMCell",registerClass(LSTMCell);class LSTM extends RNN{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new LSTMCell(e),super(e)}call(e,t){return tidy(()=>{this.cell.dropoutMask!=null&&(dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const r=t==null?null:t.mask,s=t==null?null:t.training,i=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:i})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}LSTM.className="LSTM",registerClass(LSTM);class StackedRNNCells extends RNNCell{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return tidy(()=>{e=e;let r=e.slice(1);const s=[];for(const a of this.cells.slice().reverse())Array.isArray(a.stateSize)?s.push(r.splice(0,a.stateSize.length)):s.push(r.splice(0,1));s.reverse();const i=[];let o;for(let a=0;a<this.cells.length;++a){const l=this.cells[a];r=s[a],a===0?o=[e[0]].concat(r):o=[o[0]].concat(r),o=l.call(o,t),i.push(o.slice(1))}r=[];for(const a of i.slice().reverse())r.push(...a);return[o[0]].concat(r)})}build(e){isArrayOfShapes(e)&&(e=e[0]),e=e;let t;this.cells.forEach((r,s)=>{nameScope(`RNNCell_${s}`,()=>{r.build(e),Array.isArray(r.stateSize)?t=r.stateSize[0]:t=r.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=i=>({className:i.getClassName(),config:i.getConfig()}),s={cells:this.cells.map(t)};return Object.assign(Object.assign({},e),s)}static fromConfig(e,t,r={}){const s=[];for(const i of t.cells)s.push(deserialize(i,r));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const r of this.cells)t.push(...r.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return batchGetValue(e)}setWeights(e){const t=[];for(const r of this.cells){const s=r.weights.length,i=e.splice(s);for(let o=0;o<r.weights.length;++o)t.push([r.weights[o],i[o]])}batchSetValue(t)}}StackedRNNCells.className="StackedRNNCells",registerClass(StackedRNNCells);function generateDropoutMask(n){const{ones:e,rate:t,training:r=!1,count:s=1,dropoutFunc:i}=n,o=()=>i!=null?i(e(),t):dropout(e(),t),a=()=>inTrainPhase(o,e,r);return!s||s<=1?keep(a().clone()):Array(s).fill(void 0).map(a).map(c=>keep(c.clone()))}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var __rest=function(n,e){var t={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,r=Object.getOwnPropertySymbols(n);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(n,r[s])&&(t[r[s]]=n[r[s]]);return t};class ConvRNN2D extends RNN{constructor(e){if(e.unroll)throw new NotImplementedError("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new NotImplementedError("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new InputSpec({ndim:5})]}call(e,t){return tidy(()=>{if(this.cell.dropoutMask!=null&&(dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new ValueError("ConvRNN2D cell does not support constants");const r=t==null?null:t.mask,s=t==null?null:t.training,i=t==null?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:i})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return tidy(()=>{const{stateSize:t}=this.cell,r=e.shape,s=this.computeSingleOutputShape(r),i=[s[0],...s.slice(2)],o=zeros$1(i);return Array.isArray(t)?Array(t.length).fill(o):[o]})}resetStates(e,t=!1){tidy(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,s=this.computeSingleOutputShape(r),i=[s[0],...s.slice(2)];if(r[0]==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$1(i)):this.states_=[zeros$1(i)];else if(e==null)dispose(this.states_),this.keptStates!=null&&(dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$1(i)):this.states_[0]=zeros$1(i);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):dispose(this.states_);for(let a=0;a<this.states_.length;++a){const l=e[a],c=i;if(!arraysEqual(l.shape,c))throw new ValueError(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>keep(a.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:r,kernelSize:s,padding:i,strides:o,dilationRate:a}=this.cell,l=t==="channelsFirst",c=e[l?3:2],u=e[l?4:3],h=convOutputLength(c,s[0],i,o[0],a[0]),d=convOutputLength(u,s[1],i,o[1],a[1]);return[...e.slice(0,2),...l?[r,h,d]:[h,d,r]]}}ConvRNN2D.className="ConvRNN2D";class ConvLSTM2DCell extends LSTMCell{constructor(e){const{filters:t,kernelSize:r,strides:s,padding:i,dataFormat:o,dilationRate:a}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,assertPositiveInteger(this.filters,"filters"),this.kernelSize=normalizeArray(r,2,"kernelSize"),this.kernelSize.forEach(l=>assertPositiveInteger(l,"kernelSize")),this.strides=normalizeArray(s||1,2,"strides"),this.strides.forEach(l=>assertPositiveInteger(l,"strides")),this.padding=i||"valid",checkPaddingMode(this.padding),this.dataFormat=o||"channelsLast",checkDataFormat(this.dataFormat),this.dilationRate=normalizeArray(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>assertPositiveInteger(l,"dilationRate"))}build(e){var t;e=getExactlyOneShape(e);const r=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[r]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${e[r]}`);const s=e[r],i=4,o=this.kernelSize.concat([s,this.filters*i]);this.kernel=this.addWeight("kernel",o,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,this.filters*i]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){const c=this.biasInitializer,u=this.filters;l=new(t=class extends Initializer{apply(d,g){const x=c.apply([u]),y=ones([u]),w=c.apply([u*2]);return concatenate([x,y,w])}},t.className="CustomInit",t)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*i],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return tidy(()=>{if(e.length!==3)throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=t.training||!1,s=e[0],i=e[1],o=e[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$2(s),rate:this.dropout,training:r,count:a,dropoutFunc:this.dropoutFunc}));const l=this.dropoutMask,c=(le,he,re)=>!he||!he[re]?le:mul(he[re],le);let u=c(s,l,0),h=c(s,l,1),d=c(s,l,2),g=c(s,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$2(i),rate:this.recurrentDropout,training:r,count:a,dropoutFunc:this.dropoutFunc}));const x=this.recurrentDropoutMask;let y=c(i,x,0),w=c(i,x,1),$=c(i,x,2),S=c(i,x,3);const _=3,[T,k,P,L]=split$2(this.kernel.read(),a,_),[D,M,O,R]=this.useBias?split$2(this.bias.read(),a):[null,null,null,null];u=this.inputConv(u,T,D,this.padding),h=this.inputConv(h,k,M,this.padding),d=this.inputConv(d,P,O,this.padding),g=this.inputConv(g,L,R,this.padding);const[z,X,K,Y]=split$2(this.recurrentKernel.read(),a,_);y=this.recurrentConv(y,z),w=this.recurrentConv(w,X),$=this.recurrentConv($,K),S=this.recurrentConv(S,Y);const te=this.recurrentActivation.apply(add$2(u,y)),ie=this.recurrentActivation.apply(add$2(h,w)),Q=add$2(mul(ie,o),mul(te,this.activation.apply(add$2(d,$)))),se=mul(this.recurrentActivation.apply(add$2(g,S)),this.activation.apply(Q));return[se,se,Q]})}getConfig(){const e=super.getConfig(),t=__rest(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},t),r)}inputConv(e,t,r,s){const i=conv2d$2(e,t,this.strides,s||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return r?biasAdd(i,r,this.dataFormat):i}recurrentConv(e,t){return conv2d$2(e,t,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}}ConvLSTM2DCell.className="ConvLSTM2DCell",registerClass(ConvLSTM2DCell);class ConvLSTM2D extends ConvRNN2D{constructor(e){const t=new ConvLSTM2DCell(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}ConvLSTM2D.className="ConvLSTM2D",registerClass(ConvLSTM2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Dropout extends Layer{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(this.noiseShape==null)return this.noiseShape;const t=e.shape,r=[];for(let s=0;s<this.noiseShape.length;++s)r.push(this.noiseShape[s]==null?t[s]:this.noiseShape[s]);return r}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);if(0<this.rate&&this.rate<1){const s=t.training==null?!1:t.training,i=this.getNoiseShape(r);return inTrainPhase(()=>dropout(r,this.rate,i,this.seed),()=>r,s)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Dropout.className="Dropout",registerClass(Dropout);class SpatialDropout1D extends Dropout{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}SpatialDropout1D.className="SpatialDropout1D",registerClass(SpatialDropout1D);class Dense extends Layer{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.batchInputShape==null&&e.inputShape==null&&e.inputDim!=null){let t=null;e.batchSize!=null&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(e.activation),e.useBias!=null&&(this.useBias=e.useBias),this.kernelInitializer=getInitializer(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=getInitializer(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=getConstraint(e.kernelConstraint),this.biasConstraint=getConstraint(e.biasConstraint),this.kernelRegularizer=getRegularizer(e.kernelRegularizer),this.biasRegularizer=getRegularizer(e.biasRegularizer),this.activityRegularizer=getRegularizer(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){e=getExactlyOneShape(e);const t=e[e.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();return t[t.length-1]=this.units,t}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),s=mapActivationToFusedKernel(this.activation.getClassName());let i;return s!=null?i=dot(r,this.kernel.read(),s,this.bias?this.bias.read():null):(i=dot(r,this.kernel.read()),this.bias!=null&&(i=biasAdd(i,this.bias.read())),this.activation!=null&&(i=this.activation.apply(i))),i})}getConfig(){const e={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),biasConstraint:serializeConstraint(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Dense.className="Dense",registerClass(Dense);class Flatten extends Layer{constructor(e){e=e||{},super(e),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=getExactlyOneShape(e);for(const t of e.slice(1))if(t==null)throw new ValueError(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],arrayProd(e,1)]}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);let r=getExactlyOneTensor(e);if(this.dataFormat==="channelsFirst"&&r.rank>1){const s=[0];for(let i=2;i<r.rank;++i)s.push(i);s.push(1),r=transpose$2(r,s)}return batchFlatten(r)})}getConfig(){const e={};this.dataFormat!=null&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Flatten.className="Flatten",registerClass(Flatten);class Activation extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.activation=getActivation(e.activation)}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return this.activation.apply(r)})}getConfig(){const e={activation:serializeActivation(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Activation.className="Activation",registerClass(Activation);class RepeatVector extends Layer{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return tidy(()=>(e=getExactlyOneTensor(e),repeat(e,this.n)))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}RepeatVector.className="RepeatVector",registerClass(RepeatVector);class Reshape extends Layer{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||e==null}fixUnknownDimension(e,t){const r="Total size of new array must be unchanged.",s=t.slice();let i=1,o=null;for(let l=0;l<s.length;++l){const c=s[l];if(this.isUnknown(c))if(o===null)o=l;else throw new ValueError("Can only specifiy one unknown dimension.");else i*=c}const a=arrayProd(e);if(o!==null){if(i===0||a%i!==0)throw new ValueError(r);s[o]=a/i}else if(a!==i)throw new ValueError(r);return s}computeOutputShape(e){let t=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),s=r.shape,i=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return reshape$2(r,i)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Reshape.className="Reshape",registerClass(Reshape);class Permute extends Layer{constructor(e){if(super(e),e.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=range$2(1,e.dims.length+1);if(!arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new InputSpec({ndim:this.dims.length+1})]}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.slice();return this.dims.forEach((r,s)=>{t[s+1]=e[r]}),t}call(e,t){return transpose$2(getExactlyOneTensor(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Permute.className="Permute",registerClass(Permute);class Masking extends Layer{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null?this.maskValue=e.maskValue==null?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const r=getExactlyOneTensor(e);return any$2(notEqual$2(r,this.maskValue),-1)}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e),o=any$2(notEqual$2(r,this.maskValue),-1,!0);return mul(r,cast$3(o,r.dtype))})}}Masking.className="Masking",registerClass(Masking);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Embedding extends Layer{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",e.batchInputShape==null&&e.inputShape==null){let t=null;e.batchSize!=null&&(t=e.batchSize),e.inputLength==null?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(toList(e.inputLength))}this.inputDim=e.inputDim,assertPositiveInteger(this.inputDim,"inputDim"),this.outputDim=e.outputDim,assertPositiveInteger(this.outputDim,"outputDim"),this.embeddingsInitializer=getInitializer(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=getRegularizer(e.embeddingsRegularizer),this.activityRegularizer=getRegularizer(e.activityRegularizer),this.embeddingsConstraint=getConstraint(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return tidy(()=>this.maskZero?(e=getExactlyOneTensor(e),notEqual$2(e,zerosLike$2(e))):null)}computeOutputShape(e){if(e=getExactlyOneShape(e),this.inputLength==null)return[...e,this.outputDim];const t=toList(this.inputLength);if(t.length!==e.length-1)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let s=0;s<t.length;++s){const i=t[s],o=e[s+1];if(i!=null&&o!=null&&i!==o)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);i==null&&(t[r]=o),r++}}return[e[0],...t,this.outputDim]}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);let r=getExactlyOneTensor(e);r.dtype!=="int32"&&(r=cast$2(r,"int32"));const s=gather(this.embeddings.read(),reshape$2(r,[r.size]));return reshape$2(s,getExactlyOneShape(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:serializeInitializer(this.embeddingsInitializer),embeddingsRegularizer:serializeRegularizer(this.embeddingsRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),embeddingsConstraint:serializeConstraint(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Embedding.className="Embedding",registerClass(Embedding);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Merge extends Layer{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new NotImplementedError}computeElementwiseOpOutputShape(e,t){if(e==null||t==null)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(t.length===0)return e;const r=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const i=e[e.length-t.length+s],o=t[s];if(i==null||o==null||i<0||o<0)r.push(null);else if(i===1)r.push(o);else if(o===1)r.push(i);else{if(i!==o)throw new ValueError("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));r.push(i)}}return r}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[getExactlyOneShape(e)]),e=e,e.length<2)throw new ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const i of e)i!=null&&i[0]!==null&&t.push(i[0]);if(t=unique$2(t),t.length>1)throw new ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let r=e[0]==null?null:e[0].slice(1);for(let i=1;i<e.length;++i){const o=e[i]==null?null:e[i].slice(1);r=this.computeElementwiseOpOutputShape(r,o)}const s=e.map(i=>i.length);e.indexOf(null)===-1&&unique$2(s).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return tidy(()=>{if(e=e,this.reshapeRequired){const r=[],s=e.map(i=>i.rank);if(s.indexOf(null)===-1){const i=max$5(s);for(let o of e){const a=o.rank;for(let l=0;l<i-a;++l)o=expandDims$2(o,1);r.push(o)}return this.mergeFunction(r)}else{let i=!1;for(const l of e){const c=l.rank;if(c==null){const u=l.shape,h=u[0],d=u.slice(1).concat([h]);let g=reshape$2(l,[h].concat(arrayProd(u.slice(1))));g=transpose$2(g,[1,0]),g=reshape$2(g,d),r.push(g),i=!0}else if(c>1){const u=range$2(1,c).concat([0]);r.push(transpose$2(l,u)),i=!0}else r.push(l)}let o=this.mergeFunction(r);const a=o.rank;if(i){if(a==null){const l=o.shape,c=l.length,u=l[c-1],h=[u].concat(l.slice(0,l.length-1));o=reshape$2(transpose$2(reshape$2(o,[-1,u]),[1,0]),h)}else if(a>1){const l=[a-1].concat(range$2(0,a-1));o=transpose$2(o,l)}}return o}}else return this.mergeFunction(e)})}computeOutputShape(e){e=e;let t;e[0]==null?t=null:t=e[0].slice(1);for(let s=1;s<e.length;++s){const i=e[s]==null?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,i)}let r=[];for(const s of e)s!=null&&s[0]!==null&&r.push(s[0]);return r=unique$2(r),r.length===1?t=r.concat(t):t=[null].concat(t),t}computeMask(e,t){return tidy(()=>{if(t==null)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an Array");if(!Array.isArray(e))throw new ValueError("`inputs` should be an Array");if(t.length!==e.length)throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(s=>s==null))return null;t=t.map(s=>s==null?s:expandDims$3(s,0));let r=t[0];for(let s=1;s<t.length-1;++s)r=logicalAnd$2(r,t[s]);return r})}}class Add extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=add$2(t,e[r]);return t})}}Add.className="Add",registerClass(Add);class Multiply extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=mul(t,e[r]);return t})}}Multiply.className="Multiply",registerClass(Multiply);class Average extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=add$2(t,e[r]);return mul(1/e.length,t)})}}Average.className="Average",registerClass(Average);class Maximum extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=maximum$2(t,e[r]);return t})}}Maximum.className="Maximum",registerClass(Maximum);class Minimum extends Merge{constructor(e){super(e)}mergeFunction(e){return tidy(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=minimum$3(t,e[r]);return t})}}Minimum.className="Minimum",registerClass(Minimum);class Concatenate extends Merge{constructor(e){super(e),this.DEFAULT_AXIS=-1,e==null&&(e={}),this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||e.length===1)throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const s of e)if(s!=null){t=!1;break}if(t)return;const r=[];for(let s=0;s<e.length;++s){const i=e[s].slice();i.splice(this.axis,1);let o=!1;for(const a of r)if(arraysEqual(a,i)){o=!0;break}o||r.push(i)}if(r.length>1)throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return tidy(()=>concatenate(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");const t=e,r=t[0].slice(),s=this.axis<0?r.length+this.axis:this.axis;for(const i of t.slice(1)){if(r[s]==null||i[s]==null){r[s]=null;break}r[s]+=i[s]}return r}computeMask(e,t){if(t==null)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new ValueError("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new ValueError(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return tidy(()=>{let r=!0;if(t.forEach(o=>{if(o!=null){r=!1;return}}),r)return null;const s=[];for(let o=0;o<e.length;++o)t[o]==null?s.push(cast$3(onesLike$2(e[o]),"bool")):t[o].rank<e[o].rank?s.push(expandDims$3(t[o],-1)):s.push(t[o]);const i=concat$2(s,this.axis);return all$2(i,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}Concatenate.className="Concatenate",registerClass(Concatenate);function interpretAxis(n,e){for(;n<0;)n+=e;return n}function batchDot(n,e,t){if(n.shape.length>3||e.shape.length>3)throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");if(assert$1(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),assert$1(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`),typeof t=="number"&&(t=[t,t]),n.dtype==="complex64"||e.dtype==="complex64")throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");const r=n.shape.length,s=e.shape.length;t==null&&(t=[r-1,s-2]);const i=t;return tidy(()=>{let o;if(r>s){o=r-s;const l=[];for(let c=0;c<o;++c)l.push(1);e=reshape$2(e,e.shape.concat(l))}else if(s>r){o=s-r;const l=[];for(let c=0;c<o;++c)l.push(1);n=reshape$2(n,n.shape.concat(l))}else o=0;let a;if(n.shape.length===2&&e.shape.length===2)i[0]===i[1]?a=sum$3(mul(n,e),i[0]):a=sum$3(mul(transpose$2(n,[1,0]),e),i[1]);else{const l=i[0]!==n.shape.length-1,c=i[1]===e.shape.length-1;a=matMul$1(n,e,l,c)}if(o>0){let l;r>s?l=r+s-3:l=r-1;const c=[];for(let u=l;u<l+o;++u)c.push(u);a=squeeze(a,c)}return a.shape.length===1&&(a=expandDims$3(a,1)),a})}class Dot extends Merge{constructor(e){super(e),this.axes=e.axes,this.normalize=e.normalize==null?!1:e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){assert$1(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],r=e[1];if(t.length>3||r.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,r);if(t[s[0]]!==r[s[1]])throw new ValueError(`Dimension incompatibility: ${t[s[0]]} !== ${r[s[1]]}`)}mergeFunction(e){if(e.length!==2)throw new ValueError(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t=e[0],r=e[1],s;return Array.isArray(this.axes)?s=this.axes.map((i,o)=>interpretAxis(i,e[o].shape.length)):s=[interpretAxis(this.axes,t.shape.length),interpretAxis(this.axes,r.shape.length)],this.normalize&&(t=l2Normalize(t,s[0]),r=l2Normalize(r,s[1])),batchDot(t,r,s)}interpretAxes(e,t){let r;return Array.isArray(this.axes)?r=this.axes:r=[interpretAxis(this.axes,e.length),interpretAxis(this.axes,t.length)],r}computeOutputShape(e){assert$1(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),r=e[1].slice();if(t.length>3||r.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,r);t.splice(s[0],1),r.splice(s[1],1),r.splice(0,1);const i=t.concat(r);return i.length===1&&i.push(1),i}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Dot.className="Dot",registerClass(Dot);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class GaussianNoise extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return inTrainPhase(()=>add$2(randomNormal(r.shape,0,this.stddev),r),()=>r,t.training||!1)})}}GaussianNoise.className="GaussianNoise",registerClass(GaussianNoise);class GaussianDropout extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return tidy(()=>{this.invokeCallHook(e,t);const r=getExactlyOneTensor(e);return this.rate>0&&this.rate<1?inTrainPhase(()=>{const i=Math.sqrt(this.rate/(1-this.rate));return mul(r,randomNormal(r.shape,1,i))},()=>r,t.training||!1):r})}}GaussianDropout.className="GaussianDropout",registerClass(GaussianDropout);class AlphaDropout extends Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||getExactlyOneTensor(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return tidy(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return inTrainPhase(()=>{const i=getExactlyOneTensor(e),a=-1.6732632423543772*1.0507009873554805;let l=greaterEqual$2(randomUniform(r),this.rate);l=cast$2(l,"float32");const c=((1-this.rate)*(1+this.rate*a**2))**-.5,u=-c*a*this.rate,h=add$2(mul(i,l),mul(add$2(l,-1),a));return add$2(mul(h,c),u)},()=>getExactlyOneTensor(e),t.training||!1)}return e})}}AlphaDropout.className="AlphaDropout",registerClass(AlphaDropout);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function batchNormalization(n,e,t,r,s,i=.001){let o;if(n.rank===2)o=batchNorm2d(n,e,t,r,s,i);else if(n.rank===3)o=batchNorm3d(n,e,t,r,s,i);else if(n.rank===4)o=batchNorm4d(n,e,t,r,s,i);else throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${n.rank} yet`);return o}function regularNormalizeBatchInTraining(n,e,t,r,s=.001){return tidy(()=>{const i=moments$1(n,r),o=i.mean,a=i.variance;return[batchNormalization(n,o,a,t,e,s),o,a]})}function broadcastNormalizeBatchInTraining(n,e,t,r,s=.001){return tidy(()=>{const i=moments$1(n,r),o=i.mean,a=i.variance,l=[];for(const x of range$2(0,n.rank))r.indexOf(x)!==-1?l.push(1):l.push(n.shape[x]);const c=reshape$2(o,l),u=reshape$2(a,l),h=e==null?null:reshape$2(e,l),d=t==null?null:reshape$2(t,l);return[batchNormalization(n,c,u,d,h,s),o,a]})}function normalizeBatchInTraining(n,e,t,r,s=.001){return arraysEqual(r.slice().sort(),range$2(0,n.rank-1))?regularNormalizeBatchInTraining(n,e,t,r,s):broadcastNormalizeBatchInTraining(n,e,t,r,s)}class BatchNormalization extends Layer{constructor(e){e==null&&(e={}),super(e),this.supportsMasking=!0,this.axis=e.axis==null?-1:e.axis,this.momentum=e.momentum==null?.99:e.momentum,this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=getInitializer(e.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(e.gammaInitializer||"ones"),this.movingMeanInitializer=getInitializer(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=getInitializer(e.movingVarianceInitializer||"ones"),this.betaConstraint=getConstraint(e.betaConstraint),this.gammaConstraint=getConstraint(e.gammaConstraint),this.betaRegularizer=getRegularizer(e.betaRegularizer),this.gammaRegularizer=getRegularizer(e.gammaRegularizer)}build(e){e=getExactlyOneShape(e);const t=this.axis>=0?this.axis:this.axis+e.length,r=e[t];if(r==null)throw new ValueError(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new InputSpec({ndim:e.length,axes:{[t]:r}})];const s=[r];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return tidy(()=>{const r=t.training==null?!1:t.training,s=getExactlyOneTensor(e),i=s.shape,o=i.length,a=range$2(0,o),l=this.axis>=0?this.axis:this.axis+o;a.splice(l,1);const c=pyListRepeat(1,o);c[l]=i[l];const u=a.slice();u.sort();const h=!arraysEqual(u,range$2(0,o).slice(0,o-1)),d=()=>{if(h){const S=reshape$2(this.movingMean.read(),c),_=reshape$2(this.movingVariance.read(),c),T=this.center?reshape$2(this.beta.read(),c):null,k=this.scale?reshape$2(this.gamma.read(),c):null;return batchNormalization(s,S,_,T,k,this.epsilon)}else return batchNormalization(s,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!r)return d();const[g,x,y]=normalizeBatchInTraining(s,this.gamma.read(),this.beta.read(),a,this.epsilon),w=(S,_,T)=>{tidy(()=>{const k=1-T,P=S.read(),L=mul(sub$2(P,_),k);S.write(sub$2(P,L))})};return(()=>{w(this.movingMean,x,this.momentum),w(this.movingVariance,y,this.momentum)})(),g})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),movingMeanInitializer:serializeInitializer(this.movingMeanInitializer),movingVarianceInitializer:serializeInitializer(this.movingVarianceInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer),betaConstraint:serializeConstraint(this.betaConstraint),gammaConstraint:serializeConstraint(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}BatchNormalization.className="BatchNormalization",registerClass(BatchNormalization);class LayerNormalization extends Layer{constructor(e){if(e==null&&(e={}),super(e),this.axis=e.axis==null?-1:e.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=getInitializer(e.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(e.gammaInitializer||"ones"),this.betaRegularizer=getRegularizer(e.betaRegularizer),this.gammaRegularizer=getRegularizer(e.gammaRegularizer),this.supportsMasking=!0}build(e){e=getExactlyOneShape(e);const t=e.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let i=0;i<this.axis.length;++i)this.axis[i]<0&&(this.axis[i]+=t);for(const i of this.axis)if(i<0||i>=t)throw new Error(`Invalid axis: ${i}`);if(this.axis.length!==unique$2(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(i=>e[i]),s=!0;this.scale?this.gamma=this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const r=getExactlyOneTensor(e),s=r.shape,i=s.length;return tidy(()=>{let{mean:a,variance:l}=moments$1(r,this.axis,!0);const c=pyListRepeat(1,i);for(const y of this.axis)c[y]=s[y];const u=y=>y!=null&&y.shape.length!==i?reshape$2(y,c):y;let h=this.scale?u(this.gamma.read()):null,d=this.center?u(this.beta.read()):null;const g=[],x=[];for(let y=0;y<i;++y)this.axis.indexOf(y)!==-1?(g.push(s[y]),x.push(1)):(g.push(1),x.push(s[y]));return a=tile$3(a,g),l=tile$3(l,g),h!=null&&(h=tile$3(h,x)),d!=null&&(d=tile$3(d,x)),batchNormalization(r,a,l,d,h,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}LayerNormalization.className="LayerNormalization",registerClass(LayerNormalization);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function spatial2dPadding(n,e,t){return tidy(()=>{if(n.rank!==4)throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(e==null&&(e=[[1,1],[1,1]]),e.length!==2||e[0].length!==2||e[1].length!==2)throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(t==null&&(t=imageDataFormat()),t!=="channelsLast"&&t!=="channelsFirst")throw new ValueError(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let r;return t==="channelsFirst"?r=[[0,0],[0,0],e[0],e[1]]:r=[[0,0],e[0],e[1],[0,0]],pad$1(n,r)})}class ZeroPadding2D extends Layer{constructor(e){if(e==null&&(e={}),super(e),this.dataFormat=e.dataFormat==null?imageDataFormat():e.dataFormat,e.padding==null)this.padding=[[1,1],[1,1]];else if(typeof e.padding=="number")this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,e.padding.length!==2)throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,r;if(typeof e.padding[0]=="number")t=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,e.padding[0].length!==2)throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],e.padding[1].length!==2)throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[t,r]}this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){e=getExactlyOneShape(e);let t,r;return this.dataFormat==="channelsFirst"?(e[2]!=null&&e[2]>=0?t=e[2]+this.padding[0][0]+this.padding[0][1]:t=null,e[3]!=null&&e[3]>=0?r=e[3]+this.padding[1][0]+this.padding[1][1]:r=null,[e[0],e[1],t,r]):(e[1]!=null&&e[1]>=0?t=e[1]+this.padding[0][0]+this.padding[0][1]:t=null,e[2]!=null&&e[2]>=0?r=e[2]+this.padding[1][0]+this.padding[1][1]:r=null,[e[0],t,r,e[3]])}call(e,t){return tidy(()=>spatial2dPadding(getExactlyOneTensor(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ZeroPadding2D.className="ZeroPadding2D",registerClass(ZeroPadding2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pool2d(n,e,t,r,s,i){return tidy(()=>{checkDataFormat(s),checkPoolMode(i),checkPaddingMode(r),t==null&&(t=[1,1]),r==null&&(r="valid"),s==null&&(s=imageDataFormat()),i==null&&(i="max"),n=preprocessConv2DInput(n,s);let o;const a=r==="same"?"same":"valid";return i==="max"?o=maxPool$2(n,e,t,a):o=avgPool$2(n,e,t,a),s==="channelsFirst"&&(o=transpose$2(o,[0,3,1,2])),o})}function pool3d$1(n,e,t,r,s,i){return tidy(()=>{checkDataFormat(s),checkPoolMode(i),checkPaddingMode(r),t==null&&(t=[1,1,1]),r==null&&(r="valid"),s==null&&(s=imageDataFormat()),i==null&&(i="max"),n=preprocessConv3DInput(n,s);let o;const a=r==="same"?"same":"valid";return i==="max"?o=maxPool3d$1(n,e,t,a):o=avgPool3d(n,e,t,a),s==="channelsFirst"&&(o=transpose$2(o,[0,4,1,2,3])),o})}class Pooling1D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=2),super(e),typeof e.poolSize=="number")this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&e.poolSize.length===1&&typeof e.poolSize[0]=="number")this.poolSize=e.poolSize;else throw new ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(assertPositiveInteger(this.poolSize,"poolSize"),e.strides==null)this.strides=this.poolSize;else if(typeof e.strides=="number")this.strides=[e.strides];else if(Array.isArray(e.strides)&&e.strides.length===1&&typeof e.strides[0]=="number")this.strides=e.strides;else throw new ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(e){e=getExactlyOneShape(e);const t=convOutputLength(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return tidy(()=>{this.invokeCallHook(e,t),e=expandDims$2(getExactlyOneTensor(e),2);const r=this.poolingFunction(getExactlyOneTensor(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return squeeze(r,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling1D extends Pooling1D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool2d(e,t,r,s,i,"max")}}MaxPooling1D.className="MaxPooling1D",registerClass(MaxPooling1D);class AveragePooling1D extends Pooling1D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool2d(e,t,r,s,i,"avg")}}AveragePooling1D.className="AveragePooling1D",registerClass(AveragePooling1D);class Pooling2D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==2)throw new ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){e=getExactlyOneShape(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),r=convOutputLength(r,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,r]:[e[0],t,r,e[3]]}call(e,t){return tidy(()=>(this.invokeCallHook(e,t),this.poolingFunction(getExactlyOneTensor(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling2D extends Pooling2D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool2d(e,t,r,s,i,"max")}}MaxPooling2D.className="MaxPooling2D",registerClass(MaxPooling2D);class AveragePooling2D extends Pooling2D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool2d(e,t,r,s,i,"avg")}}AveragePooling2D.className="AveragePooling2D",registerClass(AveragePooling2D);class Pooling3D extends Layer{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==3)throw new ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:5})]}computeOutputShape(e){e=getExactlyOneShape(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],r=this.dataFormat==="channelsFirst"?e[3]:e[2],s=this.dataFormat==="channelsFirst"?e[4]:e[3];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),r=convOutputLength(r,this.poolSize[1],this.padding,this.strides[1]),s=convOutputLength(s,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,r,s]:[e[0],t,r,s,e[4]]}call(e,t){return tidy(()=>(this.invokeCallHook(e,t),this.poolingFunction(getExactlyOneTensor(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class MaxPooling3D extends Pooling3D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool3d$1(e,t,r,s,i,"max")}}MaxPooling3D.className="MaxPooling3D",registerClass(MaxPooling3D);class AveragePooling3D extends Pooling3D{constructor(e){super(e)}poolingFunction(e,t,r,s,i){return checkDataFormat(i),checkPaddingMode(s),pool3d$1(e,t,r,s,i,"avg")}}AveragePooling3D.className="AveragePooling3D",registerClass(AveragePooling3D);class GlobalPooling1D extends Layer{constructor(e){super(e),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new NotImplementedError}}class GlobalAveragePooling1D extends GlobalPooling1D{constructor(e){super(e||{})}call(e,t){return tidy(()=>{const r=getExactlyOneTensor(e);return mean$4(r,1)})}}GlobalAveragePooling1D.className="GlobalAveragePooling1D",registerClass(GlobalAveragePooling1D);class GlobalMaxPooling1D extends GlobalPooling1D{constructor(e){super(e||{})}call(e,t){return tidy(()=>{const r=getExactlyOneTensor(e);return max$6(r,1)})}}GlobalMaxPooling1D.className="GlobalMaxPooling1D",registerClass(GlobalMaxPooling1D);class GlobalPooling2D extends Layer{constructor(e){super(e),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,checkDataFormat(this.dataFormat),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(e){return e=e,this.dataFormat==="channelsLast"?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new NotImplementedError}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class GlobalAveragePooling2D extends GlobalPooling2D{call(e,t){return tidy(()=>{const r=getExactlyOneTensor(e);return this.dataFormat==="channelsLast"?mean$4(r,[1,2]):mean$4(r,[2,3])})}}GlobalAveragePooling2D.className="GlobalAveragePooling2D",registerClass(GlobalAveragePooling2D);class GlobalMaxPooling2D extends GlobalPooling2D{call(e,t){return tidy(()=>{const r=getExactlyOneTensor(e);return this.dataFormat==="channelsLast"?max$6(r,[1,2]):max$6(r,[2,3])})}}GlobalMaxPooling2D.className="GlobalMaxPooling2D",registerClass(GlobalMaxPooling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Wrapper extends Layer{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(e){this.layer!=null&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,r={}){const s=t.layer,i=deserialize(s,r);delete t.layer;const o={layer:i};return Object.assign(o,t),new e(o)}}class TimeDistributed extends Wrapper{constructor(e){super(e),this.supportsMasking=!0}build(e){if(e=getExactlyOneShape(e),e.length<3)throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){e=getExactlyOneShape(e);const t=[e[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(t),s=e[1];return[r[0],s].concat(r.slice(1))}call(e,t){return tidy(()=>(e=getExactlyOneTensor(e),rnn((o,a)=>[getExactlyOneTensor(this.layer.call(o,t)),[]],e,[],!1,null,null,!1,!0)[1]))}}TimeDistributed.className="TimeDistributed",registerClass(TimeDistributed);function checkBidirectionalMergeMode(n){checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES,"BidirectionalMergeMode",n)}const DEFAULT_BIDIRECTIONAL_MERGE_MODE="concat";class Bidirectional extends Wrapper{constructor(e){super(e);const t=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=t,this.forwardLayer=deserialize(r),t.goBackwards=t.goBackwards!==!0;const s={};if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=deserialize(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=e.mergeMode===void 0?DEFAULT_BIDIRECTIONAL_MERGE_MODE:e.mergeMode,checkBidirectionalMergeMode(this.mergeMode),e.weights)throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,this.forwardLayer!=null&&(this.forwardLayer.trainable=e),this.backwardLayer!=null&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,r=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let t=this.forwardLayer.computeOutputShape(e);Array.isArray(t)&&Array.isArray(t[0])||(t=[t]),t=t;let r,s,i;return this.returnState&&(i=t.slice(1)),r=t[0],r=r,this.mergeMode==="concat"?(r[r.length-1]*=2,s=[r]):this.mergeMode==null?s=[r,r.slice()]:s=[r],this.returnState?this.mergeMode==null?s.concat(i).concat(i.slice()):[r].concat(i).concat(i.slice()):singletonOrArray(s)}apply(e,t){let r=t==null?null:t.initialState,s=t==null?null:t.constants;t==null&&(t={});const i=standardizeArgs(e,r,s,this.numConstants);if(e=i.inputs,r=i.initialState,s=i.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(r==null||r.length===0)&&s==null)return super.apply(e,t);const o=[],a=[];if(r!=null){const c=r.length;if(c%2>0)throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=r,o.push(...r);const u=r.map(h=>new InputSpec({shape:h.shape}));this.forwardLayer.stateSpec=u.slice(0,c/2),this.backwardLayer.stateSpec=u.slice(c/2),a.push(...u)}if(s!=null)throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");const l=o[0]instanceof SymbolicTensor;for(const c of o)if(c instanceof SymbolicTensor!==l)throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){const c=[e].concat(o),u=this.inputSpec.concat(a),h=this.inputSpec;this.inputSpec=u;const d=super.apply(c,t);return this.inputSpec=h,d}else return super.apply(e,t)}call(e,t){return tidy(()=>{const r=t.initialState;let s,i;if(r==null)s=this.forwardLayer.call(e,t),i=this.backwardLayer.call(e,t);else{const l=r.slice(0,r.length/2),c=r.slice(r.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:l})),i=this.backwardLayer.call(e,Object.assign(t,{initialState:c}))}let o;this.returnState&&(Array.isArray(s)&&(o=s.slice(1).concat(i.slice(1))),s=s[0],i=i[0]),this.returnSequences&&(i=reverse$2(i,1));let a;return this.mergeMode==="concat"?a=concatenate([s,i]):this.mergeMode==="sum"?a=add$2(s,i):this.mergeMode==="ave"?a=mul(.5,add$2(s,i)):this.mergeMode==="mul"?a=mul(s,i):this.mergeMode==null&&(a=[s,i]),this.returnState?this.mergeMode==null?a.concat(o):[a].concat(o):a})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){nameScope(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),nameScope(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){Array.isArray(t)&&(t=t[0]);let r;if(this.returnSequences?this.mergeMode==null?r=[t,t]:r=t:this.mergeMode==null?r=[null,null]:r=null,this.returnState){const i=this.forwardLayer.states.map(o=>null);return Array.isArray(r)?r.concat(i).concat(i):[r].concat(i).concat(i)}else return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(e),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const r=deserialize(t.layer);if(delete t.layer,t.numConstants!=null)throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=r,new e(s)}}Bidirectional.className="Bidirectional",registerClass(Bidirectional);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Rescaling extends Layer{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return tidy(()=>(e=getExactlyOneTensor(e),e.dtype!=="float32"&&(e=cast$2(e,"float32")),add$2(mul(e,this.scale),this.offset)))}}Rescaling.className="Rescaling",registerClass(Rescaling);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const{resizeBilinear:resizeBilinear$2,cropAndResize:cropAndResize$2}=image;class CenterCrop extends Layer{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,r,s,i,o,a,l){return tidy(()=>{let c,u=!1;const h=t/o,d=r/a,g=(s+t)/o,x=(i+r)/a,y=[h,d,g,x],w=[];e.rank===3?(u=!0,c=stack([e])):c=e;for(let k=0;k<c.shape[0];k++)w.push(y);const $=tensor(w,[w.length,4]),S=range$3(0,w.length,1,"int32"),T=cropAndResize$2(c,$,S,[s,i],"nearest");return cast$2(u?getExactlyOneTensor(unstack(T)):T,l)})}upsize(e,t,r,s){return tidy(()=>{const i=resizeBilinear$2(e,[t,r]);return cast$2(i,s)})}call(e,t){return tidy(()=>{const r=getExactlyOneTensor(e),s=r.dtype,i=r.shape,o=i[i.length-3],a=i[i.length-2];let l=0;o!==this.height&&(l=Math.floor((o-this.height)/2));let c=0;return a!==this.width&&(c=Math.floor((a-this.width)/2),c===0&&(c=1)),l>=0&&c>=0?this.centerCrop(r,l,c,this.height,this.width,o,a,s):this.upsize(e,this.height,this.width,s)})}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){e=getExactlyOneShape(e);const t=e.length-3,r=e.length-2;return e[t]=this.height,e[r]=this.width,e}}CenterCrop.className="CenterCrop",registerClass(CenterCrop);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function encodeCategoricalInputs(n,e,t,r){let s=getExactlyOneTensor(n);if(s.dtype!=="int32"&&(s=cast$2(s,"int32")),e==="int")return s;const i=s.shape;if(s.rank===0&&(s=expandDims$3(s,-1)),e==="oneHot"&&s.shape[s.shape.length-1]!==1&&(s=expandDims$3(s,-1)),s.rank>2)throw new ValueError(`When outputMode is not int, maximum output rank is 2 Received outputMode ${e} and input shape ${i} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(e),a=s;let l;if(typeof r<"u"&&e==="count"?l=denseBincount$2(a,r,t,o):l=denseBincount$2(a,[],t,o),e!=="tfIdf")return l;if(r)return mul(l,r);throw new ValueError("When outputMode is 'tfIdf', weights must be provided.")}/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class CategoryEncoding extends Layer{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return e=getExactlyOneShape(e),e==null?[this.numTokens]:this.outputMode==="oneHot"&&e[e.length-1]!==1?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return tidy(()=>{e=getExactlyOneTensor(e),e.dtype!=="int32"&&(e=cast$2(e,"int32"));let r;if(typeof t.countWeights<"u"){if(this.outputMode!=="count")throw new ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);r=getExactlyOneTensor(t.countWeights)}const s=max$6(e),i=min$6(e),o=greater$2(this.numTokens,s).bufferSync().get(0),a=greaterEqual$2(i,0).bufferSync().get(0);if(!(o&&a))throw new ValueError(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return encodeCategoricalInputs(e,this.outputMode,this.numTokens,r)})}}CategoryEncoding.className="CategoryEncoding",registerClass(CategoryEncoding);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const INTERPOLATION_KEYS=["bilinear","nearest"],INTERPOLATION_METHODS=new Set(INTERPOLATION_KEYS);class Resizing extends Layer{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation)if(INTERPOLATION_METHODS.has(e.interpolation))this.interpolation=e.interpolation;else throw new ValueError(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){e=getExactlyOneShape(e);const t=e[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return tidy(()=>{const r=[this.height,this.width];if(this.interpolation==="bilinear")return image.resizeBilinear(e,r,!this.cropToAspectRatio);if(this.interpolation==="nearest")return image.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`)})}}Resizing.className="Resizing",registerClass(Resizing);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$1=env();ENV$1.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var DataType;(function(n){n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF"})(DataType||(DataType={}));var SaverDef;(function(n){(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))})(SaverDef||(SaverDef={}));/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var ZipMismatchMode;(function(n){n[n.FAIL=0]="FAIL",n[n.SHORTEST=1]="SHORTEST",n[n.LONGEST=2]="LONGEST"})(ZipMismatchMode||(ZipMismatchMode={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertNotComplex$1(n,e){Array.isArray(n)||(n=[n]),n.forEach(t=>{t!=null&&assert$1(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl$1=whereImpl$2;class MathBackendCPU extends KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new DataStorage(this,engine())}nextDataId(){return MathBackendCPU.nextDataId++}write(e,t,r){this.firstUse&&(this.firstUse=!1,env().get("IS_NODE")&&warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:r,refCount:1}),s}makeTensorInfo(e,t,r){let s;if(t==="string"&&r!=null&&r.length>0&&isString(r[0])){const i=r.map(o=>encodeString(o));s=this.write(i,e,t)}else s=this.write(r,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){const t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){const t=this.data.get(e);t.refCount--}}move(e,t,r,s,i){this.data.set(e,{values:t,dtype:s,refCount:i})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:r}=this.data.get(e);if(t==="complex64"){const s=this.readSync(r.real.dataId),i=this.readSync(r.imag.dataId);return mergeRealAndImagArrays(s,i)}return convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if(e.dtype==="string")try{const r=t.map(s=>decodeString(s));return buffer(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer(e.shape,e.dtype,t)}makeOutput(e,t,r){return engine().makeTensorFromTensorInfo(this.makeTensorInfo(t,r,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);r!=null&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=now();return e(),{kernelMs:now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){assertNotComplex$1([e],"where");const t=this.readSync(e.dataId);return whereImpl$1(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}MathBackendCPU.nextDataId=0;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function simpleAbsImpl(n){const e=new Float32Array(n.length);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return e}const abs$2=n=>{const{x:e}=n.inputs,t=n.backend;assertNotComplex$1(e,"abs");let r=new Float32Array(sizeFromShape(e.shape));const s=t.data.get(e.dataId).values;return r=simpleAbsImpl(s),t.makeOutput(r,e.shape,e.dtype)},absConfig$1={kernelName:Abs,backendName:"cpu",kernelFunc:abs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleBinaryKernelImpl(n){return(e,t,r,s,i)=>{const o=assertAndGetBroadcastShape(e,t),a=o.length,l=computeStrides(o),c=sizeFromShape(o),u=getTypedArrayFromDType(i,c),h=e.length,d=t.length,g=computeStrides(e),x=computeStrides(t),y=getBroadcastDims$1(e,o),w=getBroadcastDims$1(t,o);if(y.length+w.length===0)for(let $=0;$<u.length;++$)u[$]=n(r[$%r.length],s[$%s.length]);else for(let $=0;$<u.length;++$){const S=indexToLoc($,a,l),_=S.slice(-h);y.forEach(L=>_[L]=0);const T=locToIndex(_,h,g),k=S.slice(-d);w.forEach(L=>k[L]=0);const P=locToIndex(k,d,x);u[$]=n(r[T],s[P])}return[u,o]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex$1(n){const{inputs:e,backend:t}=n,{real:r,imag:s}=e,i=t.data.get(r.dataId).values,o=t.data.get(s.dataId).values,a=t.makeTensorInfo(r.shape,"complex64"),l=t.data.get(a.dataId);return l.complexTensorInfos={real:t.makeTensorInfo(r.shape,"float32",i),imag:t.makeTensorInfo(s.shape,"float32",o)},a}const complexConfig$1={kernelName:Complex,backendName:"cpu",kernelFunc:complex$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros(n,e,t="float32"){if(t==="complex64"){const s=zeros(n,e,"float32"),i=zeros(n,e,"float32");return complex$1({inputs:{real:s,imag:i},backend:n})}const r=makeZerosTypedArray(sizeFromShape(e),t);return n.makeTensorInfo(e,t,r)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity$1(n){const{inputs:e,backend:t}=n,{x:r}=e;return t.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const identityConfig$1={kernelName:Identity$1,backendName:"cpu",kernelFunc:identity$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real$1(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.data.get(r.dataId).complexTensorInfos.real,i=t.data.get(s.dataId).values;return t.makeTensorInfo(s.shape,s.dtype,i)}const realConfig$1={kernelName:Real,backendName:"cpu",kernelFunc:real$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function castImpl(n,e,t,r){if(r==="int32"){const s=Int32Array.from(n);return[e,"int32",s]}if(r==="bool"){const s=toTypedArray([0],t),[i,o]=createSimpleBinaryKernelImpl((a,l)=>a!==l?1:0)(e,[],n,s,"bool");return[o,"bool",i]}throw new Error(`Error in Cast: failed to cast ${t} to ${r}`)}function cast$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dtype:i}=r;if(i==="complex64"){if(s.dtype==="complex64")return identity$1({inputs:{x:s},backend:t});const u=zeros(t,s.shape,s.dtype),h=cast$1({inputs:{x:s},backend:t,attrs:{dtype:"float32"}}),d=complex$1({inputs:{real:h,imag:u},backend:t});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(h),d}if(s.dtype==="complex64"){const u=real$1({inputs:{input:s},backend:t}),h=cast$1({inputs:{x:u},backend:t,attrs:{dtype:i}});return t.disposeIntermediateTensorInfo(u),h}if(!hasEncodingLoss(s.dtype,i)){const u=identity$1({inputs:{x:s},backend:t});return{dataId:u.dataId,shape:u.shape,dtype:i}}const o=t.data.get(s.dataId).values,[a,l,c]=castImpl(o,s.shape,s.dtype,i);return t.makeTensorInfo(a,l,c)}const castConfig$1={kernelName:Cast,backendName:"cpu",kernelFunc:cast$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryKernelFunc$1(n,e,t,r){return t==null?({inputs:s,backend:i})=>{const{a:o,b:a}=s,l=i;assertNotComplex$1([o,a],n);const c=l.data.get(o.dataId).values,u=l.data.get(a.dataId).values,h=o.dtype==="string"?fromUint8ToStringArray(c):c,d=o.dtype==="string"?fromUint8ToStringArray(u):u,g=r||o.dtype,[x,y]=e(o.shape,a.shape,h,d,g);return l.makeTensorInfo(y,g,x)}:({inputs:s,backend:i})=>{const{a:o,b:a}=s,l=i;if(o.dtype==="complex64"||a.dtype==="complex64"){const c=cast$1({inputs:{x:o},backend:l,attrs:{dtype:"complex64"}}),u=l.data.get(c.dataId),h=u.complexTensorInfos.real,d=u.complexTensorInfos.imag,g=l.data.get(h.dataId).values,x=l.data.get(d.dataId).values,y=cast$1({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),w=l.data.get(y.dataId),$=w.complexTensorInfos.real,S=w.complexTensorInfos.imag,_=l.data.get($.dataId).values,T=l.data.get(S.dataId).values,[k,P,L]=t(o.shape,a.shape,g,x,_,T),D=l.makeTensorInfo(L,"float32",k),M=l.makeTensorInfo(L,"float32",P),O=complex$1({inputs:{real:D,imag:M},backend:l});return l.disposeIntermediateTensorInfo(c),l.disposeIntermediateTensorInfo(y),l.disposeIntermediateTensorInfo(D),l.disposeIntermediateTensorInfo(M),O}else{const c=l.data.get(o.dataId).values,u=l.data.get(a.dataId).values,h=r||o.dtype,[d,g]=e(o.shape,a.shape,c,u,h);return l.makeTensorInfo(g,h,d)}}}function createComplexBinaryKernelImpl(n){return(e,t,r,s,i,o)=>{const a=assertAndGetBroadcastShape(e,t),l=sizeFromShape(a),c=a.length,u=computeStrides(a),h=getTypedArrayFromDType("float32",l),d=getTypedArrayFromDType("float32",l),g=getBroadcastDims$1(e,a),x=getBroadcastDims$1(t,a),y=mergeRealAndImagArrays(r,s),w=mergeRealAndImagArrays(i,o),$=e.length,S=computeStrides(e),_=t.length,T=computeStrides(t);if(g.length+x.length===0)for(let k=0;k<h.length;k++){const P=k%y.length,L=k%w.length,D=n(y[P*2],y[P*2+1],w[L*2],w[L*2+1]);h[k]=D.real,d[k]=D.imag}else for(let k=0;k<h.length;k++){const P=indexToLoc(k,c,u),L=P.slice(-$);g.forEach(z=>L[z]=0);const D=locToIndex(L,$,S),M=P.slice(-_);x.forEach(z=>M[z]=0);const O=locToIndex(M,_,T),R=n(y[D*2],y[D*2+1],w[O*2],w[O*2+1]);h[k]=R.real,d[k]=R.imag}return[h,d,a]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addImpl=createSimpleBinaryKernelImpl((n,e)=>n+e),addComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n+t,imag:e+r})),add$1=binaryKernelFunc$1(Add$1,addImpl,addComplexImpl),addConfig$1={kernelName:Add$1,backendName:"cpu",kernelFunc:add$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincountImpl(n,e,t,r,s){const i=sizeFromShape(r),o=makeZerosTypedArray(s,t);for(let a=0;a<n.length;a++){const l=n[a];if(l<0)throw new Error("Input x must be non-negative!");l>=s||(i>0?o[l]+=e[a]:o[l]+=1)}return o}function bincountReduceImpl(n,e,t,r=!1){const s=n.shape[0],i=n.shape[1],o=buffer([s,t],e.dtype);for(let a=0;a<s;a++)for(let l=0;l<i;l++){const c=n.get(a,l);if(c<0)throw new Error("Input x must be non-negative!");c>=t||(r?o.set(1,a,c):e.size>0?o.set(o.get(a,c)+e.get(a,l),a,c):o.set(o.get(a,c)+1,a,c))}return o}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleUnaryImpl(n){return(e,t,r)=>{const s=getTypedArrayFromDType(t,e.length);for(let i=0;i<e.length;++i)s[i]=n(e[i],r);return s}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unaryKernelFunc$1(n,e,t){return({inputs:r,attrs:s,backend:i})=>{const{x:o}=r;if(assertNotComplex$1(o,n),o.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");const a=i,l=a.data.get(o.dataId).values,c=sizeFromShape(o.shape),u=t||o.dtype,h=getArrayFromDType(u,c);for(let d=0;d<c;++d)h[d]=e(l[d],s);return a.makeTensorInfo(o.shape,u,h)}}function unaryKernelFuncFromImpl(n,e,t){return({inputs:r,attrs:s,backend:i})=>{const{x:o}=r;if(assertNotComplex$1(o,n),o.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");const a=i,l=a.data.get(o.dataId).values,c=t||o.dtype,u=e(l,c,s);return a.makeTensorInfo(o.shape,c,u)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilImpl=createSimpleUnaryImpl(n=>Math.ceil(n)),ceil$1=unaryKernelFuncFromImpl(Ceil,ceilImpl),ceilConfig$1={kernelName:Ceil,backendName:"cpu",kernelFunc:ceil$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$1(n,e,t,r){const s=getArrayFromDType(t,sizeFromShape(e));if(r&&t!=="string"){let i=0;n.forEach(o=>{const a=sizeFromShape(o.shape);s.set(o.vals,i),i+=a})}else{let i=0;n.forEach(o=>{const a=t==="string"?fromUint8ToStringArray(o.vals):o.vals;let l=0;for(let c=0;c<o.shape[0];++c){const u=c*e[1]+i;for(let h=0;h<o.shape[1];++h)s[u+h]=a[l++]}i+=o.shape[1]})}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equalImpl=createSimpleBinaryKernelImpl((n,e)=>n===e?1:0),equal$1=binaryKernelFunc$1(Equal,equalImpl,null,"bool"),equalConfig$1={kernelName:Equal,backendName:"cpu",kernelFunc:equal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expImpl=createSimpleUnaryImpl(n=>Math.exp(n)),exp$1=unaryKernelFuncFromImpl(Exp,expImpl,"float32"),expConfig$1={kernelName:Exp,backendName:"cpu",kernelFunc:exp$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1Impl=createSimpleUnaryImpl(n=>Math.expm1(n)),expm1$1=unaryKernelFuncFromImpl(Expm1,expm1Impl),expm1Config$1={kernelName:Expm1,backendName:"cpu",kernelFunc:expm1$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorImpl=createSimpleUnaryImpl(n=>Math.floor(n)),floor$1=unaryKernelFuncFromImpl(Floor,floorImpl),floorConfig$1={kernelName:Floor,backendName:"cpu",kernelFunc:floor$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNdImpl(n,e,t,r,s,i,o,a,l){const c=buffer([r,i],t);for(let u=0;u<r;u++){const h=[];let d=0;for(let g=0;g<s;g++){const x=n[u*s+g];d+=x*o[g],h.push(x)}if(d<0||d>=l/i)throw new Error(`Invalid indices: ${h} does not index into ${a}`);for(let g=0;g<i;g++)c.values[u*i+g]=e.get(...e.indexToLoc(d*i+g))}return c}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2Impl(n,e,t){const r=buffer(t,n.dtype);for(let s=0;s<r.size;++s){const o=r.indexToLoc(s).slice(),a=o[0],l=o[2],c=e.locToIndex([a,l]);o[2]=e.values[c];const u=n.locToIndex(o);0<=u&&u<n.values.length&&(r.values[s]=n.values[u])}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterImpl=createSimpleBinaryKernelImpl((n,e)=>n>e?1:0),greater$1=binaryKernelFunc$1(Greater,greaterImpl,null,"bool"),greaterConfig$1={kernelName:Greater,backendName:"cpu",kernelFunc:greater$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n>=e?1:0),greaterEqual$1=binaryKernelFunc$1(GreaterEqual,greaterEqualImpl,null,"bool"),greaterEqualConfig$1={kernelName:GreaterEqual,backendName:"cpu",kernelFunc:greaterEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessImpl=createSimpleBinaryKernelImpl((n,e)=>n<e?1:0),less$1=binaryKernelFunc$1(Less,lessImpl,null,"bool"),lessConfig$1={kernelName:Less,backendName:"cpu",kernelFunc:less$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n<=e?1:0),lessEqual$1=binaryKernelFunc$1(LessEqual,lessEqualImpl,null,"bool"),lessEqualConfig$1={kernelName:LessEqual,backendName:"cpu",kernelFunc:lessEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpaceImpl(n,e,t){const r=(e-n)/(t-1),s=makeZerosTypedArray(t,"float32");s[0]=n;for(let i=1;i<s.length;i++)s[i]=s[i-1]+r;return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logImpl=createSimpleUnaryImpl(n=>Math.log(n)),log$1=unaryKernelFuncFromImpl(Log,logImpl),logConfig$1={kernelName:Log,backendName:"cpu",kernelFunc:log$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$1(n,e,t,r){const s=getTypedArrayFromDType(r,sizeFromShape(t));for(let i=0;i<s.length;++i){const o=i*e;let a=n[o];for(let l=0;l<e;++l){const c=n[o+l];(Number.isNaN(c)||c>a)&&(a=c)}s[i]=a}return s}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumImpl=createSimpleBinaryKernelImpl((n,e)=>Math.max(n,e)),maximum$1=binaryKernelFunc$1(Maximum$1,maximumImpl),maximumConfig$1={kernelName:Maximum$1,backendName:"cpu",kernelFunc:maximum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumImpl=createSimpleBinaryKernelImpl((n,e)=>Math.min(n,e)),minimum$2=binaryKernelFunc$1(Minimum$1,minimumImpl),minimumConfig$1={kernelName:Minimum$1,backendName:"cpu",kernelFunc:minimum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyImpl=createSimpleBinaryKernelImpl((n,e)=>n*e),multiplyComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n*t-e*r,imag:n*r+e*t})),multiply$2=binaryKernelFunc$1(Multiply$1,multiplyImpl,multiplyComplexImpl),multiplyConfig$1={kernelName:Multiply$1,backendName:"cpu",kernelFunc:multiply$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function negImpl(n,e,t){const r=createScalarValue(-1,t);return multiplyImpl([],e,r,n,t)}function neg$1(n){const{inputs:e,backend:t}=n,{x:r}=e;assertNotComplex$1(r,"neg");const s=t.data.get(r.dataId).values,[i,o]=negImpl(s,r.shape,r.dtype);return t.makeTensorInfo(o,r.dtype,i)}const negConfig$1={kernelName:Neg,backendName:"cpu",kernelFunc:neg$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqualImpl=createSimpleBinaryKernelImpl((n,e)=>n!==e?1:0),notEqual$1=binaryKernelFunc$1(NotEqual,notEqualImpl,null,"bool"),notEqualConfig$1={kernelName:NotEqual,backendName:"cpu",kernelFunc:notEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$1(n,e,t,r,s){const i=e.length,o=sizeFromShape(e),a=computeStrides(e),l=computeStrides(s),c=getTypedArrayFromDType(t,sizeFromShape(s));for(let u=0;u<o;++u){const h=indexToLoc(u,i,a),d=new Array(h.length);for(let x=0;x<d.length;x++)d[x]=h[r[x]];const g=locToIndex(d,i,l);c[g]=n[u]}return c}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose$1(n){const{inputs:e,attrs:t,backend:r}=n,{x:s}=e,{perm:i}=t;assertNotComplex$1(s,"transpose");const o=s.shape.length,a=new Array(o);for(let h=0;h<a.length;h++)a[h]=s.shape[i[h]];const l=r.data.get(s.dataId).values,c=transposeImpl$1(l,s.shape,s.dtype,i,a);return{dataId:r.write(c,a,s.dtype),shape:a,dtype:s.dtype}}const transposeConfig$1={kernelName:Transpose,backendName:"cpu",kernelFunc:transpose$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodImpl(n,e,t,r){const[s,i]=computeOutAndReduceShapes(n,r),o=upcastType(e,"int32"),a=makeZerosTypedArray(sizeFromShape(s),o),l=sizeFromShape(i);for(let c=0;c<a.length;++c){const u=c*l;let h=1;for(let d=0;d<l;++d)h*=t[u+d];a[c]=h}return{outVals:a,outShape:s,outDtype:o}}function prod$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;assertNotComplex$1(s,"prod");const a=s.shape.length,l=parseAxisParam(i,s.shape),c=getAxesPermutation(l,a);let u=l,h=s;const d=[];c!=null&&(h=transpose$1({inputs:{x:s},backend:t,attrs:{perm:c}}),d.push(h),u=getInnerMostAxes(u.length,a));const g=t.data.get(h.dataId).values,{outVals:x,outShape:y,outDtype:w}=prodImpl(h.shape,h.dtype,g,u);let $=y;return o&&($=expandShapeToKeepDim(y,l)),d.forEach(S=>t.disposeIntermediateTensorInfo(S)),t.makeTensorInfo($,w,x)}const prodConfig$1={kernelName:Prod,backendName:"cpu",kernelFunc:prod$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function validateIndices(n,e,t){n.forEach((r,s)=>{if(r<0||r>=t){const i=indexToLoc(s,e.length,computeStrides(e)).join(",");throw new Error(`indices[${i}] = ${r} is not in [0, ${t})`)}})}function validateSplits(n,e){for(let t=0;t<n.length;++t){const r=n[t],s=t===n.length-1?e:n[t+1].length;if(r.length===0)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let i=1;i<r.length;++i)if(r[i-1]>r[i])throw new Error("Ragged splits must be sorted in ascending order")}}function makeSplits(n,e,t,r){const s=[];let i=0;const o=e.length-1+t.length,a=new Array(o).fill(null).map(()=>[0]);validateSplits(t,r);let l=1;for(let c=0;c<e.length-1;++c){l*=e[c];const u=e[c+1];for(let h=1;h<l+1;++h)a[c].push(h*u)}for(let c=0;c<n.length;++c){let u=n[c],h=n[c]+1;for(let d=0;d<t.length;++d){const g=t[d],x=d+e.length-1;if(x>=0){const y=a[x],w=y[y.length-1]-g[u];for(let $=u;$<h;++$)a[x].push(g[$+1]+w)}u=g[u],h=g[h]}h!==u&&(s.push([u,h]),i+=h-u)}return{outSplits:a,valueSlices:s,numValues:i}}function getSplits(n){const e=[];for(let t=0;t<n.length;++t){const r=n[t].length,s=getArrayFromDType("int32",r);e.push(s),n[t].forEach((i,o)=>s[o]=i)}return e}function computeFlatOuterDims(n,e){const t=n.slice(0,e);for(;t.length<e;)t.push(1);for(let r=e;r<n.length;r++)t[e-1]*=n[r];return t}function writeValueSlices(n,e,t,r,s,i){const o=computeFlatOuterDims(e,2)[1],a=computeFlatOuterDims(i,2)[1];let l=0;for(const c of t)for(let u=c[0];u<c[1];++u){for(let h=0;h<r;++h)s[l*a+h]=n[u*o+h];++l}}function getValues(n,e,t,r,s){const i=e.slice();i[0]=s;const o=getArrayFromDType(t,sizeFromShape(i)),a=n.length,l=a===0?0:a/e[0];return writeValueSlices(n,e,r,l,o,i),[o,i]}function raggedGatherImpl(n,e,t,r,s,i,o,a){if(n.length===0)throw new Error("paramsNestedSplits must be non empty");if(e[0].length===0)throw new Error("Split tensors must not be scalars");const l=e[0][0]-1;if(validateIndices(i,o,l),r.length===0)throw new Error("params.rank must be nonzero");const c=r[0],{outSplits:u,valueSlices:h,numValues:d}=makeSplits(i,o,n,c),g=getSplits(u),x=getValues(t,r,s,h,d);return[g,x[0],x[1]]}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX=2147483647;function raggedRangeImpl(n,e,t,r,s,i,o){if(e.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const a=e.length===0,l=s.length===0,c=o.length===0,u=[];a||u.push(e[0]),l||u.push(s[0]),c||u.push(o[0]);for(let w=1;w<u.length;++w)if(u[w]!==u[w-1])throw new Error("starts, limits, and deltas must have the same shape");const h=u.length===0?1:u[0],d=getArrayFromDType("int32",h+1);d[0]=0;for(let w=0;w<h;++w){const $=a?n[0]:n[w],S=l?r[0]:r[w],_=c?i[0]:i[w];if(_===0)throw new Error("Requires delta != 0");let T;if(_>0&&S<$||_<0&&S>$)T=0;else if(T=Math.ceil(Math.abs((S-$)/_)),T>INT32_MAX)throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);d[w+1]=d[w]+T}const g=d[h],x=getArrayFromDType(t,g);let y=0;for(let w=0;w<h;++w){const $=d[w+1]-d[w];let S=a?n[0]:n[w];const _=c?i[0]:i[w];for(let T=0;T<$;++T)x[y++]=S,S+=_}return[d,x]}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType=RowPartitionType$1;class RaggedTensorToTensorOp{constructor(e,t,r,s,i,o,a,l,c,u){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=s,this.valuesDType=i,this.defaultValue=o,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=c,this.rowPartitionTypes=getRowPartitionTypesHelper(u),this.raggedRank=getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case RowPartitionType.VALUE_ROWIDS:return RaggedTensorToTensorOp.getMaxWidthValueRowID(t);case RowPartitionType.ROW_SPLITS:return RaggedTensorToTensorOp.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(t===0||t===1)return 0;let r=0;for(let s=0;s<t-1;++s){const i=e[s+1]-e[s];i>r&&(r=i)}return r}static getMaxWidthValueRowID(e){const t=e.length;if(t===0)return 0;let r=0,s=e[0],i=0;for(let o=1;o<t;++o){const a=e[o];a!==s&&(s=a,i=Math.max(o-r,i),r=o)}return Math.max(t-r,i)}tensorShapeFromTensor(e,t,r=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return makeShape(e,r)}calculateOutputSize(e){const t=this.valuesShape,r=this.defaultValueShape;validateDefaultValueShape(r,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),o=combineRaggedTensorToTensorShapes(this.raggedRank,s,t);o[0]<0&&(o[0]=e);for(let a=1;a<=this.raggedRank;++a)o[a]<0&&(o[a]=this.getMaxWidth(a));return o}calculateFirstParentOutputIndex(e,t,r){const s=Math.min(e,r),i=[];let o=0;for(let a=0;a<s;++a,o+=t)i.push(o);for(let a=s;a<e;++a)i.push(-1);return assert$1(i.length===e,()=>"Final length of result must be equal to firstDimension."),i}calculateOutputIndexRowSplit(e,t,r,s){const i=e.length,o=[];for(let a=0;a<i-1;++a){const l=e[a+1]-e[a];let c=Math.min(s,l),u=t[a];u===-1&&(c=0);for(let h=0;h<c;++h)o.push(u),u+=r;for(let h=0;h<l-c;++h)o.push(-1)}if(i>0&&o.length!==e[i-1])throw new Error("Invalid row split size.");return o}calculateOutputIndexValueRowID(e,t,r,s){const i=e.length,o=[];if(i===0)return[];let a=0,l=e[0];if(l>=t.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${t.length}`);let c=t[l];o.push(c);for(let u=1;u<i;++u){const h=e[u];if(h===l)c>=0&&(++a,a<s?c+=r:c=-1);else{if(a=0,l=h,h>=t.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${t.length}`);c=t[h]}o.push(c)}if(o.length!==e.length)throw new Error("Invalid row ids.");return o}calculateOutputIndex(e,t,r,s){const i=this.getRowPartitionTensor(e),o=this.getRowPartitionTypeByDimension(e);switch(o){case RowPartitionType.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(i,t,r,s);case RowPartitionType.ROW_SPLITS:if(i.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${i.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(i,t,r,s);default:throw new Error(`Unsupported partition type: ${RowPartitionType[o]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case RowPartitionType.FIRST_DIM_SIZE:return e[0];case RowPartitionType.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case RowPartitionType.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${RowPartitionType[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const t=this.getFirstDimensionSize(),r=this.calculateOutputSize(t),s=new Array(this.raggedRank+1);s[s.length-1]=1;for(let l=s.length-2;l>=0;--l)s[l]=s[l+1]*r[l+1];const i=makeShape(r,!1),o=getArrayFromDType(this.valuesDType,sizeFromShape(i));if(s[0]*r[0]>0){let l=this.calculateFirstParentOutputIndex(t,s[0],r[0]);for(let c=1;c<=this.raggedRank;++c)l=this.calculateOutputIndex(c-1,l,s[c],r[c]);this.setOutput(this.raggedRank,l,o,i)}return[i,o]}setOutput(e,t,r,s){if(r.length===0)return;const i=this.values,o=r;let a=s.slice();a=a.slice(e+1);const l=sizeFromShape(a),c=t.length;let u=this.defaultValue;if(u.length!==l&&u.length!==1){const x=this.defaultValueShape;tidy(()=>{const y=reshape$2(u,x);u=broadcastTo(y,a).dataSync()})}let h=0,d=0,g=0;for(let x=0;x<=c;++x){let y=x<c?t[x]:-1;if(y===g){++g;continue}if(d<g){const w=i.subarray(h*l),$=o.subarray(d*l),S=(g-d)*l;copyArray($,w,S)}if(x>=c){const w=r.length;y=Math.floor(w/l)}if(y>g)if(this.defaultValue.length===1)o.subarray(g*l,y*l).fill(this.defaultValue[0]),g=y;else for(;y>g;){const w=o.slice(g*l);copyArray(w,u,l),++g}y<0?(h=x+1,d=g):(h=x,d=g,g=d+1)}}}function copyArray(n,e,t){for(let r=0;r<t;r++)n[r]=e[r]}function makeShape(n,e){const t=[];for(let r of n){if(r<0){if(!e)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}t.push(r)}return t}function raggedTensorToTensorImpl(n,e,t,r,s,i,o,a,l,c){return new RaggedTensorToTensorOp(n,e,t,r,s,i,o,a,l,c).compute()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rangeImpl(n,e,t,r){const s=n===e,i=n<e&&t<0,o=e<n&&t>1;if(s||i||o)return makeZerosTypedArray(0,r);const a=Math.abs(Math.ceil((e-n)/t)),l=makeZerosTypedArray(a,r);e<n&&t===1&&(t=-1),l[0]=n;for(let c=1;c<l.length;c++)l[c]=l[c-1]+t;return l}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtImpl=createSimpleUnaryImpl(n=>1/Math.sqrt(n)),rsqrt$1=unaryKernelFuncFromImpl(Rsqrt,rsqrtImpl),rsqrtConfig$1={kernelName:Rsqrt,backendName:"cpu",kernelFunc:rsqrt$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterImpl(n,e,t,r,s,i,o,a,l,c){const u=[r/s,s],h=n.values,d=e.values;if(r===0)return buffer(t,e.dtype);const g=buffer(u,e.dtype);typeof l=="string"||typeof l=="number"?g.values.fill(l):typeof l=="boolean"&&g.values.fill(+l);for(let x=0;x<i;x++){const y=[];let w=0;for(let $=0;$<o;$++){const S=h[x*o+$];y.push(S),w+=S*a[$]}if(w<0||w>=r/s)throw new Error(`Invalid indices: ${y} does not index into ${t}`);for(let $=0;$<s;$++)c?g.values[w*s+$]+=d[x*s+$]:g.values[w*s+$]=e.rank===0?d[0]:d[x*s+$]}return g}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidImpl=createSimpleUnaryImpl(n=>1/(1+Math.exp(-n))),sigmoid$1=unaryKernelFunc$1(Sigmoid$1,n=>1/(1+Math.exp(-n))),sigmoidConfig$1={kernelName:Sigmoid$1,backendName:"cpu",kernelFunc:sigmoid$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sliceImpl(n,e,t,r,s){const i=isSliceContinous(r,e,t),o=sizeFromShape(t),a=computeStrides(r);if(i){const h=computeFlatOffset(e,a);return s==="string"?n.slice(h,h+o):n.subarray(h,h+o)}const l=s==="string"?fromUint8ToStringArray(n):n,c=buffer(r,s,l),u=buffer(t,s);for(let h=0;h<u.size;++h){const d=u.indexToLoc(h),g=d.map((x,y)=>x+e[y]);u.set(c.get(...g),...d)}return s==="string"?fromStringArrayToUint8(u.values):u.values}function slice$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:i,size:o}=r;assertNotComplex$1(s,"slice");const[a,l]=parseSliceParams(s,i,o);assertParamsValid(s,a,l);const c=t.data.get(s.dataId).values,u=sliceImpl(c,a,l,s.shape,s.dtype);return t.makeTensorInfo(l,s.dtype,u)}const sliceConfig$1={kernelName:Slice,backendName:"cpu",kernelFunc:slice$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRowsImpl(n,e,t,r,s,i,o){const a=e[0],l=i[0],c=new Array(l),u=new Array(a),h=e[1];if(l===0){if(a!==0)throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));const w=getArrayFromDType(t,0),$=getArrayFromDType(s,0);return[w,[0,h],$,c,u]}let d=!0,g=0;const x=new Array(l).fill(0);for(let w=0;w<a;++w){const $=n[w*h];if($<0)throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage(w,$));if($>=l)throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(w,$,l));++x[$],d=d&&$>=g,g=$}let y=!0;for(let w=0;w<l;++w){const $=x[w]===0;c[w]=$,y=y&&!$,x[w]=Math.max(x[w],1),w>0&&(x[w]+=x[w-1])}if(y&&d){const w=n,$=r;for(let S=0;S<a;++S)u[S]=S;return[w,[a,h],$,c,u]}else{const w=x[l-1],$=getArrayFromDType(t,w*h),S=getArrayFromDType(s,w),_=new Array(l).fill(0);for(let T=0;T<a;++T){const k=n[T*h],P=_[k],L=(k===0?0:x[k-1])+P;_[k]++;for(let D=0;D<h;++D)$[L*h+D]=n[T*h+D];S[L]=r[T],u[T]=L}for(let T=0;T<l;++T)if(_[T]===0){const P=T===0?0:x[T-1];$[P*h+0]=T;for(let L=1;L<h;++L)$[P*h+L]=0;S[P]=o}return[$,[w,h],S,c,u]}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshapeImpl(n,e,t,r,s){const i=sizeFromShape(r),o=e[0],a=s.length,l=[];let c=1,u=-1;for(let w=0;w<a;++w){const $=s[w];if($===-1){if(u!==-1)throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(u,w));u=w,l.push(1)}else{if($<0)throw new Error(getSparseReshapeNegativeOutputDimErrorMessage(w,$));c*=$,l.push($)}}if(u!==-1){if(c<=0)throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const w=Math.trunc(i/c);if(c*w!==i)throw new Error(getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[u]=w}if(sizeFromShape(l)!==i)throw new Error(getSparseReshapeInputOutputMismatchErrorMessage(r,l));const d=r.length,g=[];if(d>0){g[d-1]=1;for(let w=d-2;w>=0;--w)g[w]=g[w+1]*r[w+1]}const x=[];if(a>0){x[a-1]=1;for(let w=a-2;w>=0;--w)x[w]=x[w+1]*l[w+1]}const y=getArrayFromDType(t,o*a);for(let w=0;w<o;++w){let $=0;for(let S=0;S<d;++S)$+=n[w*d+S]*g[S];for(let S=0;S<a;++S)y[w*a+S]=Math.trunc($/x[S]),$%=x[S]}return[y,[o,a],l]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReductionImpl(n,e,t,r,s,i=!1,o=0){const a=r.length,l=[e[0],n.length/e[0]],c=l[1],h=a>0?s[a-1]+1:0;if(h<0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const d=e.slice();d[0]=h;const g=d.reduce((_,T)=>_*T,1),x=getArrayFromDType(t,g);if(a===0)return h>0&&x.fill(o),[x,d];if(h<=0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let y=0,w=1,$=0,S=s[y];for(;;){let _=0;if(w<a){if(_=s[w],S===_){++w;continue}if(S>=_)throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(S<0||S>=h)throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(S,h));S>$&&x.fill(o,$*c,S*c);for(let T=y;T<w;++T){const k=r[T];if(k<0||k>=l[0])throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage(T,r[T],l[0]));for(let P=0;P<c;P++)x[S*c+P]+=n[k*c+P]}if(i)for(let T=0;T<c;T++)x[S*c+T]/=w-y;if(y=w,++w,$=S+1,S=_,w>a)break}return $<h&&x.fill(o,$*c,h*c),[x,d]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtImpl=createSimpleUnaryImpl(n=>Math.sqrt(n)),sqrt$1=unaryKernelFunc$1(Sqrt,n=>Math.sqrt(n)),sqrtConfig$1={kernelName:Sqrt,backendName:"cpu",kernelFunc:sqrt$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceImpl=createSimpleBinaryKernelImpl((n,e)=>{const t=n-e;return t*t}),squaredDifference$1=binaryKernelFunc$1(SquaredDifference,squaredDifferenceImpl),squaredDifferenceConfig$1={kernelName:SquaredDifference,backendName:"cpu",kernelFunc:squaredDifference$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSliceImpl(n,e,t,r){const s=buffer(n,e.dtype);for(let i=0;i<s.size;i++){const o=s.indexToLoc(i),a=new Array(o.length);for(let l=0;l<a.length;l++)a[l]=o[l]*t[l]+r[l];s.set(e.get(...a),...o)}return s}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StringNGramsOp{constructor(e,t,r,s,i,o){this.separator=encodeString(e),this.nGramWidths=t,this.leftPad=encodeString(r),this.rightPad=encodeString(s),this.padWidth=i,this.preserveShort=o}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const r=this.getPadWidth(t);return Math.max(0,e+2*r-t+1)}createNGrams(e,t,r,s,i,o){for(let a=0;a<i;++a){const l=this.getPadWidth(o),c=Math.max(0,l-a),u=Math.max(0,l-(i-(a+1))),h=o-(c+u),d=t+(c>0?0:a-l);let g=0;g+=c*this.leftPad.length;for(let S=0;S<h;++S)g+=e[d+S].length;g+=u*this.rightPad.length;const x=c+u+h-1;g+=x*this.separator.length,r[s+a]=new Uint8Array(g);const y=r[s+a];let w=0;const $=S=>S.forEach(_=>y[w++]=_);for(let S=0;S<c;++S)$(this.leftPad),$(this.separator);for(let S=0;S<h-1;++S)$(e[d+S]),$(this.separator);if(h>0){$(e[d+h-1]);for(let S=0;S<u;++S)$(this.separator),$(this.rightPad)}else{for(let S=0;S<u-1;++S)$(this.rightPad),$(this.separator);$(this.rightPad)}}}compute(e,t){const r=e.length,s=t.length;if(s>0){let l=t[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let c=1;c<s;++c){let u=t[c]>=l;if(u=u&&t[c]<=r,!u)throw new Error(`Invalid split value ${t[c]}, must be in [${l}, ${r}]`);l=t[c]}if(l!==r)throw new Error(`Last split value must be data size. Expected ${r}, got ${l}`)}const i=s-1,o=getArrayFromDType("int32",s);if(r===0||s===0){const l=new Array(r);for(let c=0;c<=i;++c)o[c]=0;return[l,o]}o[0]=0;for(let l=1;l<=i;++l){const c=t[l]-t[l-1];let u=0;this.nGramWidths.forEach(h=>{u+=this.getNumNGrams(c,h)}),this.preserveShort&&c>0&&u===0&&(u=1),o[l]=o[l-1]+u}const a=new Array(o[i]);for(let l=0;l<i;++l){const c=t[l];let u=o[l];if(this.nGramWidths.forEach(h=>{const d=t[l+1]-t[l],g=this.getNumNGrams(d,h);this.createNGrams(e,c,a,u,g,h),u+=g}),this.preserveShort&&u===o[l]){const h=t[l+1]-t[l];if(h===0)continue;const d=h+2*this.padWidth;this.createNGrams(e,c,a,u,1,d)}}return[a,o]}}function stringNGramsImpl(n,e,t,r,s,i,o,a){return new StringNGramsOp(t,r,s,i,o,a).compute(n,e)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split$1(n,e,t,r){if(!n.length)return;if(e.length===0){for(let i=0;i<n.length;++i)r.push(n.subarray(i,i+1));return}if(e.length===1){const i=e[0];let o=n.indexOf(i);for(;o!==-1;){const a=n.subarray(0,o);(!t||a.length!==0)&&r.push(a),n=n.subarray(o+1),o=n.indexOf(i)}(!t||n.length!==0)&&r.push(n);return}let s=0;for(let i=0;i<n.length+1;i++)if(i===n.length||e.indexOf(n[i])!==-1){const o=n.subarray(s,i);(!t||o.length!==0)&&r.push(o),s=i+1}}function stringSplitImpl(n,e,t){const r=n.length,s=[];let i=0,o=0;const a=new Array(r);for(let d=0;d<r;++d){const g=s.length;split$1(n[d],e,t,s);const x=s.length-g;a[d]=x,i+=x,o=Math.max(o,x)}const l=getArrayFromDType("int32",i*2),c=new Array(i),u=[r,o];let h=0;for(let d=0;d<r;++d)for(let g=0;g<a[d];++g)l[h*2]=d,l[h*2+1]=g,c[h]=s[h],++h;return[l,c,u]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFastImpl(n,e){const t=getArrayFromDType("int32",n.length);for(let r=0;r<n.length;++r)t[r]=fingerPrint64(n[r]).modulo(e).getLowBitsUnsigned();return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subImpl=createSimpleBinaryKernelImpl((n,e)=>n-e),subComplexImpl=createComplexBinaryKernelImpl((n,e,t,r)=>({real:n-t,imag:e-r})),sub$1=binaryKernelFunc$1(Sub,subImpl,subComplexImpl),subConfig$1={kernelName:Sub,backendName:"cpu",kernelFunc:sub$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tileImpl(n,e){const t=new Array(n.rank);for(let s=0;s<t.length;s++)t[s]=n.shape[s]*e[s];const r=buffer(t,n.dtype);for(let s=0;s<r.values.length;++s){const i=r.indexToLoc(s),o=new Array(n.rank);for(let l=0;l<o.length;l++)o[l]=i[l]%n.shape[l];const a=n.locToIndex(o);r.values[s]=n.values[a]}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const comparePair=(n,e)=>{const t=e.value-n.value;return t===0?n.index-e.index:t};function select$2(n,e,t=0,r=n.length-1){for(;r>t;){if(r-t>600){const a=r-t+1,l=e-t+1,c=Math.log(a),u=.5*Math.exp(2*c/3),h=.5*Math.sqrt(c*u*(a-u)/a)*Math.sign(l-a/2),d=Math.max(t,Math.floor(e-l*u/a+h)),g=Math.min(r,Math.floor(e+(a-l)*u/a+h));select$2(n,e,d,g)}const s=n[e];let i=t,o=r;for(swap(n,t,e),comparePair(n[r],s)>0&&swap(n,t,r);i<o;){for(swap(n,i,o),i++,o--;comparePair(n[i],s)<0;)i=i+1;for(;comparePair(n[o],s)>0;)o=o-1}comparePair(n[t],s)===0?swap(n,t,o):(o=o+1,swap(n,o,r)),o<=e&&(t=o+1),e<=o&&(r=o-1)}}function topKImpl(n,e,t,r,s){const i=e[e.length-1],[o,a]=[n.length/i,i],l=getTypedArrayFromDType(t,o*r),c=getTypedArrayFromDType("int32",o*r);for(let h=0;h<o;h++){const d=h*a,g=n.subarray(d,d+a);let x=new Array(g.length);g.forEach((S,_)=>x[_]={value:S,index:_}),r<x.length&&(select$2(x,r),x=x.slice(0,r)),s&&x.sort(comparePair);const y=h*r,w=l.subarray(y,y+r),$=c.subarray(y,y+r);for(let S=0;S<r;S++)w[S]=x[S].value,$[S]=x[S].index}const u=e.slice();return u[u.length-1]=r,[buffer(u,t,l),buffer(u,"int32",c)]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function uniqueImpl(n,e,t,r){const s=parseAxisParam(e,t)[0],i=[1,t[0],1];for(let x=0;x<s;x++)i[0]*=t[x];i[1]=t[s];for(let x=s+1;x<t.length;x++)i[2]*=t[x];const o={},a=new Int32Array(t[s]),l=new TensorBuffer(i,r,n),c=[],u=i[0]===1&&i[2]===1;for(let x=0;x<t[s];x++){let y;if(u)y=n[x].toString();else{const w=[];for(let $=0;$<i[0];$++)for(let S=0;S<i[2];S++)w.push(l.get($,x,S));y=w.join(",")}if(o[y]!==void 0)a[x]=o[y];else{const w=Object.keys(o).length;o[y]=w,a[x]=w,c.push(x)}}const h=i.slice();h[1]=Object.keys(o).length;const d=new TensorBuffer(h,r);c.forEach((x,y)=>{for(let w=0;w<i[0];w++)for(let $=0;$<i[2];$++)d.set(l.get(w,x,$),w,y,$)});const g=t.slice();return g[s]=h[1],{outputValues:d.values,outputShape:g,indices:a}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var shared=Object.freeze({__proto__:null,addImpl,bincountImpl,bincountReduceImpl,castImpl,ceilImpl,concatImpl:concatImpl$1,equalImpl,expImpl,expm1Impl,floorImpl,gatherNdImpl,gatherV2Impl,greaterEqualImpl,greaterImpl,lessEqualImpl,lessImpl,linSpaceImpl,logImpl,maxImpl:maxImpl$1,maximumImpl,minimumImpl,multiplyImpl,negImpl,notEqualImpl,prodImpl,raggedGatherImpl,raggedRangeImpl,raggedTensorToTensorImpl,rangeImpl,rsqrtImpl,scatterImpl,sigmoidImpl,simpleAbsImpl,sliceImpl,sparseFillEmptyRowsImpl,sparseReshapeImpl,sparseSegmentReductionImpl,sqrtImpl,squaredDifferenceImpl,stridedSliceImpl,stringNGramsImpl,stringSplitImpl,stringToHashBucketFastImpl,subImpl,tileImpl,topKImpl,transposeImpl:transposeImpl$1,uniqueImpl});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerBackend("cpu",()=>new MathBackendCPU,1);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const elu$1=unaryKernelFunc$1(Elu$1,n=>n>=0?n:Math.exp(n)-1),eluConfig$1={kernelName:Elu$1,backendName:"cpu",kernelFunc:elu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{alpha:i}=r;assertNotComplex$1([s],"leakyRelu");const o=sizeFromShape(s.shape),a=t.data.get(s.dataId).values,l=getTypedArrayFromDType("float32",o);for(let c=0;c<a.length;c++)l[c]=a[c]<0?i*a[c]:a[c];return t.makeTensorInfo(s.shape,"float32",l)}const leakyReluConfig$1={kernelName:LeakyRelu,backendName:"cpu",kernelFunc:leakyRelu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluImpl=createSimpleBinaryKernelImpl((n,e)=>n<0?e*n:n);function prelu$1(n){const{inputs:e,backend:t}=n,{x:r,alpha:s}=e;assertNotComplex$1([r,s],"prelu");const i=t.data.get(r.dataId).values,o=t.data.get(s.dataId).values,[a,l]=preluImpl(r.shape,s.shape,i,o,"float32");return t.makeTensorInfo(l,"float32",a)}const preluConfig$1={kernelName:Prelu,backendName:"cpu",kernelFunc:prelu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu$1=unaryKernelFunc$1(Relu$1,n=>Math.max(0,n)),reluConfig$1={kernelName:Relu$1,backendName:"cpu",kernelFunc:relu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6$1=unaryKernelFunc$1(Relu6$1,n=>Math.min(Math.max(0,n),6)),relu6Config$1={kernelName:Relu6$1,backendName:"cpu",kernelFunc:relu6$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function applyActivation(n,e,t,r,s){if(t==="linear")return identity$1({inputs:{x:e},backend:n});if(t==="relu")return relu$1({inputs:{x:e},backend:n});if(t==="elu")return elu$1({inputs:{x:e},backend:n});if(t==="relu6")return relu6$1({inputs:{x:e},backend:n});if(t==="prelu")return prelu$1({inputs:{x:e,alpha:r},backend:n});if(t==="leakyrelu")return leakyRelu$1({inputs:{x:e},backend:n,attrs:{alpha:s}});if(t==="sigmoid")return sigmoid$1({inputs:{x:e},backend:n});throw new Error(`Activation ${t} has not been implemented for the CPU backend.`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{shape:i}=r,o=sizeFromShape(s.shape),a=inferFromImplicitShape(i,o),l=sizeFromShape(a);assert$1(o===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),t.incRef(s.dataId);const c=t.data.get(s.dataId);if(c.complexTensorInfos!=null){const u=c.complexTensorInfos.real,h=c.complexTensorInfos.imag;u.shape=a,h.shape=a}return{dataId:s.dataId,shape:a,dtype:s.dtype}}const reshapeConfig$1={kernelName:Reshape$1,backendName:"cpu",kernelFunc:reshape$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul$1(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:i}=e,{transposeA:o,transposeB:a}=r;assertNotComplex$1([s,i],"matMul");const l=s.shape.length,c=i.shape.length,u=o?s.shape[l-2]:s.shape[l-1],h=a?i.shape[c-1]:i.shape[c-2],d=o?s.shape[l-1]:s.shape[l-2],g=a?i.shape[c-2]:i.shape[c-1],x=s.shape.slice(0,-2),y=i.shape.slice(0,-2),w=sizeFromShape(x),$=sizeFromShape(y),_=assertAndGetBroadcastShape(s.shape.slice(0,-2),i.shape.slice(0,-2)).concat([d,g]);assert$1(u===h,()=>`Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${s.shape} and ${i.shape} and transposeA=${o} and transposeB=${a} must match.`);const T=o?[w,u,d]:[w,d,u],k=a?[$,g,h]:[$,h,g],P=reshape$1({inputs:{x:s},backend:t,attrs:{shape:T}}),L=reshape$1({inputs:{x:i},backend:t,attrs:{shape:k}}),D=o?P.shape[1]:P.shape[2],M=o?P.shape[2]:P.shape[1],O=a?L.shape[1]:L.shape[2],R=Math.max(w,$),z=t.data.get(P.dataId).values,X=t.data.get(L.dataId).values,K=computeStrides(P.shape),Y=computeStrides(L.shape),[te,ie,Q]=o?[K[0],1,K[1]]:[K[0],K[1],1],[se,le,he]=a?[1,Y[1],Y[0]]:[Y[1],1,Y[0]],re=M*O,fe=buffer([R,M,O],P.dtype),ge=fe.values,j=t.blockSize;for(let xe=0;xe<R;xe++){const Ee=xe%w,Se=xe%$;for(let Ce=0;Ce<M;Ce+=j){const Me=Math.min(Ce+j,M);for(let Fe=0;Fe<O;Fe+=j){const Xe=Math.min(Fe+j,O);for(let qe=0;qe<D;qe+=j){const ke=Math.min(qe+j,D);for(let we=Ce;we<Me;we++)for(let Ye=Fe;Ye<Xe;Ye++){let Oe=0;for(let Ve=qe;Ve<ke;Ve++){const de=z[Ee*te+we*ie+Ve*Q],Pe=X[Ve*se+Ye*le+Se*he];Oe+=de*Pe}ge[xe*re+(we*O+Ye)]+=Oe}}}}}return t.disposeIntermediateTensorInfo(P),t.disposeIntermediateTensorInfo(L),t.makeTensorInfo(_,fe.dtype,fe.values)}const batchMatMulConfig$1={kernelName:BatchMatMul,backendName:"cpu",kernelFunc:batchMatMul$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul$1(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:i,bias:o,preluActivationWeights:a}=e,{transposeA:l,transposeB:c,activation:u,leakyreluAlpha:h}=r;let d,g,x;const y=[];d=batchMatMul$1({inputs:{a:s,b:i},attrs:{transposeA:l,transposeB:c},backend:t}),o&&(g=add$1({inputs:{a:d,b:o},backend:t}),y.push(d),d=g),u&&(x=applyActivation(t,d,u,a,h),y.push(d),d=x);for(const $ of y)t.disposeIntermediateTensorInfo($);return d}const _fusedMatMulConfig$1={kernelName:_FusedMatMul,backendName:"cpu",kernelFunc:_fusedMatMul$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acos$1=unaryKernelFunc$1(Acos,n=>Math.acos(n)),acosConfig$1={kernelName:Acos,backendName:"cpu",kernelFunc:acos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosh$1=unaryKernelFunc$1(Acosh,n=>Math.acosh(n)),acoshConfig$1={kernelName:Acosh,backendName:"cpu",kernelFunc:acosh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN$1(n){const{inputs:e,backend:t}=n,r=e;assertNotComplex$1(e,"addN");const s=r.map(a=>t.data.get(a.dataId).values),i=buffer(r[0].shape,r[0].dtype),o=i.values;for(let a=0;a<r.length;a++){const l=s[a];for(let c=0;c<o.length;c++)o[c]+=l[c]}return t.makeTensorInfo(i.shape,i.dtype,i.values)}const addNConfig$1={kernelName:AddN,backendName:"cpu",kernelFunc:addN$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;assertNotComplex$1(s,"all");const a=parseAxisParam(i,s.shape);let l=a;const c=getAxesPermutation(l,s.shape.length);let u=s;c!=null&&(u=transpose$1({inputs:{x:s},backend:t,attrs:{perm:c}}),l=getInnerMostAxes(l.length,s.shape.length)),assertAxesAreInnerMostDims("all",l,u.shape.length);const[h,d]=computeOutAndReduceShapes(u.shape,l),g=sizeFromShape(d),x=makeZerosTypedArray(sizeFromShape(h),u.dtype),y=t.data.get(u.dataId).values;for(let $=0;$<x.length;++$){const S=$*g;let _=y[S];for(let T=0;T<g;++T){const k=y[S+T];_=_&&k}x[$]=_}c!=null&&t.disposeIntermediateTensorInfo(u);const w=t.makeTensorInfo(h,u.dtype,x);if(o){const $=expandShapeToKeepDim(h,a),S=reshape$1({inputs:{x:w},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(w),S}return w}const allConfig$1={kernelName:All,backendName:"cpu",kernelFunc:all$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;assertNotComplex$1(s,"any");const a=parseAxisParam(i,s.shape);let l=a;const c=getAxesPermutation(l,s.shape.length);let u=s;c!=null&&(u=transpose$1({inputs:{x:s},backend:t,attrs:{perm:c}}),l=getInnerMostAxes(l.length,s.shape.length)),assertAxesAreInnerMostDims("any",l,u.shape.length);const[h,d]=computeOutAndReduceShapes(u.shape,l),g=sizeFromShape(d),x=makeZerosTypedArray(sizeFromShape(h),u.dtype),y=t.data.get(u.dataId).values;for(let $=0;$<x.length;++$){const S=$*g;let _=y[S];for(let T=0;T<g;++T){const k=y[S+T];_=_||k}x[$]=_}c!=null&&t.disposeIntermediateTensorInfo(u);const w=t.makeTensorInfo(h,u.dtype,x);if(o){const $=expandShapeToKeepDim(h,a),S=reshape$1({inputs:{x:w},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(w),S}return w}const anyConfig$1={kernelName:Any,backendName:"cpu",kernelFunc:any$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i}=r;assertNotComplex$1(s,"argMax");let o=parseAxisParam(i,s.shape);const a=getAxesPermutation(o,s.shape.length);let l=s;const c=[];a!=null&&(l=transpose$1({inputs:{x:s},backend:t,attrs:{perm:a}}),c.push(l),o=getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[u,h]=computeOutAndReduceShapes(l.shape,o),d=sizeFromShape(u),g=makeZerosTypedArray(d,"int32"),x=sizeFromShape(h),y=t.data.get(l.dataId).values;for(let w=0;w<g.length;++w){const $=w*x;let S=y[$],_=0;for(let T=0;T<x;++T){const k=y[$+T];k>S&&(S=k,_=T)}g[w]=_}return c.forEach(w=>t.disposeIntermediateTensorInfo(w)),t.makeTensorInfo(u,"int32",g)}const argMaxConfig$1={kernelName:ArgMax,backendName:"cpu",kernelFunc:argMax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i}=r;assertNotComplex$1(s,"argMin");let o=parseAxisParam(i,s.shape);const a=getAxesPermutation(o,s.shape.length);let l=s;const c=[];a!=null&&(l=transpose$1({inputs:{x:s},backend:t,attrs:{perm:a}}),c.push(l),o=getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[u,h]=computeOutAndReduceShapes(l.shape,o),d=sizeFromShape(u),g=makeZerosTypedArray(d,"int32"),x=sizeFromShape(h),y=t.data.get(l.dataId).values;for(let w=0;w<g.length;++w){const $=w*x;let S=y[$],_=0;for(let T=0;T<x;++T){const k=y[$+T];k<S&&(S=k,_=T)}g[w]=_}return c.forEach(w=>t.disposeIntermediateTensorInfo(w)),t.makeTensorInfo(u,"int32",g)}const argMinConfig$1={kernelName:ArgMin,backendName:"cpu",kernelFunc:argMin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asin$1=unaryKernelFunc$1(Asin,n=>Math.asin(n)),asinConfig$1={kernelName:Asin,backendName:"cpu",kernelFunc:asin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinh$1=unaryKernelFunc$1(Asinh,n=>Math.asinh(n)),asinhConfig$1={kernelName:Asinh,backendName:"cpu",kernelFunc:asinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan$1=unaryKernelFunc$1(Atan,n=>Math.atan(n)),atanConfig$1={kernelName:Atan,backendName:"cpu",kernelFunc:atan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2Impl=createSimpleBinaryKernelImpl((n,e)=>Math.atan2(n,e)),atan2$1=binaryKernelFunc$1(Atan2,atan2Impl),atan2Config$1={kernelName:Atan2,backendName:"cpu",kernelFunc:atan2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanh$1=unaryKernelFunc$1(Atanh,n=>Math.atanh(n)),atanhConfig$1={kernelName:Atanh,backendName:"cpu",kernelFunc:atanh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool(n,e,t,r,s,i){const o=s.strideHeight,a=s.strideWidth,l=s.dilationHeight,c=s.dilationWidth,u=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,g=s.padInfo.left,x=i==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=buffer(s.outShape,t),w=y.values,$=s.outShape[1]*s.outShape[2]*s.outShape[3],S=s.outShape[2]*s.outShape[3],_=s.outShape[3];for(let T=0;T<s.batchSize;++T){const k=T*$,P=T*r[0];for(let L=0;L<s.inChannels;++L)for(let D=0;D<s.outHeight;++D){const M=D*o-d,O=Math.max(0,M),R=Math.min(s.inHeight,u+M),z=k+D*S;for(let X=0;X<s.outWidth;++X){const K=X*a-g,Y=Math.max(0,K),te=Math.min(s.inWidth,h+K);let ie=x,Q=0,se=0;for(let he=O;he<R;he+=l){const re=P+he*r[1];for(let fe=Y;fe<te;fe+=c){const ge=re+fe*r[2],j=n[ge+L];i==="max"&&j>ie?ie=j:i==="avg"&&(Q+=j,se++)}if(isNaN(ie))break}const le=z+X*_+L;w[le]=i==="avg"?Q/se:ie}}}return y}function maxPoolPositions(n,e,t,r,s=!1,i=!1){const o=buffer(r.outShape,"int32"),a=r.strideHeight,l=r.strideWidth,c=r.dilationHeight,u=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,g=r.padInfo.top,x=r.padInfo.left,y=buffer(e,t,n);for(let w=0;w<r.batchSize;++w)for(let $=0;$<r.inChannels;++$)for(let S=0;S<r.outHeight;++S){const _=S*a-g;let T=_;for(;T<0;)T+=c;const k=Math.min(r.inHeight,h+_);for(let P=0;P<r.outWidth;++P){const L=P*l-x;let D=L;for(;D<0;)D+=u;const M=Math.min(r.inWidth,d+L);let O=Number.NEGATIVE_INFINITY,R=-1;for(let z=T;z<k;z+=c){const X=z-_;for(let K=D;K<M;K+=u){const Y=K-L,te=y.get(w,z,K,$);te>O&&(O=te,s?R=i?((w*r.inHeight+z)*r.inWidth+K)*r.inChannels+$:(z*r.inWidth+K)*r.inChannels+$:R=X*d+Y)}}o.set(R,w,S,P,$)}}return o}function pool3d(n,e,t,r,s,i){const o=s.strideDepth,a=s.strideHeight,l=s.strideWidth,c=s.dilationDepth,u=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,g=s.effectiveFilterHeight,x=s.effectiveFilterWidth,y=s.padInfo.front,w=s.padInfo.top,$=s.padInfo.left,S=i==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,_=buffer(s.outShape,t),T=_.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],P=s.outShape[2]*s.outShape[3]*s.outShape[4],L=s.outShape[3]*s.outShape[4],D=s.outShape[4];for(let M=0;M<s.batchSize;++M){const O=M*k,R=M*r[0];for(let z=0;z<s.inChannels;++z)for(let X=0;X<s.outDepth;++X){const K=X*o-y;let Y=K;for(;Y<0;)Y+=c;const te=Math.min(s.inDepth,d+K),ie=O+X*P;for(let Q=0;Q<s.outHeight;++Q){const se=Q*a-w;let le=se;for(;le<0;)le+=u;const he=Math.min(s.inHeight,g+se),re=ie+Q*L;for(let fe=0;fe<s.outWidth;++fe){const ge=fe*l-$;let j=ge;for(;j<0;)j+=h;const xe=Math.min(s.inWidth,x+ge),Ee=re+fe*D;let Se=S,Ce=0,Me=0;for(let Xe=Y;Xe<te;Xe+=c){const qe=R+Xe*r[1];for(let ke=le;ke<he;ke+=u){const we=qe+ke*r[2];for(let Ye=j;Ye<xe;Ye+=h){const Oe=we+Ye*r[3],Ve=n[Oe+z];if(i==="max"&&Ve>Se?Se=Ve:i==="avg"&&(Ce+=Ve,Me++),isNaN(Se))break}if(isNaN(Se))break}if(isNaN(Se))break}const Fe=Ee+z;T[Fe]=i==="avg"?Ce/Math.max(Me,1):Se}}}}return _}function maxPool3dPositions(n,e){const t=buffer(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,a=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,u=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;for(let y=0;y<e.batchSize;++y)for(let w=0;w<e.inChannels;++w)for(let $=0;$<e.outDepth;++$){const S=$*r-d;let _=S;for(;_<0;)_+=o;const T=Math.min(e.inDepth,c+S);for(let k=0;k<e.outHeight;++k){const P=k*s-g;let L=P;for(;L<0;)L+=a;const D=Math.min(e.inHeight,u+P);for(let M=0;M<e.outWidth;++M){const O=M*i-x;let R=O;for(;R<0;)R+=l;const z=Math.min(e.inWidth,h+O);let X=Number.NEGATIVE_INFINITY,K=-1;for(let Y=_;Y<T;Y+=o){const te=Y-S;for(let ie=L;ie<D;ie+=a){const Q=ie-P;for(let se=R;se<z;se+=l){const le=se-O,he=n.get(y,Y,ie,se,w);he>=X&&(X=he,K=te*u*h+Q*u+le)}}}t.set(K,y,$,k,M,w)}}}return t}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$1(s,"avgPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:l}=r,c=1;assert$1(eitherStridesOrDilationsAreOne(o,c),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const u=computePool2DInfo(s.shape,i,o,c,a,l);let h;if(u.filterWidth===1&&u.filterHeight===1&&arraysEqual(u.inShape,u.outShape))h=identity$1({inputs:{x:s},backend:t});else{const d=t.data.get(s.dataId).values,g=computeStrides(s.shape),x=pool(d,s.shape,s.dtype,g,u,"avg");h=t.makeTensorInfo(u.outShape,s.dtype,x.values)}return h}const avgPoolConfig$1={kernelName:AvgPool,backendName:"cpu",kernelFunc:avgPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:l,dataFormat:c}=r;assertNotComplex$1(s,"avgPool3d");const u=computePool3DInfo(s.shape,i,o,1,a,l,c),h=t.data.get(s.dataId).values,d=pool3d(h,s.shape,s.dtype,computeStrides(s.shape),u,"avg");return t.makeTensorInfo(d.shape,"float32",d.values)}const avgPool3DConfig$1={kernelName:AvgPool3D,backendName:"cpu",kernelFunc:avgPool3D$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,{filterSize:o,strides:a,pad:l,dimRoundingMode:c}=r;assertNotComplex$1([s,i],"avgPool3DGrad");const u=computePool3DInfo(i.shape,o,a,1,l,c),h=u.strideDepth,d=u.strideHeight,g=u.strideWidth,x=u.filterDepth,y=u.filterHeight,w=u.filterWidth,$=u.dilationDepth,S=u.dilationHeight,_=u.dilationWidth,T=u.effectiveFilterDepth,k=u.effectiveFilterHeight,P=u.effectiveFilterWidth,L=T-1-u.padInfo.front,D=P-1-u.padInfo.left,M=k-1-u.padInfo.top,O=buffer(i.shape,"float32"),R=1/(x*y*w),z=t.bufferSync(s);for(let X=0;X<u.batchSize;++X)for(let K=0;K<u.inChannels;++K)for(let Y=0;Y<u.inDepth;++Y)for(let te=0;te<u.inHeight;++te)for(let ie=0;ie<u.inWidth;++ie){const Q=Y-L,se=te-M,le=ie-D;let he=0;for(let re=0;re<T;re+=$){const fe=(Q+re)/h;if(!(fe<0||fe>=u.outDepth||Math.floor(fe)!==fe))for(let ge=0;ge<k;ge+=S){const j=(se+ge)/d;if(!(j<0||j>=u.outHeight||Math.floor(j)!==j))for(let xe=0;xe<P;xe+=_){const Ee=(le+xe)/g;if(Ee<0||Ee>=u.outWidth||Math.floor(Ee)!==Ee)continue;const Se=z.get(X,fe,j,Ee,K);he+=Se}}}O.set(he*R,X,Y,te,ie,K)}return t.makeTensorInfo(O.shape,O.dtype,O.values)}const avgPool3DGradConfig$1={kernelName:AvgPool3DGrad,backendName:"cpu",kernelFunc:avgPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,o=i;assertNotComplex$1([s,i],"avgPoolGrad");const{filterSize:a,strides:l,pad:c}=r,u=computePool2DInfo(o.shape,a,l,1,c),h=u.strideHeight,d=u.strideWidth,g=u.filterHeight,x=u.filterWidth,y=u.dilationHeight,w=u.dilationWidth,$=u.effectiveFilterHeight,S=u.effectiveFilterWidth,_=S-1-u.padInfo.left,T=$-1-u.padInfo.top,k=buffer(o.shape,"float32"),P=1/(g*x),L=t.data.get(s.dataId).values,D=buffer(s.shape,"float32",L);for(let M=0;M<u.batchSize;++M)for(let O=0;O<u.inChannels;++O)for(let R=0;R<u.inHeight;++R)for(let z=0;z<u.inWidth;++z){const X=R-T,K=z-_;let Y=0;for(let te=0;te<$;te+=y){const ie=(X+te)/h;if(!(ie<0||ie>=u.outHeight||Math.floor(ie)!==ie))for(let Q=0;Q<S;Q+=w){const se=(K+Q)/d;if(se<0||se>=u.outWidth||Math.floor(se)!==se)continue;const le=D.get(M,ie,se,O);Y+=le}}k.set(Y*P,M,R,z,O)}return t.makeTensorInfo(k.shape,k.dtype,k.values)}const avgPoolGradConfig$1={kernelName:AvgPoolGrad,backendName:"cpu",kernelFunc:avgPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,scale:i,offset:o,mean:a,variance:l}=e;assert$1(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$1(o==null||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$1(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),assertNotComplex$1([s,a,l,i,o],"batchNorm");let{varianceEpsilon:c}=r;c==null&&(c=.001);const u=t.data.get(s.dataId).values,h=t.data.get(a.dataId).values,d=t.data.get(l.dataId).values,g=i?t.data.get(i.dataId).values:new Float32Array([1]),x=o?t.data.get(o.dataId).values:new Float32Array([0]),y=new Float32Array(u.length),w=x.length,$=g.length,S=d.length,_=h.length;let T=0,k=0,P=0,L=0;for(let D=0;D<u.length;++D)y[D]=x[T++]+(u[D]-h[k++])*g[P++]/Math.sqrt(d[L++]+c),T>=w&&(T=0),k>=_&&(k=0),P>=$&&(P=0),L>=S&&(L=0);return t.makeTensorInfo(s.shape,s.dtype,y)}const batchNormConfig$1={kernelName:FusedBatchNorm,backendName:"cpu",kernelFunc:batchNorm$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:i,crops:o}=r;assertNotComplex$1([s],"batchToSpaceND");const a=i.reduce(($,S)=>$*S),l=getReshaped(s.shape,i,a),c=getPermuted(l.length,i.length),u=getReshapedPermuted(s.shape,i,a),h=getSliceBeginCoords(o,i.length),d=getSliceSize(u,o,i.length),g=reshape$1({inputs:{x:s},backend:t,attrs:{shape:l}}),x=transpose$1({inputs:{x:g},backend:t,attrs:{perm:c}}),y=reshape$1({inputs:{x},backend:t,attrs:{shape:u}}),w=slice$1({inputs:{x:y},backend:t,attrs:{begin:h,size:d}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(y),w}const batchToSpaceNDConfig$1={kernelName:BatchToSpaceND,backendName:"cpu",kernelFunc:batchToSpaceND$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:i}=e,{size:o}=r,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values,c=bincountImpl(a,l,i.dtype,i.shape,o);return t.makeTensorInfo([o],i.dtype,c)}const bincountConfig$1={kernelName:Bincount,backendName:"cpu",kernelFunc:bincount$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs$1(n){const{inputs:e,backend:t}=n,{s0:r,s1:s}=e,i=t.data.get(r.dataId).values,o=t.data.get(s.dataId).values,a=assertAndGetBroadcastShape(Array.from(i),Array.from(o));return t.makeTensorInfo([a.length],"int32",Int32Array.from(a))}const broadcastArgsConfig$1={kernelName:BroadcastArgs,backendName:"cpu",kernelFunc:broadcastArgs$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValue$1=unaryKernelFunc$1(ClipByValue,(n,e)=>{const t=e;return n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n}),clipByValueConfig$1={kernelName:ClipByValue,backendName:"cpu",kernelFunc:clipByValue$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbs$1=n=>{const{x:e}=n.inputs,t=n.backend,r=new Float32Array(sizeFromShape(e.shape)),s=t.data.get(e.dataId),i=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,a=t.data.get(i.dataId).values,l=t.data.get(o.dataId).values;for(let c=0;c<a.length;c++){const u=a[c],h=l[c];r[c]=Math.hypot(u,h)}return t.makeOutput(r,e.shape,"float32")},complexAbsConfig$1={kernelName:ComplexAbs,backendName:"cpu",kernelFunc:complexAbs$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag$1(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.data.get(r.dataId).complexTensorInfos.imag,i=t.data.get(s.dataId).values;return t.makeTensorInfo(s.shape,s.dtype,i)}const imagConfig$1={kernelName:Imag,backendName:"cpu",kernelFunc:imag$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat$1(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r,i=parseAxisParam(s,e[0].shape)[0],o=e.map(y=>y.shape);assertParamsConsistent(o,i);let a=computeOutShape$1(e.map(y=>y.shape),i);if(sizeFromShape(a)===0)return t.makeTensorInfo(a,e[0].dtype,[]);const l=e.filter(y=>sizeFromShape(y.shape)>0);if(l.length===1)return identity$1({inputs:{x:l[0]},backend:t});if(l[0].dtype==="complex64"){const y=l.map(T=>real$1({inputs:{input:T},backend:t})),w=l.map(T=>imag$1({inputs:{input:T},backend:t})),$=concat$1({inputs:y,backend:t,attrs:{axis:i}}),S=concat$1({inputs:w,backend:t,attrs:{axis:i}}),_=complex$1({inputs:{real:$,imag:S},backend:t});return y.forEach(T=>t.disposeIntermediateTensorInfo(T)),w.forEach(T=>t.disposeIntermediateTensorInfo(T)),t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(S),_}const c=l.map(y=>{const $=[-1,sizeFromShape(y.shape.slice(i))];return reshape$1({inputs:{x:y},backend:t,attrs:{shape:$}})}),u=c.map(y=>({vals:t.data.get(y.dataId).values,shape:y.shape}));a=computeOutShape$1(c.map(y=>y.shape),1);const h=c[0].shape[0]===1,d=concatImpl$1(u,a,e[0].dtype,h),g=computeOutShape$1(l.map(y=>y.shape),i),x=t.makeTensorInfo(g,e[0].dtype,d);return c.forEach(y=>t.disposeIntermediateTensorInfo(y)),x}const concatConfig$1={kernelName:Concat,backendName:"cpu",kernelFunc:concat$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dataFormat:l,dilations:c,dimRoundingMode:u}=r;assertNotComplex$1([s,i],"conv2d");const h=convertConv2DDataFormat(l),d=computeConv2DInfo(s.shape,i.shape,o,c,a,u,!1,h),g=d.filterHeight,x=d.filterWidth,y=d.dilationHeight,w=d.dilationWidth,$=d.padInfo.left,S=d.padInfo.top,_=d.dataFormat==="channelsLast",T=new TensorBuffer(d.outShape,s.dtype),k=computeStrides(s.shape),P=computeStrides(i.shape),L=k[0],D=_?k[1]:k[2],M=_?k[2]:1,O=_?1:k[1],R=T.strides[0],z=_?T.strides[1]:T.strides[2],X=_?T.strides[2]:1,K=_?1:T.strides[1],Y=t.data.get(s.dataId).values,te=t.data.get(i.dataId).values,ie=T.values;for(let Q=0;Q<d.batchSize;++Q){const se=Q*L,le=Q*R;for(let he=0;he<d.outHeight;++he){const re=le+he*z,fe=he*d.strideHeight-S;for(let ge=0;ge<g;++ge){const j=fe+ge*y;if(j<0||j>=d.inHeight)continue;const xe=ge*P[0],Ee=se+j*D;for(let Se=0;Se<d.outWidth;++Se){const Ce=re+Se*X,Me=Se*d.strideWidth-$;for(let Fe=0;Fe<x;++Fe){const Xe=Me+Fe*w;if(Xe<0||Xe>=d.inWidth)continue;const qe=xe+Fe*P[1],ke=Ee+Xe*M;let we=qe;for(let Ye=0;Ye<d.inChannels;++Ye){const Oe=Y[ke+Ye*O];for(let Ve=0;Ve<d.outChannels;++Ve)ie[Ce+Ve*K]+=Oe*te[we+Ve];we+=d.outChannels}}}}}}return t.makeTensorInfo(T.shape,T.dtype,ie)}const conv2DConfig$1={kernelName:Conv2D$1,backendName:"cpu",kernelFunc:conv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,pad:a,dataFormat:l,dimRoundingMode:c,filterShape:u}=r;assertNotComplex$1([s,i],"conv2dBackpropFilter");const h=convertConv2DDataFormat(l),d=computeConv2DInfo(s.shape,u,o,1,a,c,!1,h),{strideHeight:g,strideWidth:x,filterHeight:y,filterWidth:w}=d,$=d.dataFormat==="channelsLast",S=new TensorBuffer(d.filterShape,"float32"),_=d.padInfo.left,T=d.padInfo.top,k=t.data.get(s.dataId).values,P=t.data.get(i.dataId).values,L=new TensorBuffer(s.shape,s.dtype,k),D=new TensorBuffer(i.shape,i.dtype,P);for(let M=0;M<y;++M){const O=Math.max(0,Math.ceil((T-M)/g)),R=Math.min(d.outHeight,(d.inHeight+T-M)/g);for(let z=0;z<w;++z){const X=Math.max(0,Math.ceil((_-z)/x)),K=Math.min(d.outWidth,(d.inWidth+_-z)/x);for(let Y=0;Y<d.inChannels;++Y)for(let te=0;te<d.outChannels;++te){let ie=0;for(let Q=0;Q<d.batchSize;++Q)for(let se=O;se<R;++se){const le=M+se*g-T;for(let he=X;he<K;++he){const re=z+he*x-_;$?ie+=L.get(Q,le,re,Y)*D.get(Q,se,he,te):ie+=L.get(Q,Y,le,re)*D.get(Q,te,se,he)}}S.set(ie,M,z,Y,te)}}}return t.makeTensorInfo(S.shape,S.dtype,S.values)}const conv2DBackpropFilterConfig$1={kernelName:Conv2DBackpropFilter,backendName:"cpu",kernelFunc:conv2DBackpropFilter$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{inputShape:o,strides:a,pad:l,dataFormat:c,dimRoundingMode:u}=r;assertNotComplex$1([s,i],"conv2dBackpropInput");const h=computeStrides(i.shape),d=computeStrides(s.shape);let g=convertConv2DDataFormat(c);const x=computeConv2DInfo(o,i.shape,a,1,l,u,!1,g),y=new TensorBuffer(x.inShape,"float32"),w=y.values,$=t.data.get(s.dataId).values,S=t.data.get(i.dataId).values,[_,T,k]=h,{batchSize:P,filterHeight:L,filterWidth:D,inChannels:M,inHeight:O,inWidth:R,outChannels:z,outHeight:X,outWidth:K,strideHeight:Y,strideWidth:te}=x;g=x.dataFormat;const ie=L-1-x.padInfo.top,Q=D-1-x.padInfo.left,se=g==="channelsLast",le=y.strides[0],he=se?y.strides[1]:y.strides[2],re=se?y.strides[2]:1,fe=se?1:y.strides[1],ge=d[0],j=se?d[1]:d[2],xe=se?d[2]:1,Ee=se?1:d[1];for(let Se=0;Se<P;++Se)for(let Ce=0;Ce<M;++Ce)for(let Me=0;Me<O;++Me){const Fe=Me-ie,Xe=Math.max(0,Math.ceil(Fe/Y)),qe=Math.min(X,(L+Fe)/Y);for(let ke=0;ke<R;++ke){const we=ke-Q,Ye=Math.max(0,Math.ceil(we/te)),Oe=Math.min(K,(D+we)/te);let Ve=0;for(let Pe=Xe;Pe<qe;++Pe){const Le=Pe*Y-Fe;for(let Be=Ye;Be<Oe;++Be){const Te=Be*te-we,rt=ge*Se+j*Pe+xe*Be,st=_*(L-1-Le)+T*(D-1-Te)+k*Ce;for(let Ue=0;Ue<z;++Ue){const ze=$[rt+Ee*Ue],Ze=S[st+Ue];Ve+=ze*Ze}}}const de=le*Se+he*Me+re*ke+fe*Ce;w[de]=Ve}}return t.makeTensorInfo(y.shape,y.dtype,y.values)}const conv2DBackpropInputConfig$1={kernelName:Conv2DBackpropInput,backendName:"cpu",kernelFunc:conv2DBackpropInput$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dilations:l}=r;assertNotComplex$1([s,i],"conv3d");const c=computeConv3DInfo(s.shape,i.shape,o,l,a),{filterDepth:u,filterHeight:h,filterWidth:d,dilationDepth:g,dilationHeight:x,dilationWidth:y,padInfo:w}=c,$=w.front,S=w.left,_=w.top,T=new TensorBuffer(c.outShape,s.dtype),k=t.data.get(s.dataId).values,P=t.data.get(i.dataId).values,L=T.values,D=computeStrides(s.shape),M=computeStrides(i.shape);for(let O=0;O<c.batchSize;++O){const R=O*D[0],z=O*T.strides[0];for(let X=0;X<c.outDepth;++X){const K=z+X*T.strides[1],Y=X*c.strideDepth-$;for(let te=0;te<u;++te){const ie=Y+te*g;if(ie<0||ie>=c.inDepth)continue;const Q=te*M[0],se=R+ie*D[1];for(let le=0;le<c.outHeight;++le){const he=K+le*T.strides[2],re=le*c.strideHeight-_;for(let fe=0;fe<h;++fe){const ge=re+fe*x;if(ge<0||ge>=c.inHeight)continue;const j=Q+fe*M[1],xe=se+ge*D[2];for(let Ee=0;Ee<c.outWidth;++Ee){const Se=he+Ee*c.outChannels,Ce=Ee*c.strideWidth-S;for(let Me=0;Me<d;++Me){const Fe=Ce+Me*y;if(Fe<0||Fe>=c.inWidth)continue;const Xe=j+Me*M[2],qe=xe+Fe*c.inChannels;let ke=Xe;for(let we=0;we<c.inChannels;++we){const Ye=k[qe+we];for(let Oe=0;Oe<c.outChannels;++Oe)L[Se+Oe]+=Ye*P[ke+Oe];ke+=c.outChannels}}}}}}}}return t.makeTensorInfo(T.shape,T.dtype,T.values)}const conv3DConfig$1={kernelName:Conv3D$1,backendName:"cpu",kernelFunc:conv3D$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,pad:a,filterShape:l}=r;assertNotComplex$1([s,i],"conv3dBackpropFilterV2");const c=computeStrides(s.shape),u=computeStrides(i.shape),h=computeConv3DInfo(s.shape,l,o,1,a),d=h.strideDepth,g=h.strideHeight,x=h.strideWidth,y=h.filterDepth,w=h.filterHeight,$=h.filterWidth,S=new TensorBuffer(h.filterShape,"float32"),_=S.values,[T,k,P,L]=S.strides,D=t.data.get(i.dataId).values,[M,O,R,z]=u,X=t.data.get(s.dataId).values,[K,Y,te,ie]=c,Q=h.padInfo.front,se=h.padInfo.left,le=h.padInfo.top;for(let he=0;he<y;++he){const re=Math.max(0,Math.ceil((Q-he)/d)),fe=Math.min(h.outDepth,(h.inDepth+Q-he)/d),ge=he*T;for(let j=0;j<w;++j){const xe=Math.max(0,Math.ceil((le-j)/g)),Ee=Math.min(h.outHeight,(h.inHeight+le-j)/g),Se=j*k+ge;for(let Ce=0;Ce<$;++Ce){const Me=Math.max(0,Math.ceil((se-Ce)/x)),Fe=Math.min(h.outWidth,(h.inWidth+se-Ce)/x),Xe=Ce*P+Se;for(let qe=0;qe<h.inChannels;++qe){const ke=qe*L+Xe;for(let we=0;we<h.outChannels;++we){let Ye=0;for(let Oe=0;Oe<h.batchSize;++Oe){const Ve=Oe*K,de=Oe*M;for(let Pe=re;Pe<fe;++Pe){const Be=(he+Pe*d-Q)*Y+Ve,Te=Pe*O+de;for(let rt=xe;rt<Ee;++rt){const Ue=(j+rt*g-le)*te+Be,ze=rt*R+Te;for(let Ze=Me;Ze<Fe;++Ze){const it=(Ce+Ze*x-se)*ie+Ue,dt=Ze*z+ze;Ye+=X[it+qe]*D[dt+we]}}}}_[ke+we]=Ye}}}}}return t.makeTensorInfo(S.shape,S.dtype,S.values)}const conv3DBackpropFilterV2Config$1={kernelName:Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:conv3DBackpropFilterV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInputV2(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{pad:o,strides:a,inputShape:l}=r;assertNotComplex$1([s],"conv3dBackpropInputV2");const c=computeStrides(s.shape),u=computeStrides(i.shape),h=computeConv3DInfo(l,i.shape,a,1,o),d=new TensorBuffer(h.inShape,"float32"),g=d.values,[x,y,w,$]=d.strides,S=t.data.get(s.dataId).values,[_,T,k,P]=c,L=t.data.get(i.dataId).values,[D,M,O,R]=u,{batchSize:z,filterDepth:X,filterHeight:K,filterWidth:Y,inChannels:te,inDepth:ie,inHeight:Q,inWidth:se,outChannels:le,outDepth:he,outHeight:re,outWidth:fe,strideDepth:ge,strideHeight:j,strideWidth:xe}=h,Ee=X-1-h.padInfo.front,Se=K-1-h.padInfo.top,Ce=Y-1-h.padInfo.left;for(let Me=0;Me<z;++Me)for(let Fe=0;Fe<te;++Fe)for(let Xe=0;Xe<ie;++Xe){const qe=Xe-Ee,ke=Math.max(0,Math.ceil(qe/ge)),we=Math.min(he,(X+qe)/ge);for(let Ye=0;Ye<Q;++Ye){const Oe=Ye-Se,Ve=Math.max(0,Math.ceil(Oe/j)),de=Math.min(re,(K+Oe)/j);for(let Pe=0;Pe<se;++Pe){const Le=Pe-Ce,Be=Math.max(0,Math.ceil(Le/xe)),Te=Math.min(fe,(Y+Le)/xe);let rt=0;for(let st=ke;st<we;++st){const Ue=st*ge-qe;for(let ze=Ve;ze<de;++ze){const Ze=ze*j-Oe;for(let We=Be;We<Te;++We){const it=We*xe-Le,dt=_*Me+T*st+k*ze+P*We,nt=D*(X-1-Ue)+M*(K-1-Ze)+O*(Y-1-it)+R*Fe;for(let lt=0;lt<le;++lt){const ft=S[dt+lt],bt=L[nt+lt];rt+=ft*bt}}}}g[x*Me+y*Xe+w*Ye+$*Pe+Fe]=rt}}}return t.makeTensorInfo(d.shape,d.dtype,d.values)}const conv3DBackpropInputV2Config={kernelName:Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:conv3DBackpropInputV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cos$1=unaryKernelFunc$1(Cos,n=>Math.cos(n)),cosConfig$1={kernelName:Cos,backendName:"cpu",kernelFunc:cos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosh$1=unaryKernelFunc$1(Cosh,n=>Math.cosh(n)),coshConfig$1={kernelName:Cosh,backendName:"cpu",kernelFunc:cosh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize$1(n){const{inputs:e,backend:t,attrs:r}=n,{image:s,boxes:i,boxInd:o}=e,{cropSize:a,method:l,extrapolationValue:c}=r,[u,h,d,g]=s.shape,x=i.shape[0],[y,w]=a,$=buffer([x,y,w,g],"float32"),S=t.data.get(i.dataId).values,_=t.data.get(o.dataId).values,T=t.data.get(s.dataId).values,k=computeStrides(s.shape),P=computeStrides($.shape);for(let L=0;L<x;L++){const D=L*4,M=S[D],O=S[D+1],R=S[D+2],z=S[D+3],X=_[L];if(X>=u)continue;const K=y>1?(R-M)*(h-1)/(y-1):0,Y=w>1?(z-O)*(d-1)/(w-1):0;for(let te=0;te<y;te++){const ie=y>1?M*(h-1)+te*K:.5*(M+R)*(h-1);if(ie<0||ie>h-1){for(let Q=0;Q<w;Q++)for(let se=0;se<g;se++){const le=se+Q*P[2]+te*P[1]+L*P[0];$.values[le]=c}continue}if(l==="bilinear"){const Q=Math.floor(ie),se=Math.ceil(ie),le=ie-Q;for(let he=0;he<w;he++){const re=w>1?O*(d-1)+he*Y:.5*(O+z)*(d-1);if(re<0||re>d-1){for(let xe=0;xe<g;xe++){const Ee=xe+he*P[2]+te*P[1]+L*P[0];$.values[Ee]=c}continue}const fe=Math.floor(re),ge=Math.ceil(re),j=re-fe;for(let xe=0;xe<g;xe++){let Ee=xe+fe*k[2]+Q*k[1]+X*k[0];const Se=T[Ee];Ee=xe+ge*k[2]+Q*k[1]+X*k[0];const Ce=T[Ee];Ee=xe+fe*k[2]+se*k[1]+X*k[0];const Me=T[Ee];Ee=xe+ge*k[2]+se*k[1]+X*k[0];const Fe=T[Ee],Xe=Se+(Ce-Se)*j,qe=Me+(Fe-Me)*j;Ee=xe+he*P[2]+te*P[1]+L*P[0],$.values[Ee]=Xe+(qe-Xe)*le}}}else for(let Q=0;Q<w;++Q){const se=w>1?O*(d-1)+Q*Y:.5*(O+z)*(d-1);if(se<0||se>d-1){for(let re=0;re<g;re++){const fe=re+Q*P[2]+te*P[1]+L*P[0];$.values[fe]=c}continue}const le=Math.round(se),he=Math.round(ie);for(let re=0;re<g;re++){const fe=re+le*k[2]+he*k[1]+X*k[0],ge=re+Q*P[2]+te*P[1]+L*P[0];$.values[ge]=T[fe]}}}}return t.makeTensorInfo($.shape,$.dtype,$.values)}const cropAndResizeConfig$1={kernelName:CropAndResize,backendName:"cpu",kernelFunc:cropAndResize$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r;assertNotComplex$1(s,"cumprod");const l=getAxesPermutation([i],s.shape.length);let c=s;l!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:l}}));const u=getInnerMostAxes(1,s.shape.length)[0];if(u!==c.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${u}`);const h=upcastType(c.dtype,"int32"),d=makeOnesTypedArray(sizeFromShape(c.shape),h),g=t.data.get(c.dataId).values,x=c.shape[c.shape.length-1],y=a?($,S)=>$+x-S-1:($,S)=>$+S;for(let $=0;$<g.length;$+=x)for(let S=0;S<x;S++){const _=y($,S);if(S===0)d[_]=o?1:g[_];else{const T=y($,S-1);d[_]=o?g[T]*d[T]:g[_]*d[T]}}const w=t.makeTensorInfo(c.shape,h,d);if(l!=null){const $=getUndoAxesPermutation(l),S=transpose$1({inputs:{x:w},backend:t,attrs:{perm:$}});return t.disposeIntermediateTensorInfo(w),t.disposeIntermediateTensorInfo(c),S}return w}const cumprodConfig$1={kernelName:Cumprod,backendName:"cpu",kernelFunc:cumprod$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r;assertNotComplex$1(s,"cumsum");const l=getAxesPermutation([i],s.shape.length);let c=s;l!=null&&(c=transpose$1({inputs:{x:s},backend:t,attrs:{perm:l}}));const u=getInnerMostAxes(1,s.shape.length)[0];if(u!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${u}`);const h=upcastType(c.dtype,"int32"),d=makeZerosTypedArray(sizeFromShape(c.shape),h),g=t.data.get(c.dataId).values,x=c.shape[c.shape.length-1],y=a?($,S)=>$+x-S-1:($,S)=>$+S;for(let $=0;$<g.length;$+=x)for(let S=0;S<x;S++){const _=y($,S);if(S===0)d[_]=o?0:g[_];else{const T=y($,S-1);d[_]=o?g[T]+d[T]:g[_]+d[T]}}const w=t.makeTensorInfo(c.shape,h,d);if(l!=null){const $=getUndoAxesPermutation(l),S=transpose$1({inputs:{x:w},backend:t,attrs:{perm:$}});return t.disposeIntermediateTensorInfo(w),t.disposeIntermediateTensorInfo(c),S}return w}const cumsumConfig$1={kernelName:Cumsum,backendName:"cpu",kernelFunc:cumsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:i}=e,{size:o,binaryOutput:a}=r;if(s.shape.length===1){const l=t.data.get(s.dataId).values,c=t.data.get(i.dataId).values,u=bincountImpl(l,c,i.dtype,i.shape,o);return t.makeTensorInfo([o],i.dtype,u)}else if(s.shape.length===2){const l=t.bufferSync(s),c=t.bufferSync(i),u=bincountReduceImpl(l,c,o,a);return t.makeTensorInfo(u.shape,i.dtype,u.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}const denseBincountConfig$1={kernelName:DenseBincount,backendName:"cpu",kernelFunc:denseBincount$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockSize:i,dataFormat:o}=r;assert$1(o==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);const a=s.shape[0],l=s.shape[1],c=s.shape[2],u=s.shape[3],h=l*i,d=c*i,g=u/(i*i),x=t.data.get(s.dataId).values,y=new Float32Array(a*h*d*g);let w=0;for(let $=0;$<a;++$)for(let S=0;S<h;++S){const _=Math.floor(S/i),T=S%i;for(let k=0;k<d;++k){const P=Math.floor(k/i),L=k%i,D=(T*i+L)*g;for(let M=0;M<g;++M){const R=M+D+u*(P+c*(_+l*$));y[w++]=x[R]}}}return t.makeTensorInfo([a,h,d,g],s.dtype,y)}const depthToSpaceConfig$1={kernelName:DepthToSpace,backendName:"cpu",kernelFunc:depthToSpace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dilations:l,dimRoundingMode:c}=r;assertNotComplex$1([s,i],"depthwiseConv2DNative");const u=computeStrides(s.shape),h=computeStrides(i.shape);let d=l;d==null&&(d=[1,1]),assert$1(eitherStridesOrDilationsAreOne(o,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`);const g=computeConv2DInfo(s.shape,i.shape,o,d,a,c,!0),{filterHeight:x,filterWidth:y,dilationHeight:w,dilationWidth:$,padInfo:S}=g,_=S.left,T=S.top,k=g.outChannels/g.inChannels,P=new TensorBuffer(g.outShape,s.dtype),L=t.data.get(s.dataId).values,D=t.data.get(i.dataId).values,M=P.values;for(let O=0;O<g.batchSize;++O){const R=O*u[0],z=O*P.strides[0];for(let X=0;X<g.outHeight;++X){const K=z+X*P.strides[1],Y=X*g.strideHeight-T;for(let te=0;te<x;++te){const ie=Y+te*w;if(ie<0||ie>=g.inHeight)continue;const Q=te*h[0],se=R+ie*u[1];for(let le=0;le<g.outWidth;++le){const he=K+le*P.strides[2],re=le*g.strideWidth-_;for(let fe=0;fe<y;++fe){const ge=re+fe*$;if(ge<0||ge>=g.inWidth)continue;const j=Q+fe*h[1],xe=se+ge*g.inChannels;let Ee=he,Se=j;for(let Ce=0;Ce<g.inChannels;++Ce){const Me=L[xe+Ce];for(let Fe=0;Fe<k;++Fe)M[Ee+Fe]+=Me*D[Se+Fe];Ee+=k,Se+=k}}}}}}return t.makeTensorInfo(P.shape,P.dtype,P.values)}const depthwiseConv2dNativeConfig$1={kernelName:DepthwiseConv2dNative,backendName:"cpu",kernelFunc:depthwiseConv2dNative$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,dilations:a,pad:l,dimRoundingMode:c,filterShape:u}=r;assertNotComplex$1([s,i],"depthwiseConv2dNativeBackpropFilter");const h=computeConv2DInfo(s.shape,u,o,a,l,c,!0),{strideHeight:d,strideWidth:g,filterHeight:x,filterWidth:y}=h,w=new TensorBuffer(h.filterShape,"float32"),$=h.padInfo.left,S=h.padInfo.top,_=h.outChannels/h.inChannels,T=t.data.get(s.dataId).values,k=new TensorBuffer(s.shape,s.dtype,T),P=t.data.get(i.dataId).values,L=new TensorBuffer(i.shape,i.dtype,P);for(let D=0;D<x;++D){const M=Math.max(0,Math.ceil((S-D)/d)),O=Math.min(h.outHeight,(h.inHeight+S-D)/d);for(let R=0;R<y;++R){const z=Math.max(0,Math.ceil(($-R)/g)),X=Math.min(h.outWidth,(h.inWidth+$-R)/g);for(let K=0;K<h.outChannels;++K){const Y=Math.trunc(K/_),te=K%_;let ie=0;for(let Q=0;Q<h.batchSize;++Q)for(let se=M;se<O;++se){const le=D+se*d-S;for(let he=z;he<X;++he){const re=R+he*g-$;ie+=k.get(Q,le,re,Y)*L.get(Q,se,he,K)}}w.set(ie,D,R,Y,te)}}}return t.makeTensorInfo(w.shape,w.dtype,w.values)}const depthwiseConv2dNativeBackpropFilterConfig$1={kernelName:DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropFilter$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{strides:o,dilations:a,pad:l,dimRoundingMode:c,inputShape:u}=r;assertNotComplex$1([s,i],"depthwiseConv2DNativeBackpropInput");const h=computeStrides(s.shape),d=computeStrides(i.shape),g=computeConv2DInfo(u,i.shape,o,a,l,c,!0),x=new TensorBuffer(g.inShape,"float32"),y=x.values,[w,$,S]=x.strides,_=t.data.get(s.dataId).values,[T,k,P]=h,L=t.data.get(i.dataId).values,[D,M,O]=d,{batchSize:R,filterHeight:z,filterWidth:X,inChannels:K,inHeight:Y,inWidth:te,outChannels:ie,outHeight:Q,outWidth:se,strideHeight:le,strideWidth:he}=g,re=z-1-g.padInfo.top,fe=X-1-g.padInfo.left,ge=ie/K;for(let j=0;j<R;++j)for(let xe=0;xe<K;++xe)for(let Ee=0;Ee<Y;++Ee){const Se=Ee-re,Ce=Math.max(0,Math.ceil(Se/le)),Me=Math.min(Q,(z+Se)/le);for(let Fe=0;Fe<te;++Fe){const Xe=Fe-fe,qe=Math.max(0,Math.ceil(Xe/he)),ke=Math.min(se,(X+Xe)/he);let we=0;for(let Ye=Ce;Ye<Me;++Ye){const Oe=Ye*le-Se;for(let Ve=qe;Ve<ke;++Ve){const de=Ve*he-Xe,Pe=T*j+k*Ye+P*Ve,Le=D*(z-1-Oe)+M*(X-1-de)+O*xe;for(let Be=0;Be<ge;++Be){const Te=xe*ge+Be,rt=_[Pe+Te],st=L[Le+Be];we+=rt*st}}}y[w*j+$*Ee+S*Fe+xe]=we}}return t.makeTensorInfo(x.shape,x.dtype,x.values)}const depthwiseConv2dNativeBackpropInputConfig$1={kernelName:DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropInput$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag$1(n){const{inputs:e,backend:t}=n,{x:r}=e,s=sizeFromShape(r.shape),i=t.data.get(r.dataId).values,o=buffer([s,s],r.dtype),a=o.values;for(let c=0;c<i.length;c++)a[c*s+c]=i[c];const l=[...r.shape,...r.shape];return t.makeTensorInfo(l,o.dtype,o.values)}const diagConfig$1={kernelName:Diag,backendName:"cpu",kernelFunc:diag$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DConfig$1={kernelName:Dilation2D,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s}=n,{strides:i,pad:o,dilations:a}=t,l=e,c=l.data.get(r.dataId).values,u=r.shape.length,h=l.data.get(s.dataId).values,d=s.shape.length,{batchSize:g,inHeight:x,inWidth:y,inChannels:w,outHeight:$,outWidth:S,padInfo:_,strideHeight:T,strideWidth:k,filterHeight:P,filterWidth:L,dilationHeight:D,dilationWidth:M,outShape:O}=computeDilation2DInfo(r.shape,s.shape,i,o,"NHWC",a),R=sizeFromShape(O),z=O.length,X=getArrayFromDType(r.dtype,R);for(let Y=0;Y<g;++Y)for(let te=0;te<$;++te){const ie=te*T-_.top;for(let Q=0;Q<S;++Q){const se=Q*k-_.left;for(let le=0;le<w;++le){let he=Number.MIN_SAFE_INTEGER;for(let fe=0;fe<P;++fe){const ge=ie+fe*D;if(ge>=0&&ge<x)for(let j=0;j<L;++j){const xe=se+j*M;if(xe>=0&&xe<y){const Ee=locToIndex([Y,ge,xe,le],u,computeStrides(r.shape)),Se=locToIndex([fe,j,le],d,computeStrides(s.shape)),Ce=c[Ee]+h[Se];Ce>he&&(he=Ce)}}}const re=locToIndex([Y,te,Q,le],z,computeStrides(O));X[re]=he}}}return{dataId:l.write(toTypedArray(X,r.dtype),O,r.dtype),shape:O,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropFilterConfig={kernelName:Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s,dy:i}=n,{strides:o,pad:a,dilations:l}=t,c=e,u=toNestedArray(r.shape,c.data.get(r.dataId).values),h=toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:g,inWidth:x,inChannels:y,outHeight:w,outWidth:$,padInfo:S,strideHeight:_,strideWidth:T,filterHeight:k,filterWidth:P,dilationHeight:L,dilationWidth:D,outShape:M}=computeDilation2DInfo(r.shape,s.shape,o,a,"NHWC",l);assert$1(i.rank===M.length,()=>`Error in ${Dilation2DBackpropFilter}, dy must have the same rank as output ${M.length}, but got ${i.rank}`);const O=toNestedArray(M,c.data.get(i.dataId).values),R=makeZerosNestedTypedArray(s.shape,s.dtype);for(let X=0;X<d;++X)for(let K=0;K<w;++K){const Y=K*_-S.top;for(let te=0;te<$;++te){const ie=te*T-S.left;for(let Q=0;Q<y;++Q){let se=Number.MIN_SAFE_INTEGER,le=0,he=0;for(let re=0;re<k;++re){const fe=Y+re*L;if(fe>=0&&fe<g)for(let ge=0;ge<P;++ge){const j=ie+ge*D;if(j>=0&&j<x){const xe=u[X][fe][j][Q]+h[re][ge][Q];xe>se&&(se=xe,le=re,he=ge)}}}R[le][he][Q]+=O[X][K][te][Q]}}}return{dataId:c.write(toTypedArray(R,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropInputConfig={kernelName:Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:n,backend:e,attrs:t})=>{const{x:r,filter:s,dy:i}=n,{strides:o,pad:a,dilations:l}=t,c=e,u=toNestedArray(r.shape,c.data.get(r.dataId).values),h=toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:g,inWidth:x,inChannels:y,outHeight:w,outWidth:$,padInfo:S,strideHeight:_,strideWidth:T,filterHeight:k,filterWidth:P,dilationHeight:L,dilationWidth:D,outShape:M}=computeDilation2DInfo(r.shape,s.shape,o,a,"NHWC",l);assert$1(i.rank===M.length,()=>`Error in ${Dilation2DBackpropInput}, dy must have the same rank as output ${M.length}, but got ${i.rank}`);const O=toNestedArray(M,c.data.get(i.dataId).values),R=makeZerosNestedTypedArray(r.shape,r.dtype);for(let X=0;X<d;++X)for(let K=0;K<w;++K){const Y=K*_-S.top;for(let te=0;te<$;++te){const ie=te*T-S.left;for(let Q=0;Q<y;++Q){let se=Number.MIN_SAFE_INTEGER,le=Y<0?0:Y,he=ie<0?0:ie;for(let re=0;re<k;++re){const fe=Y+re*L;if(fe>=0&&fe<g)for(let ge=0;ge<P;++ge){const j=ie+ge*D;if(j>=0&&j<x){const xe=u[X][fe][j][Q]+h[re][ge][Q];xe>se&&(se=xe,le=fe,he=j)}}}R[X][le][he][Q]+=O[X][K][te][Q]}}}return{dataId:c.write(toTypedArray(R,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;assertNotComplex$1(s,"sum");let a;s.dtype==="bool"?a=cast$1({inputs:{x:s},backend:t,attrs:{dtype:"int32"}}):a=identity$1({inputs:{x:s},backend:t});const l=a.shape.length,c=parseAxisParam(i,a.shape),u=getAxesPermutation(c,l);let h=c,d=a;u!=null&&(d=transpose$1({inputs:{x:a},backend:t,attrs:{perm:u}}),h=getInnerMostAxes(h.length,l)),assertAxesAreInnerMostDims("sum",h,d.shape.length);const[g,x]=computeOutAndReduceShapes(d.shape,h),y=upcastType(d.dtype,"int32");let w=zeros(t,g,y);const $=sizeFromShape(x),S=t.data.get(w.dataId).values,_=t.data.get(d.dataId).values;for(let T=0;T<S.length;++T){const k=T*$;let P=0;for(let L=0;L<$;++L)P+=_[k+L];S[T]=P}if(o){const T=expandShapeToKeepDim(w.shape,c),k=w;w=reshape$1({inputs:{x:w},backend:t,attrs:{shape:T}}),t.disposeIntermediateTensorInfo(k)}return t.disposeIntermediateTensorInfo(a),u!=null&&t.disposeIntermediateTensorInfo(d),w}const sumConfig$1={kernelName:Sum,backendName:"cpu",kernelFunc:sum$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum$1(n){const{inputs:e,backend:t,attrs:r}=n,{equation:s}=r,i=e,{allDims:o,summedDims:a,idDims:l}=decodeEinsumEquation(s,i.length);checkEinsumDimSizes(o.length,l,i);const{path:c,steps:u}=getEinsumComputePath(a,l),h=u.length;let d=null,g=o.length;const x=[];for(let y=0;y<h;++y){for(const w of u[y]){const{permutationIndices:$,expandDims:S}=getEinsumPermutation(g,l[w]);let _;isIdentityPermutation($)?_=i[w]:(_=transpose$1({inputs:{x:i[w]},backend:t,attrs:{perm:$}}),x.push(_));const T=_.shape.slice();for(let k=0;k<S.length;++k)T.splice(S[k],0,1);arraysEqual(_.shape,T)||(_=reshape$1({inputs:{x:_},backend:t,attrs:{shape:T}}),x.push(_)),d===null?d=_:(d=multiply$2({inputs:{a:_,b:d},backend:t}),x.push(d))}y<h-1&&(c[y]>=0&&(d=sum$2({inputs:{x:d},backend:t,attrs:{axis:c[y]-(o.length-g),keepDims:!1}}),x.push(d)),g--)}for(const y of x)y!==d&&t.disposeIntermediateTensorInfo(y);return d}const einsumConfig$1={kernelName:Einsum,backendName:"cpu",kernelFunc:einsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eluGrad$1(n){const{inputs:e,backend:t}=n,{dy:r,y:s}=e;assertNotComplex$1([r,s],"eluGrad");const i=new Float32Array(sizeFromShape(s.shape)),o=t.data.get(s.dataId).values,a=t.data.get(r.dataId).values;for(let l=0;l<o.length;++l){const c=o[l];c>=1?i[l]=a[l]:i[l]=a[l]*(c+1)}return t.makeTensorInfo(s.shape,"float32",i)}const eluGradConfig$1={kernelName:EluGrad,backendName:"cpu",kernelFunc:eluGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const p=ERF_P,a1=ERF_A1,a2=ERF_A2,a3=ERF_A3,a4=ERF_A4,a5=ERF_A5,erf$1=unaryKernelFunc$1(Erf,n=>{const e=Math.sign(n),t=Math.abs(n),r=1/(1+p*t);return e*(1-((((a5*r+a4)*r+a3)*r+a2)*r+a1)*r*Math.exp(-t*t))}),erfConfig$1={kernelName:Erf,backendName:"cpu",kernelFunc:erf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims$1(n){const{inputs:e,backend:t,attrs:r}=n,{input:s}=e,{dim:i}=r,o=s.shape.length,a=s.shape.slice();let l=i;return i<0&&(assert$1(-(o+1)<=i,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+i+1),a.splice(l,0,1),reshape$1({inputs:{x:s},backend:t,attrs:{shape:a}})}const expandDimsConfig$1={kernelName:ExpandDims,backendName:"cpu",kernelFunc:expandDims$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const realDivImpl=createSimpleBinaryKernelImpl((n,e)=>n/e),div=binaryKernelFunc$1(RealDiv,realDivImpl),realDivConfig$1={kernelName:RealDiv,backendName:"cpu",kernelFunc:div};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftBatch(n,e,t){const r=n.shape,s=r[0],i=r[1],o=t.data.get(n.dataId),a=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,c=[s,i],u=sizeFromShape(c),h=getTypedArrayFromDType("float32",u),d=getTypedArrayFromDType("float32",u);for(let w=0;w<s;w++){const $=slice$1({inputs:{x:a},backend:t,attrs:{begin:[w,0],size:[1,i]}}),S=slice$1({inputs:{x:l},backend:t,attrs:{begin:[w,0],size:[1,i]}}),_=complex$1({inputs:{real:$,imag:S},backend:t}),{real:T,imag:k}=fftImpl$1(_,e,t),P=mergeRealAndImagArrays(T,k);for(let L=0;L<i;L++){const D=getComplexWithIndex(P,L);h[w*i+L]=D.real,d[w*i+L]=D.imag}t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(S),t.disposeIntermediateTensorInfo(_)}const g=t.makeTensorInfo(c,"float32",h),x=t.makeTensorInfo(c,"float32",d),y=complex$1({inputs:{real:g,imag:x},backend:t});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(x),y}function fftImpl$1(n,e,t){const r=sizeFromShape(n.shape),s=t.data.get(n.dataId),i=t.data.get(s.complexTensorInfos.real.dataId).values,o=t.data.get(s.complexTensorInfos.imag.dataId).values;if(isExponentOf2(r)){const a=fftRadix2(i,o,r,e,t),l=[n.shape[0],n.shape[1]];if(e){const c=t.makeTensorInfo(l,"float32",a.real),u=t.makeTensorInfo(l,"float32",a.imag),h=t.makeTensorInfo([],"float32",createScalarValue(r,"float32")),d=identity$1({inputs:{x:h},backend:t}),g=realDivConfig$1.kernelFunc({inputs:{a:c,b:h},backend:t}),x=realDivConfig$1.kernelFunc({inputs:{a:u,b:d},backend:t}),y=t.data.get(g.dataId).values,w=t.data.get(x.dataId).values;return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(x),{real:y,imag:w}}return a}else{const a=mergeRealAndImagArrays(i,o),l=fourierTransformByMatmul(a,r,e);return splitRealAndImagArrays(l)}}function isExponentOf2(n){return(n&n-1)===0}function fftRadix2(n,e,t,r,s){if(t===1)return{real:n,imag:e};const i=mergeRealAndImagArrays(n,e),o=t/2,a=complexWithEvenIndex(i),l=a.real,c=a.imag,u=[l.length],h=s.makeTensorInfo(u,"float32",l),d=s.makeTensorInfo(u,"float32",c),g=complex$1({inputs:{real:h,imag:d},backend:s}),x=complexWithOddIndex(i),y=x.real,w=x.imag,$=[y.length],S=s.makeTensorInfo($,"float32",y),_=s.makeTensorInfo($,"float32",w),T=complex$1({inputs:{real:S,imag:_},backend:s}),k=fftRadix2(l,c,o,r,s),P=k.real,L=k.imag,D=[P.length],M=s.makeTensorInfo(D,"float32",P),O=s.makeTensorInfo(D,"float32",L),R=complex$1({inputs:{real:M,imag:O},backend:s}),z=fftRadix2(y,w,o,r,s),X=z.real,K=z.imag,Y=[X.length],te=s.makeTensorInfo(Y,"float32",X),ie=s.makeTensorInfo(Y,"float32",K),Q=complex$1({inputs:{real:te,imag:ie},backend:s}),se=exponents(t,r),le=[se.real.length],he=s.makeTensorInfo(le,"float32",se.real),re=s.makeTensorInfo(le,"float32",se.imag),fe=complex$1({inputs:{real:he,imag:re},backend:s}),ge=multiply$2({inputs:{a:fe,b:Q},backend:s}),j=add$1({inputs:{a:R,b:ge},backend:s}),xe=sub$1({inputs:{a:R,b:ge},backend:s}),Ee=real$1({inputs:{input:j},backend:s}),Se=real$1({inputs:{input:xe},backend:s}),Ce=imag$1({inputs:{input:j},backend:s}),Me=imag$1({inputs:{input:xe},backend:s}),Fe=concat$1({inputs:[Ee,Se],backend:s,attrs:{axis:0}}),Xe=concat$1({inputs:[Ce,Me],backend:s,attrs:{axis:0}}),qe=s.data.get(Fe.dataId).values,ke=s.data.get(Xe.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(te),s.disposeIntermediateTensorInfo(ie),s.disposeIntermediateTensorInfo(Q),s.disposeIntermediateTensorInfo(he),s.disposeIntermediateTensorInfo(re),s.disposeIntermediateTensorInfo(fe),s.disposeIntermediateTensorInfo(ge),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(xe),s.disposeIntermediateTensorInfo(Ee),s.disposeIntermediateTensorInfo(Ce),s.disposeIntermediateTensorInfo(Se),s.disposeIntermediateTensorInfo(Me),s.disposeIntermediateTensorInfo(Fe),s.disposeIntermediateTensorInfo(Xe),{real:qe,imag:ke}}function fourierTransformByMatmul(n,e,t){const r=new Float32Array(e*2);for(let s=0;s<e;s++){let i=0,o=0;for(let a=0;a<e;a++){const l=exponent(s*a,e,t),c=getComplexWithIndex(n,a);i+=c.real*l.real-c.imag*l.imag,o+=c.real*l.imag+c.imag*l.real}t&&(i/=e,o/=e),assignToTypedArray(r,i,o,s)}return r}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$2(n){const{inputs:e,backend:t}=n,{input:r}=e,s=sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=s/i,a=reshape$1({inputs:{x:r},backend:t,attrs:{shape:[o,i]}}),l=fftBatch(a,!1,t),c=reshape$1({inputs:{x:l},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),c}const fftConfig$1={kernelName:FFT,backendName:"cpu",kernelFunc:fft$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$2(n){const{backend:e,attrs:t}=n,{shape:r,value:s,dtype:i}=t,o=i||inferDtype(s),a=getArrayFromDType(o,sizeFromShape(r));return fillValues(a,s,o),e.makeTensorInfo(r,o,a)}const fillConfig$1={kernelName:Fill,backendName:"cpu",kernelFunc:fill$2};function fillValues(n,e,t){n.fill(e)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig$1={kernelName:FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,s=t,i=getTypedArrayFromDType(r.dtype,sizeFromShape(r.shape)),[o,a,l,c]=r.shape,u=s.data.get(r.dataId).values;for(let d=0;d<o;d++){const g=d*l*a*c;for(let x=0;x<a;x++){const y=x*(l*c);for(let w=0;w<l;w++){const $=w*c;for(let S=0;S<c;S++){const _=Math.round(l-w-1),T=g+y+$+S;let k=u[T];if(_>=0&&_<l){const P=_*c,L=g+y+P+S;k=u[L]}i[T]=k}}}}return{dataId:s.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivImpl=createSimpleBinaryKernelImpl((n,e)=>Math.floor(n/e)),floorDiv$1=binaryKernelFunc$1(FloorDiv,floorDivImpl,null,"int32"),floorDivConfig$1={kernelName:FloorDiv,backendName:"cpu",kernelFunc:floorDiv$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:l,pad:c,dataFormat:u,dilations:h,dimRoundingMode:d,activation:g,leakyreluAlpha:x}=r;let y=conv2D({inputs:{x:s,filter:i},backend:t,attrs:{strides:l,pad:c,dataFormat:u,dilations:h,dimRoundingMode:d}});if(o){const w=y;if(u==="NCHW"&&o.shape.length===1&&o.shape[0]!==1){const $=reshape$1({inputs:{x:o},backend:t,attrs:{shape:[o.shape[0],1,1]}});y=add$1({inputs:{a:y,b:$},backend:t}),t.disposeIntermediateTensorInfo($)}else y=add$1({inputs:{a:y,b:o},backend:t});t.disposeIntermediateTensorInfo(w)}if(g){const w=y;if(u==="NCHW"&&g==="prelu"&&a.shape.length===1&&a.shape[0]!==1){const $=reshape$1({inputs:{x:a},backend:t,attrs:{shape:[a.shape[0],1,1]}});y=applyActivation(t,y,g,$,x),t.disposeIntermediateTensorInfo($)}else y=applyActivation(t,y,g,a,x);t.disposeIntermediateTensorInfo(w)}return y}const fusedConv2DConfig$1={kernelName:FusedConv2D,backendName:"cpu",kernelFunc:fusedConv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:l,pad:c,dataFormat:u,dilations:h,dimRoundingMode:d,activation:g,leakyreluAlpha:x}=r;let y=depthwiseConv2dNative$1({inputs:{x:s,filter:i},backend:t,attrs:{strides:l,pad:c,dataFormat:u,dilations:h,dimRoundingMode:d}});if(o){const w=y;y=add$1({inputs:{a:y,b:o},backend:t}),t.disposeIntermediateTensorInfo(w)}if(g){const w=y;y=applyActivation(t,y,g,a,x),t.disposeIntermediateTensorInfo(w)}return y}const fusedDepthwiseConv2DConfig$1={kernelName:FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:fusedDepthwiseConv2D$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd$1(n){const{inputs:e,backend:t}=n,{params:r,indices:s}=e,i=sizeFromShape(r.shape),o=s.shape,a=o[o.length-1],[l,c,u,h]=prepareAndValidate(r,s);if(c===0)return t.makeTensorInfo(l,r.dtype,[]);const d=t.data.get(s.dataId).values,g=t.bufferSync(r),x=gatherNdImpl(d,g,r.dtype,c,a,u,h,r.shape,i);return t.makeTensorInfo(l,r.dtype,x.values)}const gatherNdConfig$1={kernelName:GatherNd,backendName:"cpu",kernelFunc:gatherNd$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,indices:i}=e,{axis:o,batchDims:a}=r;assertNotComplex$1([s,i],"gatherV2");const l=parseAxisParam(o,s.shape)[0],c=t.data.get(i.dataId).values,u=s.shape[l];for(let T=0;T<c.length;++T){const k=c[T];assert$1(k<=u-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${u-1}]`)}let h=a;a==null&&(h=0);const d=sizeFromShape(i.shape),g=collectGatherOpShapeInfo(s,i,l,h),x=reshape$1({inputs:{x:s},backend:t,attrs:{shape:[g.batchSize,g.outerSize,g.dimSize,g.sliceSize]}}),y=reshape$1({inputs:{x:i},backend:t,attrs:{shape:[g.batchSize,d/g.batchSize]}}),w=[g.batchSize,g.outerSize,d/g.batchSize,g.sliceSize],$=t.bufferSync(y),S=t.bufferSync(x),_=gatherV2Impl(S,$,w);return t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(y),t.makeTensorInfo(g.outputShape,_.dtype,_.values)}const gatherV2Config$1={kernelName:GatherV2,backendName:"cpu",kernelFunc:gatherV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft$1(n){const{inputs:e,backend:t}=n,{input:r}=e,s=sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=s/i,a=reshape$1({inputs:{x:r},backend:t,attrs:{shape:[o,i]}}),l=fftBatch(a,!0,t),c=reshape$1({inputs:{x:l},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),c}const ifftConfig$1={kernelName:IFFT,backendName:"cpu",kernelFunc:ifft$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFinite$2=unaryKernelFunc$1(IsFinite,n=>Number.isFinite(n)?1:0,"bool"),isFiniteConfig$1={kernelName:IsFinite,backendName:"cpu",kernelFunc:isFinite$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInf$1=unaryKernelFunc$1(IsInf,n=>Math.abs(n)===1/0?1:0,"bool"),isInfConfig$1={kernelName:IsInf,backendName:"cpu",kernelFunc:isInf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNaN$2=unaryKernelFunc$1(IsNan,n=>Number.isNaN(n)?1:0,"bool"),isNaNConfig$1={kernelName:IsNan,backendName:"cpu",kernelFunc:isNaN$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace$1(n){const{backend:e,attrs:t}=n,{start:r,stop:s,num:i}=t,o=linSpaceImpl(r,s,i);return e.makeTensorInfo([o.length],"float32",o)}const linSpaceConfig$1={kernelName:LinSpace,backendName:"cpu",kernelFunc:linSpace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1p$1=unaryKernelFunc$1(Log1p,n=>Math.log1p(n)),log1pConfig$1={kernelName:Log1p,backendName:"cpu",kernelFunc:log1p$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalAndImpl=createSimpleBinaryKernelImpl((n,e)=>n&&e),logicalAnd$1=binaryKernelFunc$1(LogicalAnd,logicalAndImpl,null,"bool"),logicalAndConfig$1={kernelName:LogicalAnd,backendName:"cpu",kernelFunc:logicalAnd$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalNot$1=unaryKernelFunc$1(LogicalNot,n=>n?0:1,"bool"),logicalNotConfig$1={kernelName:LogicalNot,backendName:"cpu",kernelFunc:logicalNot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalOrImpl=createSimpleBinaryKernelImpl((n,e)=>n||e),logicalOr$1=binaryKernelFunc$1(LogicalOr,logicalOrImpl,null,"bool"),logicalOrConfig$1={kernelName:LogicalOr,backendName:"cpu",kernelFunc:logicalOr$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRN(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{depthRadius:i,bias:o,alpha:a,beta:l}=r;assertNotComplex$1(s,"LRN");const c=s.shape[3],u=c-1,h=t.data.get(s.dataId).values,d=sizeFromShape(s.shape),g=new Float32Array(d);function x(y){const w=y%c;let $=y-w+Math.max(0,w-i);const S=y-w+Math.min(w+i,u);let _=0;for(;$<=S;$++){const T=h[$];_+=T*T}return _}for(let y=0;y<d;y++){const w=x(y),$=h[y]*Math.pow(o+a*w,-l);g[y]=$}return t.makeTensorInfo(s.shape,s.dtype,g)}const LRNConfig$1={kernelName:LRN,backendName:"cpu",kernelFunc:lRN};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRNGrad(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,y:i,dy:o}=e,{depthRadius:a,bias:l,alpha:c,beta:u}=r;assertNotComplex$1(o,"LRNGrad");const h=sizeFromShape(o.shape),d=o.shape[3],g=t.data.get(o.dataId).values,x=t.data.get(s.dataId).values,y=t.data.get(i.dataId).values,w=new Float32Array(h),$=h;for(let S=0;S<$;S++){const _=S%d,T=S-_+Math.max(0,_-a),k=S-_+Math.min(d,_+a+1);let P=0;for(let L=T;L<k;L++)P+=Math.pow(x[L],2);P=c*P+l;for(let L=T;L<k;L++){let D=-2*c*u*x[L]*y[S]/P;S===L&&(D+=Math.pow(P,-u)),D*=g[S],w[L]+=D}}return t.makeTensorInfo(o.shape,s.dtype,w)}const LRNGradConfig$1={kernelName:LRNGrad,backendName:"cpu",kernelFunc:lRNGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$4(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reductionIndices:i,keepDims:o}=r,a=t;let l=s.shape;const c=l.length,u=parseAxisParam(i,l);let h=u;const d=getAxesPermutation(h,c);let g=a.data.get(s.dataId).values;if(d!=null){const T=new Array(c);for(let k=0;k<T.length;k++)T[k]=l[d[k]];g=transposeImpl$1(g,l,s.dtype,d,T),h=getInnerMostAxes(h.length,c),l=T}assertNotComplex$1(s,"max"),assertAxesAreInnerMostDims("max",h,c);const[x,y]=computeOutAndReduceShapes(l,h),w=sizeFromShape(y),$=maxImpl$1(g,w,x,s.dtype),S=a.write($,x,s.dtype);let _=x;return o&&(_=expandShapeToKeepDim(x,u)),{dataId:S,shape:_,dtype:s.dtype}}const maxConfig$1={kernelName:Max,backendName:"cpu",kernelFunc:max$4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex$1(s,"maxPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:l}=r,c=1;assert$1(eitherStridesOrDilationsAreOne(o,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const u=computePool2DInfo(s.shape,i,o,c,a,l);let h;if(u.filterWidth===1&&u.filterHeight===1&&arraysEqual(u.inShape,u.outShape))h=identity$1({inputs:{x:s},backend:t});else{const d=t.data.get(s.dataId).values,g=computeStrides(s.shape),x=pool(d,s.shape,s.dtype,g,u,"max");h=t.makeTensorInfo(u.outShape,s.dtype,x.values)}return h}const maxPoolConfig$1={kernelName:MaxPool,backendName:"cpu",kernelFunc:maxPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:l,dataFormat:c}=r;assertNotComplex$1(s,"maxPool3d");const u=computePool3DInfo(s.shape,i,o,1,a,l,c),h=t.data.get(s.dataId).values,d=pool3d(h,s.shape,s.dtype,computeStrides(s.shape),u,"max");return t.makeTensorInfo(d.shape,"float32",d.values)}const maxPool3DConfig$1={kernelName:MaxPool3D,backendName:"cpu",kernelFunc:maxPool3D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,{filterSize:o,strides:a,pad:l,dimRoundingMode:c}=r;assertNotComplex$1([s,i],"maxPool3DGrad");const u=computePool3DInfo(i.shape,o,a,1,l,c),h=t.bufferSync(i),d=maxPool3dPositions(h,u),g=u.strideDepth,x=u.strideHeight,y=u.strideWidth,w=u.dilationDepth,$=u.dilationHeight,S=u.dilationWidth,_=u.effectiveFilterDepth,T=u.effectiveFilterHeight,k=u.effectiveFilterWidth,P=_-1-u.padInfo.front,L=k-1-u.padInfo.left,D=T-1-u.padInfo.top,M=buffer(i.shape,"float32"),O=t.bufferSync(s);for(let R=0;R<u.batchSize;++R)for(let z=0;z<u.inChannels;++z)for(let X=0;X<u.inDepth;++X)for(let K=0;K<u.inHeight;++K)for(let Y=0;Y<u.inWidth;++Y){const te=X-P,ie=K-D,Q=Y-L;let se=0;for(let le=0;le<_;le+=w){const he=(te+le)/g;if(!(he<0||he>=u.outDepth||Math.floor(he)!==he))for(let re=0;re<T;re+=$){const fe=(ie+re)/x;if(!(fe<0||fe>=u.outHeight||Math.floor(fe)!==fe))for(let ge=0;ge<k;ge+=S){const j=(Q+ge)/y;if(j<0||j>=u.outWidth||Math.floor(j)!==j)continue;const xe=_*T*k-1-d.get(R,he,fe,j,z),Ee=le*T*k+re*k+ge,Se=xe===Ee?1:0;if(Se===0)continue;const Ce=O.get(R,he,fe,j,z);se+=Ce*Se}}}M.set(se,R,X,K,Y,z)}return t.makeTensorInfo(M.shape,M.dtype,M.values)}const maxPool3DGradConfig$1={kernelName:MaxPool3DGrad,backendName:"cpu",kernelFunc:maxPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i,output:o}=e,a=i;assertNotComplex$1([i,o],"maxPoolGrad");const{filterSize:l,strides:c,pad:u,dimRoundingMode:h}=r,d=computePool2DInfo(a.shape,l,c,1,u,h),g=t.data.get(a.dataId).values,x=buffer(d.outShape,a.dtype,maxPoolPositions(g,a.shape,a.dtype,d).values),y=d.strideHeight,w=d.strideWidth,$=d.dilationHeight,S=d.dilationWidth,_=d.effectiveFilterHeight,T=d.effectiveFilterWidth,k=T-1-d.padInfo.left,P=_-1-d.padInfo.top,L=buffer(a.shape,"float32"),D=t.data.get(s.dataId).values,M=buffer(s.shape,"float32",D);for(let O=0;O<d.batchSize;++O)for(let R=0;R<d.inChannels;++R)for(let z=0;z<d.inHeight;++z)for(let X=0;X<d.inWidth;++X){const K=z-P,Y=X-k;let te=0;for(let ie=0;ie<_;ie+=$){const Q=(K+ie)/y;if(!(Q<0||Q>=d.outHeight||Math.floor(Q)!==Q))for(let se=0;se<T;se+=S){const le=(Y+se)/w;if(le<0||le>=d.outWidth||Math.floor(le)!==le)continue;const he=_*T-1-x.get(O,Q,le,R),re=ie*T+se,fe=he===re?1:0;if(fe===0)continue;const ge=M.get(O,Q,le,R);te+=ge*fe}}L.set(te,O,z,X,R)}return t.makeTensorInfo(L.shape,L.dtype,L.values)}const maxPoolGradConfig$1={kernelName:MaxPoolGrad,backendName:"cpu",kernelFunc:maxPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl$1(n,e,t,r,s){const i=computeStrides(e),o=pool(n,e,t,i,s,"max"),a=maxPoolPositions(n,e,t,s,!0,r);return[o.values,a.values]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig$1={kernelName:MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{filterSize:s,strides:i,pad:o,includeBatchInIndex:a}=e,l=t;assertNotComplex$1(r,"MaxPoolWithArgmax");const c=l.data.get(r.dataId).values,u=computePool2DInfo(r.shape,s,i,[1,1],o),[h,d]=maxPoolWithArgmaxImpl$1(c,r.shape,r.dtype,a,u),g=l.write(h,u.outShape,r.dtype),x=l.write(d,u.outShape,r.dtype);return[{dataId:g,shape:u.outShape,dtype:r.dtype},{dataId:x,shape:u.outShape,dtype:"int32"}]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r,a=parseAxisParam(i,s.shape),c=computeOutAndReduceShapes(s.shape,a)[1],u=sizeFromShape(c),h=[],d=t.makeTensorInfo([],"float32",new Float32Array([u]));h.push(d);const g=cast$1({inputs:{x:s},backend:t,attrs:{dtype:"float32"}});h.push(g);const x=div({inputs:{a:g,b:d},backend:t});h.push(x);const y=sum$2({inputs:{x},backend:t,attrs:{axis:i,keepDims:o}});return h.forEach(w=>t.disposeIntermediateTensorInfo(w)),y}const meanConfig$1={kernelName:Mean,backendName:"cpu",kernelFunc:mean$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$4(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;assertNotComplex$1(s,"min");const a=parseAxisParam(i,s.shape);let l=a;const c=getAxesPermutation(l,s.shape.length);let u=s;c!=null&&(u=transpose$1({inputs:{x:s},backend:t,attrs:{perm:c}}),l=getInnerMostAxes(l.length,s.shape.length)),assertAxesAreInnerMostDims("min",l,u.shape.length);const[h,d]=computeOutAndReduceShapes(u.shape,l),g=sizeFromShape(d),x=makeZerosTypedArray(sizeFromShape(h),u.dtype),y=t.data.get(u.dataId).values;for(let $=0;$<x.length;++$){const S=$*g;let _=y[S];for(let T=0;T<g;++T){const k=y[S+T];(Number.isNaN(k)||k<_)&&(_=k)}x[$]=_}c!=null&&t.disposeIntermediateTensorInfo(u);const w=t.makeTensorInfo(h,u.dtype,x);if(o){const $=expandShapeToKeepDim(h,a),S=reshape$1({inputs:{x:w},backend:t,attrs:{shape:$}});return t.disposeIntermediateTensorInfo(w),S}return w}const minConfig$1={kernelName:Min,backendName:"cpu",kernelFunc:min$4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:i,mode:o}=r;assertNotComplex$1(s,"mirrorPad");const a=i.map((_,T)=>_[0]+s.shape[T]+_[1]),l=i.map(_=>_[0]),c=i.map((_,T)=>_[0]+s.shape[T]),u=o==="reflect"?0:1,h=t.data.get(s.dataId).values,d=s.shape.length,g=computeStrides(s.shape),x=sizeFromShape(a),y=a.length,w=computeStrides(a),$=getTypedArrayFromDType(s.dtype,x);for(let _=0;_<x;_++){let T=indexToLoc(_,y,w);for(let P=0;P<y;P++)T[P]<l[P]?T[P]=l[P]*2-T[P]-u:T[P]>=c[P]&&(T[P]=(c[P]-1)*2-T[P]+u);T=T.map((P,L)=>P-l[L]);const k=locToIndex(T,d,g);$[_]=h[k]}return{dataId:t.write($,a,s.dtype),shape:a,dtype:s.dtype}}const mirrorPadConfig$1={kernelName:MirrorPad,backendName:"cpu",kernelFunc:mirrorPad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modImpl=createSimpleBinaryKernelImpl((n,e)=>{const t=n%e;return n<0&&e<0||n>=0&&e>=0?t:(t+e)%e}),mod$1=binaryKernelFunc$1(Mod,modImpl),modConfig$1={kernelName:Mod,backendName:"cpu",kernelFunc:mod$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax$1(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{dim:i}=r,o=s.shape.length;let a=i;if(a===-1&&(a=o-1),a!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${a}`);const l=parseAxisParam([a],s.shape),c=max$4({inputs:{x:s},backend:t,attrs:{reductionIndices:l,keepDims:!1}}),u=expandShapeToKeepDim(c.shape,l),h=reshape$1({inputs:{x:c},backend:t,attrs:{shape:u}}),d=sub$1({inputs:{a:s,b:h},backend:t}),g=exp$1({inputs:{x:d},backend:t}),x=sum$2({inputs:{x:g},backend:t,attrs:{axis:l,keepDims:!1}}),y=reshape$1({inputs:{x},backend:t,attrs:{shape:u}}),w=div({inputs:{a:g,b:y},backend:t});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(y),w}const softmaxConfig$1={kernelName:Softmax$2,backendName:"cpu",kernelFunc:softmax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial$1(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{numSamples:i,seed:o,normalized:a}=r;assertNotComplex$1(s,"multinomial");const l=a?s:softmax$1({inputs:{logits:s},backend:t,attrs:{dim:-1}}),c=l.shape[0],u=l.shape[1],h=t.data.get(l.dataId).values,d=[c,i],g=makeZerosTypedArray(sizeFromShape(d),"int32");for(let x=0;x<c;++x){const y=x*u,w=new Float32Array(u-1);w[0]=h[y];for(let _=1;_<w.length;++_)w[_]=w[_-1]+h[y+_];const $=seedrandomExports.alea(o.toString()),S=x*i;for(let _=0;_<i;++_){const T=$();g[S+_]=w.length;for(let k=0;k<w.length;k++)if(T<w[k]){g[S+_]=k;break}}}return a||t.disposeIntermediateTensorInfo(l),t.makeTensorInfo(d,"int32",g)}const multinomialConfig$1={kernelName:Multinomial,backendName:"cpu",kernelFunc:multinomial$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl$1=nonMaxSuppressionV3Impl$2;function nonMaxSuppressionV3$1(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l}=r;assertNotComplex$1(s,"NonMaxSuppression");const c=t.data.get(s.dataId).values,u=t.data.get(i.dataId).values,{selectedIndices:h}=nonMaxSuppressionV3Impl$1(c,u,o,a,l);return t.makeTensorInfo([h.length],"int32",new Int32Array(h))}const nonMaxSuppressionV3Config$1={kernelName:NonMaxSuppressionV3,backendName:"cpu",kernelFunc:nonMaxSuppressionV3$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl$1=nonMaxSuppressionV4Impl$2;function nonMaxSuppressionV4$1(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:c}=r;assertNotComplex$1(s,"NonMaxSuppressionPadded");const u=t.data.get(s.dataId).values,h=t.data.get(i.dataId).values,{selectedIndices:d,validOutputs:g}=nonMaxSuppressionV4Impl$1(u,h,o,a,l,c);return[t.makeTensorInfo([d.length],"int32",new Int32Array(d)),t.makeTensorInfo([],"int32",new Int32Array([g]))]}const nonMaxSuppressionV4Config$1={kernelName:NonMaxSuppressionV4,backendName:"cpu",kernelFunc:nonMaxSuppressionV4$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl$1=nonMaxSuppressionV5Impl$2;function nonMaxSuppressionV5$1(n){const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l,softNmsSigma:c}=r;assertNotComplex$1(s,"NonMaxSuppressionWithScore");const u=t.data.get(s.dataId).values,h=t.data.get(i.dataId).values,d=o,g=a,x=l,y=c,{selectedIndices:w,selectedScores:$}=nonMaxSuppressionV5Impl$1(u,h,d,g,x,y);return[t.makeTensorInfo([w.length],"int32",new Int32Array(w)),t.makeTensorInfo([$.length],"float32",new Float32Array($))]}const nonMaxSuppressionV5Config$1={kernelName:NonMaxSuppressionV5,backendName:"cpu",kernelFunc:nonMaxSuppressionV5$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot$1(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s}=e,{dtype:i,depth:o,onValue:a,offValue:l}=r;assertNotComplex$1(s,"oneHot");const c=sizeFromShape(s.shape),u=new Float32Array(c*o);u.fill(l);const h=t.data.get(s.dataId).values;for(let d=0;d<c;++d)h[d]>=0&&h[d]<o&&(u[d*o+h[d]]=a);return t.makeTensorInfo([...s.shape,o],i,u)}const oneHotConfig$1={kernelName:OneHot,backendName:"cpu",kernelFunc:oneHot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike$1(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(r.dtype==="complex64"){const s=real$1({inputs:{input:r},backend:t}),i=zerosLike$1({inputs:{x:s},backend:t}),o=imag$1({inputs:{input:r},backend:t}),a=zerosLike$1({inputs:{x:o},backend:t}),l=complex$1({inputs:{real:i,imag:a},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(a),l}else return fill$2({backend:t,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const zerosLikeConfig$1={kernelName:ZerosLike,backendName:"cpu",kernelFunc:zerosLike$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike$1(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(r.dtype==="complex64"){const s=real$1({inputs:{input:r},backend:t}),i=onesLike$1({inputs:{x:s},backend:t}),o=imag$1({inputs:{input:r},backend:t}),a=zerosLike$1({inputs:{x:o},backend:t}),l=complex$1({inputs:{real:i,imag:a},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(a),l}else return fill$2({backend:t,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}const onesLikeConfig$1={kernelName:OnesLike,backendName:"cpu",kernelFunc:onesLike$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack$1(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r;if(e.length===1)return expandDims$1({inputs:{input:e[0]},backend:t,attrs:{dim:s}});const i=e[0].shape,o=e[0].dtype;e.forEach(u=>{assertShapesMatch(i,u.shape,"All tensors passed to stack must have matching shapes"),assert$1(o===u.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],l=e.map(u=>{const h=expandDims$1({inputs:{input:u},backend:t,attrs:{dim:s}});return a.push(h),h}),c=concat$1({inputs:l,backend:t,attrs:{axis:s}});return a.forEach(u=>t.disposeIntermediateTensorInfo(u)),c}const packConfig$1={kernelName:Pack,backendName:"cpu",kernelFunc:pack$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function padV2$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:i,constantValue:o}=r;assertNotComplex$1(s,"pad");const a=i.map((S,_)=>S[0]+s.shape[_]+S[1]),l=i.map(S=>S[0]),c=t.data.get(s.dataId).values,u=sizeFromShape(s.shape),h=s.shape.length,d=computeStrides(s.shape),g=sizeFromShape(a),x=a.length,y=computeStrides(a),w=getTypedArrayFromDType(s.dtype,g);o!==0&&w.fill(o);for(let S=0;S<u;S++){const T=indexToLoc(S,h,d).map((P,L)=>P+l[L]),k=locToIndex(T,x,y);w[k]=c[S]}return{dataId:t.write(w,a,s.dtype),shape:a,dtype:s.dtype}}const padV2Config$1={kernelName:PadV2,backendName:"cpu",kernelFunc:padV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powImpl=createSimpleBinaryKernelImpl((n,e)=>Math.pow(n,e)),pow$1=binaryKernelFunc$1(Pow,powImpl),powConfig$1={kernelName:Pow,backendName:"cpu",kernelFunc:pow$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather$1(n){const{inputs:e,backend:t,attrs:r}=n,{paramsNestedSplits:s,paramsDenseValues:i,indices:o}=e,a=s.map(w=>t.data.get(w.dataId).values),l=s.map(w=>w.shape),c=t.data.get(i.dataId).values,u=t.data.get(o.dataId).values,[h,d,g]=raggedGatherImpl(a,l,c,i.shape,i.dtype,u,o.shape),x=h.map(w=>t.makeTensorInfo([w.length],"int32",w)),y=t.makeTensorInfo(g,i.dtype,d);return x.concat([y])}const raggedGatherConfig$1={kernelName:RaggedGather,backendName:"cpu",kernelFunc:raggedGather$1};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange$1(n){const{inputs:e,backend:t}=n,{starts:r,limits:s,deltas:i}=e,o=t.data.get(r.dataId).values,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values,[c,u]=raggedRangeImpl(o,r.shape,r.dtype,a,s.shape,l,i.shape),h=t.makeTensorInfo([c.length],"int32",c),d=t.makeTensorInfo([u.length],r.dtype,u);return[h,d]}const raggedRangeConfig$1={kernelName:RaggedRange,backendName:"cpu",kernelFunc:raggedRange$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor$1(n){const{inputs:e,backend:t,attrs:r}=n,{shape:s,values:i,defaultValue:o,rowPartitionTensors:a}=e,{rowPartitionTypes:l}=r,c=t.data.get(s.dataId).values,u=t.data.get(i.dataId).values,h=t.data.get(o.dataId).values,d=a.map(w=>t.data.get(w.dataId).values),g=a.map(w=>w.shape),[x,y]=raggedTensorToTensorImpl(c,s.shape,u,i.shape,i.dtype,h,o.shape,d,g,l);return t.makeTensorInfo(x,i.dtype,y)}const raggedTensorToTensorConfig$1={kernelName:RaggedTensorToTensor,backendName:"cpu",kernelFunc:raggedTensorToTensor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$1(n){const{backend:e,attrs:t}=n,{start:r,stop:s,dtype:i,step:o}=t,a=rangeImpl(r,s,o,i);return e.makeTensorInfo([a.length],i,a)}const rangeConfig$1={kernelName:Range,backendName:"cpu",kernelFunc:range$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocal$1=unaryKernelFunc$1(Reciprocal,n=>1/n),reciprocalConfig$1={kernelName:Reciprocal,backendName:"cpu",kernelFunc:reciprocal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r;assertNotComplex$1(s,"resizeBilinear");const l=computeStrides(s.shape),[c,u]=a,[h,d,g,x]=s.shape,y=t.data.get(s.dataId).values,w=new Float32Array(sizeFromShape([h,c,u,x])),$=[i&&c>1?d-1:d,i&&u>1?g-1:g],S=[i&&c>1?c-1:c,i&&u>1?u-1:u];let _=0;const T=$[0]/S[0],k=$[1]/S[1];for(let P=0;P<h;P++)for(let L=0;L<c;L++){let D;o?D=T*(L+.5)-.5:D=T*L;const M=Math.max(0,Math.floor(D)),O=D-M,R=Math.min(d-1,Math.ceil(D)),z=P*l[0]+M*l[1],X=P*l[0]+R*l[1];for(let K=0;K<u;K++){let Y;o?Y=k*(K+.5)-.5:Y=k*K;const te=Math.max(0,Math.floor(Y)),ie=Y-te,Q=Math.min(g-1,Math.ceil(Y)),se=z+te*l[2],le=X+te*l[2],he=z+Q*l[2],re=X+Q*l[2];for(let fe=0;fe<x;fe++){const ge=y[se+fe],j=y[le+fe],xe=y[he+fe],Ee=y[re+fe],Se=ge+(xe-ge)*ie,Ce=j+(Ee-j)*ie,Me=Se+(Ce-Se)*O;w[_++]=Me}}}return t.makeTensorInfo([h,c,u,x],"float32",w)}const resizeBilinearConfig$1={kernelName:ResizeBilinear,backendName:"cpu",kernelFunc:resizeBilinear$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:i}=e,{alignCorners:o}=r;assertNotComplex$1([i,s],"resizeBilinearGrad");const a=computeStrides(s.shape),[l,c,u,h]=s.shape,[,d,g]=i.shape,x=new Float32Array(l*c*u*h),y=[o&&d>1?c-1:c,o&&g>1?u-1:u],w=[o&&d>1?d-1:d,o&&g>1?g-1:g],$=y[0]/w[0],S=y[1]/w[1],_=t.data.get(i.dataId).values;let T=0;for(let k=0;k<l;k++){const P=k*a[0];for(let L=0;L<d;L++){const D=L*$,M=Math.floor(D),O=Math.min(Math.ceil(D),c-1),R=P+M*a[1],z=P+O*a[1],X=D-M,K=1-X;for(let Y=0;Y<g;Y++){const te=Y*S,ie=Math.floor(te),Q=Math.min(Math.ceil(te),u-1),se=te-ie,le=1-se,he=R+ie*a[2],re=R+Q*a[2],fe=z+ie*a[2],ge=z+Q*a[2],j=K*le,xe=K*se,Ee=X*le,Se=X*se;for(let Ce=0;Ce<h;Ce++){const Me=_[T++];x[he+Ce]+=Me*j,x[re+Ce]+=Me*xe,x[fe+Ce]+=Me*Ee,x[ge+Ce]+=Me*Se}}}}return t.makeTensorInfo([l,u,c,h],"float32",x)}const resizeBilinearGradConfig$1={kernelName:ResizeBilinearGrad,backendName:"cpu",kernelFunc:resizeBilinearGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r;assertNotComplex$1(s,"resizeNearestNeighbor");const l=computeStrides(s.shape),[c,u]=a,[h,d,g,x]=s.shape,y=t.data.get(s.dataId).values,w=new Float32Array(h*c*u*x),$=[i&&c>1?d-1:d,i&&u>1?g-1:g],S=[i&&c>1?c-1:c,i&&u>1?u-1:u],_=$[0]/S[0],T=$[1]/S[1];let k=0;for(let P=0;P<h;P++){const L=P*l[0];for(let D=0;D<c;D++){const M=o?_*(D+.5):_*D;let O=Math.min(d-1,i?Math.round(M):Math.floor(M));o&&(O=Math.max(0,O));const R=L+O*l[1];for(let z=0;z<u;z++){const X=o?T*(z+.5):T*z;let K=Math.min(g-1,i?Math.round(X):Math.floor(X));o&&(K=Math.max(0,K));const Y=R+K*l[2];for(let te=0;te<x;te++){const ie=y[Y+te];w[k++]=ie}}}}return t.makeTensorInfo([h,c,u,x],s.dtype,w)}const resizeNearestNeighborConfig$1={kernelName:ResizeNearestNeighbor,backendName:"cpu",kernelFunc:resizeNearestNeighbor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad$1(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:i}=e,{alignCorners:o}=r;assertNotComplex$1([i,s],"resizeNearestNeighborGrad");const a=computeStrides(s.shape),l=computeStrides(i.shape),[c,u,h,d]=s.shape,[,g,x]=i.shape,y=new Float32Array(c*u*h*d),w=t.data.get(i.dataId).values,$=[o&&g>1?u-1:u,o&&x>1?h-1:h],S=[o&&g>1?g-1:g,o&&x>1?x-1:x],_=$[0]/S[0],T=$[1]/S[1],k=1/_,P=1/T,L=Math.ceil(k)*2+2,D=Math.ceil(P)*2+2;for(let M=0;M<c;M++){const O=M*a[0];for(let R=0;R<u;R++){const z=O+R*a[1],X=Math.floor(R*k),K=Math.floor(X-L/2);for(let Y=0;Y<h;Y++){const te=z+Y*a[2],ie=Math.floor(Y*P),Q=Math.floor(ie-D/2);for(let se=0;se<d;se++){let le=0;for(let he=0;he<L;he++){const re=he+K;if(re<0||re>=g)continue;const fe=O+re*l[1],ge=re*_,j=Math.min(u-1,o?Math.round(ge):Math.floor(ge));if(R===j)for(let xe=0;xe<D;xe++){const Ee=xe+Q;if(Ee<0||Ee>=x)continue;const Se=fe+Ee*l[2],Ce=Ee*T,Me=Math.min(h-1,o?Math.round(Ce):Math.floor(Ce));Y===Me&&(le+=w[Se+se])}}y[te+se]=le}}}}return t.makeTensorInfo(s.shape,s.dtype,y)}const resizeNearestNeighborGradConfig$1={kernelName:ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:resizeNearestNeighborGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dims:i}=r;assertNotComplex$1(s,"reverse");const o=s.shape.length,a=parseAxisParam(i,s.shape);if(o===0)return identity$1({inputs:{x:s},backend:t});const l=new TensorBuffer(s.shape,s.dtype),c=t.bufferSync(s);for(let u=0;u<l.size;u++){const h=l.indexToLoc(u),d=h.slice();a.forEach(g=>d[g]=s.shape[g]-1-d[g]),l.set(c.get(...d),...h)}return t.makeTensorInfo(l.shape,l.dtype,l.values)}const reverseConfig$1={kernelName:Reverse,backendName:"cpu",kernelFunc:reverse$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig$1={kernelName:RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,{radians:s,fillValue:i,center:o}=e,a=t,l=getTypedArrayFromDType(r.dtype,sizeFromShape(r.shape)),[c,u,h,d]=r.shape,[g,x]=getImageCenter(o,u,h),y=255,w=Math.sin(s),$=Math.cos(s),S=a.data.get(r.dataId).values;for(let T=0;T<c;T++){const k=T*h*u*d;for(let P=0;P<u;P++){const L=P*(h*d);for(let D=0;D<h;D++){const M=D*d;for(let O=0;O<d;O++){const R=[c,P,D,O],z=R[2],X=R[1];let K=(z-g)*$-(X-x)*w,Y=(z-g)*w+(X-x)*$;K=Math.round(K+g),Y=Math.round(Y+x);let te=i;if(typeof i!="number"&&(O===3?te=y:te=i[O]),K>=0&&K<h&&Y>=0&&Y<u){const Q=Y*(h*d),se=K*d,le=k+Q+se+O;te=S[le]}const ie=k+L+M+O;l[ie]=te}}}}return{dataId:a.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const round$2=unaryKernelFunc$1(Round,n=>{const e=Math.floor(n);return n-e<.5?Math.floor(n):n-e>.5?Math.ceil(n):e%2===0?e:e+1}),roundConfig$1={kernelName:Round,backendName:"cpu",kernelFunc:round$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd$1(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s,updates:i}=e,{shape:o}=r,{sliceRank:a,numUpdates:l,sliceSize:c,strides:u,outputSize:h}=calculateShapes(i,s,o),d=!0,g=t.bufferSync(s),x=t.bufferSync(i),y=scatterImpl(g,x,o,h,c,l,a,u,0,d);return t.makeTensorInfo(o,y.dtype,y.values)}const scatterNdConfig$1={kernelName:ScatterNd,backendName:"cpu",kernelFunc:scatterNd$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lowerBound(n,e){let t=0,r=n.length,s=0;for(;t<r;)s=Math.floor((t+r)/2),n[s]<e?t=s+1:r=s;return r}function upperBound(n,e){let t=0,r=n.length,s=0;for(;t<r;)s=Math.floor((t+r)/2),n[s]<=e?t=s+1:r=s;return r}function searchSortedImpl(n,e,t,r,s,i){const o=getArrayFromDType("int32",t*s);for(let a=0;a<t;++a){const l=n.slice(a*r,(a+1)*r),c=a*s;for(let u=0;u<s;++u)o[c+u]=i==="left"?lowerBound(l,e[u+c]):upperBound(l,e[u+c])}return o}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted$1(n){const{inputs:e,backend:t,attrs:r}=n,{sortedSequence:s,values:i}=e,{side:o}=r,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values,c=searchSortedImpl(a,l,s.shape[0],s.shape[1],i.shape[1],o);return t.makeTensorInfo(i.shape,"int32",c)}const searchSortedConfig$1={kernelName:SearchSorted,backendName:"cpu",kernelFunc:searchSorted$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select$1(n){const{inputs:e,backend:t}=n,{condition:r,t:s,e:i}=e;assertNotComplex$1([r,s,i],"select");const o=r.shape.length,a=t.data.get(r.dataId).values,l=t.data.get(s.dataId).values,c=t.data.get(i.dataId).values,u=upcastType(s.dtype,i.dtype),h=makeZerosTypedArray(sizeFromShape(s.shape),u);let d=0;const g=o===0||o>1||s.shape.length===1?1:sizeFromShape(s.shape.slice(1));for(let x=0;x<a.length;x++)for(let y=0;y<g;y++)a[x]===1?h[d++]=l[x]:h[d++]=c[x];return t.makeTensorInfo(s.shape,u,h)}const selectConfig$1={kernelName:Select,backendName:"cpu",kernelFunc:select$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const scaleAlpha=SELU_SCALEALPHA,scale=SELU_SCALE,selu$1=unaryKernelFunc$1(Selu$1,n=>n>=0?scale*n:scaleAlpha*(Math.exp(n)-1)),seluConfig$1={kernelName:Selu$1,backendName:"cpu",kernelFunc:selu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sign$1=unaryKernelFunc$1(Sign,n=>n<0?-1:n>0?1:0),signConfig$1={kernelName:Sign,backendName:"cpu",kernelFunc:sign$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sin$1=unaryKernelFunc$1(Sin,n=>Math.sin(n)),sinConfig$1={kernelName:Sin,backendName:"cpu",kernelFunc:sin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinh$1=unaryKernelFunc$1(Sinh,n=>Math.sinh(n)),sinhConfig$1={kernelName:Sinh,backendName:"cpu",kernelFunc:sinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const epsilon=11920928955078125e-23,threshold=Math.log(epsilon)+2,softplus$1=unaryKernelFunc$1(Softplus$1,n=>{const e=n>-threshold,t=n<threshold,r=Math.exp(n);let s;return t?s=r:e?s=n:s=Math.log(1+r),s}),softplusConfig$1={kernelName:Softplus$1,backendName:"cpu",kernelFunc:softplus$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:i,paddings:o}=r;assertNotComplex$1([s],"spaceToBatchND");const a=sizeFromShape(i),l=[[0,0]];l.push(...o);for(let P=1+i.length;P<s.shape.length;++P)l.push([0,0]);const c=padV2Config$1.kernelFunc({inputs:{x:s},backend:t,attrs:{paddings:l,constantValue:0}}),u=getReshaped(c.shape,i,a,!1),h=getPermuted(u.length,i.length,!1),d=getReshapedPermuted(c.shape,i,a,!1),y=reshape$1({inputs:{x:c},backend:t,attrs:{shape:u}}),S=transpose$1({inputs:{x:y},backend:t,attrs:{perm:h}}),k=reshape$1({inputs:{x:S},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(S),k}const spaceToBatchNDConfig$1={kernelName:SpaceToBatchND,backendName:"cpu",kernelFunc:spaceToBatchND$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows$1(n){const{inputs:e,backend:t}=n,{indices:r,values:s,denseShape:i,defaultValue:o}=e;if(i.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${i.shape}`);if(r.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${r.shape}`);if(s.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);const a=t.data.get(r.dataId).values,l=t.data.get(s.dataId).values,c=t.data.get(i.dataId).values,u=t.data.get(o.dataId).values[0],[h,d,g,x,y]=sparseFillEmptyRowsImpl(a,r.shape,r.dtype,l,s.dtype,c,u);return[t.makeTensorInfo(d,r.dtype,h),t.makeTensorInfo([d[0]],s.dtype,g),t.makeTensorInfo([x.length],"bool",new Uint8Array(x.map(w=>Number(w)))),t.makeTensorInfo([y.length],r.dtype,new Int32Array(y))]}const sparseFillEmptyRowsConfig$1={kernelName:SparseFillEmptyRows,backendName:"cpu",kernelFunc:sparseFillEmptyRows$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape$1(n){const{inputs:e,backend:t}=n,{inputIndices:r,inputShape:s,newShape:i}=e;if(r.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${r.shape}`);if(s.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${s.shape}`);if(i.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);const o=Array.from(t.data.get(s.dataId).values),a=t.data.get(r.dataId).values,l=Array.from(t.data.get(i.dataId).values),[c,u,h]=sparseReshapeImpl(a,r.shape,r.dtype,o,l);return[t.makeTensorInfo(u,r.dtype,c),t.makeTensorInfo([h.length],i.dtype,new Int32Array(h))]}const sparseReshapeConfig$1={kernelName:SparseReshape,backendName:"cpu",kernelFunc:sparseReshape$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean$1(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${s.shape}`);if(i.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${i.shape}`);if(s.shape[0]!==i.shape[0])throw new Error("segmentIds and indices should have same size.");const o=t.data.get(r.dataId).values,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values,[c,u]=sparseSegmentReductionImpl(o,r.shape,r.dtype,a,l,!0);return t.makeTensorInfo(u,r.dtype,c)}const sparseSegmentMeanConfig$1={kernelName:SparseSegmentMean,backendName:"cpu",kernelFunc:sparseSegmentMean$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum$1(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${s.shape}`);if(i.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${i.shape}`);if(s.shape[0]!==i.shape[0])throw new Error("segmentIds and indices should have same size.");const o=t.data.get(r.dataId).values,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values,[c,u]=sparseSegmentReductionImpl(o,r.shape,r.dtype,a,l);return t.makeTensorInfo(u,r.dtype,c)}const sparseSegmentSumConfig$1={kernelName:SparseSegmentSum,backendName:"cpu",kernelFunc:sparseSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense$1(n){const{inputs:e,backend:t,attrs:r}=n,{sparseIndices:s,sparseValues:i,defaultValue:o}=e,{outputShape:a}=r,{sliceRank:l,numUpdates:c,sliceSize:u,strides:h,outputSize:d}=calculateShapes(i,s,a),g=!1,x=t.bufferSync(s);let y;switch(i.dtype){case"bool":{const w=t.bufferSync(i),$=!!t.data.get(o.dataId).values[0];y=scatterImpl(x,w,a,d,u,c,l,h,$,g);break}case"float32":{const w=t.bufferSync(i),$=t.data.get(o.dataId).values[0];y=scatterImpl(x,w,a,d,u,c,l,h,$,g);break}case"int32":{const w=t.bufferSync(i),$=t.data.get(o.dataId).values[0];y=scatterImpl(x,w,a,d,u,c,l,h,$,g);break}case"string":{const w=t.bufferSync(i),$=decodeString(t.data.get(o.dataId).values[0]);y=scatterImpl(x,w,a,d,u,c,l,h,$,g);break}default:throw new Error(`Unsupported type ${i.dtype}`)}return t.makeTensorInfo(a,y.dtype,y.values)}const sparseToDenseConfig$1={kernelName:SparseToDense,backendName:"cpu",kernelFunc:sparseToDense$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{numOrSizeSplits:i,axis:o}=r,a=parseAxisParam(o,s.shape)[0],l=prepareSplitSize(s,i,a),c=new Array(s.shape.length).fill(0),u=s.shape.slice();return l.map(h=>{const d=[...u];d[a]=h;const g=slice$1({inputs:{x:s},backend:t,attrs:{begin:c,size:d}});return c[a]+=h,g})}const splitVConfig$1={kernelName:SplitV,backendName:"cpu",kernelFunc:splitV$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareConfig$1={kernelName:Square,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{x:t}=n,r=e;assertNotComplex$1(t,"square");const s=r.data.get(t.dataId).values,i=new Float32Array(s.length);for(let a=0;a<s.length;++a){const l=s[a];i[a]=l*l}return{dataId:r.write(i,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const step$1=unaryKernelFunc$1(Step,(n,e)=>{const t=e;return isNaN(n)?NaN:n>0?1:t.alpha}),stepConfig$1={kernelName:Step,backendName:"cpu",kernelFunc:step$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:i,end:o,strides:a,beginMask:l,endMask:c,ellipsisMask:u,newAxisMask:h,shrinkAxisMask:d}=r;assertNotComplex$1(s,"stridedSlice");const{finalShapeSparse:g,finalShape:x,isIdentity:y,sliceDim0:w,isSimpleSlice:$,begin:S,end:_,strides:T}=sliceInfo(s.shape,i,o,a,l,c,u,h,d);let k;if(y)k=reshape$1({inputs:{x:s},backend:t,attrs:{shape:x}});else if(w||$){assert$1(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const P=computeOutShape$2(S,_,T),L=slice$1({inputs:{x:s},backend:t,attrs:{begin:S,size:P}});k=reshape$1({inputs:{x:L},backend:t,attrs:{shape:x}}),t.disposeIntermediateTensorInfo(L)}else{const P=t.bufferSync(s),L=stridedSliceImpl(g,P,T,S);k=t.makeTensorInfo(x,L.dtype,L.values)}return k}const stridedSliceConfig$1={kernelName:StridedSlice,backendName:"cpu",kernelFunc:stridedSlice$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams$1(n){const{inputs:e,backend:t,attrs:r}=n,{separator:s,nGramWidths:i,leftPad:o,rightPad:a,padWidth:l,preserveShortSequences:c}=r,{data:u,dataSplits:h}=e,d=t.data.get(u.dataId).values,g=t.data.get(h.dataId).values,[x,y]=stringNGramsImpl(d,g,s,i,o,a,l,c);return[t.makeTensorInfo([x.length],"string",x),t.makeTensorInfo(h.shape,"int32",y)]}const stringNGramsConfig$1={kernelName:StringNGrams,backendName:"cpu",kernelFunc:stringNGrams$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit$1(n){const{inputs:e,backend:t,attrs:r}=n,{skipEmpty:s}=r,{input:i,delimiter:o}=e;if(i.dtype!=="string")throw new Error("Input must be of datatype string");if(i.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(o.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const a=t.data.get(i.dataId).values,l=t.data.get(o.dataId).values[0],[c,u,h]=stringSplitImpl(a,l,s),d=u.length;return[t.makeTensorInfo([d,2],"int32",c),t.makeTensorInfo([d],"string",u),t.makeTensorInfo([2],"int32",new Int32Array(h))]}const stringSplitConfig$1={kernelName:StringSplit,backendName:"cpu",kernelFunc:stringSplit$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast$1(n){const{inputs:e,backend:t,attrs:r}=n,{numBuckets:s}=r,{input:i}=e;if(i.dtype!=="string")throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=t.data.get(i.dataId).values,a=stringToHashBucketFastImpl(o,s);return t.makeTensorInfo(i.shape,"int32",a)}const stringToHashBucketFastConfig$1={kernelName:StringToHashBucketFast,backendName:"cpu",kernelFunc:stringToHashBucketFast$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tan$1=unaryKernelFunc$1(Tan,n=>Math.tan(n)),tanConfig$1={kernelName:Tan,backendName:"cpu",kernelFunc:tan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanh$1=unaryKernelFunc$1(Tanh$1,n=>Math.tanh(n)),tanhConfig$1={kernelName:Tanh$1,backendName:"cpu",kernelFunc:tanh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reps:i}=r;assertNotComplex$1(s,"tile");const o=tileImpl(t.bufferSync(s),i);return t.makeTensorInfo(o.shape,o.dtype,o.values)}const tileConfig$1={kernelName:Tile,backendName:"cpu",kernelFunc:tile$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topK$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{k:i,sorted:o}=r;assertNotComplex$1(s,"topk");const a=t.data.get(s.dataId).values,[l,c]=topKImpl(a,s.shape,s.dtype,i,o);return[t.makeTensorInfo(l.shape,l.dtype,l.values),t.makeTensorInfo(c.shape,c.dtype,c.values)]}const topKConfig$1={kernelName:TopK,backendName:"cpu",kernelFunc:topK$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform$1(n){const{inputs:e,attrs:t,backend:r}=n,{image:s,transforms:i}=e,{interpolation:o,fillMode:a,fillValue:l,outputShape:c}=t,[u,h,d,g]=s.shape,[x,y]=c??[h,d],w=[u,x,y,g],$=computeStrides(s.shape),S=$[0],_=$[1],T=$[2],k=computeStrides(w),P=k[0],L=k[1],D=k[2],M=getTypedArrayFromDType(s.dtype,sizeFromShape(w));M.fill(l);const O=r.data.get(s.dataId).values,R=r.data.get(i.dataId).values;for(let X=0;X<u;++X){const K=i.shape[0]===1?R:R.subarray(X*8,X*8+8);for(let Y=0;Y<x;++Y)for(let te=0;te<y;++te)for(let ie=0;ie<g;++ie){let Q;const se=K[6]*te+K[7]*Y+1;if(se===0)continue;const le=(K[0]*te+K[1]*Y+K[2])/se,he=(K[3]*te+K[4]*Y+K[5])/se,re=mapCoord(le,d,a),fe=mapCoord(he,h,a);switch(o){case"nearest":Q=nearestInterpolation(O,h,d,S,_,T,X,fe,re,ie,l);break;case"bilinear":Q=bilinearInterpolation(O,h,d,S,_,T,X,fe,re,ie,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}const ge=X*P+Y*L+te*D+ie;M[ge]=Q}return r.makeTensorInfo(w,s.dtype,M)}return{dataId:r.write(M,w,s.dtype),shape:s.shape,dtype:s.dtype}}const transformConfig$1={kernelName:Transform,backendName:"cpu",kernelFunc:transform$1};function mapCoord(n,e,t){switch(t){case"reflect":return mapCoordReflect(n,e);case"wrap":return mapCoordWrap(n,e);case"nearest":return mapCoordNearest(n,e);case"constant":default:return mapCoordConstant(n)}}function mapCoordReflect(n,e){let t=n;if(t<0)if(e<=1)t=0;else{const r=2*e;t<r&&(t=r*Math.trunc(-t/r)+t),t=t<-e?t+r:-t-1}else if(t>e-1)if(e<=1)t=0;else{const r=2*e;t-=r*Math.trunc(t/r),t>=e&&(t=r-t-1)}return clamp$1(0,t,e-1)}function mapCoordWrap(n,e){let t=n;if(t<0)if(e<=1)t=0;else{const r=e-1;t+=e*(Math.trunc(-t/r)+1)}else if(t>e-1)if(e<=1)t=0;else{const r=e-1;t-=e*Math.trunc(t/r)}return clamp$1(0,t,e-1)}function mapCoordConstant(n,e){return n}function mapCoordNearest(n,e){return clamp$1(0,n,e-1)}function readWithFillValue(n,e,t,r,s,i,o,a,l,c,u){const h=o*r+a*s+l*i+c;return 0<=a&&a<e&&0<=l&&l<t?n[h]:u}function nearestInterpolation(n,e,t,r,s,i,o,a,l,c,u){const h=Math.round(a),d=Math.round(l);return readWithFillValue(n,e,t,r,s,i,o,h,d,c,u)}function bilinearInterpolation(n,e,t,r,s,i,o,a,l,c,u){const h=Math.floor(a),d=Math.floor(l),g=h+1,x=d+1,y=(x-l)*readWithFillValue(n,e,t,r,s,i,o,h,d,c,u)+(l-d)*readWithFillValue(n,e,t,r,s,i,o,h,x,c,u),w=(x-l)*readWithFillValue(n,e,t,r,s,i,o,g,d,c,u)+(l-d)*readWithFillValue(n,e,t,r,s,i,o,g,x,c,u);return(g-a)*y+(a-h)*w}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique$1(n){const{inputs:e,attrs:t,backend:r}=n,{axis:s}=t,{x:i}=e;assertNotComplex$1(i,"unique");const o=r.data.get(i.dataId).values,{outputValues:a,outputShape:l,indices:c}=uniqueImpl(o,s,i.shape,i.dtype);return[r.makeTensorInfo(l,i.dtype,a),r.makeTensorInfo([c.length],"int32",c)]}const uniqueConfig$1={kernelName:Unique,backendName:"cpu",kernelFunc:unique$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack$1(n){const{inputs:e,backend:t,attrs:r}=n,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const o=s.shape.length,a=s.shape[i],l=new Array(o-1);let c=0;for(let g=0;g<o;g++)g!==i&&(l[c++]=s.shape[g]);const u=new Array(o).fill(0),h=s.shape.slice();h[i]=1;const d=new Array(a);for(let g=0;g<d.length;g++){u[i]=g;const x=slice$1({inputs:{x:s},backend:t,attrs:{begin:u,size:h}});d[g]=reshape$1({inputs:{x},backend:t,attrs:{shape:l}}),t.disposeIntermediateTensorInfo(x)}return d}const unpackConfig$1={kernelName:Unpack,backendName:"cpu",kernelFunc:unpack$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,segmentIds:i}=e,{numSegments:o}=r;assertNotComplex$1(s,"unsortedSegmentSum");const a=s.shape.length,l=i.shape.length,c=[],u=[],h=a-l;let d=i;for(let x=0;x<h;++x){const y=expandDims$1({inputs:{input:d},backend:t,attrs:{dim:x+1}});d=y,u.push(y)}for(let x=0;x<o;++x){const y=createScalarValue(x,"int32"),w=t.makeTensorInfo([],"int32",y),$=equal$1({inputs:{a:w,b:d},backend:t}),S=cast$1({inputs:{x:$},backend:t,attrs:{dtype:"float32"}}),_=multiply$2({inputs:{a:S,b:s},backend:t}),T=sum$2({inputs:{x:_},backend:t,attrs:{axis:0,keepDims:!1}});c.push(T),u.push(w),u.push($),u.push(S),u.push(_),u.push(T)}const g=pack$1({inputs:c,backend:t,attrs:{axis:0}});return u.forEach(x=>t.disposeIntermediateTensorInfo(x)),g}const unsortedSegmentSumConfig$1={kernelName:UnsortedSegmentSum,backendName:"cpu",kernelFunc:unsortedSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs$1=[_fusedMatMulConfig$1,absConfig$1,acosConfig$1,acoshConfig$1,addConfig$1,addNConfig$1,allConfig$1,anyConfig$1,argMaxConfig$1,argMinConfig$1,asinConfig$1,asinhConfig$1,atanConfig$1,atan2Config$1,atanhConfig$1,avgPoolConfig$1,avgPool3DConfig$1,avgPool3DGradConfig$1,avgPoolGradConfig$1,batchMatMulConfig$1,batchNormConfig$1,batchToSpaceNDConfig$1,bincountConfig$1,broadcastArgsConfig$1,castConfig$1,ceilConfig$1,clipByValueConfig$1,complexConfig$1,complexAbsConfig$1,concatConfig$1,conv2DConfig$1,conv2DBackpropFilterConfig$1,conv2DBackpropInputConfig$1,conv3DConfig$1,conv3DBackpropFilterV2Config$1,conv3DBackpropInputV2Config,cosConfig$1,coshConfig$1,cropAndResizeConfig$1,cumprodConfig$1,cumsumConfig$1,denseBincountConfig$1,depthToSpaceConfig$1,depthwiseConv2dNativeConfig$1,depthwiseConv2dNativeBackpropFilterConfig$1,depthwiseConv2dNativeBackpropInputConfig$1,diagConfig$1,dilation2DConfig$1,dilation2DBackpropFilterConfig,dilation2DBackpropInputConfig,einsumConfig$1,eluConfig$1,eluGradConfig$1,equalConfig$1,erfConfig$1,expConfig$1,expandDimsConfig$1,expm1Config$1,fftConfig$1,fillConfig$1,flipLeftRightConfig$1,floorConfig$1,floorDivConfig$1,fusedConv2DConfig$1,fusedDepthwiseConv2DConfig$1,gatherNdConfig$1,gatherV2Config$1,greaterConfig$1,greaterEqualConfig$1,identityConfig$1,ifftConfig$1,imagConfig$1,isFiniteConfig$1,isInfConfig$1,isNaNConfig$1,leakyReluConfig$1,lessConfig$1,lessEqualConfig$1,linSpaceConfig$1,logConfig$1,log1pConfig$1,logicalAndConfig$1,logicalNotConfig$1,logicalOrConfig$1,LRNConfig$1,LRNGradConfig$1,maxConfig$1,maximumConfig$1,maxPoolConfig$1,maxPool3DConfig$1,maxPool3DGradConfig$1,maxPoolGradConfig$1,maxPoolWithArgmaxConfig$1,meanConfig$1,minConfig$1,minimumConfig$1,mirrorPadConfig$1,modConfig$1,multinomialConfig$1,multiplyConfig$1,negConfig$1,nonMaxSuppressionV3Config$1,nonMaxSuppressionV4Config$1,nonMaxSuppressionV5Config$1,notEqualConfig$1,oneHotConfig$1,onesLikeConfig$1,packConfig$1,padV2Config$1,powConfig$1,preluConfig$1,prodConfig$1,raggedGatherConfig$1,raggedRangeConfig$1,raggedTensorToTensorConfig$1,rangeConfig$1,realConfig$1,realDivConfig$1,reciprocalConfig$1,reluConfig$1,relu6Config$1,reshapeConfig$1,resizeBilinearConfig$1,resizeBilinearGradConfig$1,resizeNearestNeighborConfig$1,resizeNearestNeighborGradConfig$1,reverseConfig$1,rotateWithOffsetConfig$1,roundConfig$1,rsqrtConfig$1,scatterNdConfig$1,searchSortedConfig$1,selectConfig$1,seluConfig$1,sigmoidConfig$1,signConfig$1,sinConfig$1,sinhConfig$1,sliceConfig$1,softmaxConfig$1,softplusConfig$1,spaceToBatchNDConfig$1,sparseFillEmptyRowsConfig$1,sparseReshapeConfig$1,sparseSegmentMeanConfig$1,sparseSegmentSumConfig$1,sparseToDenseConfig$1,splitVConfig$1,sqrtConfig$1,squareConfig$1,squaredDifferenceConfig$1,stepConfig$1,stridedSliceConfig$1,stringNGramsConfig$1,stringSplitConfig$1,stringToHashBucketFastConfig$1,subConfig$1,sumConfig$1,tanConfig$1,tanhConfig$1,tileConfig$1,topKConfig$1,transformConfig$1,transposeConfig$1,uniqueConfig$1,unpackConfig$1,unsortedSegmentSumConfig$1,zerosLikeConfig$1];for(const n of kernelConfigs$1)registerKernel(n);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const contexts={},WEBGL_ATTRIBUTES={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function setWebGLContext(n,e){contexts[n]=e}function getWebGLContext(n,e){if(!(n in contexts)||e!=null){const r=getWebGLRenderingContext(n,e);if(r!==null)contexts[n]=r;else return console.log("Could not get context for WebGL version",n),null}const t=contexts[n];return t==null||t.isContextLost()?(delete contexts[n],getWebGLContext(n)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),contexts[n])}function createCanvas$1(n){if(typeof OffscreenCanvas<"u"&&n===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function getWebGLRenderingContext(n,e){if(n!==1&&n!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=e??createCanvas$1(n);return t.addEventListener("webglcontextlost",r=>{r.preventDefault(),delete contexts[n]},!1),env().getBool("SOFTWARE_WEBGL_ENABLED")&&(WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat=!1),n===1?t.getContext("webgl",WEBGL_ATTRIBUTES)||t.getContext("experimental-webgl",WEBGL_ATTRIBUTES):t.getContext("webgl2",WEBGL_ATTRIBUTES)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PackingScheme;(function(n){n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH"})(PackingScheme||(PackingScheme={}));var TextureUsage;(function(n){n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD"})(TextureUsage||(TextureUsage={}));var PhysicalTextureType;(function(n){n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(PhysicalTextureType||(PhysicalTextureType={}));function getUnpackedMatrixTextureShapeWidthHeight(n,e){return[e,n]}function getUnpackedArraySizeFromMatrixSize(n,e){return n*e}function getDenseTexShape(n){const e=sizeFromShape(n),t=Math.ceil(e/4);return sizeToSquarishShape(t)}function getPackedMatrixTextureShapeWidthHeight(n,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(n/2))]}function getPackedRGBAArraySizeFromMatrixShape(n,e){const[t,r]=getPackedMatrixTextureShapeWidthHeight(n,e);return t*r*4}function getTextureConfig(n,e){const t=n;let r,s,i,o,a,l,c,u,h,d;return env().getNumber("WEBGL_VERSION")===2?(r=t.R32F,s=t.R16F,i=t.RGBA16F,o=t.RGBA32F,a=t.RED,c=4,u=1,h=t.HALF_FLOAT,d=t.FLOAT,l=t.RGBA8):(r=n.RGBA,s=n.RGBA,i=n.RGBA,o=t.RGBA,a=n.RGBA,c=4,u=4,h=e!=null?e.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:u,textureTypeHalfFloat:h,textureTypeFloat:d}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function callAndCheck(n,e){const t=e();return env().getBool("DEBUG")&&checkWebGLError(n),t}function checkWebGLError(n){const e=n.getError();if(e!==n.NO_ERROR)throw new Error("WebGL Error: "+getWebGLErrorMessage(n,e))}const MIN_FLOAT16=596e-10,MAX_FLOAT16=65504;function canBeRepresented(n){return!!(env().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||n===0||MIN_FLOAT16<Math.abs(n)&&Math.abs(n)<MAX_FLOAT16)}function getWebGLErrorMessage(n,e){switch(e){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}function getExtensionOrThrow(n,e){return throwIfNull(n,()=>n.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function createVertexShader$1(n,e){const t=throwIfNull(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(callAndCheck(n,()=>n.shaderSource(t,e)),callAndCheck(n,()=>n.compileShader(t)),n.getShaderParameter(t,n.COMPILE_STATUS)===!1)throw console.log(n.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function createFragmentShader(n,e){const t=throwIfNull(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(callAndCheck(n,()=>n.shaderSource(t,e)),callAndCheck(n,()=>n.compileShader(t)),env().get("ENGINE_COMPILE_ONLY"))return t;if(n.getShaderParameter(t,n.COMPILE_STATUS)===!1)throw logShaderSourceAndInfoLog(e,n.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}const lineNumberRegex=/ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog(n,e){const t=lineNumberRegex.exec(e);if(t==null){console.log(`Couldn't parse line number in error: ${e}`),console.log(n);return}const r=+t[1],s=n.split(`
`),i=s.length.toString().length+2,o=s.map((h,d)=>rightPad((d+1).toString(),i)+h);let a=0;for(let h=0;h<o.length;h++)a=Math.max(o[h].length,a);const l=o.slice(0,r-1),c=o.slice(r-1,r),u=o.slice(r);console.log(l.join(`
`)),console.log(e.split(`
`)[0]),console.log(`%c ${rightPad(c[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(u.join(`
`))}function createProgram(n){return throwIfNull(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}function linkProgram(n,e){if(callAndCheck(n,()=>n.linkProgram(e)),!env().get("ENGINE_COMPILE_ONLY")&&n.getProgramParameter(e,n.LINK_STATUS)===!1)throw console.log(n.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function validateProgram(n,e){if(callAndCheck(n,()=>n.validateProgram(e)),n.getProgramParameter(e,n.VALIDATE_STATUS)===!1)throw console.log(n.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function createStaticVertexBuffer(n,e){const t=throwIfNull(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,t)),callAndCheck(n,()=>n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)),t}function createStaticIndexBuffer(n,e){const t=throwIfNull(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t)),callAndCheck(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,e,n.STATIC_DRAW)),t}function createTexture(n){return throwIfNull(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}function validateTextureSize(n,e){const t=env().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||e<=0){const r=`[${n}x${e}]`;throw new Error("Requested texture size "+r+" is invalid.")}if(n>t||e>t){const r=`[${n}x${e}]`,s=`[${t}x${t}]`;throw new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU "+s+".")}}function createFramebuffer(n){return throwIfNull(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function bindVertexBufferToProgramAttribute(n,e,t,r,s,i,o){const a=n.getAttribLocation(e,t);return a===-1?!1:(callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,r)),callAndCheck(n,()=>n.vertexAttribPointer(a,s,n.FLOAT,!1,i,o)),callAndCheck(n,()=>n.enableVertexAttribArray(a)),!0)}function bindTextureUnit(n,e,t){validateTextureUnit(n,t),callAndCheck(n,()=>n.activeTexture(n.TEXTURE0+t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e))}function getProgramUniformLocationOrThrow(n,e,t){return throwIfNull(n,()=>n.getUniformLocation(e,t),'uniform "'+t+'" not present in program.')}function getProgramUniformLocation(n,e,t){return n.getUniformLocation(e,t)}function bindTextureToProgramUniformSampler(n,e,t,r){callAndCheck(n,()=>bindTextureUnit(n,e,r)),callAndCheck(n,()=>n.uniform1i(t,r))}function bindColorTextureToFramebuffer(n,e,t){callAndCheck(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),callAndCheck(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0))}function unbindColorTextureFromFramebuffer(n,e){callAndCheck(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),callAndCheck(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function validateFramebuffer(n){const e=n.checkFramebufferStatus(n.FRAMEBUFFER);if(e!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+getFramebufferErrorMessage(n,e))}function getFramebufferErrorMessage(n,e){switch(e){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}function throwIfNull(n,e,t){const r=callAndCheck(n,()=>e());if(r==null)throw new Error(t);return r}function validateTextureUnit(n,e){const t=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+n.TEXTURE0;if(r<n.TEXTURE0||r>t){const s=`[gl.TEXTURE0, gl.TEXTURE${t}]`;throw new Error(`textureUnit must be in ${s}.`)}}function getBatchDim(n,e=2){return sizeFromShape(n.slice(0,n.length-e))}function getRowsCols(n){if(n.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function getShapeAs3D(n){let e=[1,1,1];return n.length===0||n.length===1&&n[0]===1||(e=[getBatchDim(n),...getRowsCols(n)]),e}function getTextureShapeFromLogicalShape(n,e=!1){let t=env().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=env().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");r===1/0&&env().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=t/2),e&&(t=t*2,r=r*2,n=n.map((a,l)=>l>=n.length-2?nearestLargerEven(n[l]):n[l]),n.length===1&&(n=[2,n[0]])),n.length!==2&&(n=squeezeShape(n).newShape);let s=sizeFromShape(n),i=null;n.length<=1&&s<=t?i=[1,s]:n.length===2&&n[0]<=t&&n[1]<=t?i=n:n.length===3&&n[0]*n[1]<=t&&n[2]<=t?i=[n[0]*n[1],n[2]]:n.length===3&&n[0]<=t&&n[1]*n[2]<=t?i=[n[0],n[1]*n[2]]:n.length===4&&n[0]*n[1]*n[2]<=t&&n[3]<=t?i=[n[0]*n[1]*n[2],n[3]]:n.length===4&&n[0]<=t&&n[1]*n[2]*n[3]<=t&&(i=[n[0],n[1]*n[2]*n[3]]);const o=i!=null&&Math.max(...i)>r&&Math.min(...i)<=(e?2:1)&&Math.min(...i)>0;if(i==null||o)if(e){const a=getBatchDim(n);let l=2,c=2;n.length&&([l,c]=getRowsCols(n)),s=a*(l/2)*(c/2),i=sizeToSquarishShape(s).map(u=>u*2)}else i=sizeToSquarishShape(s);return i}function isEven(n){return n%2===0}function isReshapeFree(n,e){if(n=n.slice(-2),e=e.slice(-2),arraysEqual(n,e)||!n.length||!e.length||n[0]===0||n[1]===0||e[0]===0||e[1]===0)return!0;if(n.length!==e.length){const t=n.slice(-1)[0],r=e.slice(-1)[0];if(t===r||isEven(t)&&isEven(r)&&(n[0]===1||e[0]===1))return!0}return n[1]===e[1]&&isEven(n[0])&&isEven(e[0])}let MAX_TEXTURE_SIZE,MAX_TEXTURES_IN_SHADER;function getWebGLMaxTextureSize(n){if(MAX_TEXTURE_SIZE==null){const e=getWebGLContext(n);MAX_TEXTURE_SIZE=e.getParameter(e.MAX_TEXTURE_SIZE)}return MAX_TEXTURE_SIZE}function getMaxTexturesInShader(n){if(MAX_TEXTURES_IN_SHADER==null){const e=getWebGLContext(n);MAX_TEXTURES_IN_SHADER=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MAX_TEXTURES_IN_SHADER)}function getWebGLDisjointQueryTimerVersion(n){if(n===0)return 0;let e;const t=getWebGLContext(n);return hasExtension(t,"EXT_disjoint_timer_query_webgl2")&&n===2?e=2:hasExtension(t,"EXT_disjoint_timer_query")?e=1:e=0,e}function hasExtension(n,e){return n.getExtension(e)!=null}function isWebGLVersionEnabled(n){try{if(getWebGLContext(n)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function isCapableOfRenderingToFloatTexture(n){if(n===0)return!1;const e=getWebGLContext(n);if(n===1){if(!hasExtension(e,"OES_texture_float"))return!1}else if(!hasExtension(e,"EXT_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer(e)}function isDownloadFloatTextureEnabled(n){if(n===0)return!1;const e=getWebGLContext(n);if(n===1){if(!hasExtension(e,"OES_texture_float")||!hasExtension(e,"WEBGL_color_buffer_float"))return!1}else{if(hasExtension(e,"EXT_color_buffer_float"))return createFloatTextureAndBindToFramebuffer(e);const r="EXT_color_buffer_half_float";if(hasExtension(e,r)){const s=e.getExtension(r);return createHalfFloatTextureAndBindToFramebuffer(e,s)}return!1}return createFloatTextureAndBindToFramebuffer(e)}function createFloatTextureAndBindToFramebuffer(n){const e=getTextureConfig(n),t=n.createTexture();n.bindTexture(n.TEXTURE_2D,t),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const i=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,i),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0);const o=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(t),n.deleteFramebuffer(i),o}function createHalfFloatTextureAndBindToFramebuffer(n,e){const t=getTextureConfig(n,e),r=n.createTexture();n.bindTexture(n.TEXTURE_2D,r),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatHalfFloat,1,1,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(r),n.deleteFramebuffer(o),a}function isWebGLFenceEnabled(n){return n!==2?!1:getWebGLContext(n).fenceSync!=null}function assertNotComplex(n,e){Array.isArray(n)||(n=[n]),n.forEach(t=>{t!=null&&assert$1(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV=env();ENV.registerFlag("HAS_WEBGL",()=>ENV.getNumber("WEBGL_VERSION")>0),ENV.registerFlag("WEBGL_VERSION",()=>isWebGLVersionEnabled(2)?2:isWebGLVersionEnabled(1)?1:0),ENV.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ENV.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>ENV.get("WEBGL_VERSION")===2),ENV.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ENV.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ENV.registerFlag("WEBGL_PACK",()=>ENV.getBool("HAS_WEBGL")),ENV.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_CLIP",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_REDUCE",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_LAZILY_UNPACK",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_CONV_IM2COL",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>getWebGLMaxTextureSize(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>getMaxTexturesInShader(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=ENV.getNumber("WEBGL_VERSION");return n===0?0:getWebGLDisjointQueryTimerVersion(n)}),ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ENV.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!isMobile()),ENV.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>isCapableOfRenderingToFloatTexture(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>ENV.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:ENV.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ENV.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>isDownloadFloatTextureEnabled(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_FENCE_API_ENABLED",()=>isWebGLFenceEnabled(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ENV.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ENV.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(n<0&&n!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),ENV.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>isMobile()?1:-1,n=>{if(n<0&&n!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),ENV.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ENV.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ENV.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ENV.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),ENV.registerFlag("WEBGL_EXP_CONV",()=>!1),ENV.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>ENV.getBool("IS_TEST")),ENV.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),ENV.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),ENV.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),ENV.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getGlslDifferences(){let n,e,t,r,s,i,o,a,l,c;return env().getNumber("WEBGL_VERSION")===2?(n="#version 300 es",e="in",t="out",r="in",s="texture",i="outputColor",o="out vec4 outputColor;",a=env().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",c=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(n="",e="attribute",t="varying",r="varying",s="texture2D",i="gl_FragColor",o="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,c=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:n,attribute:e,varyingVs:t,varyingFs:r,texture2D:s,output:i,defineOutput:o,defineSpecialNaN:a,defineSpecialInf:l,defineRound:c}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getLogicalCoordinatesFromFlatIndex(n,e,t="index"){const r=computeStrides(e);return r.map((s,i)=>{const o=`int ${n[i]} = ${t} / ${s}`,a=i===r.length-1?`int ${n[i+1]} = ${t} - ${n[i]} * ${s}`:`index -= ${n[i]} * ${s}`;return`${o}; ${a};`}).join("")}function getOutputLogicalCoordinatesFromFlatIndexByUniform(n,e,t="index"){const r=computeStrides(e);return r.map((s,i)=>{const o=`int ${n[i]} = ${t} / outShapeStrides[${i}]`,a=i===r.length-1?`int ${n[i+1]} = ${t} - ${n[i]} * outShapeStrides[${i}]`:`index -= ${n[i]} * outShapeStrides[${i}]`;return`${o}; ${a};`}).join("")}function symbolicallyComputeStrides(n,e){const t=n.length,r=n.map(i=>`${e}[${i}]`),s=new Array(t-1);s[t-2]=r[t-1];for(let i=t-3;i>=0;--i)s[i]=`(${s[i+1]} * ${r[i+1]})`;return s}function getLogicalCoordinatesFromFlatIndexByUniform(n,e,t="index"){const r=n.map((i,o)=>o),s=symbolicallyComputeStrides(r,e);return s.map((i,o)=>{const a=`int ${n[o]} = ${t} / ${s[o]}`,l=o===s.length-1?`int ${n[o+1]} = ${t} - ${n[o]} * ${s[o]}`:`index -= ${n[o]} * ${s[o]}`;return`${a}; ${l};`}).join("")}function getFlatIndexFrom3D(n){const e=computeStrides(n).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}function getFlatIndexFrom3DOutput(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}const ENCODE_FLOAT_SNIPPET=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{getBroadcastDims}=backend_util;function makeShader(n,e,t){const r=[];if(n.forEach(g=>{const x=sizeFromShape(g.shapeInfo.logicalShape);if(g.shapeInfo.isUniform?r.push(`uniform float ${g.name}${x>1?`[${x}]`:""};`):(r.push(`uniform sampler2D ${g.name};`),r.push(`uniform int offset${g.name};`)),t.enableShapeUniforms){const{uniformShape:y}=getUniformInfoFromShape(t.packedInputs,g.shapeInfo.logicalShape,g.shapeInfo.texShape);switch(y.length){case 1:r.push(`uniform int ${g.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${g.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${g.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${g.name}Shape;`);break}r.push(`uniform ivec2 ${g.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;");break}r.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(g=>{r.push(`uniform ${g.type} ${g.name}${g.arrayIndex?`[${g.arrayIndex}]`:""};`)});const s=r.join(`
`),i=n.map(g=>getInputSamplingSnippet(g,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),o=e.texShape,a=getGlslDifferences(),l=getFloatTextureSampleSnippet(a);let c,u,h=getShaderPrefix(a);return e.isPacked?(c=getPackedOutputSamplingSnippet(e.logicalShape,o,t.enableShapeUniforms),u=getFloatTextureSetRGBASnippet(a)):(c=getOutputSamplingSnippet(e.logicalShape,o,t.enableShapeUniforms),u=getFloatTextureSetRSnippet(a)),t.packedInputs&&(h+=SHADER_PACKED_PREFIX),[h,l,u,s,c,i,t.userCode].join(`
`)}function getSamplerFromInInfo(n,e=!1){const t=n.shapeInfo.logicalShape;switch(t.length){case 0:return getSamplerScalar(n,e);case 1:return getSampler1D(n,e);case 2:return getSampler2D(n,e);case 3:return getSampler3D(n,e);case 4:return getSampler4D(n,e);case 5:return getSampler5D(n);case 6:return getSampler6D(n);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function getPackedSamplerFromInInfo(n,e){switch(n.shapeInfo.logicalShape.length){case 0:return getPackedSamplerScalar(n);case 1:return getPackedSampler1D(n,e);case 2:return getPackedSampler2D(n,e);case 3:return getPackedSampler3D(n,e);default:return getPackedSamplerND(n,e)}}function getInputSamplingSnippet(n,e,t=!1,r){let s="";t?s+=getPackedSamplerFromInInfo(n,r):s+=getSamplerFromInInfo(n,r);const i=n.shapeInfo.logicalShape,o=e.logicalShape;return i.length<=o.length&&(t?s+=getPackedSamplerAtOutputCoords(n,e):s+=getSamplerAtOutputCoords(n,e)),s}function getPackedOutputSamplingSnippet(n,e,t){switch(n.length){case 0:return getOutputScalarCoords();case 1:return getOutputPacked1DCoords(n,e,t);case 2:return getOutputPacked2DCoords(n,e,t);case 3:return getOutputPacked3DCoords(n,e,t);default:return getOutputPackedNDCoords(n,e,t)}}function getOutputSamplingSnippet(n,e,t){switch(n.length){case 0:return getOutputScalarCoords();case 1:return getOutput1DCoords(n,e,t);case 2:return getOutput2DCoords(n,e,t);case 3:return getOutput3DCoords(n,e,t);case 4:return getOutput4DCoords(n,e,t);case 5:return getOutput5DCoords(n,e);case 6:return getOutput6DCoords(n,e);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}function getFloatTextureSampleSnippet(n){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `}function getFloatTextureSetRSnippet(n){return`
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `}function getFloatTextureSetRGBASnippet(n){return`
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `}function getShaderPrefix(n){return`${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `}const SAMPLE_1D_SNIPPET=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_2D_SNIPPET=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_3D_SNIPPET=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SHADER_PACKED_PREFIX=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function getOutputScalarCoords(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function getOutputPacked1DCoords(n,e,t){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return r[0]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${r[1]}.0);
      }
    `:r[1]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${r[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);
    }
  `}function getOutput1DCoords(n,e,t){return e[0]===1?t?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    `:e[1]===1?t?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `}function getOutputPacked3DCoords(n,e,t){if(t)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(n[2]/2),i=s*Math.ceil(n[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      int b = index / ${i};
      index -= b * ${i};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec3(b, r, c);
    }
  `}function getOutput3DCoords(n,e,t){if(t)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],n)}
    return ivec3(r, c, d);
  }
`;const r=getLogicalCoordinatesFromFlatIndex(["r","c","d"],n);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${r}
      return ivec3(r, c, d);
    }
  `}function getOutputPackedNDCoords(n,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(n[n.length-1]/2),i=s*Math.ceil(n[n.length-2]/2);let o=i,a="",l="b, r, c";for(let c=2;c<n.length-1;c++)o*=n[n.length-c-1],a=`
      int b${c} = index / ${o};
      index -= b${c} * ${o};
    `+a,l=`b${c}, `+l;return`
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      ${a}

      int b = index / ${i};
      index -= b * ${i};

      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec${n.length}(${l});
    }
  `}function getOutput4DCoords(n,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d","d2"],n)}
      return ivec4(r, c, d, d2);
    }
  `;const r=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2"],n);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${r}
      return ivec4(r, c, d, d2);
    }
  `}function getOutput5DCoords(n,e){const t=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3"],n);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function getOutput6DCoords(n,e){const t=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3","d4"],n);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function getOutputPacked2DCoords(n,e,t){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(arraysEqual(n,e))return t?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));
      }
    `;const s=Math.ceil(n[1]/2);return t?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));

      int index = resTexRC.x * ${r[1]} + resTexRC.y;
      int r = 2 * (index / ${s});
      int c = imod(index, ${s}) * 2;

      return ivec2(r, c);
    }
  `}function getOutput2DCoords(n,e,t){return arraysEqual(n,e)?t?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    `:n[1]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:n[0]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:t?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `}function getFlatOffsetUniformName(n){return`offset${n}`}function getPackedSamplerScalar(n){const e=n.name,t="get"+e.charAt(0).toUpperCase()+e.slice(1),r=getGlslDifferences();return`
    vec4 ${t}() {
      return ${r.texture2D}(${e}, halfCR);
    }
  `}function getSamplerScalar(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`float ${r}() {return ${t};}`;const[s,i]=n.shapeInfo.texShape;if(s===1&&i===1)return`
      float ${r}() {
        return sampleTexture(${t}, halfCR);
      }
    `;const o=getFlatOffsetUniformName(t);if(e)return`
    float ${r}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${o});
      return sampleTexture(${t}, uv);
    }
  `;const[a,l]=n.shapeInfo.texShape;return`
    float ${r}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${o});
      return sampleTexture(${t}, uv);
    }
  `}function getPackedSampler1D(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=n.shapeInfo.texShape,i=getGlslDifferences();if(e)return`
    vec4 ${r}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${i.texture2D}(${t}, uv);
    }
  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`
    vec4 ${r}(int index) {
      vec2 uv = packedUVfrom1D(
        ${o[0]}, ${o[1]}, index);
      return ${i.texture2D}(${t}, uv);
    }
  `}function getSampler1D(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`
      float ${r}(int index) {
        ${getUniformSampler(n)}
      }
    `;const s=n.shapeInfo.texShape,i=s[0],o=s[1];if(o===1&&i===1)return`
      float ${r}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;const a=getFlatOffsetUniformName(t);return o===1?e?`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${i}.0);
        return sampleTexture(${t}, uv);
      }
    `:i===1?e?`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${o}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    `:e?`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${a});
      return sampleTexture(${t}, uv);
    }
  `:`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${i}, ${o}, index + ${a});
      return sampleTexture(${t}, uv);
    }
  `}function getPackedSampler2D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape,o=i[0],a=i[1],l=getGlslDifferences();if(i!=null&&arraysEqual(t,i))return e?`
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);

        return ${l.texture2D}(${r}, uv);
      }
    `:`
      vec4 ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${o}.0);

        return ${l.texture2D}(${r}, uv);
      }
    `;if(e)return`
    vec4 ${s}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `;const c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=Math.ceil(t[1]/2);return`
    vec4 ${s}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `}function getSampler2D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape;if(i!=null&&arraysEqual(t,i)){if(e)return`
      float ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `;const d=i[0],g=i[1];return`
    float ${s}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${g}.0, ${d}.0);
      return sampleTexture(${r}, uv);
    }
  `}const{newShape:o,keptDims:a}=squeezeShape(t),l=o;if(l.length<t.length){const d=squeezeInputInfo(n,l),g=["row","col"];return`
      ${getSamplerFromInInfo(d,e)}
      float ${s}(int row, int col) {
        return ${s}(${getSqueezedParams(g,a)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${getUniformSampler(n)}
      }
    `;const c=i[0],u=i[1],h=getFlatOffsetUniformName(r);return u===1?e?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${r}, uv);
    }
  `:c===1?e?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${r}, uv);
    }
  `:e?`
      float ${s}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${r}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);
        return sampleTexture(${r}, uv);
      }
    `:`
  float ${s}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${r}, uv);
  }
`}function getPackedSampler3D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(t[0]===1){const d=t.slice(1),g=[1,2],x=squeezeInputInfo(n,d),y=["b","row","col"];return`
        ${getPackedSamplerFromInInfo(x,e)}
        vec4 ${s}(int b, int row, int col) {
          return ${s}(${getSqueezedParams(y,g)});
        }
      `}const a=getGlslDifferences();if(e)return`
    vec4 ${s}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${r}, uv);
    }
  `;const l=o[0],c=o[1],u=Math.ceil(t[2]/2),h=u*Math.ceil(t[1]/2);return`
    vec4 ${s}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${r}, uv);
    }
  `}function getSampler3D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t[1]*t[2],o=t[2],{newShape:a,keptDims:l}=squeezeShape(t),c=a;if(c.length<t.length){const y=squeezeInputInfo(n,c),w=["row","col","depth"];return`
        ${getSamplerFromInInfo(y,e)}
        float ${s}(int row, int col, int depth) {
          return ${s}(${getSqueezedParams(w,l)});
        }
      `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${i}, ${o}, 1)));
        ${getUniformSampler(n)}
      }
    `;const u=n.shapeInfo.texShape,h=u[0],d=u[1],g=n.shapeInfo.flatOffset;if(d===i&&g==null)return e?`
      float ${s}(int row, int col, int depth) {
        int stride1 = ${r}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
        float ${s}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${r}, uv);
        }
      `;if(d===o&&g==null)return e?`
      float ${s}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
    float ${s}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${r}, uv);
    }
  `;const x=getFlatOffsetUniformName(r);return e?`
    float ${s}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${r}Shape[1] * ${r}Shape[2];
      int stride1 = ${r}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${x};
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);
      return sampleTexture(${r}, uv);
    }
    `:`
      float ${s}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${i} + col * ${o} + depth + ${x};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${r}, uv);
      }
  `}function getPackedSamplerND(n,e){const t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=getGlslDifferences();if(e)return`
    vec4 ${r}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${t}, uv);
    }
  `;const i=n.shapeInfo.logicalShape,o=i.length,a=n.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=l[0],u=l[1],h=Math.ceil(i[o-1]/2);let d=h*Math.ceil(i[o-2]/2),g="int b, int row, int col",x=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let y=2;y<o-1;y++)g=`int b${y}, `+g,d*=i[o-y-1],x=`b${y} * ${d} + `+x;return`
    vec4 ${r}(${g}) {
      int index = ${x};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${s.texture2D}(${t}, uv);
    }
  `}function getSampler4D(n,e){const t=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t[3],o=t[2]*i,a=t[1]*o,{newShape:l,keptDims:c}=squeezeShape(t);if(l.length<t.length){const S=squeezeInputInfo(n,l),_=["row","col","depth","depth2"];return`
      ${getSamplerFromInInfo(S,e)}
      float ${s}(int row, int col, int depth, int depth2) {
        return ${s}(${getSqueezedParams(_,c)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${o}, ${i}, 1)));
        ${getUniformSampler(n)}
      }
    `;const u=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],g=h[1],x=`int stride2 = ${r}Shape[3];`,y=`int stride1 = ${r}Shape[2] * stride2;`,w=`int stride0 = ${r}Shape[1] * stride1;`;if(g===a&&u==null)return e?`
      float ${s}(int row, int col, int depth, int depth2) {
        ${x}
        ${y}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${g}.0, ${d}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(g===i&&u==null)return e?`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${r}TexShape[1], ${r}TexShape[0]);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1]*t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${g}.0, ${d}.0);
        return sampleTexture(${r}, uv);
      }
    `;const $=getFlatOffsetUniformName(r);return e?`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${x}
      ${y}
      ${w}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${$});
      return sampleTexture(${r}, uv);
    }
  `:`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${o} +
          depth * ${i} + depth2;
      vec2 uv = uvFromFlat(${d}, ${g}, index + ${$});
      return sampleTexture(${r}, uv);
    }
  `}function getSampler5D(n){const e=n.shapeInfo.logicalShape,t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e[4],i=e[3]*s,o=e[2]*i,a=e[1]*o,{newShape:l,keptDims:c}=squeezeShape(e);if(l.length<e.length){const y=squeezeInputInfo(n,l),w=["row","col","depth","depth2","depth3"];return`
      ${getSamplerFromInInfo(y)}
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        return ${r}(${getSqueezedParams(w,c)});
      }
    `}if(n.shapeInfo.isUniform)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${o}, ${i}, ${s})) +
          depth3;
        ${getUniformSampler(n)}
      }
    `;const u=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],g=h[1];if(g===a&&u==null)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${g}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(g===s&&u==null)return`
      float ${r}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]},
               ${e[2]*e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${g}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;const x=getFlatOffsetUniformName(t);return`
    float ${r}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${o} + depth * ${i} +
          depth2 * ${s} + depth3 + ${x};
      vec2 uv = uvFromFlat(${d}, ${g}, index);
      return sampleTexture(${t}, uv);
    }
  `}function getSampler6D(n){const e=n.shapeInfo.logicalShape,t=n.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:s,keptDims:i}=squeezeShape(e);if(s.length<e.length){const w=squeezeInputInfo(n,s),$=["row","col","depth","depth2","depth3","depth4"];return`
      ${getSamplerFromInInfo(w)}
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${r}(${getSqueezedParams($,i)});
      }
    `}const o=e[5],a=e[4]*o,l=e[3]*a,c=e[2]*l,u=e[1]*c;if(n.shapeInfo.isUniform)return`
      float ${r}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${getUniformSampler(n)}
      }
    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,g=d[0],x=d[1];if(x===u&&h==null)return`
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${x}.0, ${g}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(x===o&&h==null)return`
      float ${r}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]*e[4]},
               ${e[2]*e[3]*e[4]},
               ${e[3]*e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${x}.0, ${g}.0);
        return sampleTexture(${t}, uv);
      }
    `;const y=getFlatOffsetUniformName(t);return`
    float ${r}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${o} + depth4 + ${y};
      vec2 uv = uvFromFlat(${g}, ${x}, index);
      return sampleTexture(${t}, uv);
    }
  `}function getUniformSampler(n){const e=n.name,t=sizeFromShape(n.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function getPackedSamplerAtOutputCoords(n,e){const t=n.name,r=t.charAt(0).toUpperCase()+t.slice(1),s="get"+r+"AtOutCoords",i=n.shapeInfo.logicalShape.length,o=e.logicalShape.length,a=getBroadcastDims(n.shapeInfo.logicalShape,e.logicalShape),l=getCoordsDataType(o),c=o-i;let u;const h=["x","y","z","w","u","v"];i===0?u="":o<2&&a.length>=1?u="coords = 0;":u=a.map(S=>`coords.${h[S+c]} = 0;`).join(`
`);let d="";o<2&&i>0?d="coords":d=n.shapeInfo.logicalShape.map((S,_)=>`coords.${h[_+c]}`).join(", ");let g="return outputValue;";const y=sizeFromShape(n.shapeInfo.logicalShape)===1,$=sizeFromShape(e.logicalShape)===1;if(i===1&&!y&&!$)g=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(y&&!$)o===1?g=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:g=`
        return vec4(outputValue.x);
      `;else if(a.length){const S=i-2,_=i-1;a.indexOf(S)>-1&&a.indexOf(_)>-1?g="return vec4(outputValue.x);":a.indexOf(S)>-1?g="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(_)>-1&&(g="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${s}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${r}(${d});
      ${g}
    }
  `}function getSamplerAtOutputCoords(n,e){const t=n.name,r=t.charAt(0).toUpperCase()+t.slice(1),s="get"+r+"AtOutCoords",i=e.texShape,o=n.shapeInfo.texShape,a=n.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!n.shapeInfo.isUniform&&a===l&&n.shapeInfo.flatOffset==null&&arraysEqual(o,i))return`
      float ${s}() {
        return sampleTexture(${t}, resultUV);
      }
    `;const c=getCoordsDataType(l),u=getBroadcastDims(n.shapeInfo.logicalShape,e.logicalShape),h=l-a;let d;const g=["x","y","z","w","u","v"];a===0?d="":l<2&&u.length>=1?d="coords = 0;":d=u.map(y=>`coords.${g[y+h]} = 0;`).join(`
`);let x="";return l<2&&a>0?x="coords":x=n.shapeInfo.logicalShape.map((y,w)=>`coords.${g[w+h]}`).join(", "),`
    float ${s}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${r}(${x});
    }
  `}function getCoordsDataType(n){if(n<=1)return"int";if(n===2)return"ivec2";if(n===3)return"ivec3";if(n===4)return"ivec4";if(n===5)return"ivec5";if(n===6)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function getUniformInfoFromShape(n,e,t){const{newShape:r,keptDims:s}=squeezeShape(e),i=e.length,o=n&&i===3&&e[0]===1,a=o?e.slice(1):r,l=!n&&i>1&&!arraysEqual(e,t)&&r.length<i||o;return{useSqueezeShape:l,uniformShape:l?a:e,keptDims:s}}function squeezeInputInfo(n,e){const t=JSON.parse(JSON.stringify(n));return t.shapeInfo.logicalShape=e,t}function getSqueezedParams(n,e){return e.map(t=>n[t]).join(", ")}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function compileProgram(n,e,t,r){const s=t.map((u,h)=>{const d={logicalShape:u.shape,texShape:u.isUniform?null:u.texData.texShape,isUniform:u.isUniform,isPacked:u.isUniform?!1:u.texData.isPacked,flatOffset:null};return u.texData!=null&&u.texData.slice!=null&&u.texData.slice.flatOffset>0&&(d.flatOffset=u.texData.slice.flatOffset),{name:e.variableNames[h],shapeInfo:d}}),i=s.map(u=>u.shapeInfo),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},a=makeShader(s,o,e),l=createFragmentShader(n.gl,a),c=n.createProgram(l);return env().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:l,source:a,webGLProgram:c,inShapeInfos:i,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:e,fragmentShader:l,source:a,webGLProgram:c,inShapeInfos:i,outShapeInfo:o},getUniformLocations(n,e,c))}function getUniformLocations(n,e,t){const r={},s={},i={},o=[];let a,l,c,u=null,h=null;h=n.getUniformLocation(t,"NAN",!1),env().getNumber("WEBGL_VERSION")===1&&(u=n.getUniformLocation(t,"INFINITY",!1));const d=!1;for(let g=0;g<e.variableNames.length;g++){const x=e.variableNames[g];r[x]=n.getUniformLocation(t,x,d),r[`offset${x}`]=n.getUniformLocation(t,`offset${x}`,d),e.enableShapeUniforms&&(s[`${x}Shape`]=n.getUniformLocation(t,`${x}Shape`,d),i[`${x}TexShape`]=n.getUniformLocation(t,`${x}TexShape`,d))}return e.enableShapeUniforms&&(a=n.getUniformLocation(t,"outShape",d),c=n.getUniformLocation(t,"outShapeStrides",d),l=n.getUniformLocation(t,"outTexShape",d)),e.customUniforms&&e.customUniforms.forEach((g,x)=>{o[x]=n.getUniformLocation(t,g.name,d)}),{uniformLocations:r,customUniformLocations:o,infLoc:u,nanLoc:h,inShapesLocations:s,inTexShapesLocations:i,outShapeLocation:a,outShapeStridesLocation:c,outTexShapeLocation:l}}function validateBinaryAndProgram(n,e){if(n.length!==e.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${e.length} inputs`);n.forEach((t,r)=>{const s=t.logicalShape,i=e[r],o=i.shape;if(!arraysEqual(s,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${o} must match`);if(t.isUniform&&i.isUniform)return;const a=t.texShape,l=i.isUniform?null:i.texData.texShape;if(!arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function runProgram(n,e,t,r,s){e.program.enableShapeUniforms||(validateBinaryAndProgram(e.inShapeInfos,t),validateBinaryAndProgram([e.outShapeInfo],[r]));const i=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?n.setOutputPackedMatrixTexture(i.texture,o[0],o[1]):n.setOutputMatrixTexture(i.texture,o[0],o[1]),n.setProgram(e.webGLProgram),env().getNumber("WEBGL_VERSION")===1&&e.infLoc!==null&&n.gl.uniform1f(e.infLoc,1/0),e.nanLoc!==null&&n.gl.uniform1f(e.nanLoc,NaN),t.forEach((l,c)=>{const u=e.program.variableNames[c],h=e.uniformLocations[u],d=e.uniformLocations[`offset${u}`],g=e.inShapesLocations[`${u}Shape`],x=e.inTexShapesLocations[`${u}TexShape`];if(g){const{uniformShape:y}=getUniformInfoFromShape(e.program.packedInputs,l.shape,l.texData.texShape);switch(y.length){case 1:n.gl.uniform1iv(g,new Int32Array(y));break;case 2:n.gl.uniform2iv(g,new Int32Array(y));break;case 3:n.gl.uniform3iv(g,new Int32Array(y));break;case 4:n.gl.uniform4iv(g,new Int32Array(y));break}}if(x&&n.gl.uniform2i(x,l.texData.texShape[0],l.texData.texShape[1]),h!=null){if(l.isUniform){if(sizeFromShape(l.shape)<2)n.gl.uniform1f(h,l.uniformValues[0]);else{let y=l.uniformValues;y instanceof Float32Array||(y=new Float32Array(y)),n.gl.uniform1fv(h,y)}return}l.texData.slice!=null&&d!=null&&n.gl.uniform1i(d,l.texData.slice.flatOffset),n.setInputMatrixTexture(l.texData.texture.texture,h,c)}});const a=e.outShapeLocation;if(a)switch(r.shape.length){case 1:n.gl.uniform1iv(a,new Int32Array(r.shape));break;case 2:n.gl.uniform2iv(a,new Int32Array(r.shape));break;case 3:n.gl.uniform3iv(a,new Int32Array(r.shape));break;case 4:n.gl.uniform4iv(a,new Int32Array(r.shape));break}if(e.outShapeStridesLocation){const l=computeStrides(r.shape);switch(r.shape.length){case 2:n.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(l));break}}e.outTexShapeLocation&&n.gl.uniform2i(e.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),e.program.customUniforms&&s&&e.program.customUniforms.forEach((l,c)=>{const u=e.customUniformLocations[c],h=s[c];if(l.type==="float")n.gl.uniform1fv(u,h);else if(l.type==="vec2")n.gl.uniform2fv(u,h);else if(l.type==="vec3")n.gl.uniform3fv(u,h);else if(l.type==="vec4")n.gl.uniform4fv(u,h);else if(l.type==="int")n.gl.uniform1iv(u,h);else if(l.type==="ivec2")n.gl.uniform2iv(u,h);else if(l.type==="ivec3")n.gl.uniform3iv(u,h);else if(l.type==="ivec4")n.gl.uniform4iv(u,h);else throw Error(`uniform type ${l.type} is not supported yet.`)}),n.executeProgram()}function makeShaderKey(n,e,t){let r="";e.concat(t).forEach(o=>{const a=o.texData!=null&&o.texData.slice!=null&&o.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!o.isUniform){const l=o.texData.texShape,{useSqueezeShape:c,uniformShape:u,keptDims:h}=getUniformInfoFromShape(n.packedInputs,o.shape,l);let d="",g="",x="";if(u.length===1&&n.packedInputs){const k=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${k[0]>1}_${k[1]>1}`}else if(u.length===2&&!n.packedInputs)g=`${u[0]>1}_${u[1]>1}`;else if(u.length>2&&!n.packedInputs){const k=computeStrides(u);x=`${k[0]===l[1]}_${k[k.length-1]===l[1]}`}const y=o.shape.length,w=u.length===2&&arraysEqual(o.shape,l),$=sizeFromShape(o.shape)===1,S=getBroadcastDims$1(o.shape,t.shape),_=!n.packedInputs&&y===t.shape.length&&arraysEqual(l,t.texData.texShape),T=n.packedInputs||u.length>2?"":`${l[0]>1}_${l[1]>1}`;r+=`${y}_${_}_${c?h:""}_${u.length}_${$}_${S}_${w}_${d}_${g}_${x}_${T}_${a}`}else{const l=o.isUniform?"uniform":o.texData.texShape;r+=`${o.shape}_${l}_${a}`}});const s=n.userCode;let i=n.constructor.name;return i+="_"+r+"_"+s+`${env().getNumber("WEBGL_VERSION")}`,i}function useShapeUniforms(n){return env().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatProgram{constructor(e){this.variableNames=["A"],this.outTexUsage=TextureUsage.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=TextureUsage.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHANNEL_CHAR_TO_INDEX_MAP={R:0,G:1,B:2,A:3};class EncodeMatrixProgram{constructor(e,t=!1,r="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let i="result";t&&(i="floor(result * 255. + 0.5)");let o="";for(let a=0;a<r.length;a++){const l=r[a];o+=`
          if(offset == ${a}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[l]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${r.length});

        flatIndex = idiv(flatIndex, ${r.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${s.texture2D}(A, uv);
          ${o}
        }
        ${s.output} = vec4(${i}, 0., 0., 0.);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeMatrixPackedProgram{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let s="",i="result";t&&(i="floor(result * 255. + 0.5)");for(let o=0;o<=1;o++)for(let a=0;a<=1;a++){const l=o*2+a;s+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${o} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${o};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${r.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${s}

          ${r.output} = ${i};
        }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createVertexShader(n){const e=getGlslDifferences(),t=`${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return createVertexShader$1(n,t)}function createVertexBuffer(n){const e=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return createStaticVertexBuffer(n,e)}function createIndexBuffer(n){const e=new Uint16Array([0,1,2,2,1,3]);return createStaticIndexBuffer(n,e)}function createAndConfigureTexture(n,e,t,r,s,i){validateTextureSize(e,t);const o=createTexture(n),a=n.TEXTURE_2D;return callAndCheck(n,()=>n.bindTexture(a,o)),callAndCheck(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),callAndCheck(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),callAndCheck(n,()=>n.texParameteri(a,n.TEXTURE_MIN_FILTER,n.NEAREST)),callAndCheck(n,()=>n.texParameteri(a,n.TEXTURE_MAG_FILTER,n.NEAREST)),env().getNumber("WEBGL_VERSION")===1?callAndCheck(n,()=>n.texImage2D(a,0,r,e,t,0,s,i,null)):callAndCheck(n,()=>n.texStorage2D(a,1,r,e,t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:o,texShape:[t,e]}}function getInternalFormatForFloat32MatrixTexture(n){return n.internalFormatFloat}function createFloat32MatrixTexture(n,e,t,r){const[s,i]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,i,getInternalFormatForFloat32MatrixTexture(r),r.textureFormatFloat,n.FLOAT)}function getInternalFormatForFloat16MatrixTexture(n){return n.internalFormatHalfFloat}function createFloat16MatrixTexture(n,e,t,r){const[s,i]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,i,getInternalFormatForFloat16MatrixTexture(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function getInternalFormatForUnsignedBytesMatrixTexture(n){return n.downloadTextureFormat}function createUnsignedBytesMatrixTexture(n,e,t,r){const[s,i]=getUnpackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,i,getInternalFormatForUnsignedBytesMatrixTexture(r),n.RGBA,n.UNSIGNED_BYTE)}function getInternalFormatForPackedMatrixTexture(n){return n.internalFormatPackedFloat}function createPackedMatrixTexture(n,e,t,r){const[s,i]=getPackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,i,getInternalFormatForPackedMatrixTexture(r),n.RGBA,n.FLOAT)}function getInternalFormatForFloat16PackedMatrixTexture(n){return n.internalFormatPackedHalfFloat}function createFloat16PackedMatrixTexture(n,e,t,r){const[s,i]=getPackedMatrixTextureShapeWidthHeight(e,t);return createAndConfigureTexture(n,s,i,getInternalFormatForFloat16PackedMatrixTexture(r),n.RGBA,r.textureTypeHalfFloat)}function bindVertexProgramAttributeStreams(n,e,t){return callAndCheck(n,()=>n.bindBuffer(n.ARRAY_BUFFER,t)),bindVertexBufferToProgramAttribute(n,e,"clipSpacePos",t,3,20,0)&&bindVertexBufferToProgramAttribute(n,e,"uv",t,2,20,12)}function uploadDenseMatrixToTexture(n,e,t,r,s,i){callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e));let o,a,l;s instanceof Uint8Array?(o=new Uint8Array(t*r*4),a=n.UNSIGNED_BYTE,l=n.RGBA):(o=new Float32Array(t*r*4),a=n.FLOAT,l=i.internalFormatPackedFloat),o.set(s),env().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t,r,n.RGBA,a,o)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,t,r,0,n.RGBA,a,o)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function uploadPixelDataToTexture(n,e,t){callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,e)),t.data instanceof Uint8Array?env().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t.width,t.height,n.RGBA,n.UNSIGNED_BYTE,t.data)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t.width,t.height,0,n.RGBA,n.UNSIGNED_BYTE,t.data)):env().getNumber("WEBGL_VERSION")===2?callAndCheck(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,t)):callAndCheck(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t)),callAndCheck(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function createBufferFromOutputTexture(n,e,t,r){const s=n.createBuffer();callAndCheck(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,s));const a=4*4*e*t;return callAndCheck(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,a,n.STREAM_READ)),callAndCheck(n,()=>n.readPixels(0,0,t,e,n.RGBA,n.FLOAT,0)),callAndCheck(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),s}function downloadFloat32MatrixFromBuffer(n,e,t){const r=n,s=new Float32Array(t);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}function downloadByteEncodedFloatMatrixFromOutputTexture(n,e,t,r){const[s,i]=getUnpackedMatrixTextureShapeWidthHeight(e,t),o=4,a=new Uint8Array(getUnpackedArraySizeFromMatrixSize(e*t,o));return callAndCheck(n,()=>n.readPixels(0,0,s,i,r.downloadTextureFormat,n.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function downloadPackedMatrixFromBuffer(n,e,t,r,s,i,o,a){const l=n,c=new Float32Array(getPackedRGBAArraySizeFromMatrixShape(i,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,c),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),c}function downloadMatrixFromPackedOutputTexture(n,e,t){const r=new Float32Array(e*t*4);return callAndCheck(n,()=>n.readPixels(0,0,t,e,n.RGBA,n.FLOAT,r)),r}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GPGPUContext{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=env().getNumber("WEBGL_VERSION");if(e!=null?(this.gl=e,setWebGLContext(t,e)):this.gl=getWebGLContext(t),e=this.gl,env().getNumber("WEBGL_VERSION")===2){const i=e;this.createVertexArray=()=>callAndCheck(i,()=>i.createVertexArray()),this.bindVertexArray=o=>callAndCheck(i,()=>i.bindVertexArray(o)),this.deleteVertexArray=o=>callAndCheck(i,()=>i.deleteVertexArray(o)),this.getVertexArray=()=>callAndCheck(i,()=>i.getParameter(i.VERTEX_ARRAY_BINDING))}else if(e!=null){const i=e.getExtension("OES_vertex_array_object");if(i==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>callAndCheck(e,()=>i.createVertexArrayOES()),this.bindVertexArray=o=>callAndCheck(e,()=>i.bindVertexArrayOES(o)),this.deleteVertexArray=o=>callAndCheck(e,()=>i.deleteVertexArrayOES(o)),this.getVertexArray=()=>callAndCheck(e,()=>e.getParameter(i.VERTEX_ARRAY_BINDING_OES))}let r="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),env().getNumber("WEBGL_VERSION")===1){const i="OES_texture_float",o="OES_texture_half_float";if(this.textureFloatExtension=getExtensionOrThrow(this.gl,i),hasExtension(this.gl,o))this.textureHalfFloatExtension=getExtensionOrThrow(this.gl,o);else if(env().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=getExtensionOrThrow(this.gl,s);else if(env().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",hasExtension(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else if(hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=this.gl.getExtension(s);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=createVertexBuffer(this.gl),this.indexBuffer=createIndexBuffer(this.gl),this.framebuffer=createFramebuffer(this.gl),this.textureConfig=getTextureConfig(this.gl,this.textureHalfFloatExtension)}get debug(){return env().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;callAndCheck(e,()=>e.finish()),callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),callAndCheck(e,()=>e.deleteFramebuffer(this.framebuffer)),callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),callAndCheck(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),callAndCheck(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),createFloat32MatrixTexture(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),createFloat16MatrixTexture(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),createUnsignedBytesMatrixTexture(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),uploadPixelDataToTexture(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,r,s){this.throwIfDisposed(),uploadDenseMatrixToTexture(this.gl,e,t,r,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),createFloat16PackedMatrixTexture(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),createPackedMatrixTexture(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(unbindColorTextureFromFramebuffer(this.gl,this.framebuffer),this.outputTexture=null),callAndCheck(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,r){return this.downloadMatrixDriver(e,()=>downloadByteEncodedFloatMatrixFromOutputTexture(this.gl,t,r,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,r,s,i,o){return downloadPackedMatrixFromBuffer(this.gl,e,t,r,s,i,o,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return downloadFloat32MatrixFromBuffer(this.gl,e,t)}createBufferFromTexture(e,t,r){this.bindTextureToFrameBuffer(e);const s=createBufferFromOutputTexture(this.gl,t,r,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,r;if(env().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,i=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{const o=s.clientWaitSync(i,0,0);return o===s.ALREADY_SIGNALED||o===s.CONDITION_SATISFIED},t=i}else env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(t,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:t,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,r){return this.downloadMatrixDriver(e,()=>downloadMatrixFromPackedOutputTexture(this.gl,t,r))}createProgram(e){this.throwIfDisposed();const t=this.gl;this.vertexShader==null&&(this.vertexShader=createVertexShader(t));const r=createProgram(t);callAndCheck(t,()=>t.attachShader(r,this.vertexShader)),callAndCheck(t,()=>t.attachShader(r,e)),linkProgram(t,r);let s;return s=Object.assign(r,{vao:this.createVertexArray()}),this.bindVertexArray(s.vao),callAndCheck(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),console.assert(bindVertexProgramAttributeStreams(t,s,this.vertexBuffer),"gpgpu_util.bindVertexProgramAttributeStreams not fully successful."),this.debug&&validateProgram(t,s),this.setProgram(s),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&(callAndCheck(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&(this.bindVertexArray(this.program.vao),this.debug&&validateProgram(this.gl,this.program)),callAndCheck(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,r=!0){return this.throwIfDisposed(),r?getProgramUniformLocationOrThrow(this.gl,e,t):getProgramUniformLocation(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,r){this.throwIfDisposed(),this.throwIfNoProgram(),bindTextureToProgramUniformSampler(this.gl,e,t,r)}setOutputMatrixTexture(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}setOutputPackedMatrixTexture(e,t,r){this.throwIfDisposed();const[s,i]=getPackedMatrixTextureShapeWidthHeight(t,r);this.setOutputMatrixTextureDriver(e,s,i)}setOutputMatrixWriteRegion(e,t,r,s){this.setOutputMatrixWriteRegionDriver(r,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,r,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&validateProgram(this.gl,this.program),validateFramebuffer(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const t=this.getVertexArray();console.assert(t===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}callAndCheck(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=getExtensionOrThrow(this.gl,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),i=r.createQuery();return r.beginQuery(s.TIME_ELAPSED_EXT,i),i}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const t=this.gl,r=this.getQueryTimerExtensionWebGL2();t.endQuery(r.TIME_ELAPSED_EXT);return}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await repeatedTry(()=>this.disposed||this.isQueryAvailable(e,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){const r=this.gl;return r.getQueryParameter(e,r.QUERY_RESULT)/1e6}else{const r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(e,r.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),i=r.getQueryParameter(e,r.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),i&&!this.disjoint}else{const r=this.getQueryTimerExtensionWebGL1(),s=r.getQueryObjectEXT(e,r.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),s&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=linearSearchLastTrue(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:r}=this.itemsToPoll[t];r()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let r;"setTimeoutCustom"in env().platform&&(r=env().platform.setTimeoutCustom.bind(env().platform)),repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,r)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),bindColorTextureToFramebuffer(this.gl,e,this.framebuffer),this.debug&&validateFramebuffer(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(bindColorTextureToFramebuffer(this.gl,this.outputTexture,this.framebuffer),this.debug&&validateFramebuffer(this.gl)):unbindColorTextureFromFramebuffer(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const r=t();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(e,t,r){this.throwIfDisposed();const s=this.gl;bindColorTextureToFramebuffer(s,e,this.framebuffer),this.debug&&validateFramebuffer(s),this.outputTexture=e,callAndCheck(s,()=>s.viewport(0,0,t,r)),callAndCheck(s,()=>s.scissor(0,0,t,r))}setOutputMatrixWriteRegionDriver(e,t,r,s){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.scissor(e,t,r,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}}function linearSearchLastTrue(n){let e=0;for(;e<n.length&&n[e]();++e);return e-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{addImpl:addImplCPU,bincountImpl:bincountImplCPU,bincountReduceImpl:bincountReduceImplCPU,castImpl:castImplCPU,ceilImpl:ceilImplCPU,concatImpl:concatImplCPU,equalImpl:equalImplCPU,expImpl:expImplCPU,expm1Impl:expm1ImplCPU,floorImpl:floorImplCPU,gatherNdImpl:gatherNdImplCPU,gatherV2Impl:gatherV2ImplCPU,greaterImpl:greaterImplCPU,greaterEqualImpl:greaterEqualImplCPU,lessImpl:lessImplCPU,lessEqualImpl:lessEqualImplCPU,linSpaceImpl:linSpaceImplCPU,logImpl:logImplCPU,maxImpl:maxImplCPU,maximumImpl:maximumImplCPU,minimumImpl:minimumImplCPU,multiplyImpl:multiplyImplCPU,negImpl:negImplCPU,notEqualImpl:notEqualImplCPU,prodImpl:prodImplCPU,raggedGatherImpl:raggedGatherImplCPU,raggedRangeImpl:raggedRangeImplCPU,raggedTensorToTensorImpl:raggedTensorToTensorImplCPU,rangeImpl:rangeImplCPU,rsqrtImpl:rsqrtImplCPU,scatterImpl:scatterImplCPU,sigmoidImpl:sigmoidImplCPU,simpleAbsImpl:simpleAbsImplCPU,sliceImpl:sliceImplCPU,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImplCPU,sparseReshapeImpl:sparseReshapeImplCPU,sparseSegmentReductionImpl:sparseSegmentReductionImplCPU,sqrtImpl:sqrtImplCPU,stridedSliceImpl:stridedSliceImplCPU,stringNGramsImpl:stringNGramsImplCPU,stringSplitImpl:stringSplitImplCPU,stringToHashBucketFastImpl:stringToHashBucketFastImplCPU,subImpl:subImplCPU,tileImpl:tileImplCPU,topKImpl:topKImplCPU,transposeImpl:transposeImplCPU,uniqueImpl:uniqueImplCPU}=shared;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getVecChannels(n,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${n}.${t}`)}function getChannels(n,e){return e===1?[n]:getVecChannels(n,e)}function getSourceCoords$2(n,e){if(n===1)return"rc";let t="";for(let r=0;r<n;r++)t+=e[r],r<n-1&&(t+=",");return t}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PackProgram{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{const t=getChannels("rc",this.rank),r=getCoordsDataType(this.rank),s=this.getOutOfBoundsCondition(t),i=this.getSetup(t),o=this.getOutput(t);this.userCode=`
        void main() {
          ${r} rc = getOutputCoords();

          if(${s}) {
            setOutput(vec4(0));
          } else {
            ${i}

            setOutput(vec4(${o}));
          }
        }
      `}}getSourceCoordsArr(e){const t=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let i=`${r===0?"r":"rp1"}, ${s===0?"c":"cp1"}`;for(let o=2;o<this.rank;o++)i=`${e[e.length-1-o]},`+i;t.push(i)}return t}getOutOfBoundsCondition(e){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let r=this.rank-2;r<this.rank;r++)t+=`${e[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(t+="||");return t}getSetup(e){if(this.rank===1)return"";const t=e.slice(-2),r=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${r};
      bool rEdge = rp1 >= ${s};
    `}getOutput(e){const t=this.getSourceCoordsArr(e);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReshapePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let r="";for(let s=0;s<4;s++){let i="thisRC = rc;";s%2===1&&(i+="thisRC.z += 1;"),s>1&&(i+="thisRC.y += 1;"),r+=`
        ${i}
        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${s}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${s>0?"}":""}
      `}this.userCode=`
      ${getReshapedInputCoords(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${r}

        setOutput(result);
      }
    `}}function getReshapedInputCoords(n,e){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e?getLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],"inputShape"):getLogicalCoordinatesFromFlatIndex(["r","c","d"],n)}
      return ivec3(r, c, d);
    }
  `}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TextureManager{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,r){const s=getPhysicalFromLogicalTextureType(t,r),i=getKeyFromTextureShape(e,s,r);i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]);const o=computeBytes(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();const l=this.freeTextures[i].shift();return this.usedTextures[i].push(l),l}let a;return s===PhysicalTextureType.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===PhysicalTextureType.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===PhysicalTextureType.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===PhysicalTextureType.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[i].push(a),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),a}releaseTexture(e,t,r,s){if(this.freeTextures==null)return;const i=getPhysicalFromLogicalTextureType(r,s),o=getKeyFromTextureShape(t,i,s);o in this.freeTextures||(this.freeTextures[o]=[]);const a=computeBytes(t,i,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=env().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=a):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const c=this.usedTextures[o],u=c.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");c.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(const e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function numBytesForInternalFormat(n,e){const t=n;if(e===t.R32F)return 4;if(e===t.R16F)return 2;if(e===t.RGBA32F)return 16;if(e===n.RGBA)return 16;if(e===t.RGBA16F)return 8;if(e===t.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function computeBytes(n,e,t,r,s){const i=internalFormatForPhysicalTexType(e,r);let o;if(s){const[l,c]=getPackedMatrixTextureShapeWidthHeight(n[0],n[1]);o=l*c}else{const[l,c]=getUnpackedMatrixTextureShapeWidthHeight(n[0],n[1]);o=l*c}const a=numBytesForInternalFormat(t,i);return o*a}function internalFormatForPhysicalTexType(n,e){switch(n){case PhysicalTextureType.PACKED_2X2_FLOAT32:return getInternalFormatForPackedMatrixTexture(e);case PhysicalTextureType.PACKED_2X2_FLOAT16:return getInternalFormatForFloat16PackedMatrixTexture(e);case PhysicalTextureType.UNPACKED_FLOAT32:return getInternalFormatForFloat32MatrixTexture(e);case PhysicalTextureType.UNPACKED_FLOAT16:return getInternalFormatForFloat16MatrixTexture(e);case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:return getInternalFormatForUnsignedBytesMatrixTexture(e);default:throw new Error(`Unknown physical texture type ${n}`)}}function getPhysicalTextureForRendering(n){return env().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?PhysicalTextureType.PACKED_2X2_FLOAT32:PhysicalTextureType.UNPACKED_FLOAT32:n?PhysicalTextureType.PACKED_2X2_FLOAT16:PhysicalTextureType.UNPACKED_FLOAT16}function getPhysicalFromLogicalTextureType(n,e){if(n===TextureUsage.UPLOAD)return PhysicalTextureType.PACKED_2X2_FLOAT32;if(n===TextureUsage.RENDER||n==null)return getPhysicalTextureForRendering(e);if(n===TextureUsage.DOWNLOAD||n===TextureUsage.PIXELS)return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function getKeyFromTextureShape(n,e,t){return`${n[0]}_${n[1]}_${e}_${t}`}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnaryOpProgram{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}const CHECK_NAN_SNIPPET$1="if (isnan(x)) return x;",LINEAR$1="return x;",ABS$1="return abs(x);",ELU$2="return (x >= 0.0) ? x : (exp(x) - 1.0);",RELU$2=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU6$2=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,CLONE="return x;",SIGMOID$2="return 1.0 / (1.0 + exp(-1.0 * x));";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LINEAR="return x;",ELU$1=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,RELU$1=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,RELU6$1=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,SIGMOID$1="return 1.0 / (1.0 + exp(-1.0 * x));";class UnaryOpPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnpackProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const t=e.length,r=getChannels("rc",t),s=getCoordsDataType(t),i=getSourceCoords$2(t,r),o=r.slice(-2),a=t<=1?"rc":`vec2(${o.join(",")})`;this.userCode=`
      void main() {
        ${s} rc = getOutputCoords();
        vec4 packedInput = getA(${i});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl=whereImpl$2,EPSILON_FLOAT32=1e-7,EPSILON_FLOAT16=1e-4,binaryCaches={};function getBinaryCache(n){return n in binaryCaches||(binaryCaches[n]={}),binaryCaches[n]}const CPU_HANDOFF_SIZE_THRESHOLD=env().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),BEFORE_PAGING_CONSTANT=600;function numMBBeforeWarning(){return env().global.screen==null?1024:env().global.screen.height*env().global.screen.width*window.devicePixelRatio*BEFORE_PAGING_CONSTANT/1024/1024}class MathBackendWebGL extends KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!env().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(e!=null){if(e instanceof GPGPUContext)t=e;else{const r=getWebGLContext(env().getNumber("WEBGL_VERSION"),e);t=new GPGPUContext(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=getWebGLContext(env().getNumber("WEBGL_VERSION"));t=new GPGPUContext(r),this.binaryCache=getBinaryCache(env().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new TextureManager(this.gpgpu),this.numMBBeforeWarning=numMBBeforeWarning(),this.texData=new DataStorage(this,engine())}nextDataId(){return MathBackendWebGL.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,r,s,i,o){const a=this.makeTensorInfo(t,r),l=this.texData.get(a.dataId);l.isPacked=!1,l.texture={texture:e,texShape:[s,i]},l.texShape=[s,i];const c=getShapeAs3D(t),u=new EncodeMatrixProgram(c,!1,o),h=this.runWebGLProgram(u,[a],r,[[s,i]]);return h.shape=t,l.texture=null,this.disposeIntermediateTensorInfo(a),h.dataId}write(e,t,r){if((env().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||env().getBool("DEBUG"))&&this.checkNumericalProblems(e),r==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:r,values:e,usage:TextureUsage.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){const t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--}}move(e,t,r,s,i){if(env().getBool("DEBUG")&&this.checkNumericalProblems(t),s==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:s,values:t,usage:TextureUsage.UPLOAD,refCount:i})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:r,dtype:s,complexTensorInfos:i,slice:o,shape:a,isPacked:l}=t;if(o!=null){let d;l?d=new UnaryOpPackedProgram(a,CLONE):d=new UnaryOpProgram(a,CLONE);const g=this.runWebGLProgram(d,[{dataId:e,shape:a,dtype:s}],s),x=this.readSync(g.dataId);return this.disposeIntermediateTensorInfo(g),x}if(r!=null)return this.convertAndCacheOnCPU(e);if(s==="string")return r;const c=this.activeTimers!=null;let u;c&&(u=now());let h;if(s==="complex64"){const d=this.readSync(i.real.dataId),g=this.readSync(i.imag.dataId);h=mergeRealAndImagArrays(d,g)}else h=this.getValuesFromTexture(e);return c&&(this.downloadWaitMs+=now()-u),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const x=this.pendingRead.get(e);return new Promise(y=>x.push(y))}const t=this.texData.get(e),{values:r,shape:s,slice:i,dtype:o,complexTensorInfos:a,isPacked:l}=t;if(i!=null){let x;l?x=new UnaryOpPackedProgram(s,CLONE):x=new UnaryOpProgram(s,CLONE);const y=this.runWebGLProgram(x,[{dataId:e,shape:s,dtype:o}],o),w=this.read(y.dataId);return this.disposeIntermediateTensorInfo(y),w}if(r!=null)return this.convertAndCacheOnCPU(e);if(env().getBool("DEBUG")&&!env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&env().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let c=null,u;if(o!=="complex64"&&env().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const x=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(x.texture.texture,...getDenseTexShape(s))}this.pendingRead.set(e,[]),o!=="complex64"&&await this.gpgpu.createAndWaitForFence();let h;if(o==="complex64"){const x=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),y=x[0],w=x[1];h=mergeRealAndImagArrays(y,w)}else if(c==null)h=this.getValuesFromTexture(e);else{const x=sizeFromShape(s);h=this.gpgpu.downloadFloat32MatrixFromBuffer(c,x)}if(u!=null&&this.disposeIntermediateTensorInfo(u),c!=null){const x=this.gpgpu.gl;callAndCheck(x,()=>x.deleteBuffer(c))}const d=this.convertAndCacheOnCPU(e,h),g=this.pendingRead.get(e);return this.pendingRead.delete(e),g.forEach(x=>x(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&engine().removeDataId(e,this),this.pendingDeletes--),d}readToGPU(e,t={}){const r=this.texData.get(e),{values:s,shape:i,slice:o,dtype:a,isPacked:l,texture:c}=r;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(o!=null){let g;l?g=new UnaryOpPackedProgram(i,CLONE):g=new UnaryOpProgram(i,CLONE);const x=this.runWebGLProgram(g,[{dataId:e,shape:i,dtype:a}],a),y=this.readToGPU(x,t);return this.disposeIntermediateTensorInfo(x),y}if(c==null)throw s!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),h=engine().makeTensorFromTensorInfo(u),d=this.texData.get(u.dataId);return Object.assign({tensorRef:h},d.texture)}bufferSync(e){const t=this.readSync(e.dataId);if(e.dtype==="string")try{const r=t.map(s=>decodeString(s));return buffer(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer(e.shape,e.dtype,t)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){const r=e[t];if(!canBeRepresented(r))throw env().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:t,dtype:r,isPacked:s}=this.texData.get(e),i=sizeFromShape(t);if(env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const d=this.decode(e),g=this.texData.get(d.dataId),x=this.gpgpu.downloadMatrixFromPackedTexture(g.texture.texture,...getDenseTexShape(t)).subarray(0,i);return this.disposeIntermediateTensorInfo(d),x}const o=env().getBool("WEBGL_PACK")&&s===!0,a=o?getShapeAs3D(t):t,l=o?new EncodeFloatPackedProgram(a):new EncodeFloatProgram(a),c=this.runWebGLProgram(l,[{shape:a,dtype:r,dataId:e}],"float32"),u=this.texData.get(c.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,i);return this.disposeIntermediateTensorInfo(c),h}timerAvailable(){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,r=[];let s=!1;this.programTimersStack==null?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,e();const i=flatten$1(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),o=flatten$1(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=t,s&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const l=await Promise.all(i);a.kernelMs=sum$4(l),a.getExtraProfileInfo=()=>l.map((c,u)=>({name:o[u],ms:c})).map(c=>`${c.name}: ${c.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:now(),endMs:null}}endTimer(e){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=now(),e)}async getQueryTime(e){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return r!=null&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:r,texShape:s,usage:i,isPacked:o,slice:a}=this.texData.get(e),l=a&&a.origDataId||e,c=this.dataRefCount.get(l);c>1?this.dataRefCount.set(l,c-1):(this.dataRefCount.delete(l),t!=null&&(this.numBytesInGPU-=this.computeBytes(s,r),this.textureManager.releaseTexture(t,s,i,o)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=CPU_HANDOFF_SIZE_THRESHOLD){return env().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>this.texData.get(r.dataId).texture==null&&sizeFromShape(r.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return whereImpl(e.shape,t)}packedUnaryOp(e,t,r){const s=new UnaryOpPackedProgram(e.shape,t),i=this.compileAndRun(s,[e],r);return engine().makeTensorFromTensorInfo(i)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){const s=simpleAbsImplCPU(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,s)}if(env().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ABS$1,e.dtype);const t=new UnaryOpProgram(e.shape,ABS$1),r=this.compileAndRun(t,[e]);return engine().makeTensorFromTensorInfo(r)}makeTensorInfo(e,t,r){let s;if(t==="string"&&r!=null&&r.length>0&&isString(r[0])){const i=r.map(o=>encodeString(o));s=this.write(i,e,t)}else s=this.write(r,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,r){return engine().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,r),this)}unpackTensor(e){const t=new UnpackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new PackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const r=[getBatchDim(e.shape),...getRowsCols(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},i=[getBatchDim(t),...getRowsCols(t)],o=new ReshapePackedProgram(i,r),a=!0,l=[r],c=this.runWebGLProgram(o,[s],e.dtype,l,a);return{dataId:c.dataId,shape:t,dtype:c.dtype}}decode(e,t){const r=this.texData.get(e),{isPacked:s,shape:i,dtype:o}=r;if(t!=null){const d=sizeFromShape(i),g=t[0]*t[1]*4;assert$1(d<=g,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const a=getShapeAs3D(i);let l;s?l=new DecodeMatrixPackedProgram(a):l=new DecodeMatrixProgram(a);const c=!0,u=[t??getDenseTexShape(a)],h=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:e}],o,u,c,t);return{dtype:o,shape:i,dataId:h.dataId}}runWebGLProgram(e,t,r,s,i=!1,o){const a=this.makeTensorInfo(e.outputShape,r),l=this.texData.get(a.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===PackingScheme.DENSE){const $=o??getDenseTexShape(e.outputShape);l.texShape=$.map(S=>S*2)}if(e.outTexUsage!=null&&(l.usage=e.outTexUsage),sizeFromShape(a.shape)===0)return l.values=getTypedArrayFromDType(a.dtype,0),a;const c=[],u=t.map($=>{if($.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let S=this.texData.get($.dataId);if(S.texture==null){if(!e.packedInputs&&sizeFromShape($.shape)<=env().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:$.shape,texData:null,isUniform:!0,uniformValues:S.values};e.packedInputs&&(S.isPacked=!0,S.shape=$.shape)}if(this.uploadToGPU($.dataId),!!S.isPacked!=!!e.packedInputs)$=S.isPacked?this.unpackTensor($):this.packTensor($),c.push($),S=this.texData.get($.dataId);else if(S.isPacked&&!isReshapeFree(S.shape,$.shape)){const _=$,T=$.shape;$.shape=S.shape,$=this.packedReshape($,T),c.push($),S=this.texData.get($.dataId),_.shape=T}return{shape:$.shape,texData:S,isUniform:!1}});this.uploadToGPU(a.dataId);const h={shape:a.shape,texData:l,isUniform:!1},d=makeShaderKey(e,u,h),g=this.getAndSaveBinary(d,()=>compileProgram(this.gpgpu,e,u,h)),x=this.activeTimers!=null;let y;x&&(y=this.startTimer()),env().get("ENGINE_COMPILE_ONLY")||runProgram(this.gpgpu,g,u,h,s),c.forEach($=>this.disposeIntermediateTensorInfo($)),x&&(y=this.endTimer(y),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(y)}));const w=env().get("WEBGL_FLUSH_THRESHOLD");if(w>0){const $=now();$-this.lastGlFlushTime>w&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=$)}if(!env().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&i===!1){const $=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),$}return a}compileAndRun(e,t,r,s,i=!1){return r=r||t[0].dtype,this.runWebGLProgram(e,t,r,s,i)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(env().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=tidy(()=>{if(!env().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=env().getBool("DEBUG");env().set("DEBUG",!1);const t=this.abs(scalar(1e-8)).dataSync()[0];if(env().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32:EPSILON_FLOAT16}uploadToGPU(e){const t=this.texData.get(e),{shape:r,dtype:s,values:i,texture:o,usage:a,isPacked:l}=t;if(o!=null)return;const c=this.activeTimers!=null;let u;c&&(u=now());let h=t.texShape;if(h==null&&(h=getTextureShapeFromLogicalShape(r,l),t.texShape=h),i!=null){const d=getShapeAs3D(r);let g,x=h[1],y=h[0];const w=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(l||!w)&&([x,y]=getPackedMatrixTextureShapeWidthHeight(h[0],h[1])),l?g=new EncodeMatrixPackedProgram(d,w):g=new EncodeMatrixProgram(d,w);const $=w?[y,x]:h,S=this.makeTensorInfo($,s),_=this.texData.get(S.dataId);w?_.usage=TextureUsage.PIXELS:_.usage=TextureUsage.UPLOAD,_.texShape=$,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(S.dataId),x,y,i);const T=[[y,x]],P=this.runWebGLProgram(g,[S],s,T,!0),L=this.texData.get(P.dataId);t.texShape=L.texShape,t.isPacked=L.isPacked,t.usage=L.usage,env().get("ENGINE_COMPILE_ONLY")?this.disposeData(P.dataId):(t.texture=L.texture,t.values=null,this.texData.delete(P.dataId)),this.disposeIntermediateTensorInfo(S),c&&(this.uploadWaitMs+=now()-u)}else{const d=this.acquireTexture(h,a,s,l);t.texture=d}}convertAndCacheOnCPU(e,t){const r=this.texData.get(e),{dtype:s}=r;return t!=null&&(r.values=float32ToTypedArray(t,s)),r.values}acquireTexture(e,t,r,s){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){const i=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${i} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}else{for(const[,t]of Object.entries(this.binaryCache)){const r=new Promise(s=>{try{this.checkCompletion_(t),s(!0)}catch(i){throw i}});e.push(r)}return Promise.all(e)}}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await nextFrame(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(logShaderSourceAndInfoLog(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:r,infLoc:s,nanLoc:i,inShapesLocations:o,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:c,outTexShapeLocation:u}=getUniformLocations(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=r,e.infLoc=s,e.nanLoc=i,e.inShapesLocations=o,e.inTexShapesLocations=a,e.outShapeLocation=l,e.outShapeStridesLocation=c,e.outTexShapeLocation=u}}createTensorFromGPUData(e,t,r){e.channels=e.channels||"RGBA";const{texture:s,height:i,width:o,channels:a}=e,l=engine().backend;if(!l.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=l.writeTexture(s,t,r,i,o,a);return engine().makeTensorFromDataId(c,t,r,l)}}MathBackendWebGL.nextDataId=0;function float32ToTypedArray(n,e){if(e==="float32"||e==="complex64")return n;if(e==="int32"||e==="bool"){const t=e==="int32"?new Int32Array(n.length):new Uint8Array(n.length);for(let r=0;r<t.length;++r)t[r]=Math.round(n[r]);return t}else throw new Error(`Unknown dtype ${e}`)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */isBrowser()&&registerBackend("webgl",()=>new MathBackendWebGL,2);/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class BinaryOpProgram{constructor(e,t,r){this.variableNames=["A","B"],this.outputShape=assertAndGetBroadcastShape(t,r),this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_PACKED=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class BinaryOpPackedProgram{constructor(e,t,r,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=assertAndGetBroadcastShape(t,r);const i=this.outputShape.length;this.enableShapeUniforms=useShapeUniforms(i);let o="";if(s)if(i===0||sizeFromShape(this.outputShape)===1)o=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(o=`
          ${getCoordsDataType(i)} coords = getOutputCoords();
        `,i===1)this.enableShapeUniforms?o+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:o+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{const l=getChannels("coords",i);this.enableShapeUniforms?o+=`
            bool nextRowOutOfBounds =
              (${l[i-2]} + 1) >= outShape[${i} - 2];
            bool nextColOutOfBounds =
              (${l[i-1]} + 1) >= outShape[${i} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:o+=`
            bool nextRowOutOfBounds =
              (${l[i-2]} + 1) >= ${this.outputShape[i-2]};
            bool nextColOutOfBounds =
              (${l[i-1]} + 1) >= ${this.outputShape[i-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${o}

        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity(n){const{inputs:e,backend:t}=n,{x:r}=e;return t.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const identityConfig={kernelName:Identity$1,backendName:"webgl",kernelFunc:identity};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex(n){const{inputs:e,backend:t}=n,{real:r,imag:s}=e,i=t.makeTensorInfo(r.shape,"complex64"),o=t.texData.get(i.dataId),a=identity({inputs:{x:r},backend:t}),l=identity({inputs:{x:s},backend:t});return o.complexTensorInfos={real:a,imag:l},i}const complexConfig={kernelName:Complex,backendName:"webgl",kernelFunc:complex};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LEAKYRELU="return (a < 0.) ? b * a : a;",LEAKYRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function leakyRelu(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{alpha:i}=r,o=t.makeTensorInfo([],"float32",createScalarValue(i,"float32")),a=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(LEAKYRELU_PACKED,s.shape,o.shape):new BinaryOpProgram(LEAKYRELU,s.shape,o.shape),l=t.runWebGLProgram(a,[s,o],"float32");return t.disposeIntermediateTensorInfo(o),l}const leakyReluConfig={kernelName:LeakyRelu,backendName:"webgl",kernelFunc:leakyRelu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PRELU="return (a < 0.) ? b * a : a;",PRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function prelu(n){const{inputs:e,backend:t}=n,{x:r,alpha:s}=e,i=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(PRELU_PACKED,r.shape,s.shape):new BinaryOpProgram(PRELU,r.shape,s.shape);return t.runWebGLProgram(i,[r,s],"float32")}const preluConfig={kernelName:Prelu,backendName:"webgl",kernelFunc:prelu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_UNARY="if (isnan(x)) return x;";function unaryKernelFunc({opSnippet:n,packedOpSnippet:e,cpuKernelImpl:t,dtype:r}){return({inputs:s,backend:i})=>{const{x:o}=s,a=i,l=r||o.dtype;if(a.shouldExecuteOnCPU([o])&&t!=null){const h=a.texData.get(o.dataId),d=t(h.values,l);return a.makeTensorInfo(o.shape,l,d)}const c=env().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null;let u;return c?u=new UnaryOpPackedProgram(o.shape,e):u=new UnaryOpProgram(o.shape,n),a.runWebGLProgram(u,[o],l)}}function binaryKernelFunc({opSnippet:n,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:i}){return({inputs:o,backend:a})=>{const{a:l,b:c}=o,u=a;if(r&&l.dtype==="complex64"){const x=u.texData.get(l.dataId),y=u.texData.get(c.dataId),[w,$]=[[x.complexTensorInfos.real,y.complexTensorInfos.real],[x.complexTensorInfos.imag,y.complexTensorInfos.imag]].map(_=>{const[T,k]=_,P={dataId:T.dataId,dtype:T.dtype,shape:l.shape},L={dataId:k.dataId,dtype:k.dtype,shape:c.shape},D=new BinaryOpProgram(n,l.shape,c.shape);return u.runWebGLProgram(D,[P,L],upcastType(T.dtype,k.dtype))}),S=complex({inputs:{real:w,imag:$},backend:u});return u.disposeIntermediateTensorInfo(w),u.disposeIntermediateTensorInfo($),S}const h=i||upcastType(l.dtype,c.dtype);if((l.dtype==="string"||c.dtype==="string"||u.shouldExecuteOnCPU([l,c]))&&s!=null){const x=u.texData.get(l.dataId).values,y=u.texData.get(c.dataId).values,w=l.dtype==="string"?fromUint8ToStringArray(x):x,$=l.dtype==="string"?fromUint8ToStringArray(y):y,[S,_]=s(l.shape,c.shape,w,$,h),T=u.makeTensorInfo(_,h),k=u.texData.get(T.dataId);return k.values=S,T}const d=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null;let g;return d?g=new BinaryOpPackedProgram(e,l.shape,c.shape,t):g=new BinaryOpProgram(n,l.shape,c.shape),u.runWebGLProgram(g,[l,c],h)}}function mapActivationToShaderProgram(n,e=!1){if(n==="linear")return e?LINEAR:LINEAR$1;if(n==="relu")return e?RELU$1:RELU$2;if(n==="elu")return e?ELU$1:ELU$2;if(n==="relu6")return e?RELU6$1:RELU6$2;if(n==="prelu")return e?PRELU_PACKED:PRELU;if(n==="leakyrelu")return e?LEAKYRELU_PACKED:LEAKYRELU;if(n==="sigmoid")return e?SIGMOID$1:SIGMOID$2;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MatMulPackedProgram{constructor(e,t,r,s=!1,i=!1,o=!1,a=null,l=!1,c=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const u=s?e[1]:e[2],h=Math.ceil(u/2),d=s?"i * 2, rc.y":"rc.y, i * 2",g=i?"rc.z, i * 2":"i * 2, rc.z",x=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],y=i?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let w="",$="";a&&(l?w=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:c?w=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:w=`vec4 activation(vec4 x) {
          ${a}
        }`,$="result = activation(result);");const S=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha");let _="rc.x",T="rc.x";e[0]<t[0]?_=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(T=`imod(rc.x, ${t[0]})`),this.userCode=`
      ${w}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${_};
        int batchB = ${T};
        for (int i = 0; i < ${h}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${g});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${x[0]} * ${y[0]});
          result += (${x[1]} * ${y[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${S}

        ${$}

        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COMPLEX_MULTIPLY={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class BinaryOpComplexProgram{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=assertAndGetBroadcastShape(t,r),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MUL="return a * b;";function multiply$1(n){const{inputs:e,backend:t}=n,{a:r,b:s}=e,i=upcastType(r.dtype,s.dtype);if(r.dtype==="complex64"){const a=t.texData.get(r.dataId),l=t.texData.get(s.dataId),c=new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL,r.shape,s.shape),u=new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG,r.shape,s.shape),h=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:r.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:s.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:s.shape}],d=t.runWebGLProgram(c,h,"float32"),g=t.runWebGLProgram(u,h,"float32"),x=complex({inputs:{real:d,imag:g},backend:t});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),x}if(t.shouldExecuteOnCPU([r,s])){const a=t.texData.get(r.dataId),l=t.texData.get(s.dataId),[c,u]=multiplyImplCPU(r.shape,s.shape,a.values,l.values,i),h=t.makeTensorInfo(u,i),d=t.texData.get(h.dataId);return d.values=c,h}let o;return env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?o=new BinaryOpPackedProgram(MUL,r.shape,s.shape):o=new BinaryOpProgram(MUL,r.shape,s.shape),t.runWebGLProgram(o,[r,s],i)}const multiplyConfig={kernelName:Multiply$1,backendName:"webgl",kernelFunc:multiply$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function packedReshape(n,e,t){const r=[getBatchDim(n.shape),...getRowsCols(n.shape)],s={dtype:n.dtype,shape:r,dataId:n.dataId},i=[getBatchDim(e),...getRowsCols(e)],o=new ReshapePackedProgram(i,r),a=!0,l=[r],c=t.runWebGLProgram(o,[s],n.dtype,l,a);return{dataId:c.dataId,shape:e,dtype:c.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{shape:i}=r,o=t,a=sizeFromShape(s.shape),l=inferFromImplicitShape(i,a),c=sizeFromShape(l);assert$1(a===c,()=>`The new shape (${l}) has ${c} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);const u=o.texData.get(s.dataId);return u.isPacked&&!isReshapeFree(s.shape,l)&&!(u.texture!==null&&isReshapeFree(u.shape,l))?packedReshape(s,l,o):(o.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype})}const reshapeConfig={kernelName:Reshape$1,backendName:"webgl",kernelFunc:reshape};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MeanProgram{constructor(e,t){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:i,outSize:o}=e;this.outputShape=[s,o];const a=Math.floor(r/4)*4,l=r%4;let c="sumValue += dot(values, ones);";if(t!=null){const h=1/t;c=`sumValue += dot(values * ${isInt(h)?h.toPrecision(2):h}, ones);`}let u="";i%r>0&&(u=`
        if (inIdx < 0 || inIdx >= ${i}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReduceProgram{constructor(e,t){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:i,outSize:o}=e;this.outputShape=[s,o];let a="0.0",l="";t==="prod"?a="1.0":t==="min"?(a="1.0 / 1e-20",l="min"):t==="max"&&(a="-1.0 / 1e-20",l="max");let c=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?c="sumValue":t==="prod"?c="prodValue":t==="all"?c="allValue":t==="any"&&(c="anyValue");const u=Math.floor(r/4)*4,h=r%4;let d=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,g="vec4";t==="all"?(a="1.0",d=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,g="bvec4"):t==="any"&&(a="0.0",d=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,g="bvec4");let x="";i%r>0&&(x=`
        if (inIdx < 0 || inIdx >= ${i}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${x}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${g} values = ${g}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h===1}) {
          ${g} values = ${g}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h===2}) {
          ${g} values = ${g}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h===3}) {
          ${g} values = ${g}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReductionStages(n){const e=[];for(;e.length===0||e[e.length-1].outSize!==1;){const t=e.length?e[e.length-1].outSize:n[1],r=computeOptimalWindowSize(t);e.push({inSize:t,windowSize:r,outSize:Math.ceil(t/r)})}return e}function reduce(n,e,t,r){const s=getReductionStages(n.shape);let i=n;for(let o=0;o<s.length;o++){const{inSize:a,windowSize:l,outSize:c}=s[o];let u,h;t==="mean"?u=o===0?new MeanProgram({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:c},a):new MeanProgram({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:c}):u=new ReduceProgram({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:c},t),h=i,i=r.runWebGLProgram(u,[i],e),h.dataId!==n.dataId&&r.disposeIntermediateTensorInfo(h)}return i}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposeProgram{constructor(e,t){this.variableNames=["A"];const r=new Array(e.length);for(let o=0;o<r.length;o++)r[o]=e[t[o]];this.outputShape=r,this.rank=r.length;const s=getCoordsDataType(this.rank),i=getSwitchedCoords(t);this.userCode=`
    void main() {
      ${s} resRC = getOutputCoords();
      setOutput(getA(${i}));
    }
    `}}function getSwitchedCoords(n){const e=n.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let s=0;s<n.length;s++)r[n[s]]=t[s];return r.join()}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const r=new Array(e.length);for(let u=0;u<r.length;u++)r[u]=e[t[u]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=getCoordsDataType(this.rank),i=getVecChannels("rc",this.rank),o=new Array(this.rank);for(let u=0;u<t.length;u++)o[t[u]]=i[u];const a=`vec2(${o.slice(-2).join()})`,l=`++${i[this.rank-1]} < ${r[this.rank-1]}`,c=`getChannel(getA(${o.join()}), ${a})`;this.userCode=`
    void main() {
      ${s} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${i[this.rank-1]};
      if(++${i[this.rank-2]} < ${r[this.rank-2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl(n,e,t){const r=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TransposePackedProgram(n.shape,e):new TransposeProgram(n.shape,e);return t.runWebGLProgram(r,[n],n.dtype)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sumImpl(n,e,t,r){const s=e,i=n.shape.length,o=parseAxisParam(s,n.shape);let a=o;const l=getAxesPermutation(a,i),c=l!=null;let u=n;c&&(u=transposeImpl(n,l,r),a=getInnerMostAxes(a.length,i)),assertAxesAreInnerMostDims("sum",a,i);const[h,d]=computeOutAndReduceShapes(u.shape,a);let g=h;t&&(g=expandShapeToKeepDim(h,o));const x=sizeFromShape(d),w=sizeFromShape(n.shape)/x,$=reshape({inputs:{x:u},attrs:{shape:[w,x]},backend:r}),S=sumOutType(n.dtype),_=reduce($,S,"sum",r),T=reshape({inputs:{x:_},attrs:{shape:g},backend:r});return r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(_),c&&r.disposeIntermediateTensorInfo(u),T}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$1(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r;return sumImpl(s,i,o,t)}const sumConfig={kernelName:Sum,backendName:"webgl",kernelFunc:sum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{perm:i}=r,o=t,a=s.shape.length,l=new Array(a);for(let u=0;u<l.length;u++)l[u]=s.shape[i[u]];let c;if(o.shouldExecuteOnCPU([s])){const h=o.texData.get(s.dataId).values,d=transposeImplCPU(h,s.shape,s.dtype,i,l);c=o.makeTensorInfo(l,s.dtype);const g=o.texData.get(c.dataId);g.values=d}else c=transposeImpl(s,i,o);return c}const transposeConfig={kernelName:Transpose,backendName:"webgl",kernelFunc:transpose};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MATMUL_SHARED_DIM_THRESHOLD=1e3;function batchMatMulImpl({a:n,b:e,transposeA:t,transposeB:r,backend:s,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:l=null}){const c=n.shape.length,u=e.shape.length,h=t?n.shape[c-2]:n.shape[c-1],d=r?e.shape[u-1]:e.shape[u-2],g=t?n.shape[c-1]:n.shape[c-2],x=r?e.shape[u-2]:e.shape[u-1],y=n.shape.slice(0,-2),w=e.shape.slice(0,-2),$=sizeFromShape(y),S=sizeFromShape(w),T=assertAndGetBroadcastShape(n.shape.slice(0,-2),e.shape.slice(0,-2)).concat([g,x]);assert$1(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${r} must match.`);const k=t?[$,h,g]:[$,g,h],P=r?[S,x,d]:[S,d,x],L=reshape({inputs:{x:n},backend:s,attrs:{shape:k}}),D=reshape({inputs:{x:e},backend:s,attrs:{shape:P}}),M=[L,D],O=Math.max($,S),R=t?L.shape[1]:L.shape[2],z=i!=null,X=o!=null,K=l==="leakyrelu",Y=l!=null?mapActivationToShaderProgram(l,!0):null,te=z||X||K||Y!=null;let ie;if((g===1||x===1)&&R>MATMUL_SHARED_DIM_THRESHOLD&&te===!1){let se=L,le=D;t&&(se=transpose({inputs:{x:L},backend:s,attrs:{perm:[0,2,1]}}),M.push(se)),r&&(le=transpose({inputs:{x:D},backend:s,attrs:{perm:[0,2,1]}}),M.push(le));const he=x!==1,re=x===1;let fe=se;he&&(fe=reshape({inputs:{x:se},backend:s,attrs:{shape:[O,R,1]}}),M.push(fe));const ge=x===1?2:1;let j=le;re&&(j=reshape({inputs:{x:le},backend:s,attrs:{shape:[O,1,R]}}),M.push(j));const xe=multiply$1({inputs:{a:fe,b:j},backend:s});ie=sum$1({inputs:{x:xe},backend:s,attrs:{axis:ge,keepDims:!0}}),M.push(xe)}else{const se=upcastType(n.dtype,e.dtype),le=new MatMulPackedProgram(k,P,[O,g,x],t,r,z,Y,X,K),he=[L,D];if(i!=null&&he.push(i),X&&he.push(o),K){const re=s.makeTensorInfo([],"float32",createScalarValue(a,"float32"));he.push(re),M.push(re)}ie=s.runWebGLProgram(le,he,se)}const Q=reshape({inputs:{x:ie},backend:s,attrs:{shape:T}});M.push(ie);for(const se of M)s.disposeIntermediateTensorInfo(se);return Q}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:i,bias:o,preluActivationWeights:a}=e,{transposeA:l,transposeB:c,activation:u,leakyreluAlpha:h}=r;return batchMatMulImpl({a:s,b:i,transposeA:l,transposeB:c,backend:t,bias:o,preluActivationWeights:a,leakyreluAlpha:h,activation:u})}const _fusedMatMulConfig={kernelName:_FusedMatMul,backendName:"webgl",kernelFunc:_fusedMatMul};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ABS="return abs(x);";function abs$1(n){const{inputs:e,backend:t}=n,{x:r}=e;if(t.shouldExecuteOnCPU([r])&&r.dtype!=="complex64"){const i=t.texData.get(r.dataId),o=simpleAbsImplCPU(i.values);return t.makeTensorInfo(r.shape,r.dtype,o)}let s;return env().getBool("WEBGL_PACK_UNARY_OPERATIONS")?s=new UnaryOpPackedProgram(r.shape,ABS):s=new UnaryOpProgram(r.shape,ABS),t.runWebGLProgram(s,[r],r.dtype)}const absConfig={kernelName:Abs,backendName:"webgl",kernelFunc:abs$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOS=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,acos=unaryKernelFunc({opSnippet:ACOS}),acosConfig={kernelName:Acos,backendName:"webgl",kernelFunc:acos};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOSH=CHECK_NAN_SNIPPET$1+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,acosh=unaryKernelFunc({opSnippet:ACOSH}),acoshConfig={kernelName:Acosh,backendName:"webgl",kernelFunc:acosh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ADD="return a + b;",addKernelFunc=binaryKernelFunc({opSnippet:ADD,packedOpSnippet:ADD,supportsComplex:!0,cpuKernelImpl:addImplCPU}),addConfig={kernelName:Add$1,backendName:"webgl",kernelFunc:addKernelFunc};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNProgram{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((i,o)=>`T${o}`);const r=[];this.variableNames.forEach(i=>{r.push(`float v${i} = get${i}AtOutCoords();`)});const s=this.variableNames.map(i=>`v${i}`).join(" + ");this.userCode=`
      void main() {
        ${r.join(`
        `)}

        float result = ${s};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNPackedProgram{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((i,o)=>`T${o}`);const r=[];this.variableNames.forEach(i=>{r.push(`vec4 v${i} = get${i}AtOutCoords();`)});const s=this.variableNames.map(i=>`v${i}`).join(" + ");this.userCode=`
      void main() {
        ${r.join(`
        `)}

        vec4 result = ${s};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN(n){const{inputs:e,backend:t}=n,r=e;if(r.length===1)return identity({inputs:{x:r[0]},backend:t});if(r.length>env().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(r.length/2),c=addN({inputs:r.slice(0,l),backend:t}),u=addN({inputs:r.slice(l),backend:t});return addN({inputs:[c,u],backend:t})}const s=r.map(l=>l.dtype).reduce((l,c)=>upcastType(l,c)),i=r.map(l=>l.shape),a=env().getBool("WEBGL_PACK")?new AddNPackedProgram(r[0].shape,i):new AddNProgram(r[0].shape,i);return t.runWebGLProgram(a,r,s)}const addNConfig={kernelName:AddN,backendName:"webgl",kernelFunc:addN};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,l=parseAxisParam(i,s.shape);let c=l;const u=getAxesPermutation(c,a);let h=s;u!=null&&(h=transpose({inputs:{x:s},backend:t,attrs:{perm:u}}),c=getInnerMostAxes(c.length,a)),assertAxesAreInnerMostDims("all",c,a);const[d,g]=computeOutAndReduceShapes(h.shape,c),x=sizeFromShape(g),y=reshape({inputs:{x:h},backend:t,attrs:{shape:[-1,x]}}),w=reduce(y,y.dtype,"all",t);let $;if(o){const S=expandShapeToKeepDim(d,l);$=reshape({inputs:{x:w},backend:t,attrs:{shape:S}})}else $=reshape({inputs:{x:w},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(w),u!=null&&t.disposeIntermediateTensorInfo(h),$}const allConfig={kernelName:All,backendName:"webgl",kernelFunc:all};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,l=parseAxisParam(i,s.shape);let c=l;const u=getAxesPermutation(c,a);let h=s;u!=null&&(h=transpose({inputs:{x:s},backend:t,attrs:{perm:u}}),c=getInnerMostAxes(c.length,a)),assertAxesAreInnerMostDims("any",c,a);const[d,g]=computeOutAndReduceShapes(h.shape,c),x=sizeFromShape(g),y=reshape({inputs:{x:h},backend:t,attrs:{shape:[-1,x]}}),w=reduce(y,y.dtype,"any",t);let $;if(o){const S=expandShapeToKeepDim(d,l);$=reshape({inputs:{x:w},backend:t,attrs:{shape:S}})}else $=reshape({inputs:{x:w},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(w),u!=null&&t.disposeIntermediateTensorInfo(h),$}const anyConfig={kernelName:Any,backendName:"webgl",kernelFunc:any};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxProgram{constructor(e,t,r){this.variableNames=["A"];const{windowSize:s,batchSize:i,outSize:o}=e;r||this.variableNames.push("bestIndicesA"),this.outputShape=[i,o];const a=t==="max"?">":"<",l=r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${s}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxPackedProgram{constructor(e,t,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,assert$1(e.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);const i=e[e.length-1],o=Math.ceil(i/t);this.outputShape=e.slice(0,-1),o>1&&this.outputShape.push(o),s||this.variableNames.push("bestIndicesA");const a=this.outputShape,l=a.length,c=getCoordsDataType(l),u=getChannels("coords",l);let h,d;if(o===1){d=l+1;const D=getCoordsDataType(d);h=`
        ${D} sourceLocR = ${D}(${u.join()}, 0);
        ++${u[l-1]};
        ${D} sourceLocG = ${D}(${u.join()}, 0);
        ++${u[l-2]};
        ${D} sourceLocA = ${D}(${u.join()}, 0);
        --${u[l-1]};
        ${D} sourceLocB = ${D}(${u.join()}, 0);
        --${u[l-2]};`}else d=l,h=`
        ${c} sourceLocR = coords;
        ++${u[l-1]};
        ${c} sourceLocG = coords;
        ++${u[l-2]};
        ${c} sourceLocA = coords;
        --${u[l-1]};
        ${c} sourceLocB = coords;
        --${u[l-2]};`;const g=["x","y","z","w","u","v"].slice(0,d),x="."+g[d-1],y=g.map(D=>"int "+D),w=getChannels("sourceLocR",d-1).concat("inIdx.r"),$=getChannels("sourceLocG",d-1).concat("inIdx.g"),S=getChannels("sourceLocB",d-1).concat("inIdx.b"),_=getChannels("sourceLocA",d-1).concat("inIdx.a"),T=r==="max"?"greaterThan":"lessThan",k=s?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${w.join()}),
                             getBestIndicesAChannel(${$.join()}),
                             getBestIndicesAChannel(${S.join()}),
                             getBestIndicesAChannel(${_.join()})));`,P=`vec4(
            getAChannel(${w.join()}),
            hasNextCol ? getAChannel(${$.join()}) : 0.,
            hasNextRow ? getAChannel(${S.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${_.join()}) : 0.)`,L=s?"":`
      float getBestIndicesAChannel(${y.join()}) {
        return getChannel(getBestIndicesA(${g.join()}),
                                          vec2(${g.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${y.join()}) {
        return getChannel(getA(${g.join()}),
                               vec2(${g.slice(-2).join()}));
      }
      ${L}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${u[l-2]} < ${a[l-2]-1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${x}, sourceLocG${x},
          sourceLocB${x}, sourceLocA${x}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${P};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${P};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${T}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argReduce(n,e,t,r=null){let s=e.shape[0],i=e.shape[1];r!=null&&(s=r.shape[0],i=r.shape[1]);const o=computeOptimalWindowSize(i),a={windowSize:o,inSize:i,batchSize:s,outSize:Math.ceil(i/o)},l=new ArgMinMaxProgram(a,t,r==null),c=[e];r!=null&&c.push(r);const u=n.runWebGLProgram(l,c,"int32");if(u.shape[1]===1)return u;const h=argReduce(n,e,t,u);return n.disposeIntermediateTensorInfo(u),h}function argReducePacked(n,e,t,r=null){const s=r!=null?r.shape:e.shape,i=s[s.length-1],o=computeOptimalWindowSize(i),a=new ArgMinMaxPackedProgram(s,o,t,r==null),l=r==null?[e]:[e,r],c=n.runWebGLProgram(a,l,"int32");if(c.shape.length===e.shape.length){const u=argReducePacked(n,e,t,c);return n.disposeIntermediateTensorInfo(c),u}return c}function argMinMaxReduce(n,e,t,r){const s=[t];if(assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,e.shape.length),!env().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){const i=[],o=n.texData.get(e.dataId),a=o!==null&&o.isPacked;let l=e;a&&(l=n.unpackTensor(e),i.push(l));const[c,u]=computeOutAndReduceShapes(l.shape,s),h=sizeFromShape(u),d=reshape({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});i.push(d);const g=argReduce(n,d,r);i.push(g);const x=reshape({inputs:{x:g},backend:n,attrs:{shape:c}});return i.forEach(y=>n.disposeIntermediateTensorInfo(y)),x}return argReducePacked(n,e,r)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i}=r;let o=parseAxisParam(i,s.shape);const a=getAxesPermutation(o,s.shape.length);let l=s;const c=[];a!=null&&(l=transpose({inputs:{x:s},backend:t,attrs:{perm:a}}),c.push(l),o=getInnerMostAxes(o.length,l.shape.length)),assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const u=argMinMaxReduce(t,l,o[0],"max");return c.forEach(h=>t.disposeIntermediateTensorInfo(h)),u}const argMaxConfig={kernelName:ArgMax,backendName:"webgl",kernelFunc:argMax};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i}=r;let o=parseAxisParam(i,s.shape);const a=getAxesPermutation(o,s.shape.length);let l=s;const c=[];a!=null&&(l=transpose({inputs:{x:s},backend:t,attrs:{perm:a}}),c.push(l),o=getInnerMostAxes(o.length,l.shape.length)),assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const u=argMinMaxReduce(t,l,o[0],"min");return c.forEach(h=>t.disposeIntermediateTensorInfo(h)),u}const argMinConfig={kernelName:ArgMin,backendName:"webgl",kernelFunc:argMin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASIN=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,asin=unaryKernelFunc({opSnippet:ASIN}),asinConfig={kernelName:Asin,backendName:"webgl",kernelFunc:asin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASINH=CHECK_NAN_SNIPPET$1+"return log(x + sqrt(x * x + 1.0));",asinh=unaryKernelFunc({opSnippet:ASINH}),asinhConfig={kernelName:Asinh,backendName:"webgl",kernelFunc:asinh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN=CHECK_NAN_SNIPPET$1+`
  return atan(x);
`,atan=unaryKernelFunc({opSnippet:ATAN}),atanConfig={kernelName:Atan,backendName:"webgl",kernelFunc:atan};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN2=CHECK_NAN_SNIPPET+`
  return atan(a, b);
`,ATAN2_PACKED=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,atan2=binaryKernelFunc({opSnippet:ATAN2,packedOpSnippet:ATAN2_PACKED}),atan2Config={kernelName:Atan2,backendName:"webgl",kernelFunc:atan2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATANH=CHECK_NAN_SNIPPET$1+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,atanh=unaryKernelFunc({opSnippet:ATANH}),atanhConfig={kernelName:Atanh,backendName:"webgl",kernelFunc:atanh};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Pool2DProgram{constructor(e,t,r,s=!1,i=!1){if(this.variableNames=["x"],t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,a=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const y=t==="avg",w=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,$=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let S="0.0";if(y||(S="-1.0 / 1e-20"),r){const D=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${g}, ${x});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${D} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${s?i?w:$:`wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const _="max";let T=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(T="avgValue / max(count, 1.0)");const k=Math.floor(o/4)*4,P=o%4,L=`
      if (${y}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${_}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${g}, ${x});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${L}
          }

          int xC = xCCorner + ${k};
          if (${P===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${L}
          } else if (${P===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${L}
          } else if (${P===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${L}
          }
        }
        setOutput(${T});
      }
    `}}class Pool3DProgram{constructor(e,t,r,s=!1,i=!1){if(this.variableNames=["x"],t==="avg"&&r)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,a=e.strideDepth,l=e.strideHeight,c=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,d=e.dilationWidth,g=e.effectiveFilterDepth,x=e.effectiveFilterHeight,y=e.effectiveFilterWidth,w=e.padInfo.front,$=e.padInfo.top,S=e.padInfo.left;this.outputShape=e.outShape;const _=t==="avg";let T="0.0";if(_||(T="-1.0 / 1e-20"),r){const O=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${w}, ${$}, ${S});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${g};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${x};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${y};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${O} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${s?i?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${x} * ${y} +
                      wR * ${y} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const k="max";let P=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(P="avgValue / max(count, 1.0)");const L=Math.floor(o/4)*4,D=o%4,M=`
      if (${_}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${w}, ${$}, ${S});
      const float initializationValue = ${T};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${T});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${g};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${x};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${L}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${M}
            }

            int xC = xCCorner + ${L};
            if (${D===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${M}
            } else if (${D===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${M}
            } else if (${D===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${M}
            }
          }
        }
        setOutput(${P});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex(s,"avgPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:l}=r,c=1;assert$1(eitherStridesOrDilationsAreOne(o,c),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const u=computePool2DInfo(s.shape,i,o,c,a,l);if(u.filterWidth===1&&u.filterHeight===1&&arraysEqual(u.inShape,u.outShape))return identity({inputs:{x:s},backend:t});const h=new Pool2DProgram(u,"avg",!1);return t.runWebGLProgram(h,[s],"float32")}const avgPoolConfig={kernelName:AvgPool,backendName:"webgl",kernelFunc:avgPool};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:l,dataFormat:c}=r,u=[1,1,1],h=computePool3DInfo(s.shape,i,o,u,a,l,c),d=new Pool3DProgram(h,"avg",!1);return t.runWebGLProgram(d,[s],"float32")}const avgPool3DConfig={kernelName:AvgPool3D,backendName:"webgl",kernelFunc:avgPool3D};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AvgPool2DBackpropProgram{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,i=e.strideWidth,o=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterHeight,c=e.effectiveFilterWidth,u=l-1-e.padInfo.top,h=c-1-e.padInfo.left,d=1/(t*r);this.userCode=`
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${i}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class AvgPool3DBackpropProgram{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,i=e.strideDepth,o=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,g=e.effectiveFilterWidth,x=h-1-e.padInfo.front,y=d-1-e.padInfo.top,w=g-1-e.padInfo.left,$=1/(t*r*s);this.userCode=`
      const ivec3 pads = ivec3(${x}, ${y}, ${w});
      const float avgMultiplier = float(${$});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${i}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${g};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,o=i,{filterSize:a,strides:l,pad:c,dimRoundingMode:u}=r,h=[1,1,1],d=computePool3DInfo(o.shape,a,l,h,c,u),g=new AvgPool3DBackpropProgram(d);return t.runWebGLProgram(g,[s],o.dtype)}const avgPool3DGradConfig={kernelName:AvgPool3DGrad,backendName:"webgl",kernelFunc:avgPool3DGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,o=i;assertNotComplex([s,i],"avgPoolGrad");const{filterSize:a,strides:l,pad:c}=r,u=computePool2DInfo(o.shape,a,l,1,c),h=new AvgPool2DBackpropProgram(u);return t.runWebGLProgram(h,[s],o.dtype)}const avgPoolGradConfig={kernelName:AvgPoolGrad,backendName:"webgl",kernelFunc:avgPoolGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul(n){const{inputs:e,backend:t,attrs:r}=n,{a:s,b:i}=e,{transposeA:o,transposeB:a}=r;return batchMatMulImpl({a:s,b:i,transposeA:o,transposeB:a,backend:t})}const batchMatMulConfig={kernelName:BatchMatMul,backendName:"webgl",kernelFunc:batchMatMul};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormProgram{constructor(e,t,r,s,i,o){this.outputShape=[],this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape(e,t),assertAndGetBroadcastShape(e,r);let a="0.0";s!=null&&(assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";i!=null&&(assertAndGetBroadcastShape(e,i),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${o}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormPackedProgram{constructor(e,t,r,s,i,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape(e,t),assertAndGetBroadcastShape(e,r);let a="vec4(0.0)";s!=null&&(assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";i!=null&&(assertAndGetBroadcastShape(e,i),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${o}));

        setOutput((x - mean) * inv + offset);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchNorm=({inputs:n,backend:e,attrs:t})=>{const{x:r,mean:s,variance:i,offset:o,scale:a}=n;assert$1(s.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$1(o==null||s.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$1(a==null||s.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=t;l==null&&(l=.001);const c=[r,s,i];let u=null;o!=null&&(u=o.shape,c.push(o));let h=null;a!=null&&(h=a.shape,c.push(a));const d=env().getBool("WEBGL_PACK_NORMALIZATION")?new BatchNormPackedProgram(r.shape,s.shape,i.shape,u,h,l):new BatchNormProgram(r.shape,s.shape,i.shape,u,h,l);return e.runWebGLProgram(d,c,c[0].dtype)},batchNormConfig={kernelName:FusedBatchNorm,backendName:"webgl",kernelFunc:batchNorm};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SliceProgram{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=getCoordsDataType(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const r=getCoords$1(this.rank);let s;const i=e.map((o,a)=>`sourceLoc.${coords[a]} = start[${a}] + coords.${coords[a]};`);s=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${i.join(`
`)}
      `,this.userCode=`
      void main() {
        ${s}
        setOutput(getSource(${r}));
      }
    `}}const coords=["x","y","z","w","u","v"];function getCoords$1(n){if(n===1)return"sourceLoc";if(n<=6)return coords.slice(0,n).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SlicePackedProgram{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=getCoordsDataType(this.rank),r=getChannels("coords",this.rank),s=getChannels("sourceLoc",this.rank),i=this.rank===1?"sourceLoc":`vec2(${s.slice(-2).join()})`,o=`getChannel(getSource(${s.join()}), ${i})`,a=`
      result.x = ${o};
      if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
        ++${s[this.rank-1]};
        result.y = ${o};
        --${s[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${r[this.rank-1]};
      if (++${r[this.rank-2]} < ${e[this.rank-2]}) {
        ++${s[this.rank-2]};
        result.z = ${o};
        if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
          ++${s[this.rank-1]};
          result.w = ${o};
        }
      }
    `,c=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((u,h)=>`start[${h}]`).join()});`:e.map((u,h)=>`${s[h]} = ${r[h]} + start[${h}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shallowSlice(n,e,t,r){const s=r.texData.get(n.dataId),i=r.makeTensorInfo(t,n.dtype),o=r.texData.get(i.dataId);Object.assign(o,s),o.refCount=1,o.shape=t,o.dtype=n.dtype;let a=computeFlatOffset(e,computeStrides(n.shape));s.slice&&(a+=s.slice.flatOffset),o.slice={flatOffset:a,origDataId:s.slice&&s.slice.origDataId||n.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),i}function slice(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:i,size:o}=r,[a,l]=parseSliceParams(s,i,o);if(assertParamsValid(s,a,l),sizeFromShape(l)===0)return t.makeTensorInfo(l,s.dtype,[]);if(t.shouldExecuteOnCPU([s])||s.dtype==="string"){const h=t.texData.get(s.dataId),d=sliceImplCPU(h.values,a,l,s.shape,s.dtype);return t.makeTensorInfo(l,s.dtype,d)}const{isPacked:c}=t.texData.get(s.dataId),u=isSliceContinous(s.shape,a,l);if(c||!u){const h=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SlicePackedProgram(l):new SliceProgram(l),d=[a];return t.runWebGLProgram(h,[s],s.dtype,d)}return t.uploadToGPU(s.dataId),shallowSlice(s,a,l,t)}const sliceConfig={kernelName:Slice,backendName:"webgl",kernelFunc:slice};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceND=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:i,crops:o}=r;assert$1(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const a=i.reduce((S,_)=>S*_),l=getReshaped(s.shape,i,a),c=getPermuted(l.length,i.length),u=getReshapedPermuted(s.shape,i,a),h=getSliceBeginCoords(o,i.length),d=getSliceSize(u,o,i.length),g=[],x=reshape({inputs:{x:s},backend:t,attrs:{shape:l}}),y=transpose({inputs:{x},backend:t,attrs:{perm:c}}),w=reshape({inputs:{x:y},backend:t,attrs:{shape:u}}),$=slice({inputs:{x:w},backend:t,attrs:{begin:h,size:d}});return g.push(x),g.push(y),g.push(w),g.forEach(S=>t.disposeIntermediateTensorInfo(S)),$},batchToSpaceNDConfig={kernelName:BatchToSpaceND,backendName:"webgl",kernelFunc:batchToSpaceND};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:i}=e,{size:o}=r,a=t.readSync(s.dataId),l=t.readSync(i.dataId),c=bincountImplCPU(a,l,i.dtype,i.shape,o);return t.makeTensorInfo([o],i.dtype,c)}const bincountConfig={kernelName:Bincount,backendName:"webgl",kernelFunc:bincount};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs(n){const{inputs:e,backend:t}=n,{s0:r,s1:s}=e,i=t.readSync(r.dataId),o=t.readSync(s.dataId),a=assertAndGetBroadcastShape(Array.from(i),Array.from(o));return t.makeTensorInfo([a.length],"int32",Int32Array.from(a))}const broadcastArgsConfig={kernelName:BroadcastArgs,backendName:"webgl",kernelFunc:broadcastArgs};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NOT_EQUAL="return float(a != b);",notEqual=binaryKernelFunc({opSnippet:NOT_EQUAL,cpuKernelImpl:notEqualImplCPU,dtype:"bool"}),notEqualConfig={kernelName:NotEqual,backendName:"webgl",kernelFunc:notEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.texData.get(r.dataId);return identity({inputs:{x:s.complexTensorInfos.real},backend:t})}const realConfig={kernelName:Real,backendName:"webgl",kernelFunc:real};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TO_INT="return float(int(x));";function int(n,e){const t=new UnaryOpProgram(n.shape,TO_INT),r=e.runWebGLProgram(t,[n],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dtype:i}=r;if(i==="complex64"){if(s.dtype==="complex64")return identity({inputs:{x:s},backend:t});const o=zeros$1(s.shape),a=cast({inputs:{x:s},backend:t,attrs:{dtype:"float32"}}),l=complex({inputs:{real:a,imag:o},backend:t});return o.dispose(),t.disposeIntermediateTensorInfo(a),l}if(s.dtype==="complex64"){const o=real({inputs:{input:s},backend:t}),a=cast({inputs:{x:o},backend:t,attrs:{dtype:i}});return t.disposeIntermediateTensorInfo(o),a}if(!hasEncodingLoss(s.dtype,i)){const o=identity({inputs:{x:s},backend:t});return{dataId:o.dataId,shape:o.shape,dtype:i}}if(t.shouldExecuteOnCPU([s])){const o=t.texData.get(s.dataId).values,[a,l,c]=castImplCPU(o,s.shape,s.dtype,i);return t.makeTensorInfo(a,l,c)}if(i==="int32")return int(s,t);if(i==="bool"){const o=t.makeTensorInfo([],"bool",getTypedArrayFromDType("bool",1)),l=notEqual({inputs:{a:s,b:o},backend:t});return t.disposeIntermediateTensorInfo(o),l}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}const castConfig={kernelName:Cast,backendName:"webgl",kernelFunc:cast};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CEIL="return ceil(x);",ceil=unaryKernelFunc({opSnippet:CEIL,packedOpSnippet:CEIL,cpuKernelImpl:ceilImplCPU}),ceilConfig={kernelName:Ceil,backendName:"webgl",kernelFunc:ceil};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipProgram{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{clipValueMin:i,clipValueMax:o}=r;let a;env().getBool("WEBGL_PACK_CLIP")?a=new ClipPackedProgram(s.shape):a=new ClipProgram(s.shape);const l=[[i],[o]];return t.runWebGLProgram(a,[s],s.dtype,l)}const clipByValueConfig={kernelName:ClipByValue,backendName:"webgl",kernelFunc:clipByValue};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ComplexAbsProgram{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeComplexComponentTensorInfo(n,e){return{dataId:e.dataId,dtype:e.dtype,shape:n.shape}}function complexAbs(n){const{inputs:e,backend:t}=n,{x:r}=e,s=t.texData.get(r.dataId),i=new ComplexAbsProgram(r.shape),o=[makeComplexComponentTensorInfo(r,s.complexTensorInfos.real),makeComplexComponentTensorInfo(r,s.complexTensorInfos.imag)];return t.runWebGLProgram(i,o,o[0].dtype)}const complexAbsConfig={kernelName:ComplexAbs,backendName:"webgl",kernelFunc:complexAbs};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatProgram{constructor(e){this.outputShape=[],this.outputShape=computeOutShape$1(e,1),this.variableNames=e.map((o,a)=>`T${a}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let o=1;o<t.length;o++)t[o]=t[o-1]+e[o][1];const r=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let o=1;o<t.length;o++){const a=t[o-1];r.push(`else if (yC < ${t[o]}) setOutput(getT${o}(yR, yC-${a}));`)}const s=t.length,i=t[t.length-1];r.push(`else setOutput(getT${s}(yR, yC-${i}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${r.join(`
        `)}
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatPackedProgram{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=computeOutShape$1(e,t);const r=this.outputShape,s=r.length,i=getCoordsDataType(s),o=getChannels("coords",s),a=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((y,w)=>`T${w}`);const l=new Array(e.length-1);l[0]=e[0][t];for(let y=1;y<l.length;y++)l[y]=l[y-1]+e[y][t];const c=a[t],u=a.slice(-2),h=a.join();let d=`if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;for(let y=1;y<l.length;y++){const w=l[y-1];d+=`
        if (${c} < ${l[y]}  && ${c} >= ${l[y-1]}) {
          return getChannel(
            getT${y}(${shiftedChannels(a,c,w)}),
            vec2(${shiftedChannels(u,c,w)}));
        }`}const g=l.length,x=l[l.length-1];d+=`
        return getChannel(
          getT${g}(${shiftedChannels(a,c,x)}),
          vec2(${shiftedChannels(u,c,x)}));`,this.userCode=`
      float getValue(${a.map(y=>"int "+y)}) {
        ${d}
      }

      void main() {
        ${i} coords = getOutputCoords();
        vec4 result = vec4(getValue(${o}), 0., 0., 0.);

        ${o[s-1]} = ${o[s-1]} + 1;
        if (${o[s-1]} < ${r[s-1]}) {
          result.g = getValue(${o});
        }

        ${o[s-2]} = ${o[s-2]} + 1;
        if (${o[s-2]} < ${r[s-2]}) {
          result.a = getValue(${o});
        }

        ${o[s-1]} = ${o[s-1]} - 1;
        if (${o[s-2]} < ${r[s-2]} &&
            ${o[s-1]} < ${r[s-1]}) {
          result.b = getValue(${o});
        }
        setOutput(result);
      }
    `}}function shiftedChannels(n,e,t){const r=n.indexOf(e);return n.map((i,o)=>o===r?`${i} - ${t}`:i).join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag(n){const{inputs:e,backend:t}=n,{input:r}=e,s=t.texData.get(r.dataId);return identity({inputs:{x:s.complexTensorInfos.imag},backend:t})}const imagConfig={kernelName:Imag,backendName:"webgl",kernelFunc:imag};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl(n,e,t){const r=n[0].dtype;if(r==="complex64"){const g=n.map(S=>real({inputs:{input:S},backend:t})),x=n.map(S=>imag({inputs:{input:S},backend:t})),y=concatImpl(g,e,t),w=concatImpl(x,e,t),$=complex({inputs:{real:y,imag:w},backend:t});return g.forEach(S=>t.disposeIntermediateTensorInfo(S)),x.forEach(S=>t.disposeIntermediateTensorInfo(S)),t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(w),$}let s=t.shouldExecuteOnCPU(n);if(r==="string"&&(s=!0),s){const g=n.map(T=>{const P=[-1,sizeFromShape(T.shape.slice(e))];return reshape({inputs:{x:T},backend:t,attrs:{shape:P}})}),x=g.map(T=>({vals:t.readSync(T.dataId),shape:T.shape})),y=computeOutShape$1(g.map(T=>T.shape),1),w=g[0].shape[0]===1,$=concatImplCPU(x,y,r,w),S=computeOutShape$1(n.map(T=>T.shape),e),_=t.makeTensorInfo(S,r,$);return g.forEach(T=>t.disposeIntermediateTensorInfo(T)),_}const i=n.filter(g=>sizeFromShape(g.shape)>0),o=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&i[0].shape.length>1;if(i.length===1){const g=o?new UnaryOpProgram(n[0].shape,CLONE):new UnaryOpPackedProgram(n[0].shape,CLONE);return t.runWebGLProgram(g,n,r)}const a=env().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(i.length>a){const g=[];for(let y=0;y<i.length;y+=a){const w=i.slice(y,y+a);g.push(concatImpl(w,e,t))}const x=concatImpl(g,e,t);for(const y of g)t.disposeIntermediateTensorInfo(y);return x}if(o){const g=new ConcatPackedProgram(i.map(x=>x.shape),e);return t.runWebGLProgram(g,i,r)}const{tensors2D:l,outShape:c}=computeTensors2D(i,e,t),u=new ConcatProgram(l.map(g=>g.shape)),h=t.runWebGLProgram(u,l,r);l.forEach(g=>t.disposeIntermediateTensorInfo(g));const d=reshape({inputs:{x:h},attrs:{shape:c},backend:t});return t.disposeIntermediateTensorInfo(h),d}function computeTensors2D(n,e,t){const r=computeOutShape$1(n.map(i=>i.shape),e);return{tensors2D:n.map(i=>reshape({inputs:{x:i},attrs:{shape:[-1,sizeFromShape(i.shape.slice(e))]},backend:t})),outShape:r}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r,i=parseAxisParam(s,e[0].shape)[0],o=e.map(c=>c.shape);assertParamsConsistent(o,i);const a=computeOutShape$1(e.map(c=>c.shape),i);if(sizeFromShape(a)===0)return t.makeTensorInfo(a,e[0].dtype,[]);const l=e.filter(c=>sizeFromShape(c.shape)>0);return l.length===1?identity({inputs:{x:l[0]},backend:t}):concatImpl(l,i,t)}const concatConfig={kernelName:Concat,backendName:"webgl",kernelFunc:concat};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DProgram{constructor(e,t=!1,r=null,s=!1,i=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.padInfo.top,a=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,u=e.dilationHeight,h=e.dilationWidth,d=e.filterHeight,g=e.filterWidth,x=Math.floor(e.inChannels/4)*4,y=e.inChannels%4,w=e.dataFormat==="channelsLast",$=w?1:2,S=w?2:3,_=w?3:1;let T="",k="";r&&(s?T=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:i?T=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:T=`
          float activation(float x) {
            ${r}
          }
        `,k="result = activation(result);");const P=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),i&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${T}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${o}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${_}];

        ivec2 xRCCorner =
            ivec2(coords[${$}], coords[${S}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${g}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${x}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${w}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${y===1}) {

              if (${w}) {
                dotProd +=
                    getX(batch, xR, xC, ${x}) *
                    getW(wR, wC, ${x}, d2);
              } else {
                dotProd +=
                    getX(batch, ${x}, xR, xC) *
                    getW(wR, wC, ${x}, d2);
              }

            } else if (${y===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${x}, d2),
                getW(wR, wC, ${x} + 1, d2)
              );

              if (${w}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${x}),
                  getX(batch, xR, xC, ${x} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${x}, xR, xC),
                  getX(batch, ${x} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${y===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${x}, d2),
                getW(wR, wC, ${x} + 1, d2),
                getW(wR, wC, ${x} + 2, d2)
              );

              if (${w}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${x}),
                  getX(batch, xR, xC, ${x} + 1),
                  getX(batch, xR, xC, ${x} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${x}, xR, xC),
                  getX(batch, ${x} + 1, xR, xC),
                  getX(batch, ${x} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${P}
        ${k}
        setOutput(result);
      }
    `}}class Conv3DProgram{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,r=e.padInfo.top,s=e.padInfo.left,i=e.strideDepth,o=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,u=e.dilationWidth,h=e.filterDepth,d=e.filterHeight,g=e.filterWidth,x=Math.floor(e.inChannels/4)*4,y=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${i}, ${o}, ${a});
      const ivec3 pads = ivec3(${t}, ${r}, ${s});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${g}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${x}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${y===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${x}) *
                  getW(wF, wR, wC, ${x}, d2);
              } else if (${y===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${x}),
                  getX(batch, xF, xR, xC, ${x} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${x}, d2),
                  getW(wF, wR, wC, ${x} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${y===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${x}),
                  getX(batch, xF, xR, xC, ${x} + 1),
                  getX(batch, xF, xR, xC, ${x} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${x}, d2),
                  getW(wF, wR, wC, ${x} + 1, d2),
                  getW(wF, wR, wC, ${x} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DPackedProgram{constructor(e,t=!1,r=null,s=!1,i=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const o=e.padInfo.left,a=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,u=e.filterWidth,h=u;let d=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let w=0;w<u;w++)d+=`
           vec4 xTexelC${w*2};
           int xTexelC${w*2}Ready;
           vec4 xTexelC${w*2+1};
           int xTexelC${w*2+1}Ready;
           vec4 xC${w};`;d+=`
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let w=0;w<u;w++)d+=`
           xTexelC${w*2} = vec4(0.0);
           xTexelC${w*2}Ready = 0;
           xTexelC${w*2+1} = vec4(0.0);
           xTexelC${w*2+1}Ready = 0;
           xC${w} = vec4(0.0);`;d+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let w=0;w<(h+1)/2;w++){const $=w*2;if(d+=`
           xC = xCCorner + ${$*l};
           `,a===1){if($<u&&(o%2===1?(d+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }
               `,l===1&&$>0?d+=`
                 xC${$} = vec4(xTexelC${$-2}.zw, xTexelC${$}.xy);
                 `:d+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${$} = vec4(previous.zw, xTexelC${$}.xy);
                   } else {
                     xC${$} = vec4(0.0, 0.0, xTexelC${$}.xy);
                   }
                   `):d+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 xC${$} = xTexelC${$};
                 `,$+1<u)){const S=o%2===0?nearestLargerEven(l):l;l%2===0&&o%2===1||l%2!==0&&o%2!==1?(d+=`
                   xCOffset = xC + imod(pads[1], 2) + ${S};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                     xTexelC${$+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${$+1}.zw = vec2(0.0);
                     }
                     xTexelC${$+1}Ready = 1;
                   }
                   `,l>1?d+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${$+1} = vec4(previous.zw, xTexelC${$+1}.xy);
                     } else {
                      xC${$+1} = vec4(0.0, 0.0, xTexelC${$+1}.xy);
                     }
                     `:d+=`
                     xC${$+1} = vec4(xTexelC${$}.zw, xTexelC${$+1}.xy);
                     `):S===1?d+=`
                     xC${$+1} = xTexelC${$};
                     `:d+=`
                     xCOffset = xC + ${S};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                       xTexelC${$+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${$+1}.zw = vec2(0.0);
                       }
                       xTexelC${$+1}Ready = 1;
                     }

                     xC${$+1} = xTexelC${$+1};
                     `}}else $<u&&(o%2===1?(d+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${$+1}Ready == 0) {
                   xTexelC${$+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${$+1}.zw = vec2(0.0);
                   }
                   xTexelC${$+1}Ready = 1;
                 }

                 xC${$} = vec4(xTexelC${$}.zw, xTexelC${$+1}.zw);
               `,$+1<u&&(d+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${$+1} = vec4(xTexelC${$+1}.xy, final.xy);
                 `)):(d+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${$}Ready == 0) {
                   xTexelC${$} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${$}.zw = vec2(0.0);
                   }
                   xTexelC${$}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${$+1}Ready == 0) {
                   xTexelC${$+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${$+1}.zw = vec2(0.);
                   }
                   xTexelC${$+1}Ready = 1;
                 }

                 xC${$} = vec4(
                   xTexelC${$}.xy, xTexelC${$+1}.xy);
               `,$+1<u&&(d+=`
                   xC${$+1} = vec4(xTexelC${$}.zw, xTexelC${$+1}.zw);
                 `)));$<u&&(d+=`
             wTexel = getW(r, ${$}, d1, d2);
             dotProd += xC${$}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${$}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,$+1<u&&(d+=`
               wTexel = getW(r, ${$+1}, d1, d2);
               dotProd += xC${$+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${$+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}d+=`
     }
   `,d+=`
     }
   `,d+=`
     }
   `;let g="",x="";r&&(s?g=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${r}
         }`:i?g=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${r}
         }`:g=`vec4 activation(vec4 x) {
           ${r}
         }`,x="result = activation(result);");const y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),i&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${g}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${y}
         ${x}
         setOutput(result);
       }
     `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Im2ColPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const{dataFormat:r}=t,s=getGlslDifferences(),i=r==="channelsLast",o=i?1:2,a=i?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let c="";for(let u=0;u<=1;u++)for(let h=0;h<=1;h++)c+=`
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${o}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${i}) {
                  innerDims = vec2(d1, ch);
                  result[${u*2+h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u*2+h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${s.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getShapeForBatchMatMul(n,e){const t=n.length;return t>=3?e?[...n.slice(0,-3),n[t-3]*n[t-2],n[t-1]]:[...n.slice(0,-3),n[t-3],n[t-2]*n[t-1]]:!e&&t===1&&n[0]>1?[n[0],1]:null}function conv2dByMatMul({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:a=null}){const l=n.shape,c=r.texData.get(n.dataId),u=t.inChannels,h=l[0]*l[1]*l[2],d=t.outChannels,g=t.dataFormat==="channelsLast",x=!1,y=!1;let w;const $=[];if(i!=null){const T=getShapeForBatchMatMul(i.shape,g);T!=null&&(i=reshape({inputs:{x:i},backend:r,attrs:{shape:T}}),$.push(i))}if(s!=null){const T=getShapeForBatchMatMul(s.shape,g);T!=null&&(s=reshape({inputs:{x:s},backend:r,attrs:{shape:T}}),$.push(s))}if(!((h===1||d===1)&&u>MATMUL_SHARED_DIM_THRESHOLD)&&c.isPacked&&g&&c.texture!=null&&l[2]%2!==0&&arraysEqual(c.shape.slice(-3),l.slice(-3))){const T=l[0]*l[1]*(l[2]+1),k={dataId:n.dataId,shape:[1,T,t.inChannels],dtype:n.dtype},P=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,assert$1(isReshapeFree(c.shape,k.shape),()=>`packed reshape ${c.shape} to ${k.shape} isn't free`);const L=reshape({inputs:{x:e},backend:r,attrs:{shape:[1,t.inChannels,t.outChannels]}});$.push(L);const D=batchMatMulImpl({a:k,b:L,backend:r,transposeA:x,transposeB:y,bias:s,activation:a,preluActivationWeights:i,leakyreluAlpha:o}),M=r.texData.get(D.dataId);assert$1(M.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=P,M.shape=t.outShape,w=identity({inputs:{x:D},backend:r}),w.shape=t.outShape,$.push(D)}else{const T=t.outHeight*t.outWidth,k=reshape({inputs:{x:n},backend:r,attrs:{shape:g?[t.batchSize,T,t.inChannels]:[t.batchSize,t.inChannels,T]}}),P=reshape({inputs:{x:e},backend:r,attrs:{shape:[1,t.inChannels,t.outChannels]}}),L=batchMatMulImpl({a:g?k:P,b:g?P:k,transposeA:!g,transposeB:y,backend:r,bias:s,activation:a,preluActivationWeights:i,leakyreluAlpha:o});w=reshape({inputs:{x:L},backend:r,attrs:{shape:t.outShape}}),$.push(k),$.push(P),$.push(L)}for(const T of $)r.disposeIntermediateTensorInfo(T);return w}function conv2dWithIm2Row({x:n,filter:e,convInfo:t,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:a=null}){const{filterWidth:l,filterHeight:c,inChannels:u,outWidth:h,outHeight:d,dataFormat:g}=t,x=g==="channelsLast",y=l*c*u,w=d*h,$=[t.batchSize,y,w],S=!0,_=!1,T=[];if(i!=null){const Q=getShapeForBatchMatMul(i.shape,x);Q!=null&&(i=reshape({inputs:{x:i},backend:r,attrs:{shape:Q}}),T.push(i))}if(s!=null){const Q=getShapeForBatchMatMul(s.shape,x);Q!=null&&(s=reshape({inputs:{x:s},backend:r,attrs:{shape:Q}}),T.push(s))}const k=reshape({inputs:{x:e},backend:r,attrs:{shape:[1,y,sizeFromShape(e.shape)/y]}});T.push(k);const P=new Im2ColPackedProgram($,t),L=[n.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],D=r.runWebGLProgram(P,[n],"float32",L),M=reshape({inputs:{x:D},backend:r,attrs:{shape:$}});T.push(D),T.push(M);const O=s!=null,R=i!=null,z=a==="leakyrelu",X=a?mapActivationToShaderProgram(a,!0):null,K=new MatMulPackedProgram(x?M.shape:k.shape,x?k.shape:M.shape,x?[t.batchSize,w,t.outChannels]:[t.batchSize,t.outChannels,w],S,_,O,X,R,z),Y=x?[M,k]:[k,M];if(s&&Y.push(s),R&&Y.push(i),z){const Q=r.makeTensorInfo([],"float32",createScalarValue(o,"float32"));Y.push(Q),T.push(Q)}const te=r.runWebGLProgram(K,Y,"float32"),ie=reshape({inputs:{x:te},backend:r,attrs:{shape:t.outShape}});T.push(te);for(const Q of T)r.disposeIntermediateTensorInfo(Q);return ie}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dataFormat:l,dilations:c,dimRoundingMode:u}=r,h=convertConv2DDataFormat(l),d=computeConv2DInfo(s.shape,i.shape,o,c,a,u,!1,h);let g;if(d.filterHeight===1&&d.filterWidth===1&&d.dilationHeight===1&&d.dilationWidth===1&&d.strideHeight===1&&d.strideWidth===1&&(d.padInfo.type==="SAME"||d.padInfo.type==="VALID"))g=conv2dByMatMul({x:s,filter:i,convInfo:d,backend:t});else if(d.strideWidth<=2&&h==="channelsLast"&&env().getBool("WEBGL_EXP_CONV")){const y=new Conv2DPackedProgram(d),w=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];g=t.runWebGLProgram(y,[s,i],"float32",w)}else if(env().getBool("WEBGL_CONV_IM2COL"))g=conv2dWithIm2Row({x:s,filter:i,convInfo:d,backend:t});else{const y=new Conv2DProgram(d);g=t.runWebGLProgram(y,[s,i],"float32")}const x=reshape({inputs:{x:g},backend:t,attrs:{shape:d.outShape}});return t.disposeIntermediateTensorInfo(g),x}const conv2DConfig={kernelName:Conv2D$1,backendName:"webgl",kernelFunc:conv2d};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,i=e.padInfo.left,o=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${i};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${o}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,i=e.strideWidth,o=e.dataFormat==="channelsLast",a=t-1-e.padInfo.top,l=r-1-e.padInfo.left,c=o?1:2,u=o?2:3,h=o?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${i}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${o}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv3DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,i=e.padInfo.front,o=e.padInfo.top,a=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${i};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${r} - ${o};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${s} - ${a};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv3DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,i=e.strideDepth,o=e.strideHeight,a=e.strideWidth,l=t-1-e.padInfo.front,c=r-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${i}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${r}; wR++) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${r} - 1 - wR;

            for (int wC = 0; wC < ${s}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${s} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,pad:a,dataFormat:l,dimRoundingMode:c,filterShape:u}=r,h=convertConv2DDataFormat(l),d=computeConv2DInfo(s.shape,u,o,1,a,c,!1,h),g=new Conv2DDerFilterProgram(d);return t.runWebGLProgram(g,[s,i],"float32")}const conv2DBackpropFilterConfig={kernelName:Conv2DBackpropFilter,backendName:"webgl",kernelFunc:conv2DBackpropFilter};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{inputShape:o,strides:a,pad:l,dataFormat:c,dimRoundingMode:u}=r,h=convertConv2DDataFormat(c),d=computeConv2DInfo(o,i.shape,a,1,l,u,!1,h),g=new Conv2DDerInputProgram(d);return t.runWebGLProgram(g,[s,i],"float32")}const conv2DBackpropInputConfig={kernelName:Conv2DBackpropInput,backendName:"webgl",kernelFunc:conv2DBackpropInput};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dilations:l}=r,c=computeConv3DInfo(s.shape,i.shape,o,l,a),u=new Conv3DProgram(c);return t.runWebGLProgram(u,[s,i],"float32")}const conv3DConfig={kernelName:Conv3D$1,backendName:"webgl",kernelFunc:conv3D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,pad:a,filterShape:l}=r,c=computeConv3DInfo(s.shape,l,o,1,a),u=new Conv3DDerFilterProgram(c);return t.runWebGLProgram(u,[s,i],"float32")}const conv3DBackpropFilterV2Config={kernelName:Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:conv3DBackpropFilterV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{pad:o,strides:a,inputShape:l}=r,c=computeConv3DInfo(l,i.shape,a,1,o),u=new Conv3DDerInputProgram(c);return t.runWebGLProgram(u,[s,i],"float32")}const conv3DBackpropInputConfig={kernelName:Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:conv3DBackpropInput};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COS=CHECK_NAN_SNIPPET_UNARY+`
  return cos(x);
`,cos=unaryKernelFunc({opSnippet:COS}),cosConfig={kernelName:Cos,backendName:"webgl",kernelFunc:cos};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COSH=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,cosh=unaryKernelFunc({opSnippet:COSH}),coshConfig={kernelName:Cosh,backendName:"webgl",kernelFunc:cosh};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class CropAndResizeProgram{constructor(e,t,r,s,i){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[o,a,l,c]=e,[u]=t,[h,d]=r;this.outputShape=[u,h,d,c];const g=s==="bilinear"?1:0,[x,y]=[`${a-1}.0`,`${l-1}.0`],[w,$,S]=h>1?[`${(a-1)/(h-1)}`,"(y2-y1) * height_ratio",`y1*${x} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${x}`],[_,T,k]=d>1?[`${(l-1)/(d-1)}`,"(x2-x1) * width_ratio",`x1*${y} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${y}`];this.userCode=`
      const float height_ratio = float(${w});
      const float width_ratio = float(${_});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${o}) {
          return;
        }

        float height_scale = ${$};
        float width_scale = ${T};

        float in_y = ${S};
        if( in_y < 0.0 || in_y > ${x} ) {
          setOutput(float(${i}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${y} ) {
          setOutput(float(${i}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${g} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cropAndResize=n=>{const{inputs:e,backend:t,attrs:r}=n,{image:s,boxes:i,boxInd:o}=e,{cropSize:a,method:l,extrapolationValue:c}=r,u=new CropAndResizeProgram(s.shape,i.shape,a,l,c);return t.runWebGLProgram(u,[s,i,o],"float32")},cropAndResizeConfig={kernelName:CropAndResize,backendName:"webgl",kernelFunc:cropAndResize};var CumOpType;(function(n){n.Prod="*",n.Sum="+"})(CumOpType||(CumOpType={}));class CumProgram{constructor(e,t,r,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const i=this.outputShape.length,o=this.op===CumOpType.Prod?"1.0":"0.0",a=r?o:`getX(${getCoords(i,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let c="",u="";r?(c=s?`end != ${l-1}`:"end != 0",u=s?"end + 1":"end - 1"):(c=s?`end + pow2 < ${l}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${getCoordsDataType(i)} coords = getOutputCoords();
        int end = ${getFinalCoord(i,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${getFinalCoord(i,"coords",this.op)} = idx;
          val ${this.op}= getX(${getCoords(i,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function getCoords(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.x, ${e}.y`;if(n===3)return`${e}.x, ${e}.y, ${e}.z`;if(n===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`)}function getFinalCoord(n,e,t){if(n===1)return`${e}`;if(n===2)return`${e}.y`;if(n===3)return`${e}.z`;if(n===4)return`${e}.w`;throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`)}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumImpl(n,e,t,r,s,i){const o=e.shape.length,a=getAxesPermutation([r],o);let l=e;a!=null&&(l=transpose({inputs:{x:e},backend:t,attrs:{perm:a}}));const c=getInnerMostAxes(1,o)[0];if(c!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${r}`);const u=l.shape[c];let h=identity({inputs:{x:l},backend:t});for(let d=0;d<=Math.ceil(Math.log2(u))-1;d++){const g=new CumProgram(n,l.shape,!1,i),x=[[d]],y=h;h=t.runWebGLProgram(g,[h],h.dtype,x),t.disposeIntermediateTensorInfo(y)}if(s){const d=new CumProgram(n,l.shape,s,i),g=h;h=t.runWebGLProgram(d,[h],h.dtype),t.disposeIntermediateTensorInfo(g)}if(a!=null){const d=getUndoAxesPermutation(a),g=transpose({inputs:{x:h},backend:t,attrs:{perm:d}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(l),g}return h}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r;return cumImpl(CumOpType.Prod,s,t,i,o,a)}const cumprodConfig={kernelName:Cumprod,backendName:"webgl",kernelFunc:cumprod};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r;return cumImpl(CumOpType.Sum,s,t,i,o,a)}const cumsumConfig={kernelName:Cumsum,backendName:"webgl",kernelFunc:cumsum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,weights:i}=e,{size:o,binaryOutput:a}=r;if(s.shape.length===1){const l=t.readSync(s.dataId),c=t.readSync(i.dataId),u=bincountImplCPU(l,c,i.dtype,i.shape,o);return t.makeTensorInfo([o],i.dtype,u)}else if(s.shape.length===2){const l=t.bufferSync(s),c=t.bufferSync(i),u=bincountReduceImplCPU(l,c,o,a);return t.makeTensorInfo(u.shape,i.dtype,u.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}const denseBincountConfig={kernelName:DenseBincount,backendName:"webgl",kernelFunc:denseBincount};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthToSpaceProgram{constructor(e,t,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=r,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockSize:i,dataFormat:o}=r,a=s.shape[0],l=o==="NHWC"?s.shape[1]:s.shape[2],c=o==="NHWC"?s.shape[2]:s.shape[3],u=o==="NHWC"?s.shape[3]:s.shape[1],h=l*i,d=c*i,g=u/(i*i),x=o==="NHWC"?[a,h,d,g]:[a,g,h,d],y=new DepthToSpaceProgram(x,i,o);return t.runWebGLProgram(y,[s],s.dtype)}const depthToSpaceConfig={kernelName:DepthToSpace,backendName:"webgl",kernelFunc:depthToSpace};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DProgram{constructor(e,t=!1,r=null,s=!1,i=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const o=e.filterHeight,a=e.filterWidth,l=e.outChannels/e.inChannels;let c="",u="";r&&(s?c=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:i?c=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:c=`
          float activation(float x) {
            ${r}
          }
        `,u="result = activation(result);");const h=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),i&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${o}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConvPacked2DProgram{constructor(e,t=!1,r=null,s=!1,i=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const o=e.outChannels/e.inChannels,a=e.padInfo.left,l=e.strideWidth,c=e.dilationWidth,u=e.filterHeight,h=e.filterWidth,d=h;let g=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let $=0;$<h;$++)g+=`
          vec4 xTexelC${$*2};
          int xTexelC${$*2}Ready;
          vec4 xTexelC${$*2+1};
          int xTexelC${$*2+1}Ready;
          vec4 xC${$};`;g+=`
    for (int r = 0; r < ${u}; r++) {
      `;for(let $=0;$<h;$++)g+=`
          xTexelC${$*2} = vec4(0.0);
          xTexelC${$*2}Ready = 0;
          xTexelC${$*2+1} = vec4(0.0);
          xTexelC${$*2+1}Ready = 0;
          xC${$} = vec4(0.0);`;g+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let $=0;$<(d+1)/2;$++){const S=$*2;if(g+=`
          xC = xCCorner + ${S*c};
          `,l===1){if(S<h&&(a%2===1?(g+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${S}Ready == 0) {
                  xTexelC${S} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${S}.zw = vec2(0.0);
                  }
                  xTexelC${S}Ready = 1;
                }
              `,c===1&&S>0?g+=`
                xC${S} = vec4(xTexelC${S-2}.zw, xTexelC${S}.xy);
                `:g+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${S} = vec4(previous.zw, xTexelC${S}.xy);
                  } else {
                    xC${S} = vec4(0.0, 0.0, xTexelC${S}.xy);
                  }
                  `):g+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${S}Ready == 0) {
                  xTexelC${S} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${S}.zw = vec2(0.0);
                  }
                  xTexelC${S}Ready = 1;
                }

                xC${S} = xTexelC${S};
                `,S+1<h)){const _=a%2===0?nearestLargerEven(c):c;c%2===0&&a%2===1||c%2!==0&&a%2!==1?(g+=`
                  xCOffset = xC + imod(pads[1], 2) + ${_};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${S+1}Ready == 0) {
                    xTexelC${S+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${S+1}.zw = vec2(0.0);
                    }
                    xTexelC${S+1}Ready = 1;
                  }
                  `,c>1?g+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${S+1} = vec4(previous.zw, xTexelC${S+1}.xy);
                    } else {
                     xC${S+1} = vec4(0.0, 0.0, xTexelC${S+1}.xy);
                    }
                    `:g+=`
                    xC${S+1} = vec4(xTexelC${S}.zw, xTexelC${S+1}.xy);
                    `):_===1?g+=`
                    xC${S+1} = xTexelC${S};
                    `:g+=`
                    xCOffset = xC + ${_};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${S+1}Ready == 0) {
                      xTexelC${S+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${S+1}.zw = vec2(0.0);
                      }
                      xTexelC${S+1}Ready = 1;
                    }

                    xC${S+1} = xTexelC${S+1};
                    `}}else S<h&&(a%2===1?(g+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${S}Ready == 0) {
                  xTexelC${S} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${S}.zw = vec2(0.0);
                  }
                  xTexelC${S}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${S+1}Ready == 0) {
                  xTexelC${S+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${S+1}.zw = vec2(0.0);
                  }
                  xTexelC${S+1}Ready = 1;
                }

                xC${S} = vec4(xTexelC${S}.zw, xTexelC${S+1}.zw);
              `,S+1<h&&(g+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${S+1} = vec4(xTexelC${S+1}.xy, final.xy);
                `)):(g+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${S}Ready == 0) {
                  xTexelC${S} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${S}.zw = vec2(0.0);
                  }
                  xTexelC${S}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${S+1}Ready == 0) {
                  xTexelC${S+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${S+1}.zw = vec2(0.);
                  }
                  xTexelC${S+1}Ready = 1;
                }

                xC${S} = vec4(
                  xTexelC${S}.xy, xTexelC${S+1}.xy);
              `,S+1<h&&(g+=`
                  xC${S+1} = vec4(xTexelC${S}.zw, xTexelC${S+1}.zw);
                `)));S<h&&(g+=`
            wTexel = getW(r, ${S}, d1, q);
            dotProd += xC${S} * vec4(wTexel.xz, wTexel.xz);
          `,S+1<h&&(g+=`
              wTexel = getW(r, ${S+1}, d1, q);
              dotProd += xC${S+1} * vec4(wTexel.xz, wTexel.xz);
            `))}g+=`
    }
  `,g+=`
      }
    `;let x="",y="";r&&(s?x=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:i?x=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:x=`vec4 activation(vec4 x) {
          ${r}
        }`,y="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),i&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${x}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${g}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${w}
        ${y}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dilations:l,dimRoundingMode:c}=r;let u=l;u==null&&(u=[1,1]),assert$1(eitherStridesOrDilationsAreOne(o,u),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const h=computeConv2DInfo(s.shape,i.shape,o,u,a,c,!0);let d;env().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels===1?d=new DepthwiseConvPacked2DProgram(h):d=new DepthwiseConv2DProgram(h);const g=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return t.runWebGLProgram(d,[s,i],"float32",g)}const depthwiseConv2dNativeConfig={kernelName:DepthwiseConv2dNative,backendName:"webgl",kernelFunc:depthwiseConv2dNative};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,i=e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${o} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${i};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class DepthwiseConv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.top,a=r-1-e.padInfo.left,l=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${o}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${i}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,dy:i}=e,{strides:o,dilations:a,pad:l,dimRoundingMode:c,filterShape:u}=r,h=computeConv2DInfo(s.shape,u,o,a,l,c,!0),d=new DepthwiseConv2DDerFilterProgram(h);return t.runWebGLProgram(d,[s,i],"float32")}const depthwiseConv2dNativeBackpropFilterConfig={kernelName:DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropFilter};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,filter:i}=e,{strides:o,dilations:a,pad:l,dimRoundingMode:c,inputShape:u}=r,h=computeConv2DInfo(u,i.shape,o,a,l,c,!0),d=new DepthwiseConv2DDerInputProgram(h);return t.runWebGLProgram(d,[s,i],"float32")}const depthwiseConv2dNativeBackpropInputConfig={kernelName:DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropInput};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DiagProgram{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag(n){const{inputs:e,backend:t}=n,{x:r}=e,s=[...r.shape,...r.shape],i=sizeFromShape(r.shape),o=reshape({inputs:{x:r},backend:t,attrs:{shape:[i]}}),a=new DiagProgram(i),l=t.runWebGLProgram(a,[o],o.dtype),c=reshape({inputs:{x:l},backend:t,attrs:{shape:s}});return t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(l),c}const diagConfig={kernelName:Diag,backendName:"webgl",kernelFunc:diag};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Dilation2DProgram{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:r,padInfo:s,strideHeight:i,strideWidth:o,filterHeight:a,filterWidth:l,dilationHeight:c,dilationWidth:u}=e,{top:h,left:d}=s;this.userCode=`
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${r}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i}=e,{strides:o,pad:a,dilations:l}=r,c=computeDilation2DInfo(s.shape,i.shape,o,a,"NHWC",l);let u;const h=new Dilation2DProgram(c);u=t.runWebGLProgram(h,[s,i],"float32");const d=reshape({inputs:{x:u},backend:t,attrs:{shape:c.outShape}});return t.disposeIntermediateTensorInfo(u),d}const dilation2DConfig={kernelName:Dilation2D,backendName:"webgl",kernelFunc:dilation2D};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum(n){const{inputs:e,backend:t,attrs:r}=n,{equation:s}=r,i=e,{allDims:o,summedDims:a,idDims:l}=decodeEinsumEquation(s,i.length);checkEinsumDimSizes(o.length,l,i);const{path:c,steps:u}=getEinsumComputePath(a,l),h=u.length;let d=null,g=o.length;const x=[];for(let y=0;y<h;++y){for(const w of u[y]){const{permutationIndices:$,expandDims:S}=getEinsumPermutation(g,l[w]);let _;isIdentityPermutation($)?_=i[w]:(_=transpose({inputs:{x:i[w]},backend:t,attrs:{perm:$}}),x.push(_));const T=_.shape.slice();for(let k=0;k<S.length;++k)T.splice(S[k],0,1);arraysEqual(_.shape,T)||(_=reshape({inputs:{x:_},backend:t,attrs:{shape:T}}),x.push(_)),d===null?d=_:(d=multiply$1({inputs:{a:_,b:d},backend:t}),x.push(d))}y<h-1&&(c[y]>=0&&(d=sum$1({inputs:{x:d},backend:t,attrs:{axis:c[y]-(o.length-g),keepDims:!1}}),x.push(d)),g--)}for(const y of x)y!==d&&t.disposeIntermediateTensorInfo(y);return d}const einsumConfig={kernelName:Einsum,backendName:"webgl",kernelFunc:einsum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU="return (x >= 0.0) ? x : (exp(x) - 1.0);",ELU_PACKED=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,elu=unaryKernelFunc({opSnippet:ELU,packedOpSnippet:ELU_PACKED}),eluConfig={kernelName:Elu$1,backendName:"webgl",kernelFunc:elu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU_DER="return (b >= 1.0) ? a : a * (b + 1.0);",ELU_DER_PACKED=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,eluGrad=n=>{const{inputs:e,backend:t}=n,{dy:r,y:s}=e,i=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(ELU_DER_PACKED,r.shape,s.shape):new BinaryOpProgram(ELU_DER,r.shape,s.shape);return t.runWebGLProgram(i,[r,s],r.dtype)},eluGradConfig={kernelName:EluGrad,backendName:"webgl",kernelFunc:eluGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PACKED_EQUAL=`
  return vec4(equal(a, b));
`,EQUAL="return float(a == b);",equal=binaryKernelFunc({opSnippet:EQUAL,packedOpSnippet:PACKED_EQUAL,dtype:"bool",cpuKernelImpl:equalImplCPU}),equalConfig={kernelName:Equal,backendName:"webgl",kernelFunc:equal};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P};
  float a1 = ${ERF_A1};
  float a2 = ${ERF_A2};
  float a3 = ${ERF_A3};
  float a4 = ${ERF_A4};
  float a5 = ${ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,erf=unaryKernelFunc({opSnippet:ERF}),erfConfig={kernelName:Erf,backendName:"webgl",kernelFunc:erf};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXP=CHECK_NAN_SNIPPET_UNARY+`
  return exp(x);
`,EXP_PACKED=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,exp=unaryKernelFunc({opSnippet:EXP,packedOpSnippet:EXP_PACKED,cpuKernelImpl:expImplCPU,dtype:"float32"}),expConfig={kernelName:Exp,backendName:"webgl",kernelFunc:exp};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims(n){const{inputs:e,attrs:t,backend:r}=n,{dim:s}=t,{input:i}=e,o=i.shape.length,a=i.shape.slice();let l=s;return s<0&&(assert$1(-(o+1)<=s,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+s+1),a.splice(l,0,1),reshape({inputs:{x:i},backend:r,attrs:{shape:a}})}const expandDimsConfig={kernelName:ExpandDims,backendName:"webgl",kernelFunc:expandDims};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXPM1="return exp(x) - 1.0;",expm1=unaryKernelFunc({opSnippet:EXPM1,packedOpSnippet:EXPM1,cpuKernelImpl:expm1ImplCPU}),expm1Config={kernelName:Expm1,backendName:"webgl",kernelFunc:expm1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FFTProgram{constructor(e,t,r){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const i=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=r?`${s}.0`:"1.0";let a;if(e==="real")a="return real * expR - imag * expI;";else if(e==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${i};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${s});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${s}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${o};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftImpl(n,e,t){const r=t.texData.get(n.dataId),s=sizeFromShape(n.shape),i=n.shape[n.shape.length-1],o=s/i,a=reshape({inputs:{x:n},backend:t,attrs:{shape:[o,i]}}),l=a.shape,c=new FFTProgram("real",l,e),u=new FFTProgram("imag",l,e),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:l},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:l}],d=t.runWebGLProgram(c,h,"float32"),g=t.runWebGLProgram(u,h,"float32"),x=complex({inputs:{real:d,imag:g},backend:t});t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g);const y=reshape({inputs:{x},backend:t,attrs:{shape:n.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(x),y}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$1(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl(r,!1,t)}const fftConfig={kernelName:FFT,backendName:"webgl",kernelFunc:fft$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FillProgram{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$1(n){const{backend:e,attrs:t}=n,{shape:r,value:s}=t;let{dtype:i}=t;if(i=i||inferDtype(s),i==="string"){const o=getArrayFromDType(i,sizeFromShape(r));return o.fill(s),e.makeTensorInfo(r,i,o)}else{const o=new FillProgram(r,s),a=[[s]];return e.runWebGLProgram(o,[],i,a)}}const fillConfig={kernelName:Fill,backendName:"webgl",kernelFunc:fill$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FlipLeftRightProgram{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig={kernelName:FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:n,backend:e})=>{const{image:t}=n,r=e,s=new FlipLeftRightProgram(t.shape);return r.runWebGLProgram(s,[t],t.dtype)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FLOOR="return floor(x);",floor=unaryKernelFunc({opSnippet:FLOOR,packedOpSnippet:FLOOR,cpuKernelImpl:floorImplCPU}),floorConfig={kernelName:Floor,backendName:"webgl",kernelFunc:floor};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT_DIV=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,INT_DIV_PACKED=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,floorDiv=binaryKernelFunc({opSnippet:INT_DIV,packedOpSnippet:INT_DIV_PACKED,dtype:"int32"}),floorDivConfig={kernelName:FloorDiv,backendName:"webgl",kernelFunc:floorDiv};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsProgram{constructor(e){this.variableNames=["A"];const t=getGlslDifferences(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${r}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=getGlslDifferences(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${s}.0, ${r}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fromPixelsConfig={kernelName:FromPixels,backendName:"webgl",kernelFunc:fromPixels};let fromPixels2DContext,willReadFrequently=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function fromPixels(n){const{inputs:e,backend:t,attrs:r}=n;let{pixels:s}=e;const{numChannels:i}=r,o=typeof HTMLVideoElement<"u"&&s instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,[l,c]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],u=[c,l],h=[c,l,i];if(a||o){const y=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(fromPixels2DContext==null||y!==willReadFrequently)&&(willReadFrequently=y,fromPixels2DContext=document.createElement("canvas").getContext("2d",{willReadFrequently})),fromPixels2DContext.canvas.width=l,fromPixels2DContext.canvas.height=c,fromPixels2DContext.drawImage(s,0,0,l,c),s=fromPixels2DContext.canvas}const d=t.makeTensorInfo(u,"int32");t.texData.get(d.dataId).usage=TextureUsage.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(d.dataId),s);const g=env().getBool("WEBGL_PACK")?new FromPixelsPackedProgram(h):new FromPixelsProgram(h),x=t.runWebGLProgram(g,[d],"int32");return t.disposeData(d.dataId),x}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:l,pad:c,dataFormat:u,dilations:h,dimRoundingMode:d,activation:g,leakyreluAlpha:x}=r,y=convertConv2DDataFormat(u),w=computeConv2DInfo(s.shape,i.shape,l,h,c,d,!1,y);let $;const S=[],_=o!=null,T=a!=null,k=g==="leakyrelu",P=()=>{const D=[s,i],M=(O,R)=>{if(R==="NCHW"&&O.shape.length===1&&O.shape[0]!==1){const z=reshape({inputs:{x:O},backend:t,attrs:{shape:[O.shape[0],1,1]}});return S.push(z),z}return O};if(_&&D.push(M(o,u)),T&&D.push(M(a,u)),k){const O=t.makeTensorInfo([],"float32",createScalarValue(x,"float32"));D.push(O),S.push(O)}return D};if(w.filterHeight===1&&w.filterWidth===1&&w.dilationHeight===1&&w.dilationWidth===1&&w.strideHeight===1&&w.strideWidth===1&&(w.padInfo.type==="SAME"||w.padInfo.type==="VALID"))$=conv2dByMatMul({x:s,filter:i,convInfo:w,backend:t,bias:o,activation:g,preluActivationWeights:a,leakyreluAlpha:x});else if(w.strideWidth<=2&&y==="channelsLast"&&env().getBool("WEBGL_EXP_CONV")){const D=g?mapActivationToShaderProgram(g,!0):null,M=new Conv2DPackedProgram(w,_,D,T,k),O=[[w.padInfo.top,w.padInfo.left],[w.strideHeight,w.strideWidth],[w.dilationHeight,w.dilationWidth],[w.inHeight,w.inWidth]],R=P();$=t.runWebGLProgram(M,R,"float32",O)}else if(env().getBool("WEBGL_CONV_IM2COL"))$=conv2dWithIm2Row({x:s,filter:i,convInfo:w,backend:t,bias:o,activation:g,preluActivationWeights:a,leakyreluAlpha:x});else{const D=g?mapActivationToShaderProgram(g,!1):null,M=new Conv2DProgram(w,_,D,T,k),O=P();$=t.runWebGLProgram(M,O,"float32")}const L=reshape({inputs:{x:$},backend:t,attrs:{shape:w.outShape}});return S.push($),S.forEach(D=>t.disposeIntermediateTensorInfo(D)),L}const fusedConv2DConfig={kernelName:FusedConv2D,backendName:"webgl",kernelFunc:fusedConv2d};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:l,pad:c,dilations:u,dimRoundingMode:h,activation:d,leakyreluAlpha:g}=r,x=[];let y=u;y==null&&(y=[1,1]),assert$1(eitherStridesOrDilationsAreOne(l,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${y}'`);const w=computeConv2DInfo(s.shape,i.shape,l,y,c,h,!0),$=env().getBool("WEBGL_PACK_DEPTHWISECONV")&&w.strideWidth<=2&&w.outChannels/w.inChannels===1,S=d?mapActivationToShaderProgram(d,$):null,_=[s,i],T=o!=null,k=a!=null,P=d==="leakyrelu";if(T&&_.push(o),k&&_.push(a),P){const O=t.makeTensorInfo([],"float32",createScalarValue(g,"float32"));_.push(O),x.push(O)}let L;$?L=new DepthwiseConvPacked2DProgram(w,T,S,k,P):L=new DepthwiseConv2DProgram(w,T,S,k,P);const D=[[w.padInfo.top,w.padInfo.left],[w.strideHeight,w.strideWidth],[w.dilationHeight,w.dilationWidth],[w.inHeight,w.inWidth]],M=t.runWebGLProgram(L,_,"float32",D);return x.forEach(O=>t.disposeIntermediateTensorInfo(O)),M}const fusedDepthwiseConv2DConfig={kernelName:FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:fusedDepthwiseConv2D};class GatherNDProgram{constructor(e,t,r,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=r;const i=getCoordsDataType(r.length);let o=`
    int index;`;for(let a=0;a<this.sliceDim;a++)o+=`
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;this.userCode=`
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${o}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd(n){const{inputs:e,backend:t}=n,{params:r,indices:s}=e,i=s.shape,o=i[i.length-1],a=sizeFromShape(r.shape),[l,c,u,h]=prepareAndValidate(r,s),d=reshape({inputs:{x:s},backend:t,attrs:{shape:[c,o]}}),g=reshape({inputs:{x:r},backend:t,attrs:{shape:[sizeFromShape(r.shape)/u,u]}});if(t.shouldExecuteOnCPU([r,s])||r.dtype==="string"){const $=t.readSync(s.dataId),S=t.bufferSync(r),_=gatherNdImplCPU($,S,r.dtype,c,o,u,h,r.shape,a);return t.makeTensorInfo(l,r.dtype,_.values)}const x=new GatherNDProgram(o,h,[c,u],r.shape),y=t.runWebGLProgram(x,[g,d],g.dtype),w=reshape({inputs:{x:y},backend:t,attrs:{shape:l}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(y),w}const gatherNdConfig={kernelName:GatherNd,backendName:"webgl",kernelFunc:gatherNd};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GatherProgram{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const r=getCoordsDataType(this.rank),s=getSourceCoords$1(e);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${s}));
      }
    `}}function getSourceCoords$1(n,e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<n.length;s++)s===2?r.push("index"):r.push(`${t[s]}`);return r.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,indices:i}=e,{axis:o,batchDims:a}=r,l=parseAxisParam(o,s.shape)[0];if(env().get("DEBUG")){const S=t.readSync(i.dataId),_=s.shape[l];for(let T=0;T<S.length;++T){const k=S[T];assert$1(k<=_-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${_-1}]`)}}const c=collectGatherOpShapeInfo(s,i,l,a),u=sizeFromShape(i.shape),h=[],d=reshape({inputs:{x:s},backend:t,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),g=reshape({inputs:{x:i},backend:t,attrs:{shape:[c.batchSize,u/c.batchSize]}});h.push(d),h.push(g);const x=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize];if(t.shouldExecuteOnCPU([s,i])||s.dtype==="string"){const S=t.bufferSync(g),_=t.bufferSync(d),T=gatherV2ImplCPU(_,S,x);return h.forEach(k=>t.disposeIntermediateTensorInfo(k)),t.makeTensorInfo(c.outputShape,T.dtype,T.values)}const y=new GatherProgram(d.shape,x),w=t.runWebGLProgram(y,[d,g],d.dtype);h.push(w);const $=reshape({inputs:{x:w},backend:t,attrs:{shape:c.outputShape}});return h.forEach(S=>t.disposeIntermediateTensorInfo(S)),$}const gatherV2Config={kernelName:GatherV2,backendName:"webgl",kernelFunc:gatherV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER="return float(a > b);",GREATER_PACKED=`
  return vec4(greaterThan(a, b));
`,greater=binaryKernelFunc({opSnippet:GREATER,packedOpSnippet:GREATER_PACKED,cpuKernelImpl:greaterImplCPU,dtype:"bool"}),greaterConfig={kernelName:Greater,backendName:"webgl",kernelFunc:greater};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER_EQUAL="return float(a >= b);",GREATER_EQUAL_PACKED=`
  return vec4(greaterThanEqual(a, b));
`,greaterEqual=binaryKernelFunc({opSnippet:GREATER_EQUAL,packedOpSnippet:GREATER_EQUAL_PACKED,dtype:"bool",cpuKernelImpl:greaterEqualImplCPU}),greaterEqualConfig={kernelName:GreaterEqual,backendName:"webgl",kernelFunc:greaterEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft(n){const{inputs:e,backend:t}=n,{input:r}=e;return fftImpl(r,!0,t)}const ifftConfig={kernelName:IFFT,backendName:"webgl",kernelFunc:ifft};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_FINITE="return float(!isnan(x) && !isinf(x));",isFinite$1=unaryKernelFunc({opSnippet:IS_FINITE,dtype:"bool"}),isFiniteConfig={kernelName:IsFinite,backendName:"webgl",kernelFunc:isFinite$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_INF="return float(isinf(x));",isInf=unaryKernelFunc({opSnippet:IS_INF,dtype:"bool"}),isInfConfig={kernelName:IsInf,backendName:"webgl",kernelFunc:isInf};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_NAN="return float(isnan(x));",isNaN$1=unaryKernelFunc({opSnippet:IS_NAN,dtype:"bool"}),isNaNConfig={kernelName:IsNan,backendName:"webgl",kernelFunc:isNaN$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS="return float(a < b);",LESS_PACKED=`
  return vec4(lessThan(a, b));
`,less=binaryKernelFunc({opSnippet:LESS,packedOpSnippet:LESS_PACKED,cpuKernelImpl:lessImplCPU,dtype:"bool"}),lessConfig={kernelName:Less,backendName:"webgl",kernelFunc:less};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS_EQUAL="return float(a <= b);",LESS_EQUAL_PACKED=`
  return vec4(lessThanEqual(a, b));
`,lessEqual=binaryKernelFunc({opSnippet:LESS_EQUAL,packedOpSnippet:LESS_EQUAL_PACKED,cpuKernelImpl:lessEqualImplCPU,dtype:"bool"}),lessEqualConfig={kernelName:LessEqual,backendName:"webgl",kernelFunc:lessEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace(n){const{backend:e,attrs:t}=n,{start:r,stop:s,num:i}=t,o=linSpaceImplCPU(r,s,i);return e.makeTensorInfo([o.length],"float32",o)}const linSpaceConfig={kernelName:LinSpace,backendName:"webgl",kernelFunc:linSpace};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG=CHECK_NAN_SNIPPET_UNARY+`
  return x < 0.0 ? 0./0. : log(x);
`,LOG_PACKED=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,log=unaryKernelFunc({opSnippet:LOG,packedOpSnippet:LOG_PACKED,cpuKernelImpl:logImplCPU}),logConfig={kernelName:Log,backendName:"webgl",kernelFunc:log};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG1P=CHECK_NAN_SNIPPET_UNARY+`
  return log(1.0 + x);
`,log1p=unaryKernelFunc({opSnippet:LOG1P}),log1pConfig={kernelName:Log1p,backendName:"webgl",kernelFunc:log1p};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_AND="return float(a >= 1.0 && b >= 1.0);",LOGICAL_AND_PACKED=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,logicalAnd=binaryKernelFunc({opSnippet:LOGICAL_AND,packedOpSnippet:LOGICAL_AND_PACKED,dtype:"bool"}),logicalAndConfig={kernelName:LogicalAnd,backendName:"webgl",kernelFunc:logicalAnd};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_NOT="return float(!(x >= 1.0));",logicalNot=unaryKernelFunc({opSnippet:LOGICAL_NOT}),logicalNotConfig={kernelName:LogicalNot,backendName:"webgl",kernelFunc:logicalNot};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_OR="return float(a >= 1.0 || b >= 1.0);",LOGICAL_OR_PACKED=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,logicalOr=binaryKernelFunc({opSnippet:LOGICAL_OR,packedOpSnippet:LOGICAL_OR_PACKED,dtype:"bool"}),logicalOrConfig={kernelName:LogicalOr,backendName:"webgl",kernelFunc:logicalOr};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNProgram{constructor(e,t,r,s,i){this.variableNames=["x"],this.outputShape=[];const o=t,a=e[3]-1;this.outputShape=e;let l;const c=`float(${r}) + float(${s}) * sum`;i===.5?l=`inversesqrt(${c})`:i===1?l=`1.0/(${c})`:l=`exp(log(${c}) * float(-${i}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${o}; j <= ${o}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNPackedProgram{constructor(e,t,r,s,i){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const o=t,a=e[3]-1;this.outputShape=e;let l;const c=`float(${r}) + float(${s}) * sum`;i===.5?l=`inversesqrt(${c})`:i===1?l=`1.0/(${c})`:l=`exp(log(${c}) * float(-${i}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${o};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${o}; j <= ${o}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrn=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{depthRadius:i,bias:o,alpha:a,beta:l}=r,c=env().getBool("WEBGL_PACK_NORMALIZATION")?new LRNPackedProgram(s.shape,i,o,a,l):new LRNProgram(s.shape,i,o,a,l);return t.runWebGLProgram(c,[s],s.dtype)},LRNConfig={kernelName:LRN,backendName:"webgl",kernelFunc:lrn};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNGradProgram{constructor(e,t,r,s,i){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=r,this.alpha=s,this.beta=i,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${s}) * norm + float(${r});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${s})
                * float(${i})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${i});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGrad=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s,y:i,dy:o}=e,{depthRadius:a,bias:l,alpha:c,beta:u}=r,h=new LRNGradProgram(s.shape,a,l,c,u);return t.runWebGLProgram(h,[s,i,o],s.dtype)},LRNGradConfig={kernelName:LRNGrad,backendName:"webgl",kernelFunc:lrnGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl(n,e,t,r){const s=sizeFromShape(e),o=sizeFromShape(n.shape)/s,a=reshape({inputs:{x:n},attrs:{shape:[o,s]},backend:r}),l=reduce(a,n.dtype,"max",r),c=reshape({inputs:{x:l},attrs:{shape:t},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(l),c}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reductionIndices:i,keepDims:o}=r,a=s.shape.length,l=parseAxisParam(i,s.shape);let c=l;const u=getAxesPermutation(c,a),h=u!=null,d=t.shouldExecuteOnCPU([s]);let g=s;if(h){if(d){const _=t.texData.get(g.dataId).values,T=new Array(a);for(let L=0;L<T.length;L++)T[L]=s.shape[u[L]];const k=transposeImplCPU(_,s.shape,s.dtype,u,T);g=t.makeTensorInfo(T,s.dtype);const P=t.texData.get(g.dataId);P.values=k}else g=transposeImpl(s,u,t);c=getInnerMostAxes(c.length,a)}assertAxesAreInnerMostDims("max",c,a);const[x,y]=computeOutAndReduceShapes(g.shape,c);let w=x;o&&(w=expandShapeToKeepDim(x,l));let $;if(d){const _=t.texData.get(g.dataId).values,T=maxImplCPU(_,sizeFromShape(y),w,s.dtype);$=t.makeTensorInfo(w,s.dtype);const k=t.texData.get($.dataId);k.values=T}else $=maxImpl(g,y,w,t);return h&&t.disposeIntermediateTensorInfo(g),$}const maxConfig={kernelName:Max,backendName:"webgl",kernelFunc:max$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MAXIMUM=CHECK_NAN_SNIPPET+`
  return max(a, b);
`,MAXIMUM_PACKED=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,maximum=binaryKernelFunc({opSnippet:MAXIMUM,packedOpSnippet:MAXIMUM_PACKED,cpuKernelImpl:maximumImplCPU}),maximumConfig={kernelName:Maximum$1,backendName:"webgl",kernelFunc:maximum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e;assertNotComplex(s,"maxPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:l}=r,c=1;assert$1(eitherStridesOrDilationsAreOne(o,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const u=computePool2DInfo(s.shape,i,o,c,a,l);if(u.filterWidth===1&&u.filterHeight===1&&arraysEqual(u.inShape,u.outShape))return identity({inputs:{x:s},backend:t});const h=new Pool2DProgram(u,"max",!1);return t.runWebGLProgram(h,[s],s.dtype)}const maxPoolConfig={kernelName:MaxPool,backendName:"webgl",kernelFunc:maxPool};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{filterSize:i,strides:o,pad:a,dataFormat:l,dimRoundingMode:c}=r,u=[1,1,1],h=computePool3DInfo(s.shape,i,o,u,a,c,l),d=new Pool3DProgram(h,"max",!1);return t.runWebGLProgram(d,[s],s.dtype)}const maxPool3DConfig={kernelName:MaxPool3D,backendName:"webgl",kernelFunc:maxPool3d};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MaxPool2DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,r=e.strideWidth,s=e.dilationHeight,i=e.effectiveFilterHeight,o=e.effectiveFilterWidth,a=i-1-e.padInfo.top,l=o-1-e.padInfo.left,c=i*o-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${i};
          wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${o} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class MaxPool3DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,u=e.effectiveFilterWidth,h=l-1-e.padInfo.front,d=c-1-e.padInfo.top,g=u-1-e.padInfo.left,x=l*c*u-1;this.userCode=`
      const ivec3 pads = ivec3(${h}, ${d}, ${g});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${i}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${o}) {
            float dyR = float(dyRCorner + wR) / ${r}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${x} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i}=e,o=i,{filterSize:a,strides:l,pad:c,dimRoundingMode:u}=r,h=[1,1,1],d=computePool3DInfo(o.shape,a,l,h,c,u),g=new Pool3DProgram(d,"max",!0),x=t.runWebGLProgram(g,[o],o.dtype),y=new MaxPool3DBackpropProgram(d),w=t.runWebGLProgram(y,[s,x],o.dtype);return t.disposeIntermediateTensorInfo(x),w}const maxPool3DGradConfig={kernelName:MaxPool3DGrad,backendName:"webgl",kernelFunc:maxPool3DGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad(n){const{inputs:e,backend:t,attrs:r}=n,{dy:s,input:i,output:o}=e,a=i;assertNotComplex([i,o],"maxPoolGrad");const{filterSize:l,strides:c,pad:u,dimRoundingMode:h}=r,d=computePool2DInfo(a.shape,l,c,1,u,h),g=!0,x=new Pool2DProgram(d,"max",g),y=t.runWebGLProgram(x,[a],a.dtype),w=new MaxPool2DBackpropProgram(d),$=t.runWebGLProgram(w,[s,y],a.dtype);return t.disposeIntermediateTensorInfo(y),$}const maxPoolGradConfig={kernelName:MaxPoolGrad,backendName:"webgl",kernelFunc:maxPoolGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl(n,e,t,r){let s=new Pool2DProgram(t,"max",!1);const i=r.runWebGLProgram(s,[n],"float32");s=new Pool2DProgram(t,"max",!0,!0,e);const o=r.runWebGLProgram(s,[n],"float32");return[i,o]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig={kernelName:MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{filterSize:s,strides:i,pad:o,includeBatchInIndex:a}=e,l=t;assert$1(r.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const c=[1,1];assert$1(eitherStridesOrDilationsAreOne(i,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const u=computePool2DInfo(r.shape,s,i,c,o),[h,d]=maxPoolWithArgmaxImpl(r,a,u,l);return[h,d]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanImpl(n,e,t,r){const s=sizeFromShape(e),o=sizeFromShape(n.shape)/s,a=reshape({inputs:{x:n},attrs:{shape:[o,s]},backend:r}),l=reduce(a,"float32","mean",r),c=reshape({inputs:{x:l},attrs:{shape:t},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(l),c}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanConfig={kernelName:Mean,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{x:r}=n,{keepDims:s,axis:i}=e,o=t,a=r.shape.length,l=parseAxisParam(i,r.shape);let c=l;const u=getAxesPermutation(c,a),h=u!=null,d=o.shouldExecuteOnCPU([r]),g=[];let x=r;if(h){if(d){const T=o.texData.get(x.dataId).values,k=new Array(a);for(let D=0;D<k.length;D++)k[D]=r.shape[u[D]];const P=transposeImplCPU(T,r.shape,r.dtype,u,k);x=o.makeTensorInfo(k,r.dtype);const L=o.texData.get(x.dataId);L.values=P}else x=transposeImpl(r,u,o);g.push(x),c=getInnerMostAxes(c.length,a)}assertAxesAreInnerMostDims("sum",c,a);const[y,w]=computeOutAndReduceShapes(x.shape,c);let $=y;s&&($=expandShapeToKeepDim(y,l));const S=meanImpl(x,w,$,o);for(const _ of g)o.disposeIntermediateTensorInfo(_);return S}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$3(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,l=parseAxisParam(i,s.shape);let c=l;const u=getAxesPermutation(c,a);let h=s;u!=null&&(h=transpose({inputs:{x:s},backend:t,attrs:{perm:u}}),c=getInnerMostAxes(c.length,s.shape.length)),assertAxesAreInnerMostDims("min",c,a);const[d,g]=computeOutAndReduceShapes(h.shape,c),x=sizeFromShape(g),y=reshape({inputs:{x:h},backend:t,attrs:{shape:[-1,x]}}),w=reduce(y,y.dtype,"min",t);let $;if(o){const S=expandShapeToKeepDim(d,l);$=reshape({inputs:{x:w},backend:t,attrs:{shape:S}})}else $=reshape({inputs:{x:w},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(w),u!=null&&t.disposeIntermediateTensorInfo(h),$}const minConfig={kernelName:Min,backendName:"webgl",kernelFunc:min$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MINIMUM=CHECK_NAN_SNIPPET+`
  return min(a, b);
`,MINIMUM_PACKED=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,minimum$1=binaryKernelFunc({opSnippet:MINIMUM,packedOpSnippet:MINIMUM_PACKED,cpuKernelImpl:minimumImplCPU}),minimumConfig={kernelName:Minimum$1,backendName:"webgl",kernelFunc:minimum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadProgram{constructor(e,t,r){this.variableNames=["x"],this.outputShape=t.map((u,h)=>u[0]+e[h]+u[1]);const s=e.length,i=getCoordsDataType(s),o=t.map(u=>u[0]).join(","),a=t.map((u,h)=>u[0]+e[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),c=r==="reflect"?0:1;if(s===1){this.userCode=`
        int start = ${o};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${i} start = ${i}(${o});
      ${i} end = ${i}(${a});

      void main() {
        ${i} outC = getOutputCoords();
        for (int i = 0; i < ${s}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${i} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadPackedProgram{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((x,y)=>x[0]+e[y]+x[1]);const s=e.length,i=getCoordsDataType(s),o=t.map(x=>x[0]).join(","),a=t.map((x,y)=>x[0]+e[y]).join(","),l=getChannels("rc",s),c=getChannels("source",s),u=`${l[s-1]} < ${this.outputShape[s-1]}`,h=s===1?"source":`vec2(${c.slice(-2).join()})`,d=r==="reflect"?0:1;let g="";if(s===1){const x=`
        ${i} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;g=`
        ${i} rc = outputLoc;
        ${x}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[s-1]} += 1;
        if(${u}) {
          ${x}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `}else{const x=`
        ${i} source = rc;
        ${i} lt = ${i}(lessThan(source, start));
        ${i} gte = ${i}(greaterThanEqual(source, end));
        ${i} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;g=`
        ${i} rc = outputLoc;
        ${x}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[s-1]} += 1;
        if(${u}) {
          ${x}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[s-2]} += 1;
        if(${l[s-2]} < ${this.outputShape[s-2]}) {
          ${x}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[s-1]} += 1;
          if(${u}) {
            ${x}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `}this.userCode=`
      const ${i} start = ${i}(${o});
      const ${i} end = ${i}(${a});

      void main() {
        ${i} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${g}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadKernelFunc=({inputs:n,backend:e,attrs:t})=>{const{x:r}=n,{paddings:s,mode:i}=t,o=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new MirrorPadPackedProgram(r.shape,s,i):new MirrorPadProgram(r.shape,s,i);return e.runWebGLProgram(o,[r],r.dtype)},mirrorPadConfig={kernelName:MirrorPad,backendName:"webgl",kernelFunc:mirrorPadKernelFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MOD=`if (b == 0.0) return NAN;
  return mod(a, b);`,MOD_PACKED=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,mod=binaryKernelFunc({opSnippet:MOD,packedOpSnippet:MOD_PACKED}),modConfig={kernelName:Mod,backendName:"webgl",kernelFunc:mod};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MultinomialProgram{constructor(e,t,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,r],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DIV=`
if (a == b) {
  return 1.0;
};
return a / b;`,DIV_PACKED=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,realDiv=binaryKernelFunc({opSnippet:DIV,packedOpSnippet:DIV_PACKED,checkOutOfBounds:!0}),realDivConfig={kernelName:RealDiv,backendName:"webgl",kernelFunc:realDiv};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SUB="return a - b;",sub=binaryKernelFunc({opSnippet:SUB,packedOpSnippet:SUB,supportsComplex:!0,cpuKernelImpl:subImplCPU}),subConfig={kernelName:Sub,backendName:"webgl",kernelFunc:sub};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{dim:i}=r,o=parseAxisParam([i],s.shape),a=max$3({inputs:{x:s},backend:t,attrs:{reductionIndices:o,keepDims:!1}}),l=expandShapeToKeepDim(a.shape,o),c=reshape({inputs:{x:a},backend:t,attrs:{shape:l}}),u=sub({inputs:{a:s,b:c},backend:t}),h=exp({inputs:{x:u},backend:t}),d=sum$1({inputs:{x:h},backend:t,attrs:{axis:o,keepDims:!1}}),g=reshape({inputs:{x:d},backend:t,attrs:{shape:l}}),x=realDiv({inputs:{a:h,b:g},backend:t});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(g),x}const softmaxConfig={kernelName:Softmax$2,backendName:"webgl",kernelFunc:softmax};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial(n){const{inputs:e,backend:t,attrs:r}=n,{logits:s}=e,{numSamples:i,seed:o,normalized:a}=r,l=a?s:softmax({inputs:{logits:s},backend:t,attrs:{dim:s.shape.length-1}}),c=l.shape[0],u=l.shape[1],h=new MultinomialProgram(c,u,i),d=[[o]],g=t.runWebGLProgram(h,[l],"int32",d);return a||t.disposeIntermediateTensorInfo(l),g}const multinomialConfig={kernelName:Multinomial,backendName:"webgl",kernelFunc:multinomial};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEG=CHECK_NAN_SNIPPET$1+`
  return -x;
`,NEG_PACKED=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function neg(n){const{inputs:e,backend:t}=n,{x:r}=e;if(t.shouldExecuteOnCPU([r])){const i=t.texData.get(r.dataId),[o,a]=negImplCPU(i.values,r.shape,r.dtype);return t.makeTensorInfo(a,r.dtype,o)}let s;return env().getBool("WEBGL_PACK_UNARY_OPERATIONS")?s=new UnaryOpPackedProgram(r.shape,NEG_PACKED):s=new UnaryOpProgram(r.shape,NEG),t.runWebGLProgram(s,[r],r.dtype)}const negConfig={kernelName:Neg,backendName:"webgl",kernelFunc:neg};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl=nonMaxSuppressionV3Impl$2;function nonMaxSuppressionV3(n){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l}=r,c=t.readSync(s.dataId),u=t.readSync(i.dataId),{selectedIndices:h}=nonMaxSuppressionV3Impl(c,u,o,a,l);return t.makeTensorInfo([h.length],"int32",new Int32Array(h))}const nonMaxSuppressionV3Config={kernelName:NonMaxSuppressionV3,backendName:"webgl",kernelFunc:nonMaxSuppressionV3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl=nonMaxSuppressionV4Impl$2;function nonMaxSuppressionV4(n){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:c}=r,u=t.readSync(s.dataId),h=t.readSync(i.dataId),{selectedIndices:d,validOutputs:g}=nonMaxSuppressionV4Impl(u,h,o,a,l,c);return[t.makeTensorInfo([d.length],"int32",new Int32Array(d)),t.makeTensorInfo([],"int32",new Int32Array([g]))]}const nonMaxSuppressionV4Config={kernelName:NonMaxSuppressionV4,backendName:"webgl",kernelFunc:nonMaxSuppressionV4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl=nonMaxSuppressionV5Impl$2;function nonMaxSuppressionV5(n){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:r}=n,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:l,softNmsSigma:c}=r,u=t.readSync(s.dataId),h=t.readSync(i.dataId),d=o,g=a,x=l,y=c,{selectedIndices:w,selectedScores:$}=nonMaxSuppressionV5Impl(u,h,d,g,x,y);return[t.makeTensorInfo([w.length],"int32",new Int32Array(w)),t.makeTensorInfo([$.length],"float32",new Float32Array($))]}const nonMaxSuppressionV5Config={kernelName:NonMaxSuppressionV5,backendName:"webgl",kernelFunc:nonMaxSuppressionV5};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OneHotProgram{constructor(e,t,r,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${s}), float(${r}),
                      float(index == coords.y)));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHot=n=>{const{inputs:e,backend:t,attrs:r}=n,{indices:s}=e,{dtype:i,depth:o,onValue:a,offValue:l}=r,c=sizeFromShape(s.shape),u=new OneHotProgram(c,o,a,l),h=reshape({inputs:{x:s},backend:t,attrs:{shape:[c]}}),d=t.runWebGLProgram(u,[h],i);t.disposeIntermediateTensorInfo(h);const g=[...s.shape,o],x=reshape({inputs:{x:d},backend:t,attrs:{shape:g}});return t.disposeIntermediateTensorInfo(d),x},oneHotConfig={kernelName:OneHot,backendName:"webgl",kernelFunc:oneHot};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="complex64"){const s=real({inputs:{input:r},backend:t}),i=zerosLike({inputs:{x:s},backend:t}),o=imag({inputs:{input:r},backend:t}),a=zerosLike({inputs:{x:o},backend:t}),l=complex({inputs:{real:i,imag:a},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(a),l}else return fill$1({attrs:{shape:r.shape,dtype:r.dtype,value:r.dtype==="string"?"":0},backend:t})}const zerosLikeConfig={kernelName:ZerosLike,backendName:"webgl",kernelFunc:zerosLike};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike(n){const{inputs:e,backend:t}=n,{x:r}=e;if(r.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(r.dtype==="complex64"){const s=real({inputs:{input:r},backend:t}),i=onesLike({inputs:{x:s},backend:t}),o=imag({inputs:{input:r},backend:t}),a=zerosLike({inputs:{x:o},backend:t}),l=complex({inputs:{real:i,imag:a},backend:t});return t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(a),l}else return fill$1({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:t})}const onesLikeConfig={kernelName:OnesLike,backendName:"webgl",kernelFunc:onesLike};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack(n){const{inputs:e,backend:t,attrs:r}=n,{axis:s}=r;if(e.length===1)return expandDims({inputs:{input:e[0]},backend:t,attrs:{dim:s}});const i=e[0].shape,o=e[0].dtype;e.forEach(u=>{assertShapesMatch(i,u.shape,"All tensors passed to stack must have matching shapes"),assert$1(o===u.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],l=e.map(u=>{const h=expandDims({inputs:{input:u},backend:t,attrs:{dim:s}});return a.push(h),h}),c=concat({inputs:l,backend:t,attrs:{axis:s}});return a.forEach(u=>t.disposeIntermediateTensorInfo(u)),c}const packConfig={kernelName:Pack,backendName:"webgl",kernelFunc:pack};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PadProgram{constructor(e,t,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((c,u)=>c[0]+e[u]+c[1]);const s=e.length,i=getCoordsDataType(s),o=t.map(c=>c[0]).join(","),a=t.map((c,u)=>c[0]+e[u]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);if(s===1){this.userCode=`
        int start = ${o};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${i} start = ${i}(${o});
      ${i} end = ${i}(${a});

      void main() {
        ${i} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${i} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PadPackedProgram{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((y,w)=>y[0]+e[w]+y[1]);const s=e.length,i=getCoordsDataType(s),o=t.map(y=>y[0]).join(","),a=t.map((y,w)=>y[0]+e[w]).join(","),l=getChannels("rc",s),c=getChannels("source",s),u=`${l[s-1]} < ${this.outputShape[s-1]}`,h=s===1?"source":`vec2(${c.slice(-2).join()})`,d=[`${i} rc = outputLoc;`,`${l[s-1]} += 1;
       if(${u}) {
      `,s===1?"":`}
       rc = outputLoc;
       ${l[s-2]} += 1;
       if(${l[s-2]} < ${this.outputShape[s-2]}) {`,s===1?"":`  ${l[s-1]} += 1;
         if(${u}) {`],g=s===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let x="";for(let y=0,w=s===1?2:4;y<w;y++)x+=`
        ${d[y]}
        if (${g}) {
          result[${y}] = float(value);
        } else {
          ${i} source = rc - start;
          result[${y}] = getChannel(getX(${c.join()}), ${h});
        }
      `;x+=s===1?"} ":"}}",this.userCode=`
      const ${i} start = ${i}(${o});
      const ${i} end = ${i}(${a});

      void main() {
        ${i} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${x}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{paddings:i,constantValue:o}=r;if(sizeFromShape(s.shape)===0){const c=i.map((u,h)=>u[0]+s.shape[h]+u[1]);return fill$1({backend:t,attrs:{shape:c,value:o,dtype:s.dtype}})}const a=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PadPackedProgram(s.shape,i,o):new PadProgram(s.shape,i,o),l=[[o]];return t.runWebGLProgram(a,[s],s.dtype,l)},padV2Config={kernelName:PadV2,backendName:"webgl",kernelFunc:padV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const POW=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,POW_PACKED=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,pow=binaryKernelFunc({opSnippet:POW,packedOpSnippet:POW_PACKED}),powConfig={kernelName:Pow,backendName:"webgl",kernelFunc:pow};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,l=[],c=parseAxisParam(i,s.shape);let u=c;const h=getAxesPermutation(u,a);let d=s;h!=null&&(d=transpose({inputs:{x:s},backend:t,attrs:{perm:h}}),u=getInnerMostAxes(u.length,a),l.push(d)),assertAxesAreInnerMostDims("prod",u,a);let g;if(t.shouldExecuteOnCPU([d])){const x=t.texData.get(d.dataId).values,{outVals:y,outShape:w,outDtype:$}=prodImplCPU(d.shape,d.dtype,x,u);g=t.makeTensorInfo(w,$,y)}else{const[x,y]=computeOutAndReduceShapes(d.shape,u),w=sizeFromShape(y),$=reshape({inputs:{x:d},backend:t,attrs:{shape:[-1,w]}}),S=sumOutType(s.dtype),_=reduce($,S,"prod",t);g=reshape({inputs:{x:_},backend:t,attrs:{shape:x}}),l.push($),l.push(_)}if(o){l.push(g);const x=expandShapeToKeepDim(g.shape,c);g=reshape({inputs:{x:g},backend:t,attrs:{shape:x}})}return l.forEach(x=>t.disposeIntermediateTensorInfo(x)),g}const prodConfig={kernelName:Prod,backendName:"webgl",kernelFunc:prod};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather(n){const{inputs:e,backend:t,attrs:r}=n,{paramsNestedSplits:s,paramsDenseValues:i,indices:o}=e,{outputRaggedRank:a}=r,l=s.map($=>t.readSync($.dataId)),c=s.map($=>$.shape),u=t.readSync(i.dataId),h=t.readSync(o.dataId),[d,g,x]=raggedGatherImplCPU(l,c,u,i.shape,i.dtype,h,o.shape,a),y=d.map($=>t.makeTensorInfo([$.length],"int32",$)),w=t.makeTensorInfo(x,i.dtype,g);return y.concat([w])}const raggedGatherConfig={kernelName:RaggedGather,backendName:"webgl",kernelFunc:raggedGather};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange(n){const{inputs:e,backend:t}=n,{starts:r,limits:s,deltas:i}=e,o=t.readSync(r.dataId),a=t.readSync(s.dataId),l=t.readSync(i.dataId),[c,u]=raggedRangeImplCPU(o,r.shape,r.dtype,a,s.shape,l,i.shape),h=t.makeTensorInfo([c.length],"int32",c),d=t.makeTensorInfo([u.length],r.dtype,u);return[h,d]}const raggedRangeConfig={kernelName:RaggedRange,backendName:"webgl",kernelFunc:raggedRange};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor(n){const{inputs:e,backend:t,attrs:r}=n,{shape:s,values:i,defaultValue:o,rowPartitionTensors:a}=e,{rowPartitionTypes:l}=r,c=t.readSync(s.dataId),u=t.readSync(i.dataId),h=t.readSync(o.dataId),d=a.map(w=>t.readSync(w.dataId)),g=a.map(w=>w.shape),[x,y]=raggedTensorToTensorImplCPU(c,s.shape,u,i.shape,i.dtype,h,o.shape,d,g,l);return t.makeTensorInfo(x,i.dtype,y)}const raggedTensorToTensorConfig={kernelName:RaggedTensorToTensor,backendName:"webgl",kernelFunc:raggedTensorToTensor};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const range=n=>{const{backend:e,attrs:t}=n,{start:r,stop:s,step:i,dtype:o}=t,a=rangeImplCPU(r,s,i,o);return e.makeTensorInfo([a.length],o,a)},rangeConfig={kernelName:Range,backendName:"webgl",kernelFunc:range};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RECIPROCAL="return 1.0 / x;",reciprocal=unaryKernelFunc({opSnippet:RECIPROCAL}),reciprocalConfig={kernelName:Reciprocal,backendName:"webgl",kernelFunc:reciprocal};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU_PACKED=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu=unaryKernelFunc({opSnippet:RELU,packedOpSnippet:RELU_PACKED}),reluConfig={kernelName:Relu$1,backendName:"webgl",kernelFunc:relu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU6=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,RELU6_PACKED=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu6=unaryKernelFunc({opSnippet:RELU6,packedOpSnippet:RELU6_PACKED}),relu6Config={kernelName:Relu6$1,backendName:"webgl",kernelFunc:relu6};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearProgram{constructor(e,t,r,s,i){this.variableNames=["A"],this.outputShape=[];const[o,a,l,c]=e;this.outputShape=[o,t,r,c];const u=[s&&t>1?a-1:a,s&&r>1?l-1:l],h=[s&&t>1?t-1:t,s&&r>1?r-1:r];let d;i?d="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":d="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearPackedProgram{constructor(e,t,r,s,i){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,a,l,c]=e;this.outputShape=[o,t,r,c];const u=[s&&t>1?a-1:a,s&&r>1?l-1:l],h=[s&&t>1?t-1:t,s&&r>1?r-1:r];let d;i?d="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":d="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c-1};
        bool hasNextRow = coords.z < ${r-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r,[l,c]=a,u=env().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeBilinearPackedProgram(s.shape,l,c,i,o):new ResizeBilinearProgram(s.shape,l,c,i,o);return t.runWebGLProgram(u,[s],"float32")}const resizeBilinearConfig={kernelName:ResizeBilinear,backendName:"webgl",kernelFunc:resizeBilinear};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearBackpropProgram{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,i]=t,[,o,a]=e,l=[r&&o>1?s-1:s,r&&a>1?i-1:i],c=[r&&o>1?o-1:o,r&&a>1?a-1:a],u=l[0]/c[0],h=l[1]/c[1],d=1/u,g=1/h,x=Math.ceil(d)*2+2,y=Math.ceil(g)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${g});

        const int winHeight = int(${x});
        const int winWidth = int(${y});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${i-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:i}=e,{alignCorners:o}=r,a=new ResizeBilinearBackpropProgram(i.shape,s.shape,o);return t.runWebGLProgram(a,[i],i.dtype)}const resizeBilinearGradConfig={kernelName:ResizeBilinearGrad,backendName:"webgl",kernelFunc:resizeBilinearGrad};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborProgram{constructor(e,t,r,s,i){this.variableNames=["A"],this.outputShape=[];const[o,a,l,c]=e;this.outputShape=[o,t,r,c];const u=[s&&t>1?a-1:a,s&&r>1?l-1:l],h=[s&&t>1?t-1:t,s&&r>1?r-1:r],d=s?"0.5":"0.0";let g;i?g="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":g="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${g};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborPackedProgram{constructor(e,t,r,s,i){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,a,l,c]=e;this.outputShape=[o,t,r,c];const u=[s&&t>1?a-1:a,s&&r>1?l-1:l],h=[s&&t>1?t-1:t,s&&r>1?r-1:r],d=s?"0.5":"0.0";let g;i?g="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":g="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${g};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c-1};
        bool hasNextRow = coords.z < ${r-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor(n){const{inputs:e,backend:t,attrs:r}=n,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r,[l,c]=a,u=env().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeNearestNeighborPackedProgram(s.shape,l,c,i,o):new ResizeNearestNeighborProgram(s.shape,l,c,i,o);return t.runWebGLProgram(u,[s],s.dtype)}const resizeNearestNeighborConfig={kernelName:ResizeNearestNeighbor,backendName:"webgl",kernelFunc:resizeNearestNeighbor};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeigborBackpropProgram{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,i]=t,[,o,a]=e,l=[r&&o>1?s-1:s,r&&a>1?i-1:i],c=[r&&o>1?o-1:o,r&&a>1?a-1:a],u=l[0]/c[0],h=l[1]/c[1],d=1/u,g=1/h,x=Math.ceil(d)*2+2,y=Math.ceil(g)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${g});

        const int winHeight = int(${x});
        const int winWidth = int(${y});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${s}) - 1),
                ${r} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${i}) - 1),
                ${r} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad(n){const{inputs:e,backend:t,attrs:r}=n,{images:s,dy:i}=e,{alignCorners:o}=r,a=new ResizeNearestNeigborBackpropProgram(i.shape,s.shape,o);return t.runWebGLProgram(a,[i],i.dtype)}const resizeNearestNeighborGradConfig={kernelName:ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:resizeNearestNeighborGrad};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReverseProgram{constructor(e,t){this.variableNames=["x"];const r=e.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=e,r===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}const s=a=>t.indexOf(a)!==-1&&e[a]!==1?`${e[a]} - coords[${a}] - 1`:`coords[${a}]`,i=e.map((a,l)=>s(l)).join(","),o=getCoordsDataType(r);this.userCode=`
      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReversePackedProgram{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const r=e.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);this.outputShape=e;const s=getChannels("rc",r),i=`${s[r-1]} + 1 < ${this.outputShape[r-1]}`,o=`${s[r-2]} + 1 < ${this.outputShape[r-2]}`,a=getCoordsDataType(r);r===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${i}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(s.slice())};
          if(${i}){
            result.g = ${c(s.slice())};
          }
          if(${o}) {
            result.b = ${u(s.slice())};
            if(${i}) {
              result.a = ${h(s.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(x){return d(x)}function c(x){return x[r-1]="("+x[r-1]+" + 1)",d(x)}function u(x){return x[r-2]="("+x[r-2]+" + 1)",d(x)}function h(x){return x[r-1]="("+x[r-1]+" + 1)",x[r-2]="("+x[r-2]+" + 1)",d(x)}function d(x){const y=e.map((S,_)=>g(_,x)),w=y.join(","),$=y.slice(-2).join(",");return`getChannel(getX(${w}), vec2(${$}))`}function g(x,y){return t.indexOf(x)!==-1&&e[x]!==1?`${e[x]} - ${y[x]} - 1`:`${y[x]}`}}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{dims:i}=r,o=s.shape.length,a=parseAxisParam(i,s.shape);if(o===0)return identity({inputs:{x:s},backend:t});const l=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ReversePackedProgram(s.shape,a):new ReverseProgram(s.shape,a);return t.runWebGLProgram(l,[s],s.dtype)}const reverseConfig={kernelName:Reverse,backendName:"webgl",kernelFunc:reverse};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RotateProgram{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const r=e[1],s=e[2];this.outputShape=e;let i="";typeof t=="number"?i=`float outputValue = ${t.toFixed(2)};`:i=`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${i}
          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${r}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig={kernelName:RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:n,attrs:e,backend:t})=>{const{image:r}=n,{radians:s,fillValue:i,center:o}=e,a=t,l=new RotateProgram(r.shape,i),[c,u]=getImageCenter(o,r.shape[1],r.shape[2]),h=[[c,u,Math.sin(s),Math.cos(s)]];return a.runWebGLProgram(l,[r],r.dtype,h)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ROUND=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,round$1=unaryKernelFunc({opSnippet:ROUND}),roundConfig={kernelName:Round,backendName:"webgl",kernelFunc:round$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RSQRT="return inversesqrt(x);",rsqrt=unaryKernelFunc({opSnippet:RSQRT,cpuKernelImpl:rsqrtImplCPU}),rsqrtConfig={kernelName:Rsqrt,backendName:"webgl",kernelFunc:rsqrt};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ScatterProgram{constructor(e,t,r,s,i,o,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;const l=getCoordsDataType(i.length),c=getCoordsDataType(o.length);let u="";r===1?u="i":r===2&&(u="i, j");const h=`getIndices(${u})`;let d="";s===1?d="i":s===2&&(d="i, coords[1]");const g=`getUpdates(${d})`,x=t>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${i});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${x};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${g};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd(n){const{inputs:e,backend:t,attrs:r}=n,{indices:s,updates:i}=e,{shape:o}=r,{sliceRank:a,numUpdates:l,sliceSize:c,strides:u,outputSize:h}=calculateShapes(i,s,o),d=[h/c,c];if(h===0)return t.makeTensorInfo(o,s.dtype);const g=reshape({inputs:{x:s},backend:t,attrs:{shape:[l,a]}}),x=reshape({inputs:{x:i},backend:t,attrs:{shape:[l,c]}}),y=t.makeTensorInfo([],"float32",new Float32Array([0])),w=new ScatterProgram(l,a,g.shape.length,x.shape.length,u,d),$=t.runWebGLProgram(w,[x,g,y],x.dtype),S=reshape({inputs:{x:$},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(y),S}const scatterNdConfig={kernelName:ScatterNd,backendName:"webgl",kernelFunc:scatterNd};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SearchSortedProgram{constructor(e,t,r,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,r];const i="while (left < right) {",o=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=env().getNumber("WEBGL_VERSION")===2?i:o,l=s==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted(n){const{inputs:e,backend:t,attrs:r}=n,{sortedSequence:s,values:i}=e,{side:o}=r,a=new SearchSortedProgram(s.shape[0],s.shape[1],i.shape[1],o),l=[[s.shape[1]]];return t.runWebGLProgram(a,[s,i],"int32",l)}const searchSortedConfig={kernelName:SearchSorted,backendName:"webgl",kernelFunc:searchSorted};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SelectProgram{constructor(e,t,r){this.variableNames=["c","a","b"],this.outputShape=t;let s,i;if(r>4)throw Error(`Where for rank ${r} is not yet supported`);if(r===1)i="resRC",s="resRC";else{const a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],c=[];for(let u=0;u<t.length;u++)c.push(`${a[u]}`),u<e&&l.push(`${a[u]}`);s=l.join(),i=c.join()}const o=getCoordsDataType(r);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        float cVal = getC(${s});
        if (cVal >= 1.0) {
          setOutput(getA(${i}));
        } else {
          setOutput(getB(${i}));
        }
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select(n){const{inputs:e,backend:t}=n,{condition:r,t:s,e:i}=e,o=new SelectProgram(r.shape.length,s.shape,s.shape.length);return t.runWebGLProgram(o,[r,s,i],upcastType(s.dtype,i.dtype))}const selectConfig={kernelName:Select,backendName:"webgl",kernelFunc:select};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA};
  float scale = ${SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,selu=unaryKernelFunc({opSnippet:SELU}),seluConfig={kernelName:Selu$1,backendName:"webgl",kernelFunc:selu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGMOID=CHECK_NAN_SNIPPET_UNARY+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,SIGMOID_PACKED=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sigmoid=unaryKernelFunc({opSnippet:SIGMOID,packedOpSnippet:SIGMOID_PACKED,cpuKernelImpl:sigmoidImplCPU}),sigmoidConfig={kernelName:Sigmoid$1,backendName:"webgl",kernelFunc:sigmoid};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGN=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,sign=unaryKernelFunc({opSnippet:SIGN}),signConfig={kernelName:Sign,backendName:"webgl",kernelFunc:sign};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIN=CHECK_NAN_SNIPPET_UNARY+`
  return sin(x);
`,sin=unaryKernelFunc({opSnippet:SIN}),sinConfig={kernelName:Sin,backendName:"webgl",kernelFunc:sin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SINH=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,sinh=unaryKernelFunc({opSnippet:SINH}),sinhConfig={kernelName:Sinh,backendName:"webgl",kernelFunc:sinh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SOFTPLUS=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,softplus=unaryKernelFunc({opSnippet:SOFTPLUS}),softplusConfig={kernelName:Softplus$1,backendName:"webgl",kernelFunc:softplus};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchND=n=>{const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{blockShape:i,paddings:o}=r;assert$1(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const a=i.reduce(($,S)=>$*S),l=[[0,0]];l.push(...o);for(let $=1+i.length;$<s.shape.length;++$)l.push([0,0]);const c=[],u=padV2({inputs:{x:s},backend:t,attrs:{paddings:l,constantValue:0}}),h=getReshaped(u.shape,i,a,!1),d=getPermuted(h.length,i.length,!1),g=getReshapedPermuted(u.shape,i,a,!1),x=reshape({inputs:{x:u},backend:t,attrs:{shape:h}}),y=transpose({inputs:{x},backend:t,attrs:{perm:d}}),w=reshape({inputs:{x:y},backend:t,attrs:{shape:g}});return c.push(u),c.push(x),c.push(y),c.forEach($=>t.disposeIntermediateTensorInfo($)),w},spaceToBatchNDConfig={kernelName:SpaceToBatchND,backendName:"webgl",kernelFunc:spaceToBatchND};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows(n){const{inputs:e,backend:t}=n,{indices:r,values:s,denseShape:i,defaultValue:o}=e;if(i.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${i.shape}`);if(r.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${r.shape}`);if(s.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);const a=t.readSync(r.dataId),l=t.readSync(s.dataId),c=t.readSync(i.dataId),u=t.readSync(o.dataId)[0],[h,d,g,x,y]=sparseFillEmptyRowsImplCPU(a,r.shape,r.dtype,l,s.dtype,c,u);return[t.makeTensorInfo(d,r.dtype,h),t.makeTensorInfo([d[0]],s.dtype,g),t.makeTensorInfo([x.length],"bool",new Uint8Array(x.map(w=>Number(w)))),t.makeTensorInfo([y.length],r.dtype,new Int32Array(y))]}const sparseFillEmptyRowsConfig={kernelName:SparseFillEmptyRows,backendName:"webgl",kernelFunc:sparseFillEmptyRows};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape(n){const{inputs:e,backend:t}=n,{inputIndices:r,inputShape:s,newShape:i}=e;if(r.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(s.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(i.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);const o=Array.from(t.readSync(s.dataId)),a=t.readSync(r.dataId),l=Array.from(t.readSync(i.dataId)),[c,u,h]=sparseReshapeImplCPU(a,r.shape,r.dtype,o,l);return[t.makeTensorInfo(u,r.dtype,c),t.makeTensorInfo([h.length],i.dtype,new Int32Array(h))]}const sparseReshapeConfig={kernelName:SparseReshape,backendName:"webgl",kernelFunc:sparseReshape};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${s.shape}`);if(i.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${i.shape}`);const o=t.readSync(r.dataId),a=t.readSync(s.dataId),l=t.readSync(i.dataId),[c,u]=sparseSegmentReductionImplCPU(o,r.shape,r.dtype,a,l,!0);return t.makeTensorInfo(u,r.dtype,c)}const sparseSegmentMeanConfig={kernelName:SparseSegmentMean,backendName:"webgl",kernelFunc:sparseSegmentMean};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum(n){const{inputs:e,backend:t}=n,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(s.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${s.shape}`);if(i.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${i.shape}`);const o=t.readSync(r.dataId),a=t.readSync(s.dataId),l=t.readSync(i.dataId),[c,u]=sparseSegmentReductionImplCPU(o,r.shape,r.dtype,a,l);return t.makeTensorInfo(u,r.dtype,c)}const sparseSegmentSumConfig={kernelName:SparseSegmentSum,backendName:"webgl",kernelFunc:sparseSegmentSum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense(n){const{inputs:e,backend:t,attrs:r}=n,{sparseIndices:s,sparseValues:i,defaultValue:o}=e,{outputShape:a}=r,{sliceRank:l,numUpdates:c,sliceSize:u,strides:h,outputSize:d}=calculateShapes(i,s,a),g=!1;if(i.dtype==="string"){const $=t.bufferSync(s),S=t.bufferSync(i),_=decodeString(t.readSync(o.dataId)[0]),T=scatterImplCPU($,S,a,d,u,c,l,h,_,g);return t.makeTensorInfo(a,T.dtype,T.values)}const x=new ScatterProgram(c,l,s.shape.length,i.shape.length,h,[d,1],g),y=t.runWebGLProgram(x,[i,s,o],i.dtype),w=reshape({inputs:{x:y},backend:t,attrs:{shape:a}});return t.disposeIntermediateTensorInfo(y),w}const sparseToDenseConfig={kernelName:SparseToDense,backendName:"webgl",kernelFunc:sparseToDense};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{numOrSizeSplits:i,axis:o}=r,a=parseAxisParam(o,s.shape)[0],l=prepareSplitSize(s,i,a),c=s.shape.length,u=new Array(c).fill(0),h=s.shape.slice();return l.map(d=>{const g=[...h];g[a]=d;const x=slice({inputs:{x:s},backend:t,attrs:{begin:u,size:g}});return u[a]+=d,x})}const splitVConfig={kernelName:SplitV,backendName:"webgl",kernelFunc:splitV};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQRT="return sqrt(x);",sqrt=unaryKernelFunc({opSnippet:SQRT,packedOpSnippet:SQRT,cpuKernelImpl:sqrtImplCPU}),sqrtConfig={kernelName:Sqrt,backendName:"webgl",kernelFunc:sqrt};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARE="return x * x;",square=unaryKernelFunc({opSnippet:SQUARE}),squareConfig={kernelName:Square,backendName:"webgl",kernelFunc:square};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARED_DIFFERENCE="return (a - b) * (a - b);",squaredDifference=binaryKernelFunc({opSnippet:SQUARED_DIFFERENCE,packedOpSnippet:SQUARED_DIFFERENCE}),squaredDifferenceConfig={kernelName:SquaredDifference,backendName:"webgl",kernelFunc:squaredDifference};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step({inputs:n,attrs:e,backend:t}){const{x:r}=n,s=CHECK_NAN_SNIPPET$1+`
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,i=new UnaryOpProgram(r.shape,s);return t.runWebGLProgram(i,[r],r.dtype)}const stepConfig={kernelName:Step,backendName:"webgl",kernelFunc:step};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StridedSliceProgram{constructor(e,t,r){this.variableNames=["x"],this.outputShape=r;const s=r.length,i=getCoordsDataType(r.length),o=getCoordsDataType(r.length);let a="";if(s===1)a="coords * strides + begin";else{let l=0;a=r.map((c,u)=>(l++,r.length===1?`coords * strides[${u}] + begin[${u}]`:`coords[${l-1}] * strides[${u}] + begin[${u}]`)).join(",")}this.userCode=`
      ${i} begin = ${i}(${e});
      ${i} strides = ${i}(${t});

      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{begin:i,end:o,strides:a,beginMask:l,endMask:c,ellipsisMask:u,newAxisMask:h,shrinkAxisMask:d}=r,{finalShapeSparse:g,finalShape:x,isIdentity:y,sliceDim0:w,isSimpleSlice:$,begin:S,end:_,strides:T}=sliceInfo(s.shape,i,o,a,l,c,u,h,d);let k;if(y)k=reshape({inputs:{x:s},backend:t,attrs:{shape:x}});else if(w||$){assert$1(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const L=computeOutShape$2(S,_,T),D=slice({inputs:{x:s},backend:t,attrs:{begin:S,size:L}});k=reshape({inputs:{x:D},backend:t,attrs:{shape:x}}),t.disposeIntermediateTensorInfo(D)}else if(t.shouldExecuteOnCPU([s])){const D=t.readSync(s.dataId),M=buffer(s.shape,s.dtype,D),O=stridedSliceImplCPU(g,M,T,S);k=t.makeTensorInfo(x,s.dtype,O.values)}else{const D=new StridedSliceProgram(S,T,g);k=t.runWebGLProgram(D,[s],s.dtype)}const P=reshape({inputs:{x:k},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(k),P}const stridedSliceConfig={kernelName:StridedSlice,backendName:"webgl",kernelFunc:stridedSlice};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams(n){const{inputs:e,backend:t,attrs:r}=n,{separator:s,nGramWidths:i,leftPad:o,rightPad:a,padWidth:l,preserveShortSequences:c}=r,{data:u,dataSplits:h}=e,d=t.readSync(u.dataId),g=t.readSync(h.dataId),[x,y]=stringNGramsImplCPU(d,g,s,i,o,a,l,c);return[t.makeTensorInfo([x.length],"string",x),t.makeTensorInfo(h.shape,"int32",y)]}const stringNGramsConfig={kernelName:StringNGrams,backendName:"webgl",kernelFunc:stringNGrams};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit(n){const{inputs:e,backend:t,attrs:r}=n,{skipEmpty:s}=r,{input:i,delimiter:o}=e;if(i.dtype!=="string")throw new Error("Input must be of datatype string");if(i.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(o.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const a=t.readSync(i.dataId),l=t.readSync(o.dataId)[0],[c,u,h]=stringSplitImplCPU(a,l,s),d=u.length;return[t.makeTensorInfo([d,2],"int32",c),t.makeTensorInfo([d],"string",u),t.makeTensorInfo([2],"int32",new Int32Array(h))]}const stringSplitConfig={kernelName:StringSplit,backendName:"webgl",kernelFunc:stringSplit};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast(n){const{inputs:e,backend:t,attrs:r}=n,{numBuckets:s}=r,{input:i}=e;if(i.dtype!=="string")throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=t.readSync(i.dataId),a=stringToHashBucketFastImplCPU(o,s);return t.makeTensorInfo(i.shape,"int32",a)}const stringToHashBucketFastConfig={kernelName:StringToHashBucketFast,backendName:"webgl",kernelFunc:stringToHashBucketFast};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TAN="return tan(x);",tan=unaryKernelFunc({opSnippet:TAN}),tanConfig={kernelName:Tan,backendName:"webgl",kernelFunc:tan};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TANH=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,tanh=unaryKernelFunc({opSnippet:TANH}),tanhConfig={kernelName:Tanh$1,backendName:"webgl",kernelFunc:tanh};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TileProgram{constructor(e,t){this.variableNames=["A"];const r=new Array(e.length);for(let o=0;o<r.length;o++)r[o]=e[o]*t[o];this.outputShape=r,this.rank=r.length;const s=getCoordsDataType(this.rank),i=getSourceCoords(e);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${i}));
      }
    `}}function getSourceCoords(n){const e=n.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(e===1)return`imod(resRC, ${n[0]})`;const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<n.length;s++)r.push(`imod(${t[s]}, ${n[s]})`);return r.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{reps:i}=r;if(s.dtype==="string"||s.shape.length>5){const l=t.readSync(s.dataId),c=s.dtype==="string"?l.map(d=>decodeString(d)):l,u=buffer(s.shape,s.dtype,c),h=tileImplCPU(u,i);return t.makeTensorInfo(h.shape,h.dtype,h.values)}const o=new TileProgram(s.shape,i);return t.runWebGLProgram(o,[s],s.dtype)}const tileConfig={kernelName:Tile,backendName:"webgl",kernelFunc:tile};class SwapProgram{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class MergeProgram{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function disposeIntermediateTensorInfoOrNull(n,e){e!==null&&n.disposeIntermediateTensorInfo(e)}function roundUpToPow2(n){let e=1;for(;e<n;)e*=2;return e}function topK(n){const{inputs:e,backend:t,attrs:r}=n,{x:s}=e,{k:i,sorted:o}=r,a=env().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=env().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=s.shape,u=c[c.length-1];if(t.shouldExecuteOnCPU([s])||u<a||i>l){const O=t.readSync(s.dataId),[R,z]=topKImplCPU(O,c,s.dtype,i,o);return[t.makeTensorInfo(R.shape,R.dtype,R.values),t.makeTensorInfo(z.shape,z.dtype,z.values)]}if(i===0)return c[c.length-1]=0,[t.makeTensorInfo(c,s.dtype,[]),t.makeTensorInfo(c,"int32",[])];if(u===1)return[s,fill$1({attrs:{shape:c,dtype:"int32",value:0},backend:t})];const h=t.texData.get(s.dataId),d=h!==null&&h.isPacked,g=d?t.unpackTensor(s):s,y=sizeFromShape(c)/u,w=reshape({inputs:{x:g},attrs:{shape:[y,u]},backend:t});d&&disposeIntermediateTensorInfoOrNull(t,g);const $=roundUpToPow2(i),S=roundUpToPow2(u);let _=null;const T=()=>_===null?[w,w]:[w,_],k=(O,R,z)=>{const X=T(),K=new SwapProgram(z),te=[[u],[_===null?1:0],[Number.NEGATIVE_INFINITY],[O],[R]],ie=_;_=t.runWebGLProgram(K,X,"int32",te),disposeIntermediateTensorInfoOrNull(t,ie)};for(let O=1;O<$;O*=2){const R=O*2;for(let z=O;z>=1;z/=2)k(R,z,[y,S])}for(let O=S;O>$;O/=2){const R=T(),z=new MergeProgram([y,O/2]),K=[[u],[_===null?1:0],[$]],Y=_;_=t.runWebGLProgram(z,R,"int32",K),disposeIntermediateTensorInfoOrNull(t,Y);const te=$/2,ie=te*2;for(let Q=te;Q>=1;Q/=2)k(ie,Q,_.shape)}let P=_;_=slice({inputs:{x:_},backend:t,attrs:{begin:0,size:[y,i]}}),disposeIntermediateTensorInfoOrNull(t,P);let L=gatherV2({inputs:{x:w,indices:_},backend:t,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull(t,w);const D=c.slice(0,-1);D.push(i),P=_,_=reshape({inputs:{x:_},attrs:{shape:D},backend:t}),disposeIntermediateTensorInfoOrNull(t,P);const M=L;return L=reshape({inputs:{x:L},attrs:{shape:D},backend:t}),disposeIntermediateTensorInfoOrNull(t,M),[L,_]}const topKConfig={kernelName:TopK,backendName:"webgl",kernelFunc:topK};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransformProgram{constructor(e,t,r,s,i,o){this.variableNames=["Image","Transforms"],this.outputShape=o;const a=r==="nearest"?1:2;let l;switch(s){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${i});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${i});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform(n){const{inputs:e,backend:t,attrs:r}=n,{image:s,transforms:i}=e,{interpolation:o,fillMode:a,fillValue:l,outputShape:c}=r,[u,h,d,g]=s.shape,[x,y]=c??[h,d],w=[u,x,y,g],$=new TransformProgram(h,d,o,a,l,w);return t.runWebGLProgram($,[s,i],"float32")}const transformConfig={kernelName:Transform,backendName:"webgl",kernelFunc:transform};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique(n){const{inputs:e,attrs:t,backend:r}=n,{axis:s}=t,{x:i}=e;assertNotComplex(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(i.dataId),{outputValues:a,outputShape:l,indices:c}=uniqueImplCPU(o,s,i.shape,i.dtype);return[r.makeTensorInfo(l,i.dtype,a),r.makeTensorInfo([c.length],"int32",c)]}const uniqueConfig={kernelName:Unique,backendName:"webgl",kernelFunc:unique};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack(n){const{inputs:e,backend:t,attrs:r}=n,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const o=s,a=o.shape.length,l=s.shape[i],c=new Array(a-1);let u=0;for(let y=0;y<a;y++)y!==i&&(c[u++]=o.shape[y]);const h=[],d=new Array(a).fill(0),g=o.shape.slice();g[i]=1;const x=new Array(l);for(let y=0;y<x.length;y++){d[i]=y;const w=slice({inputs:{x:o},backend:t,attrs:{begin:d,size:g}}),$=reshape({inputs:{x:w},backend:t,attrs:{shape:c}});x[y]=$,h.push(w)}return h.forEach(y=>t.disposeIntermediateTensorInfo(y)),x}const unpackConfig={kernelName:Unpack,backendName:"webgl",kernelFunc:unpack};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SegmentOpProgram{constructor(e,t){this.variableNames=["x","segmentIds"];const r=e.windowSize,s=e.batchSize,i=e.inSize,o=e.numSegments,a=o*Math.ceil(i/r);this.outputShape=[s,a];const l="0.0",c="sumValue",u=Math.floor(r/4)*4,h=r%4,d=`
        sumValue += dot(values, segFilter);
    `;let g="";i%r>0&&(g=`
        if (inIdx < 0 || inIdx >= ${i}) {
          return initializationValue;
        }
      `);let x="";i%r>0&&(x=`
        if (inIdx < 0 || inIdx >= ${i}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${g}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${x}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${o})) * float(${r}));
        int currentSeg = int(mod(float(outIdx), float(${o})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum(n){const{inputs:e,backend:t,attrs:r}=n,{x:s,segmentIds:i}=e,{numSegments:o}=r,a=s.shape.length,l=[];let c=0;const u=getAxesPermutation([c],a);let h=s;u!=null&&(h=transpose({inputs:{x:s},backend:t,attrs:{perm:u}}),l.push(h),c=getInnerMostAxes(1,a)[0]);const d=computeOutShape(h.shape,c,o),g=sizeFromShape([h.shape[c]]),x=reshape({inputs:{x:h},backend:t,attrs:{shape:[-1,g]}});l.push(x);const y=sumOutType(s.dtype),w=(T,k,P,L,D)=>{const M=T.shape[0],O=T.shape[1],R=segOpComputeOptimalWindowSize(O,D),z={windowSize:R,inSize:O,batchSize:M,numSegments:D},X=new SegmentOpProgram(z,k),K=t.compileAndRun(X,[T,P],L);if(l.push(K),K.shape[1]===D)return K;const Y=range({backend:t,attrs:{start:0,stop:D,step:1,dtype:"float32"}}),te=tile({inputs:{x:Y},backend:t,attrs:{reps:[O/R]}});return l.push(Y),l.push(te),w(K,k,te,L,D)},$=w(x,"unsortedSegmentSum",i,y,o),S=reshape({inputs:{x:$},backend:t,attrs:{shape:d}});let _=S;if(u!=null){l.push(S);const T=getUndoAxesPermutation(u);_=transpose({inputs:{x:_},backend:t,attrs:{perm:T}})}return l.forEach(T=>t.disposeIntermediateTensorInfo(T)),_}const unsortedSegmentSumConfig={kernelName:UnsortedSegmentSum,backendName:"webgl",kernelFunc:unsortedSegmentSum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs=[_fusedMatMulConfig,absConfig,acosConfig,acoshConfig,addConfig,addNConfig,allConfig,anyConfig,argMaxConfig,argMinConfig,asinConfig,asinhConfig,atanConfig,atan2Config,atanhConfig,avgPoolConfig,avgPool3DConfig,avgPool3DGradConfig,avgPoolGradConfig,batchMatMulConfig,batchNormConfig,batchToSpaceNDConfig,bincountConfig,broadcastArgsConfig,castConfig,ceilConfig,clipByValueConfig,complexConfig,complexAbsConfig,concatConfig,conv2DConfig,conv2DBackpropFilterConfig,conv2DBackpropInputConfig,conv3DConfig,conv3DBackpropFilterV2Config,conv3DBackpropInputConfig,cosConfig,coshConfig,cropAndResizeConfig,cumprodConfig,cumsumConfig,denseBincountConfig,depthToSpaceConfig,depthwiseConv2dNativeConfig,depthwiseConv2dNativeBackpropFilterConfig,depthwiseConv2dNativeBackpropInputConfig,diagConfig,dilation2DConfig,einsumConfig,eluConfig,eluGradConfig,equalConfig,erfConfig,expConfig,expandDimsConfig,expm1Config,fftConfig,fillConfig,flipLeftRightConfig,floorConfig,floorDivConfig,fromPixelsConfig,fusedConv2DConfig,fusedDepthwiseConv2DConfig,gatherNdConfig,gatherV2Config,greaterConfig,greaterEqualConfig,identityConfig,ifftConfig,imagConfig,isFiniteConfig,isInfConfig,isNaNConfig,leakyReluConfig,lessConfig,lessEqualConfig,linSpaceConfig,logConfig,log1pConfig,logicalAndConfig,logicalNotConfig,logicalOrConfig,LRNConfig,LRNGradConfig,maxConfig,maximumConfig,maxPoolConfig,maxPool3DConfig,maxPool3DGradConfig,maxPoolGradConfig,maxPoolWithArgmaxConfig,meanConfig,minConfig,minimumConfig,mirrorPadConfig,modConfig,multinomialConfig,multiplyConfig,negConfig,nonMaxSuppressionV3Config,nonMaxSuppressionV4Config,nonMaxSuppressionV5Config,notEqualConfig,oneHotConfig,onesLikeConfig,packConfig,padV2Config,powConfig,preluConfig,prodConfig,raggedGatherConfig,raggedRangeConfig,raggedTensorToTensorConfig,rangeConfig,realConfig,realDivConfig,reciprocalConfig,reluConfig,relu6Config,reshapeConfig,resizeBilinearConfig,resizeBilinearGradConfig,resizeNearestNeighborConfig,resizeNearestNeighborGradConfig,reverseConfig,rotateWithOffsetConfig,roundConfig,rsqrtConfig,scatterNdConfig,searchSortedConfig,selectConfig,seluConfig,sigmoidConfig,signConfig,sinConfig,sinhConfig,sliceConfig,softmaxConfig,softplusConfig,spaceToBatchNDConfig,sparseFillEmptyRowsConfig,sparseReshapeConfig,sparseSegmentMeanConfig,sparseSegmentSumConfig,sparseToDenseConfig,splitVConfig,sqrtConfig,squareConfig,squaredDifferenceConfig,stepConfig,stridedSliceConfig,stringNGramsConfig,stringSplitConfig,stringToHashBucketFastConfig,subConfig,sumConfig,tanConfig,tanhConfig,tileConfig,topKConfig,transformConfig,transposeConfig,uniqueConfig,unpackConfig,unsortedSegmentSumConfig,zerosLikeConfig];for(const n of kernelConfigs)registerKernel(n);var lodash$1={exports:{}};/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */var lodash=lodash$1.exports,hasRequiredLodash;function requireLodash(){return hasRequiredLodash||(hasRequiredLodash=1,function(n,e){(function(){var t,r="4.17.21",s=200,i="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",o="Expected a function",a="Invalid `variable` option passed into `_.template`",l="__lodash_hash_undefined__",c=500,u="__lodash_placeholder__",h=1,d=2,g=4,x=1,y=2,w=1,$=2,S=4,_=8,T=16,k=32,P=64,L=128,D=256,M=512,O=30,R="...",z=800,X=16,K=1,Y=2,te=3,ie=1/0,Q=9007199254740991,se=17976931348623157e292,le=NaN,he=4294967295,re=he-1,fe=he>>>1,ge=[["ary",L],["bind",w],["bindKey",$],["curry",_],["curryRight",T],["flip",M],["partial",k],["partialRight",P],["rearg",D]],j="[object Arguments]",xe="[object Array]",Ee="[object AsyncFunction]",Se="[object Boolean]",Ce="[object Date]",Me="[object DOMException]",Fe="[object Error]",Xe="[object Function]",qe="[object GeneratorFunction]",ke="[object Map]",we="[object Number]",Ye="[object Null]",Oe="[object Object]",Ve="[object Promise]",de="[object Proxy]",Pe="[object RegExp]",Le="[object Set]",Be="[object String]",Te="[object Symbol]",rt="[object Undefined]",st="[object WeakMap]",Ue="[object WeakSet]",ze="[object ArrayBuffer]",Ze="[object DataView]",We="[object Float32Array]",it="[object Float64Array]",dt="[object Int8Array]",nt="[object Int16Array]",lt="[object Int32Array]",ft="[object Uint8Array]",bt="[object Uint8ClampedArray]",Pt="[object Uint16Array]",At="[object Uint32Array]",Kt=/\b__p \+= '';/g,xn=/\b(__p \+=) '' \+/g,Fn=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Zt=/&(?:amp|lt|gt|quot|#39);/g,en=/[&<>"']/g,Mn=RegExp(Zt.source),tn=RegExp(en.source),Ft=/<%-([\s\S]+?)%>/g,hn=/<%([\s\S]+?)%>/g,N=/<%=([\s\S]+?)%>/g,C=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,v=/^\w*$/,b=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,I=/[\\^$.*+?()[\]{}|]/g,A=RegExp(I.source),G=/^\s+/,U=/\s/,W=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,q=/\{\n\/\* \[wrapped with (.+)\] \*/,ae=/,? & /,Z=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,me=/[()=,{}\[\]\/\s]/,_e=/\\(\\)?/g,pe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ye=/\w*$/,Ge=/^[-+]0x[0-9a-f]+$/i,ee=/^0b[01]+$/i,Ne=/^\[object .+?Constructor\]$/,He=/^0o[0-7]+$/i,ot=/^(?:0|[1-9]\d*)$/,ct=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,It=/($^)/,Qe=/['\n\r\u2028\u2029\\]/g,et="\\ud800-\\udfff",_t="\\u0300-\\u036f",oe="\\ufe20-\\ufe2f",Ae="\\u20d0-\\u20ff",Ke=_t+oe+Ae,De="\\u2700-\\u27bf",Nt="a-z\\xdf-\\xf6\\xf8-\\xff",St="\\xac\\xb1\\xd7\\xf7",Rt="\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",Mt="\\u2000-\\u206f",Xt=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dn="A-Z\\xc0-\\xd6\\xd8-\\xde",Gt="\\ufe0e\\ufe0f",bn=St+Rt+Mt+Xt,yn="['’]",wt="["+et+"]",Ht="["+bn+"]",Jt="["+Ke+"]",sn="\\d+",Vt="["+De+"]",jr="["+Nt+"]",Zr="[^"+et+bn+sn+De+Nt+dn+"]",Nr="\\ud83c[\\udffb-\\udfff]",zs="(?:"+Jt+"|"+Nr+")",Jr="[^"+et+"]",Rr="(?:\\ud83c[\\udde6-\\uddff]){2}",Dr="[\\ud800-\\udbff][\\udc00-\\udfff]",Qn="["+dn+"]",Qr="\\u200d",Ji="(?:"+jr+"|"+Zr+")",gl="(?:"+Qn+"|"+Zr+")",Qi="(?:"+yn+"(?:d|ll|m|re|s|t|ve))?",eo="(?:"+yn+"(?:D|LL|M|RE|S|T|VE))?",to=zs+"?",no="["+Gt+"]?",ml="(?:"+Qr+"(?:"+[Jr,Rr,Dr].join("|")+")"+no+to+")*",xl="\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",bl="\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",ro=no+to+ml,yl="(?:"+[Vt,Rr,Dr].join("|")+")"+ro,wl="(?:"+[Jr+Jt+"?",Jt,Rr,Dr,wt].join("|")+")",vl=RegExp(yn,"g"),$l=RegExp(Jt,"g"),Gs=RegExp(Nr+"(?="+Nr+")|"+wl+ro,"g"),Cl=RegExp([Qn+"?"+jr+"+"+Qi+"(?="+[Ht,Qn,"$"].join("|")+")",gl+"+"+eo+"(?="+[Ht,Qn+Ji,"$"].join("|")+")",Qn+"?"+Ji+"+"+Qi,Qn+"+"+eo,bl,xl,sn,yl].join("|"),"g"),Il=RegExp("["+Qr+et+Ke+Gt+"]"),Sl=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Tl=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],El=-1,Lt={};Lt[We]=Lt[it]=Lt[dt]=Lt[nt]=Lt[lt]=Lt[ft]=Lt[bt]=Lt[Pt]=Lt[At]=!0,Lt[j]=Lt[xe]=Lt[ze]=Lt[Se]=Lt[Ze]=Lt[Ce]=Lt[Fe]=Lt[Xe]=Lt[ke]=Lt[we]=Lt[Oe]=Lt[Pe]=Lt[Le]=Lt[Be]=Lt[st]=!1;var Ot={};Ot[j]=Ot[xe]=Ot[ze]=Ot[Ze]=Ot[Se]=Ot[Ce]=Ot[We]=Ot[it]=Ot[dt]=Ot[nt]=Ot[lt]=Ot[ke]=Ot[we]=Ot[Oe]=Ot[Pe]=Ot[Le]=Ot[Be]=Ot[Te]=Ot[ft]=Ot[bt]=Ot[Pt]=Ot[At]=!0,Ot[Fe]=Ot[Xe]=Ot[st]=!1;var _l={À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"},kl={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Al={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},Nl={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Rl=parseFloat,Dl=parseInt,so=typeof commonjsGlobal=="object"&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal,Fl=typeof self=="object"&&self&&self.Object===Object&&self,nn=so||Fl||Function("return this")(),Us=e&&!e.nodeType&&e,cr=Us&&!0&&n&&!n.nodeType&&n,io=cr&&cr.exports===Us,Vs=io&&so.process,Tn=function(){try{var ce=cr&&cr.require&&cr.require("util").types;return ce||Vs&&Vs.binding&&Vs.binding("util")}catch{}}(),oo=Tn&&Tn.isArrayBuffer,ao=Tn&&Tn.isDate,lo=Tn&&Tn.isMap,co=Tn&&Tn.isRegExp,uo=Tn&&Tn.isSet,ho=Tn&&Tn.isTypedArray;function wn(ce,ve,be){switch(be.length){case 0:return ce.call(ve);case 1:return ce.call(ve,be[0]);case 2:return ce.call(ve,be[0],be[1]);case 3:return ce.call(ve,be[0],be[1],be[2])}return ce.apply(ve,be)}function Ml(ce,ve,be,Je){for(var pt=-1,Tt=ce==null?0:ce.length;++pt<Tt;){var Yt=ce[pt];ve(Je,Yt,be(Yt),ce)}return Je}function En(ce,ve){for(var be=-1,Je=ce==null?0:ce.length;++be<Je&&ve(ce[be],be,ce)!==!1;);return ce}function Ol(ce,ve){for(var be=ce==null?0:ce.length;be--&&ve(ce[be],be,ce)!==!1;);return ce}function fo(ce,ve){for(var be=-1,Je=ce==null?0:ce.length;++be<Je;)if(!ve(ce[be],be,ce))return!1;return!0}function er(ce,ve){for(var be=-1,Je=ce==null?0:ce.length,pt=0,Tt=[];++be<Je;){var Yt=ce[be];ve(Yt,be,ce)&&(Tt[pt++]=Yt)}return Tt}function es(ce,ve){var be=ce==null?0:ce.length;return!!be&&br(ce,ve,0)>-1}function Ws(ce,ve,be){for(var Je=-1,pt=ce==null?0:ce.length;++Je<pt;)if(be(ve,ce[Je]))return!0;return!1}function Bt(ce,ve){for(var be=-1,Je=ce==null?0:ce.length,pt=Array(Je);++be<Je;)pt[be]=ve(ce[be],be,ce);return pt}function tr(ce,ve){for(var be=-1,Je=ve.length,pt=ce.length;++be<Je;)ce[pt+be]=ve[be];return ce}function qs(ce,ve,be,Je){var pt=-1,Tt=ce==null?0:ce.length;for(Je&&Tt&&(be=ce[++pt]);++pt<Tt;)be=ve(be,ce[pt],pt,ce);return be}function Pl(ce,ve,be,Je){var pt=ce==null?0:ce.length;for(Je&&pt&&(be=ce[--pt]);pt--;)be=ve(be,ce[pt],pt,ce);return be}function Hs(ce,ve){for(var be=-1,Je=ce==null?0:ce.length;++be<Je;)if(ve(ce[be],be,ce))return!0;return!1}var Ll=Ks("length");function Bl(ce){return ce.split("")}function zl(ce){return ce.match(Z)||[]}function po(ce,ve,be){var Je;return be(ce,function(pt,Tt,Yt){if(ve(pt,Tt,Yt))return Je=Tt,!1}),Je}function ts(ce,ve,be,Je){for(var pt=ce.length,Tt=be+(Je?1:-1);Je?Tt--:++Tt<pt;)if(ve(ce[Tt],Tt,ce))return Tt;return-1}function br(ce,ve,be){return ve===ve?Jl(ce,ve,be):ts(ce,go,be)}function Gl(ce,ve,be,Je){for(var pt=be-1,Tt=ce.length;++pt<Tt;)if(Je(ce[pt],ve))return pt;return-1}function go(ce){return ce!==ce}function mo(ce,ve){var be=ce==null?0:ce.length;return be?Ys(ce,ve)/be:le}function Ks(ce){return function(ve){return ve==null?t:ve[ce]}}function Xs(ce){return function(ve){return ce==null?t:ce[ve]}}function xo(ce,ve,be,Je,pt){return pt(ce,function(Tt,Yt,Dt){be=Je?(Je=!1,Tt):ve(be,Tt,Yt,Dt)}),be}function Ul(ce,ve){var be=ce.length;for(ce.sort(ve);be--;)ce[be]=ce[be].value;return ce}function Ys(ce,ve){for(var be,Je=-1,pt=ce.length;++Je<pt;){var Tt=ve(ce[Je]);Tt!==t&&(be=be===t?Tt:be+Tt)}return be}function js(ce,ve){for(var be=-1,Je=Array(ce);++be<ce;)Je[be]=ve(be);return Je}function Vl(ce,ve){return Bt(ve,function(be){return[be,ce[be]]})}function bo(ce){return ce&&ce.slice(0,$o(ce)+1).replace(G,"")}function vn(ce){return function(ve){return ce(ve)}}function Zs(ce,ve){return Bt(ve,function(be){return ce[be]})}function Fr(ce,ve){return ce.has(ve)}function yo(ce,ve){for(var be=-1,Je=ce.length;++be<Je&&br(ve,ce[be],0)>-1;);return be}function wo(ce,ve){for(var be=ce.length;be--&&br(ve,ce[be],0)>-1;);return be}function Wl(ce,ve){for(var be=ce.length,Je=0;be--;)ce[be]===ve&&++Je;return Je}var ql=Xs(_l),Hl=Xs(kl);function Kl(ce){return"\\"+Nl[ce]}function Xl(ce,ve){return ce==null?t:ce[ve]}function yr(ce){return Il.test(ce)}function Yl(ce){return Sl.test(ce)}function jl(ce){for(var ve,be=[];!(ve=ce.next()).done;)be.push(ve.value);return be}function Js(ce){var ve=-1,be=Array(ce.size);return ce.forEach(function(Je,pt){be[++ve]=[pt,Je]}),be}function vo(ce,ve){return function(be){return ce(ve(be))}}function nr(ce,ve){for(var be=-1,Je=ce.length,pt=0,Tt=[];++be<Je;){var Yt=ce[be];(Yt===ve||Yt===u)&&(ce[be]=u,Tt[pt++]=be)}return Tt}function ns(ce){var ve=-1,be=Array(ce.size);return ce.forEach(function(Je){be[++ve]=Je}),be}function Zl(ce){var ve=-1,be=Array(ce.size);return ce.forEach(function(Je){be[++ve]=[Je,Je]}),be}function Jl(ce,ve,be){for(var Je=be-1,pt=ce.length;++Je<pt;)if(ce[Je]===ve)return Je;return-1}function Ql(ce,ve,be){for(var Je=be+1;Je--;)if(ce[Je]===ve)return Je;return Je}function wr(ce){return yr(ce)?tc(ce):Ll(ce)}function On(ce){return yr(ce)?nc(ce):Bl(ce)}function $o(ce){for(var ve=ce.length;ve--&&U.test(ce.charAt(ve)););return ve}var ec=Xs(Al);function tc(ce){for(var ve=Gs.lastIndex=0;Gs.test(ce);)++ve;return ve}function nc(ce){return ce.match(Gs)||[]}function rc(ce){return ce.match(Cl)||[]}var sc=function ce(ve){ve=ve==null?nn:vr.defaults(nn.Object(),ve,vr.pick(nn,Tl));var be=ve.Array,Je=ve.Date,pt=ve.Error,Tt=ve.Function,Yt=ve.Math,Dt=ve.Object,Qs=ve.RegExp,ic=ve.String,_n=ve.TypeError,rs=be.prototype,oc=Tt.prototype,$r=Dt.prototype,ss=ve["__core-js_shared__"],is=oc.toString,kt=$r.hasOwnProperty,ac=0,Co=function(){var f=/[^.]+$/.exec(ss&&ss.keys&&ss.keys.IE_PROTO||"");return f?"Symbol(src)_1."+f:""}(),os=$r.toString,lc=is.call(Dt),cc=nn._,uc=Qs("^"+is.call(kt).replace(I,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),as=io?ve.Buffer:t,rr=ve.Symbol,ls=ve.Uint8Array,Io=as?as.allocUnsafe:t,cs=vo(Dt.getPrototypeOf,Dt),So=Dt.create,To=$r.propertyIsEnumerable,us=rs.splice,Eo=rr?rr.isConcatSpreadable:t,Mr=rr?rr.iterator:t,ur=rr?rr.toStringTag:t,hs=function(){try{var f=gr(Dt,"defineProperty");return f({},"",{}),f}catch{}}(),hc=ve.clearTimeout!==nn.clearTimeout&&ve.clearTimeout,dc=Je&&Je.now!==nn.Date.now&&Je.now,fc=ve.setTimeout!==nn.setTimeout&&ve.setTimeout,ds=Yt.ceil,fs=Yt.floor,ei=Dt.getOwnPropertySymbols,pc=as?as.isBuffer:t,_o=ve.isFinite,gc=rs.join,mc=vo(Dt.keys,Dt),jt=Yt.max,on=Yt.min,xc=Je.now,bc=ve.parseInt,ko=Yt.random,yc=rs.reverse,ti=gr(ve,"DataView"),Or=gr(ve,"Map"),ni=gr(ve,"Promise"),Cr=gr(ve,"Set"),Pr=gr(ve,"WeakMap"),Lr=gr(Dt,"create"),ps=Pr&&new Pr,Ir={},wc=mr(ti),vc=mr(Or),$c=mr(ni),Cc=mr(Cr),Ic=mr(Pr),gs=rr?rr.prototype:t,Br=gs?gs.valueOf:t,Ao=gs?gs.toString:t;function V(f){if(Ut(f)&&!gt(f)&&!(f instanceof $t)){if(f instanceof kn)return f;if(kt.call(f,"__wrapped__"))return Na(f)}return new kn(f)}var Sr=function(){function f(){}return function(m){if(!zt(m))return{};if(So)return So(m);f.prototype=m;var E=new f;return f.prototype=t,E}}();function ms(){}function kn(f,m){this.__wrapped__=f,this.__actions__=[],this.__chain__=!!m,this.__index__=0,this.__values__=t}V.templateSettings={escape:Ft,evaluate:hn,interpolate:N,variable:"",imports:{_:V}},V.prototype=ms.prototype,V.prototype.constructor=V,kn.prototype=Sr(ms.prototype),kn.prototype.constructor=kn;function $t(f){this.__wrapped__=f,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=he,this.__views__=[]}function Sc(){var f=new $t(this.__wrapped__);return f.__actions__=fn(this.__actions__),f.__dir__=this.__dir__,f.__filtered__=this.__filtered__,f.__iteratees__=fn(this.__iteratees__),f.__takeCount__=this.__takeCount__,f.__views__=fn(this.__views__),f}function Tc(){if(this.__filtered__){var f=new $t(this);f.__dir__=-1,f.__filtered__=!0}else f=this.clone(),f.__dir__*=-1;return f}function Ec(){var f=this.__wrapped__.value(),m=this.__dir__,E=gt(f),F=m<0,B=E?f.length:0,H=Bu(0,B,this.__views__),J=H.start,ne=H.end,ue=ne-J,$e=F?ne:J-1,Ie=this.__iteratees__,Re=Ie.length,je=0,tt=on(ue,this.__takeCount__);if(!E||!F&&B==ue&&tt==ue)return ea(f,this.__actions__);var ut=[];e:for(;ue--&&je<tt;){$e+=m;for(var xt=-1,ht=f[$e];++xt<Re;){var vt=Ie[xt],Ct=vt.iteratee,In=vt.type,un=Ct(ht);if(In==Y)ht=un;else if(!un){if(In==K)continue e;break e}}ut[je++]=ht}return ut}$t.prototype=Sr(ms.prototype),$t.prototype.constructor=$t;function hr(f){var m=-1,E=f==null?0:f.length;for(this.clear();++m<E;){var F=f[m];this.set(F[0],F[1])}}function _c(){this.__data__=Lr?Lr(null):{},this.size=0}function kc(f){var m=this.has(f)&&delete this.__data__[f];return this.size-=m?1:0,m}function Ac(f){var m=this.__data__;if(Lr){var E=m[f];return E===l?t:E}return kt.call(m,f)?m[f]:t}function Nc(f){var m=this.__data__;return Lr?m[f]!==t:kt.call(m,f)}function Rc(f,m){var E=this.__data__;return this.size+=this.has(f)?0:1,E[f]=Lr&&m===t?l:m,this}hr.prototype.clear=_c,hr.prototype.delete=kc,hr.prototype.get=Ac,hr.prototype.has=Nc,hr.prototype.set=Rc;function Wn(f){var m=-1,E=f==null?0:f.length;for(this.clear();++m<E;){var F=f[m];this.set(F[0],F[1])}}function Dc(){this.__data__=[],this.size=0}function Fc(f){var m=this.__data__,E=xs(m,f);if(E<0)return!1;var F=m.length-1;return E==F?m.pop():us.call(m,E,1),--this.size,!0}function Mc(f){var m=this.__data__,E=xs(m,f);return E<0?t:m[E][1]}function Oc(f){return xs(this.__data__,f)>-1}function Pc(f,m){var E=this.__data__,F=xs(E,f);return F<0?(++this.size,E.push([f,m])):E[F][1]=m,this}Wn.prototype.clear=Dc,Wn.prototype.delete=Fc,Wn.prototype.get=Mc,Wn.prototype.has=Oc,Wn.prototype.set=Pc;function qn(f){var m=-1,E=f==null?0:f.length;for(this.clear();++m<E;){var F=f[m];this.set(F[0],F[1])}}function Lc(){this.size=0,this.__data__={hash:new hr,map:new(Or||Wn),string:new hr}}function Bc(f){var m=ks(this,f).delete(f);return this.size-=m?1:0,m}function zc(f){return ks(this,f).get(f)}function Gc(f){return ks(this,f).has(f)}function Uc(f,m){var E=ks(this,f),F=E.size;return E.set(f,m),this.size+=E.size==F?0:1,this}qn.prototype.clear=Lc,qn.prototype.delete=Bc,qn.prototype.get=zc,qn.prototype.has=Gc,qn.prototype.set=Uc;function dr(f){var m=-1,E=f==null?0:f.length;for(this.__data__=new qn;++m<E;)this.add(f[m])}function Vc(f){return this.__data__.set(f,l),this}function Wc(f){return this.__data__.has(f)}dr.prototype.add=dr.prototype.push=Vc,dr.prototype.has=Wc;function Pn(f){var m=this.__data__=new Wn(f);this.size=m.size}function qc(){this.__data__=new Wn,this.size=0}function Hc(f){var m=this.__data__,E=m.delete(f);return this.size=m.size,E}function Kc(f){return this.__data__.get(f)}function Xc(f){return this.__data__.has(f)}function Yc(f,m){var E=this.__data__;if(E instanceof Wn){var F=E.__data__;if(!Or||F.length<s-1)return F.push([f,m]),this.size=++E.size,this;E=this.__data__=new qn(F)}return E.set(f,m),this.size=E.size,this}Pn.prototype.clear=qc,Pn.prototype.delete=Hc,Pn.prototype.get=Kc,Pn.prototype.has=Xc,Pn.prototype.set=Yc;function No(f,m){var E=gt(f),F=!E&&xr(f),B=!E&&!F&&lr(f),H=!E&&!F&&!B&&kr(f),J=E||F||B||H,ne=J?js(f.length,ic):[],ue=ne.length;for(var $e in f)(m||kt.call(f,$e))&&!(J&&($e=="length"||B&&($e=="offset"||$e=="parent")||H&&($e=="buffer"||$e=="byteLength"||$e=="byteOffset")||Yn($e,ue)))&&ne.push($e);return ne}function Ro(f){var m=f.length;return m?f[pi(0,m-1)]:t}function jc(f,m){return As(fn(f),fr(m,0,f.length))}function Zc(f){return As(fn(f))}function ri(f,m,E){(E!==t&&!Ln(f[m],E)||E===t&&!(m in f))&&Hn(f,m,E)}function zr(f,m,E){var F=f[m];(!(kt.call(f,m)&&Ln(F,E))||E===t&&!(m in f))&&Hn(f,m,E)}function xs(f,m){for(var E=f.length;E--;)if(Ln(f[E][0],m))return E;return-1}function Jc(f,m,E,F){return sr(f,function(B,H,J){m(F,B,E(B),J)}),F}function Do(f,m){return f&&Un(m,Qt(m),f)}function Qc(f,m){return f&&Un(m,gn(m),f)}function Hn(f,m,E){m=="__proto__"&&hs?hs(f,m,{configurable:!0,enumerable:!0,value:E,writable:!0}):f[m]=E}function si(f,m){for(var E=-1,F=m.length,B=be(F),H=f==null;++E<F;)B[E]=H?t:Bi(f,m[E]);return B}function fr(f,m,E){return f===f&&(E!==t&&(f=f<=E?f:E),m!==t&&(f=f>=m?f:m)),f}function An(f,m,E,F,B,H){var J,ne=m&h,ue=m&d,$e=m&g;if(E&&(J=B?E(f,F,B,H):E(f)),J!==t)return J;if(!zt(f))return f;var Ie=gt(f);if(Ie){if(J=Gu(f),!ne)return fn(f,J)}else{var Re=an(f),je=Re==Xe||Re==qe;if(lr(f))return ra(f,ne);if(Re==Oe||Re==j||je&&!B){if(J=ue||je?{}:$a(f),!ne)return ue?Au(f,Qc(J,f)):ku(f,Do(J,f))}else{if(!Ot[Re])return B?f:{};J=Uu(f,Re,ne)}}H||(H=new Pn);var tt=H.get(f);if(tt)return tt;H.set(f,J),Za(f)?f.forEach(function(ht){J.add(An(ht,m,E,ht,f,H))}):Ya(f)&&f.forEach(function(ht,vt){J.set(vt,An(ht,m,E,vt,f,H))});var ut=$e?ue?Si:Ii:ue?gn:Qt,xt=Ie?t:ut(f);return En(xt||f,function(ht,vt){xt&&(vt=ht,ht=f[vt]),zr(J,vt,An(ht,m,E,vt,f,H))}),J}function eu(f){var m=Qt(f);return function(E){return Fo(E,f,m)}}function Fo(f,m,E){var F=E.length;if(f==null)return!F;for(f=Dt(f);F--;){var B=E[F],H=m[B],J=f[B];if(J===t&&!(B in f)||!H(J))return!1}return!0}function Mo(f,m,E){if(typeof f!="function")throw new _n(o);return Xr(function(){f.apply(t,E)},m)}function Gr(f,m,E,F){var B=-1,H=es,J=!0,ne=f.length,ue=[],$e=m.length;if(!ne)return ue;E&&(m=Bt(m,vn(E))),F?(H=Ws,J=!1):m.length>=s&&(H=Fr,J=!1,m=new dr(m));e:for(;++B<ne;){var Ie=f[B],Re=E==null?Ie:E(Ie);if(Ie=F||Ie!==0?Ie:0,J&&Re===Re){for(var je=$e;je--;)if(m[je]===Re)continue e;ue.push(Ie)}else H(m,Re,F)||ue.push(Ie)}return ue}var sr=la(Gn),Oo=la(oi,!0);function tu(f,m){var E=!0;return sr(f,function(F,B,H){return E=!!m(F,B,H),E}),E}function bs(f,m,E){for(var F=-1,B=f.length;++F<B;){var H=f[F],J=m(H);if(J!=null&&(ne===t?J===J&&!Cn(J):E(J,ne)))var ne=J,ue=H}return ue}function nu(f,m,E,F){var B=f.length;for(E=mt(E),E<0&&(E=-E>B?0:B+E),F=F===t||F>B?B:mt(F),F<0&&(F+=B),F=E>F?0:Qa(F);E<F;)f[E++]=m;return f}function Po(f,m){var E=[];return sr(f,function(F,B,H){m(F,B,H)&&E.push(F)}),E}function rn(f,m,E,F,B){var H=-1,J=f.length;for(E||(E=Wu),B||(B=[]);++H<J;){var ne=f[H];m>0&&E(ne)?m>1?rn(ne,m-1,E,F,B):tr(B,ne):F||(B[B.length]=ne)}return B}var ii=ca(),Lo=ca(!0);function Gn(f,m){return f&&ii(f,m,Qt)}function oi(f,m){return f&&Lo(f,m,Qt)}function ys(f,m){return er(m,function(E){return jn(f[E])})}function pr(f,m){m=or(m,f);for(var E=0,F=m.length;f!=null&&E<F;)f=f[Vn(m[E++])];return E&&E==F?f:t}function Bo(f,m,E){var F=m(f);return gt(f)?F:tr(F,E(f))}function ln(f){return f==null?f===t?rt:Ye:ur&&ur in Dt(f)?Lu(f):Zu(f)}function ai(f,m){return f>m}function ru(f,m){return f!=null&&kt.call(f,m)}function su(f,m){return f!=null&&m in Dt(f)}function iu(f,m,E){return f>=on(m,E)&&f<jt(m,E)}function ci(f,m,E){for(var F=E?Ws:es,B=f[0].length,H=f.length,J=H,ne=be(H),ue=1/0,$e=[];J--;){var Ie=f[J];J&&m&&(Ie=Bt(Ie,vn(m))),ue=on(Ie.length,ue),ne[J]=!E&&(m||B>=120&&Ie.length>=120)?new dr(J&&Ie):t}Ie=f[0];var Re=-1,je=ne[0];e:for(;++Re<B&&$e.length<ue;){var tt=Ie[Re],ut=m?m(tt):tt;if(tt=E||tt!==0?tt:0,!(je?Fr(je,ut):F($e,ut,E))){for(J=H;--J;){var xt=ne[J];if(!(xt?Fr(xt,ut):F(f[J],ut,E)))continue e}je&&je.push(ut),$e.push(tt)}}return $e}function ou(f,m,E,F){return Gn(f,function(B,H,J){m(F,E(B),H,J)}),F}function Ur(f,m,E){m=or(m,f),f=Ta(f,m);var F=f==null?f:f[Vn(Rn(m))];return F==null?t:wn(F,f,E)}function zo(f){return Ut(f)&&ln(f)==j}function au(f){return Ut(f)&&ln(f)==ze}function lu(f){return Ut(f)&&ln(f)==Ce}function Vr(f,m,E,F,B){return f===m?!0:f==null||m==null||!Ut(f)&&!Ut(m)?f!==f&&m!==m:cu(f,m,E,F,Vr,B)}function cu(f,m,E,F,B,H){var J=gt(f),ne=gt(m),ue=J?xe:an(f),$e=ne?xe:an(m);ue=ue==j?Oe:ue,$e=$e==j?Oe:$e;var Ie=ue==Oe,Re=$e==Oe,je=ue==$e;if(je&&lr(f)){if(!lr(m))return!1;J=!0,Ie=!1}if(je&&!Ie)return H||(H=new Pn),J||kr(f)?ya(f,m,E,F,B,H):Ou(f,m,ue,E,F,B,H);if(!(E&x)){var tt=Ie&&kt.call(f,"__wrapped__"),ut=Re&&kt.call(m,"__wrapped__");if(tt||ut){var xt=tt?f.value():f,ht=ut?m.value():m;return H||(H=new Pn),B(xt,ht,E,F,H)}}return je?(H||(H=new Pn),Pu(f,m,E,F,B,H)):!1}function uu(f){return Ut(f)&&an(f)==ke}function ui(f,m,E,F){var B=E.length,H=B,J=!F;if(f==null)return!H;for(f=Dt(f);B--;){var ne=E[B];if(J&&ne[2]?ne[1]!==f[ne[0]]:!(ne[0]in f))return!1}for(;++B<H;){ne=E[B];var ue=ne[0],$e=f[ue],Ie=ne[1];if(J&&ne[2]){if($e===t&&!(ue in f))return!1}else{var Re=new Pn;if(F)var je=F($e,Ie,ue,f,m,Re);if(!(je===t?Vr(Ie,$e,x|y,F,Re):je))return!1}}return!0}function Go(f){if(!zt(f)||Hu(f))return!1;var m=jn(f)?uc:Ne;return m.test(mr(f))}function hu(f){return Ut(f)&&ln(f)==Pe}function du(f){return Ut(f)&&an(f)==Le}function fu(f){return Ut(f)&&Os(f.length)&&!!Lt[ln(f)]}function Uo(f){return typeof f=="function"?f:f==null?mn:typeof f=="object"?gt(f)?qo(f[0],f[1]):Wo(f):ul(f)}function hi(f){if(!Kr(f))return mc(f);var m=[];for(var E in Dt(f))kt.call(f,E)&&E!="constructor"&&m.push(E);return m}function pu(f){if(!zt(f))return ju(f);var m=Kr(f),E=[];for(var F in f)F=="constructor"&&(m||!kt.call(f,F))||E.push(F);return E}function di(f,m){return f<m}function Vo(f,m){var E=-1,F=pn(f)?be(f.length):[];return sr(f,function(B,H,J){F[++E]=m(B,H,J)}),F}function Wo(f){var m=Ei(f);return m.length==1&&m[0][2]?Ia(m[0][0],m[0][1]):function(E){return E===f||ui(E,f,m)}}function qo(f,m){return ki(f)&&Ca(m)?Ia(Vn(f),m):function(E){var F=Bi(E,f);return F===t&&F===m?zi(E,f):Vr(m,F,x|y)}}function ws(f,m,E,F,B){f!==m&&ii(m,function(H,J){if(B||(B=new Pn),zt(H))gu(f,m,J,E,ws,F,B);else{var ne=F?F(Ni(f,J),H,J+"",f,m,B):t;ne===t&&(ne=H),ri(f,J,ne)}},gn)}function gu(f,m,E,F,B,H,J){var ne=Ni(f,E),ue=Ni(m,E),$e=J.get(ue);if($e){ri(f,E,$e);return}var Ie=H?H(ne,ue,E+"",f,m,J):t,Re=Ie===t;if(Re){var je=gt(ue),tt=!je&&lr(ue),ut=!je&&!tt&&kr(ue);Ie=ue,je||tt||ut?gt(ne)?Ie=ne:Wt(ne)?Ie=fn(ne):tt?(Re=!1,Ie=ra(ue,!0)):ut?(Re=!1,Ie=sa(ue,!0)):Ie=[]:Yr(ue)||xr(ue)?(Ie=ne,xr(ne)?Ie=el(ne):(!zt(ne)||jn(ne))&&(Ie=$a(ue))):Re=!1}Re&&(J.set(ue,Ie),B(Ie,ue,F,H,J),J.delete(ue)),ri(f,E,Ie)}function Ho(f,m){var E=f.length;if(E)return m+=m<0?E:0,Yn(m,E)?f[m]:t}function Ko(f,m,E){m.length?m=Bt(m,function(H){return gt(H)?function(J){return pr(J,H.length===1?H[0]:H)}:H}):m=[mn];var F=-1;m=Bt(m,vn(at()));var B=Vo(f,function(H,J,ne){var ue=Bt(m,function($e){return $e(H)});return{criteria:ue,index:++F,value:H}});return Ul(B,function(H,J){return _u(H,J,E)})}function mu(f,m){return Xo(f,m,function(E,F){return zi(f,F)})}function Xo(f,m,E){for(var F=-1,B=m.length,H={};++F<B;){var J=m[F],ne=pr(f,J);E(ne,J)&&Wr(H,or(J,f),ne)}return H}function xu(f){return function(m){return pr(m,f)}}function fi(f,m,E,F){var B=F?Gl:br,H=-1,J=m.length,ne=f;for(f===m&&(m=fn(m)),E&&(ne=Bt(f,vn(E)));++H<J;)for(var ue=0,$e=m[H],Ie=E?E($e):$e;(ue=B(ne,Ie,ue,F))>-1;)ne!==f&&us.call(ne,ue,1),us.call(f,ue,1);return f}function Yo(f,m){for(var E=f?m.length:0,F=E-1;E--;){var B=m[E];if(E==F||B!==H){var H=B;Yn(B)?us.call(f,B,1):xi(f,B)}}return f}function pi(f,m){return f+fs(ko()*(m-f+1))}function bu(f,m,E,F){for(var B=-1,H=jt(ds((m-f)/(E||1)),0),J=be(H);H--;)J[F?H:++B]=f,f+=E;return J}function gi(f,m){var E="";if(!f||m<1||m>Q)return E;do m%2&&(E+=f),m=fs(m/2),m&&(f+=f);while(m);return E}function yt(f,m){return Ri(Sa(f,m,mn),f+"")}function yu(f){return Ro(Ar(f))}function wu(f,m){var E=Ar(f);return As(E,fr(m,0,E.length))}function Wr(f,m,E,F){if(!zt(f))return f;m=or(m,f);for(var B=-1,H=m.length,J=H-1,ne=f;ne!=null&&++B<H;){var ue=Vn(m[B]),$e=E;if(ue==="__proto__"||ue==="constructor"||ue==="prototype")return f;if(B!=J){var Ie=ne[ue];$e=F?F(Ie,ue,ne):t,$e===t&&($e=zt(Ie)?Ie:Yn(m[B+1])?[]:{})}zr(ne,ue,$e),ne=ne[ue]}return f}var jo=ps?function(f,m){return ps.set(f,m),f}:mn,vu=hs?function(f,m){return hs(f,"toString",{configurable:!0,enumerable:!1,value:Ui(m),writable:!0})}:mn;function $u(f){return As(Ar(f))}function Nn(f,m,E){var F=-1,B=f.length;m<0&&(m=-m>B?0:B+m),E=E>B?B:E,E<0&&(E+=B),B=m>E?0:E-m>>>0,m>>>=0;for(var H=be(B);++F<B;)H[F]=f[F+m];return H}function Cu(f,m){var E;return sr(f,function(F,B,H){return E=m(F,B,H),!E}),!!E}function vs(f,m,E){var F=0,B=f==null?F:f.length;if(typeof m=="number"&&m===m&&B<=fe){for(;F<B;){var H=F+B>>>1,J=f[H];J!==null&&!Cn(J)&&(E?J<=m:J<m)?F=H+1:B=H}return B}return mi(f,m,mn,E)}function mi(f,m,E,F){var B=0,H=f==null?0:f.length;if(H===0)return 0;m=E(m);for(var J=m!==m,ne=m===null,ue=Cn(m),$e=m===t;B<H;){var Ie=fs((B+H)/2),Re=E(f[Ie]),je=Re!==t,tt=Re===null,ut=Re===Re,xt=Cn(Re);if(J)var ht=F||ut;else $e?ht=ut&&(F||je):ne?ht=ut&&je&&(F||!tt):ue?ht=ut&&je&&!tt&&(F||!xt):tt||xt?ht=!1:ht=F?Re<=m:Re<m;ht?B=Ie+1:H=Ie}return on(H,re)}function Zo(f,m){for(var E=-1,F=f.length,B=0,H=[];++E<F;){var J=f[E],ne=m?m(J):J;if(!E||!Ln(ne,ue)){var ue=ne;H[B++]=J===0?0:J}}return H}function Jo(f){return typeof f=="number"?f:Cn(f)?le:+f}function $n(f){if(typeof f=="string")return f;if(gt(f))return Bt(f,$n)+"";if(Cn(f))return Ao?Ao.call(f):"";var m=f+"";return m=="0"&&1/f==-1/0?"-0":m}function ir(f,m,E){var F=-1,B=es,H=f.length,J=!0,ne=[],ue=ne;if(E)J=!1,B=Ws;else if(H>=s){var $e=m?null:Fu(f);if($e)return ns($e);J=!1,B=Fr,ue=new dr}else ue=m?[]:ne;e:for(;++F<H;){var Ie=f[F],Re=m?m(Ie):Ie;if(Ie=E||Ie!==0?Ie:0,J&&Re===Re){for(var je=ue.length;je--;)if(ue[je]===Re)continue e;m&&ue.push(Re),ne.push(Ie)}else B(ue,Re,E)||(ue!==ne&&ue.push(Re),ne.push(Ie))}return ne}function xi(f,m){return m=or(m,f),f=Ta(f,m),f==null||delete f[Vn(Rn(m))]}function Qo(f,m,E,F){return Wr(f,m,E(pr(f,m)),F)}function $s(f,m,E,F){for(var B=f.length,H=F?B:-1;(F?H--:++H<B)&&m(f[H],H,f););return E?Nn(f,F?0:H,F?H+1:B):Nn(f,F?H+1:0,F?B:H)}function ea(f,m){var E=f;return E instanceof $t&&(E=E.value()),qs(m,function(F,B){return B.func.apply(B.thisArg,tr([F],B.args))},E)}function bi(f,m,E){var F=f.length;if(F<2)return F?ir(f[0]):[];for(var B=-1,H=be(F);++B<F;)for(var J=f[B],ne=-1;++ne<F;)ne!=B&&(H[B]=Gr(H[B]||J,f[ne],m,E));return ir(rn(H,1),m,E)}function ta(f,m,E){for(var F=-1,B=f.length,H=m.length,J={};++F<B;){var ne=F<H?m[F]:t;E(J,f[F],ne)}return J}function yi(f){return Wt(f)?f:[]}function wi(f){return typeof f=="function"?f:mn}function or(f,m){return gt(f)?f:ki(f,m)?[f]:Aa(Et(f))}var Iu=yt;function ar(f,m,E){var F=f.length;return E=E===t?F:E,!m&&E>=F?f:Nn(f,m,E)}var na=hc||function(f){return nn.clearTimeout(f)};function ra(f,m){if(m)return f.slice();var E=f.length,F=Io?Io(E):new f.constructor(E);return f.copy(F),F}function vi(f){var m=new f.constructor(f.byteLength);return new ls(m).set(new ls(f)),m}function Su(f,m){var E=m?vi(f.buffer):f.buffer;return new f.constructor(E,f.byteOffset,f.byteLength)}function Tu(f){var m=new f.constructor(f.source,ye.exec(f));return m.lastIndex=f.lastIndex,m}function Eu(f){return Br?Dt(Br.call(f)):{}}function sa(f,m){var E=m?vi(f.buffer):f.buffer;return new f.constructor(E,f.byteOffset,f.length)}function ia(f,m){if(f!==m){var E=f!==t,F=f===null,B=f===f,H=Cn(f),J=m!==t,ne=m===null,ue=m===m,$e=Cn(m);if(!ne&&!$e&&!H&&f>m||H&&J&&ue&&!ne&&!$e||F&&J&&ue||!E&&ue||!B)return 1;if(!F&&!H&&!$e&&f<m||$e&&E&&B&&!F&&!H||ne&&E&&B||!J&&B||!ue)return-1}return 0}function _u(f,m,E){for(var F=-1,B=f.criteria,H=m.criteria,J=B.length,ne=E.length;++F<J;){var ue=ia(B[F],H[F]);if(ue){if(F>=ne)return ue;var $e=E[F];return ue*($e=="desc"?-1:1)}}return f.index-m.index}function oa(f,m,E,F){for(var B=-1,H=f.length,J=E.length,ne=-1,ue=m.length,$e=jt(H-J,0),Ie=be(ue+$e),Re=!F;++ne<ue;)Ie[ne]=m[ne];for(;++B<J;)(Re||B<H)&&(Ie[E[B]]=f[B]);for(;$e--;)Ie[ne++]=f[B++];return Ie}function aa(f,m,E,F){for(var B=-1,H=f.length,J=-1,ne=E.length,ue=-1,$e=m.length,Ie=jt(H-ne,0),Re=be(Ie+$e),je=!F;++B<Ie;)Re[B]=f[B];for(var tt=B;++ue<$e;)Re[tt+ue]=m[ue];for(;++J<ne;)(je||B<H)&&(Re[tt+E[J]]=f[B++]);return Re}function fn(f,m){var E=-1,F=f.length;for(m||(m=be(F));++E<F;)m[E]=f[E];return m}function Un(f,m,E,F){var B=!E;E||(E={});for(var H=-1,J=m.length;++H<J;){var ne=m[H],ue=F?F(E[ne],f[ne],ne,E,f):t;ue===t&&(ue=f[ne]),B?Hn(E,ne,ue):zr(E,ne,ue)}return E}function ku(f,m){return Un(f,_i(f),m)}function Au(f,m){return Un(f,wa(f),m)}function Cs(f,m){return function(E,F){var B=gt(E)?Ml:Jc,H=m?m():{};return B(E,f,at(F,2),H)}}function Tr(f){return yt(function(m,E){var F=-1,B=E.length,H=B>1?E[B-1]:t,J=B>2?E[2]:t;for(H=f.length>3&&typeof H=="function"?(B--,H):t,J&&cn(E[0],E[1],J)&&(H=B<3?t:H,B=1),m=Dt(m);++F<B;){var ne=E[F];ne&&f(m,ne,F,H)}return m})}function la(f,m){return function(E,F){if(E==null)return E;if(!pn(E))return f(E,F);for(var B=E.length,H=m?B:-1,J=Dt(E);(m?H--:++H<B)&&F(J[H],H,J)!==!1;);return E}}function ca(f){return function(m,E,F){for(var B=-1,H=Dt(m),J=F(m),ne=J.length;ne--;){var ue=J[f?ne:++B];if(E(H[ue],ue,H)===!1)break}return m}}function Nu(f,m,E){var F=m&w,B=Hr(f);function H(){var J=this&&this!==nn&&this instanceof H?B:f;return J.apply(F?E:this,arguments)}return H}function ua(f){return function(m){m=Et(m);var E=yr(m)?On(m):t,F=E?E[0]:m.charAt(0),B=E?ar(E,1).join(""):m.slice(1);return F[f]()+B}}function Er(f){return function(m){return qs(ll(al(m).replace(vl,"")),f,"")}}function Hr(f){return function(){var m=arguments;switch(m.length){case 0:return new f;case 1:return new f(m[0]);case 2:return new f(m[0],m[1]);case 3:return new f(m[0],m[1],m[2]);case 4:return new f(m[0],m[1],m[2],m[3]);case 5:return new f(m[0],m[1],m[2],m[3],m[4]);case 6:return new f(m[0],m[1],m[2],m[3],m[4],m[5]);case 7:return new f(m[0],m[1],m[2],m[3],m[4],m[5],m[6])}var E=Sr(f.prototype),F=f.apply(E,m);return zt(F)?F:E}}function Ru(f,m,E){var F=Hr(f);function B(){for(var H=arguments.length,J=be(H),ne=H,ue=_r(B);ne--;)J[ne]=arguments[ne];var $e=H<3&&J[0]!==ue&&J[H-1]!==ue?[]:nr(J,ue);if(H-=$e.length,H<E)return ga(f,m,Is,B.placeholder,t,J,$e,t,t,E-H);var Ie=this&&this!==nn&&this instanceof B?F:f;return wn(Ie,this,J)}return B}function ha(f){return function(m,E,F){var B=Dt(m);if(!pn(m)){var H=at(E,3);m=Qt(m),E=function(ne){return H(B[ne],ne,B)}}var J=f(m,E,F);return J>-1?B[H?m[J]:J]:t}}function da(f){return Xn(function(m){var E=m.length,F=E,B=kn.prototype.thru;for(f&&m.reverse();F--;){var H=m[F];if(typeof H!="function")throw new _n(o);if(B&&!J&&_s(H)=="wrapper")var J=new kn([],!0)}for(F=J?F:E;++F<E;){H=m[F];var ne=_s(H),ue=ne=="wrapper"?Ti(H):t;ue&&Ai(ue[0])&&ue[1]==(L|_|k|D)&&!ue[4].length&&ue[9]==1?J=J[_s(ue[0])].apply(J,ue[3]):J=H.length==1&&Ai(H)?J[ne]():J.thru(H)}return function(){var $e=arguments,Ie=$e[0];if(J&&$e.length==1&&gt(Ie))return J.plant(Ie).value();for(var Re=0,je=E?m[Re].apply(this,$e):Ie;++Re<E;)je=m[Re].call(this,je);return je}})}function Is(f,m,E,F,B,H,J,ne,ue,$e){var Ie=m&L,Re=m&w,je=m&$,tt=m&(_|T),ut=m&M,xt=je?t:Hr(f);function ht(){for(var vt=arguments.length,Ct=be(vt),In=vt;In--;)Ct[In]=arguments[In];if(tt)var un=_r(ht),Sn=Wl(Ct,un);if(F&&(Ct=oa(Ct,F,B,tt)),H&&(Ct=aa(Ct,H,J,tt)),vt-=Sn,tt&&vt<$e){var qt=nr(Ct,un);return ga(f,m,Is,ht.placeholder,E,Ct,qt,ne,ue,$e-vt)}var Bn=Re?E:this,Jn=je?Bn[f]:f;return vt=Ct.length,ne?Ct=Ju(Ct,ne):ut&&vt>1&&Ct.reverse(),Ie&&ue<vt&&(Ct.length=ue),this&&this!==nn&&this instanceof ht&&(Jn=xt||Hr(Jn)),Jn.apply(Bn,Ct)}return ht}function fa(f,m){return function(E,F){return ou(E,f,m(F),{})}}function Ss(f,m){return function(E,F){var B;if(E===t&&F===t)return m;if(E!==t&&(B=E),F!==t){if(B===t)return F;typeof E=="string"||typeof F=="string"?(E=$n(E),F=$n(F)):(E=Jo(E),F=Jo(F)),B=f(E,F)}return B}}function $i(f){return Xn(function(m){return m=Bt(m,vn(at())),yt(function(E){var F=this;return f(m,function(B){return wn(B,F,E)})})})}function Ts(f,m){m=m===t?" ":$n(m);var E=m.length;if(E<2)return E?gi(m,f):m;var F=gi(m,ds(f/wr(m)));return yr(m)?ar(On(F),0,f).join(""):F.slice(0,f)}function Du(f,m,E,F){var B=m&w,H=Hr(f);function J(){for(var ne=-1,ue=arguments.length,$e=-1,Ie=F.length,Re=be(Ie+ue),je=this&&this!==nn&&this instanceof J?H:f;++$e<Ie;)Re[$e]=F[$e];for(;ue--;)Re[$e++]=arguments[++ne];return wn(je,B?E:this,Re)}return J}function pa(f){return function(m,E,F){return F&&typeof F!="number"&&cn(m,E,F)&&(E=F=t),m=Zn(m),E===t?(E=m,m=0):E=Zn(E),F=F===t?m<E?1:-1:Zn(F),bu(m,E,F,f)}}function Es(f){return function(m,E){return typeof m=="string"&&typeof E=="string"||(m=Dn(m),E=Dn(E)),f(m,E)}}function ga(f,m,E,F,B,H,J,ne,ue,$e){var Ie=m&_,Re=Ie?J:t,je=Ie?t:J,tt=Ie?H:t,ut=Ie?t:H;m|=Ie?k:P,m&=~(Ie?P:k),m&S||(m&=-4);var xt=[f,m,B,tt,Re,ut,je,ne,ue,$e],ht=E.apply(t,xt);return Ai(f)&&Ea(ht,xt),ht.placeholder=F,_a(ht,f,m)}function Ci(f){var m=Yt[f];return function(E,F){if(E=Dn(E),F=F==null?0:on(mt(F),292),F&&_o(E)){var B=(Et(E)+"e").split("e"),H=m(B[0]+"e"+(+B[1]+F));return B=(Et(H)+"e").split("e"),+(B[0]+"e"+(+B[1]-F))}return m(E)}}var Fu=Cr&&1/ns(new Cr([,-0]))[1]==ie?function(f){return new Cr(f)}:qi;function ma(f){return function(m){var E=an(m);return E==ke?Js(m):E==Le?Zl(m):Vl(m,f(m))}}function Kn(f,m,E,F,B,H,J,ne){var ue=m&$;if(!ue&&typeof f!="function")throw new _n(o);var $e=F?F.length:0;if($e||(m&=-97,F=B=t),J=J===t?J:jt(mt(J),0),ne=ne===t?ne:mt(ne),$e-=B?B.length:0,m&P){var Ie=F,Re=B;F=B=t}var je=ue?t:Ti(f),tt=[f,m,E,F,B,Ie,Re,H,J,ne];if(je&&Yu(tt,je),f=tt[0],m=tt[1],E=tt[2],F=tt[3],B=tt[4],ne=tt[9]=tt[9]===t?ue?0:f.length:jt(tt[9]-$e,0),!ne&&m&(_|T)&&(m&=-25),!m||m==w)var ut=Nu(f,m,E);else m==_||m==T?ut=Ru(f,m,ne):(m==k||m==(w|k))&&!B.length?ut=Du(f,m,E,F):ut=Is.apply(t,tt);var xt=je?jo:Ea;return _a(xt(ut,tt),f,m)}function xa(f,m,E,F){return f===t||Ln(f,$r[E])&&!kt.call(F,E)?m:f}function ba(f,m,E,F,B,H){return zt(f)&&zt(m)&&(H.set(m,f),ws(f,m,t,ba,H),H.delete(m)),f}function Mu(f){return Yr(f)?t:f}function ya(f,m,E,F,B,H){var J=E&x,ne=f.length,ue=m.length;if(ne!=ue&&!(J&&ue>ne))return!1;var $e=H.get(f),Ie=H.get(m);if($e&&Ie)return $e==m&&Ie==f;var Re=-1,je=!0,tt=E&y?new dr:t;for(H.set(f,m),H.set(m,f);++Re<ne;){var ut=f[Re],xt=m[Re];if(F)var ht=J?F(xt,ut,Re,m,f,H):F(ut,xt,Re,f,m,H);if(ht!==t){if(ht)continue;je=!1;break}if(tt){if(!Hs(m,function(vt,Ct){if(!Fr(tt,Ct)&&(ut===vt||B(ut,vt,E,F,H)))return tt.push(Ct)})){je=!1;break}}else if(!(ut===xt||B(ut,xt,E,F,H))){je=!1;break}}return H.delete(f),H.delete(m),je}function Ou(f,m,E,F,B,H,J){switch(E){case Ze:if(f.byteLength!=m.byteLength||f.byteOffset!=m.byteOffset)return!1;f=f.buffer,m=m.buffer;case ze:return!(f.byteLength!=m.byteLength||!H(new ls(f),new ls(m)));case Se:case Ce:case we:return Ln(+f,+m);case Fe:return f.name==m.name&&f.message==m.message;case Pe:case Be:return f==m+"";case ke:var ne=Js;case Le:var ue=F&x;if(ne||(ne=ns),f.size!=m.size&&!ue)return!1;var $e=J.get(f);if($e)return $e==m;F|=y,J.set(f,m);var Ie=ya(ne(f),ne(m),F,B,H,J);return J.delete(f),Ie;case Te:if(Br)return Br.call(f)==Br.call(m)}return!1}function Pu(f,m,E,F,B,H){var J=E&x,ne=Ii(f),ue=ne.length,$e=Ii(m),Ie=$e.length;if(ue!=Ie&&!J)return!1;for(var Re=ue;Re--;){var je=ne[Re];if(!(J?je in m:kt.call(m,je)))return!1}var tt=H.get(f),ut=H.get(m);if(tt&&ut)return tt==m&&ut==f;var xt=!0;H.set(f,m),H.set(m,f);for(var ht=J;++Re<ue;){je=ne[Re];var vt=f[je],Ct=m[je];if(F)var In=J?F(Ct,vt,je,m,f,H):F(vt,Ct,je,f,m,H);if(!(In===t?vt===Ct||B(vt,Ct,E,F,H):In)){xt=!1;break}ht||(ht=je=="constructor")}if(xt&&!ht){var un=f.constructor,Sn=m.constructor;un!=Sn&&"constructor"in f&&"constructor"in m&&!(typeof un=="function"&&un instanceof un&&typeof Sn=="function"&&Sn instanceof Sn)&&(xt=!1)}return H.delete(f),H.delete(m),xt}function Xn(f){return Ri(Sa(f,t,Fa),f+"")}function Ii(f){return Bo(f,Qt,_i)}function Si(f){return Bo(f,gn,wa)}var Ti=ps?function(f){return ps.get(f)}:qi;function _s(f){for(var m=f.name+"",E=Ir[m],F=kt.call(Ir,m)?E.length:0;F--;){var B=E[F],H=B.func;if(H==null||H==f)return B.name}return m}function _r(f){var m=kt.call(V,"placeholder")?V:f;return m.placeholder}function at(){var f=V.iteratee||Vi;return f=f===Vi?Uo:f,arguments.length?f(arguments[0],arguments[1]):f}function ks(f,m){var E=f.__data__;return qu(m)?E[typeof m=="string"?"string":"hash"]:E.map}function Ei(f){for(var m=Qt(f),E=m.length;E--;){var F=m[E],B=f[F];m[E]=[F,B,Ca(B)]}return m}function gr(f,m){var E=Xl(f,m);return Go(E)?E:t}function Lu(f){var m=kt.call(f,ur),E=f[ur];try{f[ur]=t;var F=!0}catch{}var B=os.call(f);return F&&(m?f[ur]=E:delete f[ur]),B}var _i=ei?function(f){return f==null?[]:(f=Dt(f),er(ei(f),function(m){return To.call(f,m)}))}:Hi,wa=ei?function(f){for(var m=[];f;)tr(m,_i(f)),f=cs(f);return m}:Hi,an=ln;(ti&&an(new ti(new ArrayBuffer(1)))!=Ze||Or&&an(new Or)!=ke||ni&&an(ni.resolve())!=Ve||Cr&&an(new Cr)!=Le||Pr&&an(new Pr)!=st)&&(an=function(f){var m=ln(f),E=m==Oe?f.constructor:t,F=E?mr(E):"";if(F)switch(F){case wc:return Ze;case vc:return ke;case $c:return Ve;case Cc:return Le;case Ic:return st}return m});function Bu(f,m,E){for(var F=-1,B=E.length;++F<B;){var H=E[F],J=H.size;switch(H.type){case"drop":f+=J;break;case"dropRight":m-=J;break;case"take":m=on(m,f+J);break;case"takeRight":f=jt(f,m-J);break}}return{start:f,end:m}}function zu(f){var m=f.match(q);return m?m[1].split(ae):[]}function va(f,m,E){m=or(m,f);for(var F=-1,B=m.length,H=!1;++F<B;){var J=Vn(m[F]);if(!(H=f!=null&&E(f,J)))break;f=f[J]}return H||++F!=B?H:(B=f==null?0:f.length,!!B&&Os(B)&&Yn(J,B)&&(gt(f)||xr(f)))}function Gu(f){var m=f.length,E=new f.constructor(m);return m&&typeof f[0]=="string"&&kt.call(f,"index")&&(E.index=f.index,E.input=f.input),E}function $a(f){return typeof f.constructor=="function"&&!Kr(f)?Sr(cs(f)):{}}function Uu(f,m,E){var F=f.constructor;switch(m){case ze:return vi(f);case Se:case Ce:return new F(+f);case Ze:return Su(f,E);case We:case it:case dt:case nt:case lt:case ft:case bt:case Pt:case At:return sa(f,E);case ke:return new F;case we:case Be:return new F(f);case Pe:return Tu(f);case Le:return new F;case Te:return Eu(f)}}function Vu(f,m){var E=m.length;if(!E)return f;var F=E-1;return m[F]=(E>1?"& ":"")+m[F],m=m.join(E>2?", ":" "),f.replace(W,`{
/* [wrapped with `+m+`] */
`)}function Wu(f){return gt(f)||xr(f)||!!(Eo&&f&&f[Eo])}function Yn(f,m){var E=typeof f;return m=m??Q,!!m&&(E=="number"||E!="symbol"&&ot.test(f))&&f>-1&&f%1==0&&f<m}function cn(f,m,E){if(!zt(E))return!1;var F=typeof m;return(F=="number"?pn(E)&&Yn(m,E.length):F=="string"&&m in E)?Ln(E[m],f):!1}function ki(f,m){if(gt(f))return!1;var E=typeof f;return E=="number"||E=="symbol"||E=="boolean"||f==null||Cn(f)?!0:v.test(f)||!C.test(f)||m!=null&&f in Dt(m)}function qu(f){var m=typeof f;return m=="string"||m=="number"||m=="symbol"||m=="boolean"?f!=="__proto__":f===null}function Ai(f){var m=_s(f),E=V[m];if(typeof E!="function"||!(m in $t.prototype))return!1;if(f===E)return!0;var F=Ti(E);return!!F&&f===F[0]}function Hu(f){return!!Co&&Co in f}var Ku=ss?jn:Ki;function Kr(f){var m=f&&f.constructor,E=typeof m=="function"&&m.prototype||$r;return f===E}function Ca(f){return f===f&&!zt(f)}function Ia(f,m){return function(E){return E==null?!1:E[f]===m&&(m!==t||f in Dt(E))}}function Xu(f){var m=Fs(f,function(F){return E.size===c&&E.clear(),F}),E=m.cache;return m}function Yu(f,m){var E=f[1],F=m[1],B=E|F,H=B<(w|$|L),J=F==L&&E==_||F==L&&E==D&&f[7].length<=m[8]||F==(L|D)&&m[7].length<=m[8]&&E==_;if(!(H||J))return f;F&w&&(f[2]=m[2],B|=E&w?0:S);var ne=m[3];if(ne){var ue=f[3];f[3]=ue?oa(ue,ne,m[4]):ne,f[4]=ue?nr(f[3],u):m[4]}return ne=m[5],ne&&(ue=f[5],f[5]=ue?aa(ue,ne,m[6]):ne,f[6]=ue?nr(f[5],u):m[6]),ne=m[7],ne&&(f[7]=ne),F&L&&(f[8]=f[8]==null?m[8]:on(f[8],m[8])),f[9]==null&&(f[9]=m[9]),f[0]=m[0],f[1]=B,f}function ju(f){var m=[];if(f!=null)for(var E in Dt(f))m.push(E);return m}function Zu(f){return os.call(f)}function Sa(f,m,E){return m=jt(m===t?f.length-1:m,0),function(){for(var F=arguments,B=-1,H=jt(F.length-m,0),J=be(H);++B<H;)J[B]=F[m+B];B=-1;for(var ne=be(m+1);++B<m;)ne[B]=F[B];return ne[m]=E(J),wn(f,this,ne)}}function Ta(f,m){return m.length<2?f:pr(f,Nn(m,0,-1))}function Ju(f,m){for(var E=f.length,F=on(m.length,E),B=fn(f);F--;){var H=m[F];f[F]=Yn(H,E)?B[H]:t}return f}function Ni(f,m){if(!(m==="constructor"&&typeof f[m]=="function")&&m!="__proto__")return f[m]}var Ea=ka(jo),Xr=fc||function(f,m){return nn.setTimeout(f,m)},Ri=ka(vu);function _a(f,m,E){var F=m+"";return Ri(f,Vu(F,Qu(zu(F),E)))}function ka(f){var m=0,E=0;return function(){var F=xc(),B=X-(F-E);if(E=F,B>0){if(++m>=z)return arguments[0]}else m=0;return f.apply(t,arguments)}}function As(f,m){var E=-1,F=f.length,B=F-1;for(m=m===t?F:m;++E<m;){var H=pi(E,B),J=f[H];f[H]=f[E],f[E]=J}return f.length=m,f}var Aa=Xu(function(f){var m=[];return f.charCodeAt(0)===46&&m.push(""),f.replace(b,function(E,F,B,H){m.push(B?H.replace(_e,"$1"):F||E)}),m});function Vn(f){if(typeof f=="string"||Cn(f))return f;var m=f+"";return m=="0"&&1/f==-1/0?"-0":m}function mr(f){if(f!=null){try{return is.call(f)}catch{}try{return f+""}catch{}}return""}function Qu(f,m){return En(ge,function(E){var F="_."+E[0];m&E[1]&&!es(f,F)&&f.push(F)}),f.sort()}function Na(f){if(f instanceof $t)return f.clone();var m=new kn(f.__wrapped__,f.__chain__);return m.__actions__=fn(f.__actions__),m.__index__=f.__index__,m.__values__=f.__values__,m}function eh(f,m,E){(E?cn(f,m,E):m===t)?m=1:m=jt(mt(m),0);var F=f==null?0:f.length;if(!F||m<1)return[];for(var B=0,H=0,J=be(ds(F/m));B<F;)J[H++]=Nn(f,B,B+=m);return J}function th(f){for(var m=-1,E=f==null?0:f.length,F=0,B=[];++m<E;){var H=f[m];H&&(B[F++]=H)}return B}function nh(){var f=arguments.length;if(!f)return[];for(var m=be(f-1),E=arguments[0],F=f;F--;)m[F-1]=arguments[F];return tr(gt(E)?fn(E):[E],rn(m,1))}var rh=yt(function(f,m){return Wt(f)?Gr(f,rn(m,1,Wt,!0)):[]}),sh=yt(function(f,m){var E=Rn(m);return Wt(E)&&(E=t),Wt(f)?Gr(f,rn(m,1,Wt,!0),at(E,2)):[]}),ih=yt(function(f,m){var E=Rn(m);return Wt(E)&&(E=t),Wt(f)?Gr(f,rn(m,1,Wt,!0),t,E):[]});function oh(f,m,E){var F=f==null?0:f.length;return F?(m=E||m===t?1:mt(m),Nn(f,m<0?0:m,F)):[]}function ah(f,m,E){var F=f==null?0:f.length;return F?(m=E||m===t?1:mt(m),m=F-m,Nn(f,0,m<0?0:m)):[]}function lh(f,m){return f&&f.length?$s(f,at(m,3),!0,!0):[]}function ch(f,m){return f&&f.length?$s(f,at(m,3),!0):[]}function uh(f,m,E,F){var B=f==null?0:f.length;return B?(E&&typeof E!="number"&&cn(f,m,E)&&(E=0,F=B),nu(f,m,E,F)):[]}function Ra(f,m,E){var F=f==null?0:f.length;if(!F)return-1;var B=E==null?0:mt(E);return B<0&&(B=jt(F+B,0)),ts(f,at(m,3),B)}function Da(f,m,E){var F=f==null?0:f.length;if(!F)return-1;var B=F-1;return E!==t&&(B=mt(E),B=E<0?jt(F+B,0):on(B,F-1)),ts(f,at(m,3),B,!0)}function Fa(f){var m=f==null?0:f.length;return m?rn(f,1):[]}function hh(f){var m=f==null?0:f.length;return m?rn(f,ie):[]}function dh(f,m){var E=f==null?0:f.length;return E?(m=m===t?1:mt(m),rn(f,m)):[]}function fh(f){for(var m=-1,E=f==null?0:f.length,F={};++m<E;){var B=f[m];F[B[0]]=B[1]}return F}function Ma(f){return f&&f.length?f[0]:t}function ph(f,m,E){var F=f==null?0:f.length;if(!F)return-1;var B=E==null?0:mt(E);return B<0&&(B=jt(F+B,0)),br(f,m,B)}function gh(f){var m=f==null?0:f.length;return m?Nn(f,0,-1):[]}var mh=yt(function(f){var m=Bt(f,yi);return m.length&&m[0]===f[0]?ci(m):[]}),xh=yt(function(f){var m=Rn(f),E=Bt(f,yi);return m===Rn(E)?m=t:E.pop(),E.length&&E[0]===f[0]?ci(E,at(m,2)):[]}),bh=yt(function(f){var m=Rn(f),E=Bt(f,yi);return m=typeof m=="function"?m:t,m&&E.pop(),E.length&&E[0]===f[0]?ci(E,t,m):[]});function yh(f,m){return f==null?"":gc.call(f,m)}function Rn(f){var m=f==null?0:f.length;return m?f[m-1]:t}function wh(f,m,E){var F=f==null?0:f.length;if(!F)return-1;var B=F;return E!==t&&(B=mt(E),B=B<0?jt(F+B,0):on(B,F-1)),m===m?Ql(f,m,B):ts(f,go,B,!0)}function vh(f,m){return f&&f.length?Ho(f,mt(m)):t}var $h=yt(Oa);function Oa(f,m){return f&&f.length&&m&&m.length?fi(f,m):f}function Ch(f,m,E){return f&&f.length&&m&&m.length?fi(f,m,at(E,2)):f}function Ih(f,m,E){return f&&f.length&&m&&m.length?fi(f,m,t,E):f}var Sh=Xn(function(f,m){var E=f==null?0:f.length,F=si(f,m);return Yo(f,Bt(m,function(B){return Yn(B,E)?+B:B}).sort(ia)),F});function Th(f,m){var E=[];if(!(f&&f.length))return E;var F=-1,B=[],H=f.length;for(m=at(m,3);++F<H;){var J=f[F];m(J,F,f)&&(E.push(J),B.push(F))}return Yo(f,B),E}function Di(f){return f==null?f:yc.call(f)}function Eh(f,m,E){var F=f==null?0:f.length;return F?(E&&typeof E!="number"&&cn(f,m,E)?(m=0,E=F):(m=m==null?0:mt(m),E=E===t?F:mt(E)),Nn(f,m,E)):[]}function _h(f,m){return vs(f,m)}function kh(f,m,E){return mi(f,m,at(E,2))}function Ah(f,m){var E=f==null?0:f.length;if(E){var F=vs(f,m);if(F<E&&Ln(f[F],m))return F}return-1}function Nh(f,m){return vs(f,m,!0)}function Rh(f,m,E){return mi(f,m,at(E,2),!0)}function Dh(f,m){var E=f==null?0:f.length;if(E){var F=vs(f,m,!0)-1;if(Ln(f[F],m))return F}return-1}function Fh(f){return f&&f.length?Zo(f):[]}function Mh(f,m){return f&&f.length?Zo(f,at(m,2)):[]}function Oh(f){var m=f==null?0:f.length;return m?Nn(f,1,m):[]}function Ph(f,m,E){return f&&f.length?(m=E||m===t?1:mt(m),Nn(f,0,m<0?0:m)):[]}function Lh(f,m,E){var F=f==null?0:f.length;return F?(m=E||m===t?1:mt(m),m=F-m,Nn(f,m<0?0:m,F)):[]}function Bh(f,m){return f&&f.length?$s(f,at(m,3),!1,!0):[]}function zh(f,m){return f&&f.length?$s(f,at(m,3)):[]}var Gh=yt(function(f){return ir(rn(f,1,Wt,!0))}),Uh=yt(function(f){var m=Rn(f);return Wt(m)&&(m=t),ir(rn(f,1,Wt,!0),at(m,2))}),Vh=yt(function(f){var m=Rn(f);return m=typeof m=="function"?m:t,ir(rn(f,1,Wt,!0),t,m)});function Wh(f){return f&&f.length?ir(f):[]}function qh(f,m){return f&&f.length?ir(f,at(m,2)):[]}function Hh(f,m){return m=typeof m=="function"?m:t,f&&f.length?ir(f,t,m):[]}function Fi(f){if(!(f&&f.length))return[];var m=0;return f=er(f,function(E){if(Wt(E))return m=jt(E.length,m),!0}),js(m,function(E){return Bt(f,Ks(E))})}function Pa(f,m){if(!(f&&f.length))return[];var E=Fi(f);return m==null?E:Bt(E,function(F){return wn(m,t,F)})}var Kh=yt(function(f,m){return Wt(f)?Gr(f,m):[]}),Xh=yt(function(f){return bi(er(f,Wt))}),Yh=yt(function(f){var m=Rn(f);return Wt(m)&&(m=t),bi(er(f,Wt),at(m,2))}),jh=yt(function(f){var m=Rn(f);return m=typeof m=="function"?m:t,bi(er(f,Wt),t,m)}),Zh=yt(Fi);function Jh(f,m){return ta(f||[],m||[],zr)}function Qh(f,m){return ta(f||[],m||[],Wr)}var ed=yt(function(f){var m=f.length,E=m>1?f[m-1]:t;return E=typeof E=="function"?(f.pop(),E):t,Pa(f,E)});function La(f){var m=V(f);return m.__chain__=!0,m}function td(f,m){return m(f),f}function Ns(f,m){return m(f)}var nd=Xn(function(f){var m=f.length,E=m?f[0]:0,F=this.__wrapped__,B=function(H){return si(H,f)};return m>1||this.__actions__.length||!(F instanceof $t)||!Yn(E)?this.thru(B):(F=F.slice(E,+E+(m?1:0)),F.__actions__.push({func:Ns,args:[B],thisArg:t}),new kn(F,this.__chain__).thru(function(H){return m&&!H.length&&H.push(t),H}))});function rd(){return La(this)}function sd(){return new kn(this.value(),this.__chain__)}function id(){this.__values__===t&&(this.__values__=Ja(this.value()));var f=this.__index__>=this.__values__.length,m=f?t:this.__values__[this.__index__++];return{done:f,value:m}}function od(){return this}function ad(f){for(var m,E=this;E instanceof ms;){var F=Na(E);F.__index__=0,F.__values__=t,m?B.__wrapped__=F:m=F;var B=F;E=E.__wrapped__}return B.__wrapped__=f,m}function ld(){var f=this.__wrapped__;if(f instanceof $t){var m=f;return this.__actions__.length&&(m=new $t(this)),m=m.reverse(),m.__actions__.push({func:Ns,args:[Di],thisArg:t}),new kn(m,this.__chain__)}return this.thru(Di)}function cd(){return ea(this.__wrapped__,this.__actions__)}var ud=Cs(function(f,m,E){kt.call(f,E)?++f[E]:Hn(f,E,1)});function hd(f,m,E){var F=gt(f)?fo:tu;return E&&cn(f,m,E)&&(m=t),F(f,at(m,3))}function dd(f,m){var E=gt(f)?er:Po;return E(f,at(m,3))}var fd=ha(Ra),pd=ha(Da);function gd(f,m){return rn(Rs(f,m),1)}function md(f,m){return rn(Rs(f,m),ie)}function xd(f,m,E){return E=E===t?1:mt(E),rn(Rs(f,m),E)}function Ba(f,m){var E=gt(f)?En:sr;return E(f,at(m,3))}function za(f,m){var E=gt(f)?Ol:Oo;return E(f,at(m,3))}var bd=Cs(function(f,m,E){kt.call(f,E)?f[E].push(m):Hn(f,E,[m])});function yd(f,m,E,F){f=pn(f)?f:Ar(f),E=E&&!F?mt(E):0;var B=f.length;return E<0&&(E=jt(B+E,0)),Ps(f)?E<=B&&f.indexOf(m,E)>-1:!!B&&br(f,m,E)>-1}var wd=yt(function(f,m,E){var F=-1,B=typeof m=="function",H=pn(f)?be(f.length):[];return sr(f,function(J){H[++F]=B?wn(m,J,E):Ur(J,m,E)}),H}),vd=Cs(function(f,m,E){Hn(f,E,m)});function Rs(f,m){var E=gt(f)?Bt:Vo;return E(f,at(m,3))}function $d(f,m,E,F){return f==null?[]:(gt(m)||(m=m==null?[]:[m]),E=F?t:E,gt(E)||(E=E==null?[]:[E]),Ko(f,m,E))}var Cd=Cs(function(f,m,E){f[E?0:1].push(m)},function(){return[[],[]]});function Id(f,m,E){var F=gt(f)?qs:xo,B=arguments.length<3;return F(f,at(m,4),E,B,sr)}function Sd(f,m,E){var F=gt(f)?Pl:xo,B=arguments.length<3;return F(f,at(m,4),E,B,Oo)}function Td(f,m){var E=gt(f)?er:Po;return E(f,Ms(at(m,3)))}function Ed(f){var m=gt(f)?Ro:yu;return m(f)}function _d(f,m,E){(E?cn(f,m,E):m===t)?m=1:m=mt(m);var F=gt(f)?jc:wu;return F(f,m)}function kd(f){var m=gt(f)?Zc:$u;return m(f)}function Ad(f){if(f==null)return 0;if(pn(f))return Ps(f)?wr(f):f.length;var m=an(f);return m==ke||m==Le?f.size:hi(f).length}function Nd(f,m,E){var F=gt(f)?Hs:Cu;return E&&cn(f,m,E)&&(m=t),F(f,at(m,3))}var Rd=yt(function(f,m){if(f==null)return[];var E=m.length;return E>1&&cn(f,m[0],m[1])?m=[]:E>2&&cn(m[0],m[1],m[2])&&(m=[m[0]]),Ko(f,rn(m,1),[])}),Ds=dc||function(){return nn.Date.now()};function Dd(f,m){if(typeof m!="function")throw new _n(o);return f=mt(f),function(){if(--f<1)return m.apply(this,arguments)}}function Ga(f,m,E){return m=E?t:m,m=f&&m==null?f.length:m,Kn(f,L,t,t,t,t,m)}function Ua(f,m){var E;if(typeof m!="function")throw new _n(o);return f=mt(f),function(){return--f>0&&(E=m.apply(this,arguments)),f<=1&&(m=t),E}}var Mi=yt(function(f,m,E){var F=w;if(E.length){var B=nr(E,_r(Mi));F|=k}return Kn(f,F,m,E,B)}),Va=yt(function(f,m,E){var F=w|$;if(E.length){var B=nr(E,_r(Va));F|=k}return Kn(m,F,f,E,B)});function Wa(f,m,E){m=E?t:m;var F=Kn(f,_,t,t,t,t,t,m);return F.placeholder=Wa.placeholder,F}function qa(f,m,E){m=E?t:m;var F=Kn(f,T,t,t,t,t,t,m);return F.placeholder=qa.placeholder,F}function Ha(f,m,E){var F,B,H,J,ne,ue,$e=0,Ie=!1,Re=!1,je=!0;if(typeof f!="function")throw new _n(o);m=Dn(m)||0,zt(E)&&(Ie=!!E.leading,Re="maxWait"in E,H=Re?jt(Dn(E.maxWait)||0,m):H,je="trailing"in E?!!E.trailing:je);function tt(qt){var Bn=F,Jn=B;return F=B=t,$e=qt,J=f.apply(Jn,Bn),J}function ut(qt){return $e=qt,ne=Xr(vt,m),Ie?tt(qt):J}function xt(qt){var Bn=qt-ue,Jn=qt-$e,hl=m-Bn;return Re?on(hl,H-Jn):hl}function ht(qt){var Bn=qt-ue,Jn=qt-$e;return ue===t||Bn>=m||Bn<0||Re&&Jn>=H}function vt(){var qt=Ds();if(ht(qt))return Ct(qt);ne=Xr(vt,xt(qt))}function Ct(qt){return ne=t,je&&F?tt(qt):(F=B=t,J)}function In(){ne!==t&&na(ne),$e=0,F=ue=B=ne=t}function un(){return ne===t?J:Ct(Ds())}function Sn(){var qt=Ds(),Bn=ht(qt);if(F=arguments,B=this,ue=qt,Bn){if(ne===t)return ut(ue);if(Re)return na(ne),ne=Xr(vt,m),tt(ue)}return ne===t&&(ne=Xr(vt,m)),J}return Sn.cancel=In,Sn.flush=un,Sn}var Fd=yt(function(f,m){return Mo(f,1,m)}),Md=yt(function(f,m,E){return Mo(f,Dn(m)||0,E)});function Od(f){return Kn(f,M)}function Fs(f,m){if(typeof f!="function"||m!=null&&typeof m!="function")throw new _n(o);var E=function(){var F=arguments,B=m?m.apply(this,F):F[0],H=E.cache;if(H.has(B))return H.get(B);var J=f.apply(this,F);return E.cache=H.set(B,J)||H,J};return E.cache=new(Fs.Cache||qn),E}Fs.Cache=qn;function Ms(f){if(typeof f!="function")throw new _n(o);return function(){var m=arguments;switch(m.length){case 0:return!f.call(this);case 1:return!f.call(this,m[0]);case 2:return!f.call(this,m[0],m[1]);case 3:return!f.call(this,m[0],m[1],m[2])}return!f.apply(this,m)}}function Pd(f){return Ua(2,f)}var Ld=Iu(function(f,m){m=m.length==1&&gt(m[0])?Bt(m[0],vn(at())):Bt(rn(m,1),vn(at()));var E=m.length;return yt(function(F){for(var B=-1,H=on(F.length,E);++B<H;)F[B]=m[B].call(this,F[B]);return wn(f,this,F)})}),Oi=yt(function(f,m){var E=nr(m,_r(Oi));return Kn(f,k,t,m,E)}),Ka=yt(function(f,m){var E=nr(m,_r(Ka));return Kn(f,P,t,m,E)}),Bd=Xn(function(f,m){return Kn(f,D,t,t,t,m)});function zd(f,m){if(typeof f!="function")throw new _n(o);return m=m===t?m:mt(m),yt(f,m)}function Gd(f,m){if(typeof f!="function")throw new _n(o);return m=m==null?0:jt(mt(m),0),yt(function(E){var F=E[m],B=ar(E,0,m);return F&&tr(B,F),wn(f,this,B)})}function Ud(f,m,E){var F=!0,B=!0;if(typeof f!="function")throw new _n(o);return zt(E)&&(F="leading"in E?!!E.leading:F,B="trailing"in E?!!E.trailing:B),Ha(f,m,{leading:F,maxWait:m,trailing:B})}function Vd(f){return Ga(f,1)}function Wd(f,m){return Oi(wi(m),f)}function qd(){if(!arguments.length)return[];var f=arguments[0];return gt(f)?f:[f]}function Hd(f){return An(f,g)}function Kd(f,m){return m=typeof m=="function"?m:t,An(f,g,m)}function Xd(f){return An(f,h|g)}function Yd(f,m){return m=typeof m=="function"?m:t,An(f,h|g,m)}function jd(f,m){return m==null||Fo(f,m,Qt(m))}function Ln(f,m){return f===m||f!==f&&m!==m}var Zd=Es(ai),Jd=Es(function(f,m){return f>=m}),xr=zo(function(){return arguments}())?zo:function(f){return Ut(f)&&kt.call(f,"callee")&&!To.call(f,"callee")},gt=be.isArray,Qd=oo?vn(oo):au;function pn(f){return f!=null&&Os(f.length)&&!jn(f)}function Wt(f){return Ut(f)&&pn(f)}function ef(f){return f===!0||f===!1||Ut(f)&&ln(f)==Se}var lr=pc||Ki,tf=ao?vn(ao):lu;function nf(f){return Ut(f)&&f.nodeType===1&&!Yr(f)}function rf(f){if(f==null)return!0;if(pn(f)&&(gt(f)||typeof f=="string"||typeof f.splice=="function"||lr(f)||kr(f)||xr(f)))return!f.length;var m=an(f);if(m==ke||m==Le)return!f.size;if(Kr(f))return!hi(f).length;for(var E in f)if(kt.call(f,E))return!1;return!0}function sf(f,m){return Vr(f,m)}function of(f,m,E){E=typeof E=="function"?E:t;var F=E?E(f,m):t;return F===t?Vr(f,m,t,E):!!F}function Pi(f){if(!Ut(f))return!1;var m=ln(f);return m==Fe||m==Me||typeof f.message=="string"&&typeof f.name=="string"&&!Yr(f)}function af(f){return typeof f=="number"&&_o(f)}function jn(f){if(!zt(f))return!1;var m=ln(f);return m==Xe||m==qe||m==Ee||m==de}function Xa(f){return typeof f=="number"&&f==mt(f)}function Os(f){return typeof f=="number"&&f>-1&&f%1==0&&f<=Q}function zt(f){var m=typeof f;return f!=null&&(m=="object"||m=="function")}function Ut(f){return f!=null&&typeof f=="object"}var Ya=lo?vn(lo):uu;function lf(f,m){return f===m||ui(f,m,Ei(m))}function cf(f,m,E){return E=typeof E=="function"?E:t,ui(f,m,Ei(m),E)}function uf(f){return ja(f)&&f!=+f}function hf(f){if(Ku(f))throw new pt(i);return Go(f)}function df(f){return f===null}function ff(f){return f==null}function ja(f){return typeof f=="number"||Ut(f)&&ln(f)==we}function Yr(f){if(!Ut(f)||ln(f)!=Oe)return!1;var m=cs(f);if(m===null)return!0;var E=kt.call(m,"constructor")&&m.constructor;return typeof E=="function"&&E instanceof E&&is.call(E)==lc}var Li=co?vn(co):hu;function pf(f){return Xa(f)&&f>=-9007199254740991&&f<=Q}var Za=uo?vn(uo):du;function Ps(f){return typeof f=="string"||!gt(f)&&Ut(f)&&ln(f)==Be}function Cn(f){return typeof f=="symbol"||Ut(f)&&ln(f)==Te}var kr=ho?vn(ho):fu;function gf(f){return f===t}function mf(f){return Ut(f)&&an(f)==st}function xf(f){return Ut(f)&&ln(f)==Ue}var bf=Es(di),yf=Es(function(f,m){return f<=m});function Ja(f){if(!f)return[];if(pn(f))return Ps(f)?On(f):fn(f);if(Mr&&f[Mr])return jl(f[Mr]());var m=an(f),E=m==ke?Js:m==Le?ns:Ar;return E(f)}function Zn(f){if(!f)return f===0?f:0;if(f=Dn(f),f===ie||f===-1/0){var m=f<0?-1:1;return m*se}return f===f?f:0}function mt(f){var m=Zn(f),E=m%1;return m===m?E?m-E:m:0}function Qa(f){return f?fr(mt(f),0,he):0}function Dn(f){if(typeof f=="number")return f;if(Cn(f))return le;if(zt(f)){var m=typeof f.valueOf=="function"?f.valueOf():f;f=zt(m)?m+"":m}if(typeof f!="string")return f===0?f:+f;f=bo(f);var E=ee.test(f);return E||He.test(f)?Dl(f.slice(2),E?2:8):Ge.test(f)?le:+f}function el(f){return Un(f,gn(f))}function wf(f){return f?fr(mt(f),-9007199254740991,Q):f===0?f:0}function Et(f){return f==null?"":$n(f)}var vf=Tr(function(f,m){if(Kr(m)||pn(m)){Un(m,Qt(m),f);return}for(var E in m)kt.call(m,E)&&zr(f,E,m[E])}),tl=Tr(function(f,m){Un(m,gn(m),f)}),Ls=Tr(function(f,m,E,F){Un(m,gn(m),f,F)}),$f=Tr(function(f,m,E,F){Un(m,Qt(m),f,F)}),Cf=Xn(si);function If(f,m){var E=Sr(f);return m==null?E:Do(E,m)}var Sf=yt(function(f,m){f=Dt(f);var E=-1,F=m.length,B=F>2?m[2]:t;for(B&&cn(m[0],m[1],B)&&(F=1);++E<F;)for(var H=m[E],J=gn(H),ne=-1,ue=J.length;++ne<ue;){var $e=J[ne],Ie=f[$e];(Ie===t||Ln(Ie,$r[$e])&&!kt.call(f,$e))&&(f[$e]=H[$e])}return f}),Tf=yt(function(f){return f.push(t,ba),wn(nl,t,f)});function Ef(f,m){return po(f,at(m,3),Gn)}function _f(f,m){return po(f,at(m,3),oi)}function kf(f,m){return f==null?f:ii(f,at(m,3),gn)}function Af(f,m){return f==null?f:Lo(f,at(m,3),gn)}function Nf(f,m){return f&&Gn(f,at(m,3))}function Rf(f,m){return f&&oi(f,at(m,3))}function Df(f){return f==null?[]:ys(f,Qt(f))}function Ff(f){return f==null?[]:ys(f,gn(f))}function Bi(f,m,E){var F=f==null?t:pr(f,m);return F===t?E:F}function Mf(f,m){return f!=null&&va(f,m,ru)}function zi(f,m){return f!=null&&va(f,m,su)}var Of=fa(function(f,m,E){m!=null&&typeof m.toString!="function"&&(m=os.call(m)),f[m]=E},Ui(mn)),Pf=fa(function(f,m,E){m!=null&&typeof m.toString!="function"&&(m=os.call(m)),kt.call(f,m)?f[m].push(E):f[m]=[E]},at),Lf=yt(Ur);function Qt(f){return pn(f)?No(f):hi(f)}function gn(f){return pn(f)?No(f,!0):pu(f)}function Bf(f,m){var E={};return m=at(m,3),Gn(f,function(F,B,H){Hn(E,m(F,B,H),F)}),E}function zf(f,m){var E={};return m=at(m,3),Gn(f,function(F,B,H){Hn(E,B,m(F,B,H))}),E}var Gf=Tr(function(f,m,E){ws(f,m,E)}),nl=Tr(function(f,m,E,F){ws(f,m,E,F)}),Uf=Xn(function(f,m){var E={};if(f==null)return E;var F=!1;m=Bt(m,function(H){return H=or(H,f),F||(F=H.length>1),H}),Un(f,Si(f),E),F&&(E=An(E,h|d|g,Mu));for(var B=m.length;B--;)xi(E,m[B]);return E});function Vf(f,m){return rl(f,Ms(at(m)))}var Wf=Xn(function(f,m){return f==null?{}:mu(f,m)});function rl(f,m){if(f==null)return{};var E=Bt(Si(f),function(F){return[F]});return m=at(m),Xo(f,E,function(F,B){return m(F,B[0])})}function qf(f,m,E){m=or(m,f);var F=-1,B=m.length;for(B||(B=1,f=t);++F<B;){var H=f==null?t:f[Vn(m[F])];H===t&&(F=B,H=E),f=jn(H)?H.call(f):H}return f}function Hf(f,m,E){return f==null?f:Wr(f,m,E)}function Kf(f,m,E,F){return F=typeof F=="function"?F:t,f==null?f:Wr(f,m,E,F)}var sl=ma(Qt),il=ma(gn);function Xf(f,m,E){var F=gt(f),B=F||lr(f)||kr(f);if(m=at(m,4),E==null){var H=f&&f.constructor;B?E=F?new H:[]:zt(f)?E=jn(H)?Sr(cs(f)):{}:E={}}return(B?En:Gn)(f,function(J,ne,ue){return m(E,J,ne,ue)}),E}function Yf(f,m){return f==null?!0:xi(f,m)}function jf(f,m,E){return f==null?f:Qo(f,m,wi(E))}function Zf(f,m,E,F){return F=typeof F=="function"?F:t,f==null?f:Qo(f,m,wi(E),F)}function Ar(f){return f==null?[]:Zs(f,Qt(f))}function Jf(f){return f==null?[]:Zs(f,gn(f))}function Qf(f,m,E){return E===t&&(E=m,m=t),E!==t&&(E=Dn(E),E=E===E?E:0),m!==t&&(m=Dn(m),m=m===m?m:0),fr(Dn(f),m,E)}function ep(f,m,E){return m=Zn(m),E===t?(E=m,m=0):E=Zn(E),f=Dn(f),iu(f,m,E)}function tp(f,m,E){if(E&&typeof E!="boolean"&&cn(f,m,E)&&(m=E=t),E===t&&(typeof m=="boolean"?(E=m,m=t):typeof f=="boolean"&&(E=f,f=t)),f===t&&m===t?(f=0,m=1):(f=Zn(f),m===t?(m=f,f=0):m=Zn(m)),f>m){var F=f;f=m,m=F}if(E||f%1||m%1){var B=ko();return on(f+B*(m-f+Rl("1e-"+((B+"").length-1))),m)}return pi(f,m)}var np=Er(function(f,m,E){return m=m.toLowerCase(),f+(E?ol(m):m)});function ol(f){return Gi(Et(f).toLowerCase())}function al(f){return f=Et(f),f&&f.replace(ct,ql).replace($l,"")}function rp(f,m,E){f=Et(f),m=$n(m);var F=f.length;E=E===t?F:fr(mt(E),0,F);var B=E;return E-=m.length,E>=0&&f.slice(E,B)==m}function sp(f){return f=Et(f),f&&tn.test(f)?f.replace(en,Hl):f}function ip(f){return f=Et(f),f&&A.test(f)?f.replace(I,"\\$&"):f}var ap=Er(function(f,m,E){return f+(E?"-":"")+m.toLowerCase()}),lp=Er(function(f,m,E){return f+(E?" ":"")+m.toLowerCase()}),cp=ua("toLowerCase");function up(f,m,E){f=Et(f),m=mt(m);var F=m?wr(f):0;if(!m||F>=m)return f;var B=(m-F)/2;return Ts(fs(B),E)+f+Ts(ds(B),E)}function hp(f,m,E){f=Et(f),m=mt(m);var F=m?wr(f):0;return m&&F<m?f+Ts(m-F,E):f}function dp(f,m,E){f=Et(f),m=mt(m);var F=m?wr(f):0;return m&&F<m?Ts(m-F,E)+f:f}function fp(f,m,E){return E||m==null?m=0:m&&(m=+m),bc(Et(f).replace(G,""),m||0)}function pp(f,m,E){return(E?cn(f,m,E):m===t)?m=1:m=mt(m),gi(Et(f),m)}function gp(){var f=arguments,m=Et(f[0]);return f.length<3?m:m.replace(f[1],f[2])}var mp=Er(function(f,m,E){return f+(E?"_":"")+m.toLowerCase()});function xp(f,m,E){return E&&typeof E!="number"&&cn(f,m,E)&&(m=E=t),E=E===t?he:E>>>0,E?(f=Et(f),f&&(typeof m=="string"||m!=null&&!Li(m))&&(m=$n(m),!m&&yr(f))?ar(On(f),0,E):f.split(m,E)):[]}var bp=Er(function(f,m,E){return f+(E?" ":"")+Gi(m)});function yp(f,m,E){return f=Et(f),E=E==null?0:fr(mt(E),0,f.length),m=$n(m),f.slice(E,E+m.length)==m}function wp(f,m,E){var F=V.templateSettings;E&&cn(f,m,E)&&(m=t),f=Et(f),m=Ls({},m,F,xa);var B=Ls({},m.imports,F.imports,xa),H=Qt(B),J=Zs(B,H),ne,ue,$e=0,Ie=m.interpolate||It,Re="__p += '",je=Qs((m.escape||It).source+"|"+Ie.source+"|"+(Ie===N?pe:It).source+"|"+(m.evaluate||It).source+"|$","g"),tt="//# sourceURL="+(kt.call(m,"sourceURL")?(m.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++El+"]")+`
`;f.replace(je,function(ht,vt,Ct,In,un,Sn){return Ct||(Ct=In),Re+=f.slice($e,Sn).replace(Qe,Kl),vt&&(ne=!0,Re+=`' +
__e(`+vt+`) +
'`),un&&(ue=!0,Re+=`';
`+un+`;
__p += '`),Ct&&(Re+=`' +
((__t = (`+Ct+`)) == null ? '' : __t) +
'`),$e=Sn+ht.length,ht}),Re+=`';
`;var ut=kt.call(m,"variable")&&m.variable;if(!ut)Re=`with (obj) {
`+Re+`
}
`;else if(me.test(ut))throw new pt(a);Re=(ue?Re.replace(Kt,""):Re).replace(xn,"$1").replace(Fn,"$1;"),Re="function("+(ut||"obj")+`) {
`+(ut?"":`obj || (obj = {});
`)+"var __t, __p = ''"+(ne?", __e = _.escape":"")+(ue?`, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
`:`;
`)+Re+`return __p
}`;var xt=cl(function(){return Tt(H,tt+"return "+Re).apply(t,J)});if(xt.source=Re,Pi(xt))throw xt;return xt}function vp(f){return Et(f).toLowerCase()}function $p(f){return Et(f).toUpperCase()}function Cp(f,m,E){if(f=Et(f),f&&(E||m===t))return bo(f);if(!f||!(m=$n(m)))return f;var F=On(f),B=On(m),H=yo(F,B),J=wo(F,B)+1;return ar(F,H,J).join("")}function Ip(f,m,E){if(f=Et(f),f&&(E||m===t))return f.slice(0,$o(f)+1);if(!f||!(m=$n(m)))return f;var F=On(f),B=wo(F,On(m))+1;return ar(F,0,B).join("")}function Sp(f,m,E){if(f=Et(f),f&&(E||m===t))return f.replace(G,"");if(!f||!(m=$n(m)))return f;var F=On(f),B=yo(F,On(m));return ar(F,B).join("")}function Tp(f,m){var E=O,F=R;if(zt(m)){var B="separator"in m?m.separator:B;E="length"in m?mt(m.length):E,F="omission"in m?$n(m.omission):F}f=Et(f);var H=f.length;if(yr(f)){var J=On(f);H=J.length}if(E>=H)return f;var ne=E-wr(F);if(ne<1)return F;var ue=J?ar(J,0,ne).join(""):f.slice(0,ne);if(B===t)return ue+F;if(J&&(ne+=ue.length-ne),Li(B)){if(f.slice(ne).search(B)){var $e,Ie=ue;for(B.global||(B=Qs(B.source,Et(ye.exec(B))+"g")),B.lastIndex=0;$e=B.exec(Ie);)var Re=$e.index;ue=ue.slice(0,Re===t?ne:Re)}}else if(f.indexOf($n(B),ne)!=ne){var je=ue.lastIndexOf(B);je>-1&&(ue=ue.slice(0,je))}return ue+F}function Ep(f){return f=Et(f),f&&Mn.test(f)?f.replace(Zt,ec):f}var _p=Er(function(f,m,E){return f+(E?" ":"")+m.toUpperCase()}),Gi=ua("toUpperCase");function ll(f,m,E){return f=Et(f),m=E?t:m,m===t?Yl(f)?rc(f):zl(f):f.match(m)||[]}var cl=yt(function(f,m){try{return wn(f,t,m)}catch(E){return Pi(E)?E:new pt(E)}}),kp=Xn(function(f,m){return En(m,function(E){E=Vn(E),Hn(f,E,Mi(f[E],f))}),f});function Ap(f){var m=f==null?0:f.length,E=at();return f=m?Bt(f,function(F){if(typeof F[1]!="function")throw new _n(o);return[E(F[0]),F[1]]}):[],yt(function(F){for(var B=-1;++B<m;){var H=f[B];if(wn(H[0],this,F))return wn(H[1],this,F)}})}function Np(f){return eu(An(f,h))}function Ui(f){return function(){return f}}function Rp(f,m){return f==null||f!==f?m:f}var Dp=da(),Fp=da(!0);function mn(f){return f}function Vi(f){return Uo(typeof f=="function"?f:An(f,h))}function Mp(f){return Wo(An(f,h))}function Op(f,m){return qo(f,An(m,h))}var Pp=yt(function(f,m){return function(E){return Ur(E,f,m)}}),Lp=yt(function(f,m){return function(E){return Ur(f,E,m)}});function Wi(f,m,E){var F=Qt(m),B=ys(m,F);E==null&&!(zt(m)&&(B.length||!F.length))&&(E=m,m=f,f=this,B=ys(m,Qt(m)));var H=!(zt(E)&&"chain"in E)||!!E.chain,J=jn(f);return En(B,function(ne){var ue=m[ne];f[ne]=ue,J&&(f.prototype[ne]=function(){var $e=this.__chain__;if(H||$e){var Ie=f(this.__wrapped__),Re=Ie.__actions__=fn(this.__actions__);return Re.push({func:ue,args:arguments,thisArg:f}),Ie.__chain__=$e,Ie}return ue.apply(f,tr([this.value()],arguments))})}),f}function Bp(){return nn._===this&&(nn._=cc),this}function qi(){}function zp(f){return f=mt(f),yt(function(m){return Ho(m,f)})}var Gp=$i(Bt),Up=$i(fo),Vp=$i(Hs);function ul(f){return ki(f)?Ks(Vn(f)):xu(f)}function Wp(f){return function(m){return f==null?t:pr(f,m)}}var qp=pa(),Hp=pa(!0);function Hi(){return[]}function Ki(){return!1}function Kp(){return{}}function Xp(){return""}function Yp(){return!0}function jp(f,m){if(f=mt(f),f<1||f>Q)return[];var E=he,F=on(f,he);m=at(m),f-=he;for(var B=js(F,m);++E<f;)m(E);return B}function Zp(f){return gt(f)?Bt(f,Vn):Cn(f)?[f]:fn(Aa(Et(f)))}function Jp(f){var m=++ac;return Et(f)+m}var Qp=Ss(function(f,m){return f+m},0),eg=Ci("ceil"),tg=Ss(function(f,m){return f/m},1),ng=Ci("floor");function rg(f){return f&&f.length?bs(f,mn,ai):t}function sg(f,m){return f&&f.length?bs(f,at(m,2),ai):t}function ig(f){return mo(f,mn)}function og(f,m){return mo(f,at(m,2))}function ag(f){return f&&f.length?bs(f,mn,di):t}function lg(f,m){return f&&f.length?bs(f,at(m,2),di):t}var cg=Ss(function(f,m){return f*m},1),ug=Ci("round"),hg=Ss(function(f,m){return f-m},0);function dg(f){return f&&f.length?Ys(f,mn):0}function fg(f,m){return f&&f.length?Ys(f,at(m,2)):0}return V.after=Dd,V.ary=Ga,V.assign=vf,V.assignIn=tl,V.assignInWith=Ls,V.assignWith=$f,V.at=Cf,V.before=Ua,V.bind=Mi,V.bindAll=kp,V.bindKey=Va,V.castArray=qd,V.chain=La,V.chunk=eh,V.compact=th,V.concat=nh,V.cond=Ap,V.conforms=Np,V.constant=Ui,V.countBy=ud,V.create=If,V.curry=Wa,V.curryRight=qa,V.debounce=Ha,V.defaults=Sf,V.defaultsDeep=Tf,V.defer=Fd,V.delay=Md,V.difference=rh,V.differenceBy=sh,V.differenceWith=ih,V.drop=oh,V.dropRight=ah,V.dropRightWhile=lh,V.dropWhile=ch,V.fill=uh,V.filter=dd,V.flatMap=gd,V.flatMapDeep=md,V.flatMapDepth=xd,V.flatten=Fa,V.flattenDeep=hh,V.flattenDepth=dh,V.flip=Od,V.flow=Dp,V.flowRight=Fp,V.fromPairs=fh,V.functions=Df,V.functionsIn=Ff,V.groupBy=bd,V.initial=gh,V.intersection=mh,V.intersectionBy=xh,V.intersectionWith=bh,V.invert=Of,V.invertBy=Pf,V.invokeMap=wd,V.iteratee=Vi,V.keyBy=vd,V.keys=Qt,V.keysIn=gn,V.map=Rs,V.mapKeys=Bf,V.mapValues=zf,V.matches=Mp,V.matchesProperty=Op,V.memoize=Fs,V.merge=Gf,V.mergeWith=nl,V.method=Pp,V.methodOf=Lp,V.mixin=Wi,V.negate=Ms,V.nthArg=zp,V.omit=Uf,V.omitBy=Vf,V.once=Pd,V.orderBy=$d,V.over=Gp,V.overArgs=Ld,V.overEvery=Up,V.overSome=Vp,V.partial=Oi,V.partialRight=Ka,V.partition=Cd,V.pick=Wf,V.pickBy=rl,V.property=ul,V.propertyOf=Wp,V.pull=$h,V.pullAll=Oa,V.pullAllBy=Ch,V.pullAllWith=Ih,V.pullAt=Sh,V.range=qp,V.rangeRight=Hp,V.rearg=Bd,V.reject=Td,V.remove=Th,V.rest=zd,V.reverse=Di,V.sampleSize=_d,V.set=Hf,V.setWith=Kf,V.shuffle=kd,V.slice=Eh,V.sortBy=Rd,V.sortedUniq=Fh,V.sortedUniqBy=Mh,V.split=xp,V.spread=Gd,V.tail=Oh,V.take=Ph,V.takeRight=Lh,V.takeRightWhile=Bh,V.takeWhile=zh,V.tap=td,V.throttle=Ud,V.thru=Ns,V.toArray=Ja,V.toPairs=sl,V.toPairsIn=il,V.toPath=Zp,V.toPlainObject=el,V.transform=Xf,V.unary=Vd,V.union=Gh,V.unionBy=Uh,V.unionWith=Vh,V.uniq=Wh,V.uniqBy=qh,V.uniqWith=Hh,V.unset=Yf,V.unzip=Fi,V.unzipWith=Pa,V.update=jf,V.updateWith=Zf,V.values=Ar,V.valuesIn=Jf,V.without=Kh,V.words=ll,V.wrap=Wd,V.xor=Xh,V.xorBy=Yh,V.xorWith=jh,V.zip=Zh,V.zipObject=Jh,V.zipObjectDeep=Qh,V.zipWith=ed,V.entries=sl,V.entriesIn=il,V.extend=tl,V.extendWith=Ls,Wi(V,V),V.add=Qp,V.attempt=cl,V.camelCase=np,V.capitalize=ol,V.ceil=eg,V.clamp=Qf,V.clone=Hd,V.cloneDeep=Xd,V.cloneDeepWith=Yd,V.cloneWith=Kd,V.conformsTo=jd,V.deburr=al,V.defaultTo=Rp,V.divide=tg,V.endsWith=rp,V.eq=Ln,V.escape=sp,V.escapeRegExp=ip,V.every=hd,V.find=fd,V.findIndex=Ra,V.findKey=Ef,V.findLast=pd,V.findLastIndex=Da,V.findLastKey=_f,V.floor=ng,V.forEach=Ba,V.forEachRight=za,V.forIn=kf,V.forInRight=Af,V.forOwn=Nf,V.forOwnRight=Rf,V.get=Bi,V.gt=Zd,V.gte=Jd,V.has=Mf,V.hasIn=zi,V.head=Ma,V.identity=mn,V.includes=yd,V.indexOf=ph,V.inRange=ep,V.invoke=Lf,V.isArguments=xr,V.isArray=gt,V.isArrayBuffer=Qd,V.isArrayLike=pn,V.isArrayLikeObject=Wt,V.isBoolean=ef,V.isBuffer=lr,V.isDate=tf,V.isElement=nf,V.isEmpty=rf,V.isEqual=sf,V.isEqualWith=of,V.isError=Pi,V.isFinite=af,V.isFunction=jn,V.isInteger=Xa,V.isLength=Os,V.isMap=Ya,V.isMatch=lf,V.isMatchWith=cf,V.isNaN=uf,V.isNative=hf,V.isNil=ff,V.isNull=df,V.isNumber=ja,V.isObject=zt,V.isObjectLike=Ut,V.isPlainObject=Yr,V.isRegExp=Li,V.isSafeInteger=pf,V.isSet=Za,V.isString=Ps,V.isSymbol=Cn,V.isTypedArray=kr,V.isUndefined=gf,V.isWeakMap=mf,V.isWeakSet=xf,V.join=yh,V.kebabCase=ap,V.last=Rn,V.lastIndexOf=wh,V.lowerCase=lp,V.lowerFirst=cp,V.lt=bf,V.lte=yf,V.max=rg,V.maxBy=sg,V.mean=ig,V.meanBy=og,V.min=ag,V.minBy=lg,V.stubArray=Hi,V.stubFalse=Ki,V.stubObject=Kp,V.stubString=Xp,V.stubTrue=Yp,V.multiply=cg,V.nth=vh,V.noConflict=Bp,V.noop=qi,V.now=Ds,V.pad=up,V.padEnd=hp,V.padStart=dp,V.parseInt=fp,V.random=tp,V.reduce=Id,V.reduceRight=Sd,V.repeat=pp,V.replace=gp,V.result=qf,V.round=ug,V.runInContext=ce,V.sample=Ed,V.size=Ad,V.snakeCase=mp,V.some=Nd,V.sortedIndex=_h,V.sortedIndexBy=kh,V.sortedIndexOf=Ah,V.sortedLastIndex=Nh,V.sortedLastIndexBy=Rh,V.sortedLastIndexOf=Dh,V.startCase=bp,V.startsWith=yp,V.subtract=hg,V.sum=dg,V.sumBy=fg,V.template=wp,V.times=jp,V.toFinite=Zn,V.toInteger=mt,V.toLength=Qa,V.toLower=vp,V.toNumber=Dn,V.toSafeInteger=wf,V.toString=Et,V.toUpper=$p,V.trim=Cp,V.trimEnd=Ip,V.trimStart=Sp,V.truncate=Tp,V.unescape=Ep,V.uniqueId=Jp,V.upperCase=_p,V.upperFirst=Gi,V.each=Ba,V.eachRight=za,V.first=Ma,Wi(V,function(){var f={};return Gn(V,function(m,E){kt.call(V.prototype,E)||(f[E]=m)}),f}(),{chain:!1}),V.VERSION=r,En(["bind","bindKey","curry","curryRight","partial","partialRight"],function(f){V[f].placeholder=V}),En(["drop","take"],function(f,m){$t.prototype[f]=function(E){E=E===t?1:jt(mt(E),0);var F=this.__filtered__&&!m?new $t(this):this.clone();return F.__filtered__?F.__takeCount__=on(E,F.__takeCount__):F.__views__.push({size:on(E,he),type:f+(F.__dir__<0?"Right":"")}),F},$t.prototype[f+"Right"]=function(E){return this.reverse()[f](E).reverse()}}),En(["filter","map","takeWhile"],function(f,m){var E=m+1,F=E==K||E==te;$t.prototype[f]=function(B){var H=this.clone();return H.__iteratees__.push({iteratee:at(B,3),type:E}),H.__filtered__=H.__filtered__||F,H}}),En(["head","last"],function(f,m){var E="take"+(m?"Right":"");$t.prototype[f]=function(){return this[E](1).value()[0]}}),En(["initial","tail"],function(f,m){var E="drop"+(m?"":"Right");$t.prototype[f]=function(){return this.__filtered__?new $t(this):this[E](1)}}),$t.prototype.compact=function(){return this.filter(mn)},$t.prototype.find=function(f){return this.filter(f).head()},$t.prototype.findLast=function(f){return this.reverse().find(f)},$t.prototype.invokeMap=yt(function(f,m){return typeof f=="function"?new $t(this):this.map(function(E){return Ur(E,f,m)})}),$t.prototype.reject=function(f){return this.filter(Ms(at(f)))},$t.prototype.slice=function(f,m){f=mt(f);var E=this;return E.__filtered__&&(f>0||m<0)?new $t(E):(f<0?E=E.takeRight(-f):f&&(E=E.drop(f)),m!==t&&(m=mt(m),E=m<0?E.dropRight(-m):E.take(m-f)),E)},$t.prototype.takeRightWhile=function(f){return this.reverse().takeWhile(f).reverse()},$t.prototype.toArray=function(){return this.take(he)},Gn($t.prototype,function(f,m){var E=/^(?:filter|find|map|reject)|While$/.test(m),F=/^(?:head|last)$/.test(m),B=V[F?"take"+(m=="last"?"Right":""):m],H=F||/^find/.test(m);B&&(V.prototype[m]=function(){var J=this.__wrapped__,ne=F?[1]:arguments,ue=J instanceof $t,$e=ne[0],Ie=ue||gt(J),Re=function(vt){var Ct=B.apply(V,tr([vt],ne));return F&&je?Ct[0]:Ct};Ie&&E&&typeof $e=="function"&&$e.length!=1&&(ue=Ie=!1);var je=this.__chain__,tt=!!this.__actions__.length,ut=H&&!je,xt=ue&&!tt;if(!H&&Ie){J=xt?J:new $t(this);var ht=f.apply(J,ne);return ht.__actions__.push({func:Ns,args:[Re],thisArg:t}),new kn(ht,je)}return ut&&xt?f.apply(this,ne):(ht=this.thru(Re),ut?F?ht.value()[0]:ht.value():ht)})}),En(["pop","push","shift","sort","splice","unshift"],function(f){var m=rs[f],E=/^(?:push|sort|unshift)$/.test(f)?"tap":"thru",F=/^(?:pop|shift)$/.test(f);V.prototype[f]=function(){var B=arguments;if(F&&!this.__chain__){var H=this.value();return m.apply(gt(H)?H:[],B)}return this[E](function(J){return m.apply(gt(J)?J:[],B)})}}),Gn($t.prototype,function(f,m){var E=V[m];if(E){var F=E.name+"";kt.call(Ir,F)||(Ir[F]=[]),Ir[F].push({name:m,func:E})}}),Ir[Is(t,$).name]=[{name:"wrapper",func:t}],$t.prototype.clone=Sc,$t.prototype.reverse=Tc,$t.prototype.value=Ec,V.prototype.at=nd,V.prototype.chain=rd,V.prototype.commit=sd,V.prototype.next=id,V.prototype.plant=ad,V.prototype.reverse=ld,V.prototype.toJSON=V.prototype.valueOf=V.prototype.value=cd,V.prototype.first=V.prototype.head,Mr&&(V.prototype[Mr]=od),V},vr=sc();cr?((cr.exports=vr)._=vr,Us._=vr):nn._=vr}).call(lodash)}(lodash$1,lodash$1.exports)),lodash$1.exports}requireLodash();const bitMethods={getBit(n){return this.data[getSlot(n)]&1<<getShift(n)?1:0},setBit(n){this.data[getSlot(n)]|=1<<getShift(n)},clearBit(n){this.data[getSlot(n)]&=~(1<<getShift(n))},toggleBit(n){this.data[getSlot(n)]^=1<<getShift(n)},getBitXY(n,e){return n>=this.width||e>=this.height?0:this.getBit(e*this.width+n)},setBitXY(n,e){this.setBit(e*this.width+n)},clearBitXY(n,e){this.clearBit(e*this.width+n)},toggleBitXY(n,e){this.toggleBit(e*this.width+n)}};function getSlot(n){return n>>3}function getShift(n){return 7-(n&7)}function setBitMethods(n){for(const e in bitMethods)n.prototype[e]=bitMethods[e]}function checkProcessable(n,e={}){let{bitDepth:t,alpha:r,colorModel:s,components:i,channels:o}=e;if(typeof n!="string"||n.length===0)throw new TypeError("processName must be a string");if(t&&(Array.isArray(t)||(t=[t]),!t.includes(this.bitDepth)))throw new TypeError(`The process: ${n} can only be applied if bit depth is in: ${t}`);if(r&&(Array.isArray(r)||(r=[r]),!r.includes(this.alpha)))throw new TypeError(`The process: ${n} can only be applied if alpha is in: ${r}`);if(s&&(Array.isArray(s)||(s=[s]),!s.includes(this.colorModel)))throw new TypeError(`The process: ${n} can only be applied if color model is in: ${s}`);if(i&&(Array.isArray(i)||(i=[i]),!i.includes(this.components))){let a=`The process: ${n} can only be applied if the number of components is in: ${i}`;throw i.length===1&&i[0]===1?new TypeError(`${a}.\rYou should transform your image using "image.grey()" before applying the algorithm.`):new TypeError(a)}if(o&&(Array.isArray(o)||(o=[o]),!o.includes(this.channels)))throw new TypeError(`The process: ${n} can only be applied if the number of channels is in: ${o}`)}function createBlob(n,e){n=n||[],e=e||{},typeof e=="string"&&(e={type:e});try{return new Blob(n,e)}catch(i){if(i.name!=="TypeError")throw i;for(var t=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,r=new t,s=0;s<n.length;s+=1)r.append(n[s]);return r.getBlob(e.type)}}function dataURLToBlob(n){var e=n.match(/data:([^;]+)/)[1],t=n.replace(/^[^,]+,/,""),r=binaryStringToArrayBuffer(atob(t));return createBlob([r],{type:e})}function canvasToBlob(n,e,t){return typeof n.toBlob=="function"?new Promise(function(r){n.toBlob(r,e,t)}):Promise.resolve(dataURLToBlob(n.toDataURL(e,t)))}function binaryStringToArrayBuffer(n){for(var e=n.length,t=new ArrayBuffer(e),r=new Uint8Array(t),s=-1;++s<e;)r[s]=n.charCodeAt(s);return t}var src$5={};(function(n){if(n.TextEncoder&&n.TextDecoder)return!1;function e(r="utf-8"){if(r!=="utf-8")throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${r}') is invalid.`)}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(r,s={stream:!1}){if(s.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let i=0;const o=r.length;let a=0,l=Math.max(32,o+(o>>1)+7),c=new Uint8Array(l>>3<<3);for(;i<o;){let u=r.charCodeAt(i++);if(u>=55296&&u<=56319){if(i<o){const h=r.charCodeAt(i);(h&64512)===56320&&(++i,u=((u&1023)<<10)+(h&1023)+65536)}if(u>=55296&&u<=56319)continue}if(a+4>c.length){l+=8,l*=1+i/r.length*2,l=l>>3<<3;const h=new Uint8Array(l);h.set(c),c=h}if(u&4294967168)if(!(u&4294965248))c[a++]=u>>6&31|192;else if(!(u&4294901760))c[a++]=u>>12&15|224,c[a++]=u>>6&63|128;else if(!(u&4292870144))c[a++]=u>>18&7|240,c[a++]=u>>12&63|128,c[a++]=u>>6&63|128;else continue;else{c[a++]=u;continue}c[a++]=u&63|128}return c.slice(0,a)};function t(r="utf-8",s={fatal:!1}){if(r!=="utf-8")throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${r}') is invalid.`);if(s.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(t.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(t.prototype,"fatal",{value:!1}),Object.defineProperty(t.prototype,"ignoreBOM",{value:!1}),t.prototype.decode=function(r,s={stream:!1}){if(s.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const i=new Uint8Array(r);let o=0;const a=i.length,l=[];for(;o<a;){const c=i[o++];if(c===0)break;if(!(c&128))l.push(c);else if((c&224)===192){const u=i[o++]&63;l.push((c&31)<<6|u)}else if((c&240)===224){const u=i[o++]&63,h=i[o++]&63;l.push((c&31)<<12|u<<6|h)}else if((c&248)===240){const u=i[o++]&63,h=i[o++]&63,d=i[o++]&63;let g=(c&7)<<18|u<<12|h<<6|d;g>65535&&(g-=65536,l.push(g>>>10&1023|55296),g=56320|g&1023),l.push(g)}}return String.fromCharCode.apply(null,l)},n.TextEncoder=e,n.TextDecoder=t})(typeof window<"u"?window:typeof self<"u"?self:void 0);function decode$3(n,e="utf8"){return new TextDecoder(e).decode(n)}const encoder$1=new TextEncoder;function encode$1(n){return encoder$1.encode(n)}const defaultByteLength=1024*8,hostBigEndian=(()=>{const n=new Uint8Array(4),e=new Uint32Array(n.buffer);return!((e[0]=1)&n[0])})(),typedArrays={int8:globalThis.Int8Array,uint8:globalThis.Uint8Array,int16:globalThis.Int16Array,uint16:globalThis.Uint16Array,int32:globalThis.Int32Array,uint32:globalThis.Uint32Array,uint64:globalThis.BigUint64Array,int64:globalThis.BigInt64Array,float32:globalThis.Float32Array,float64:globalThis.Float64Array};class IOBuffer{constructor(e=defaultByteLength,t={}){let r=!1;typeof e=="number"?e=new ArrayBuffer(e):(r=!0,this.lastWrittenByte=e.byteLength);const s=t.offset?t.offset>>>0:0,i=e.byteLength-s;let o=s;(ArrayBuffer.isView(e)||e instanceof IOBuffer)&&(e.byteLength!==e.buffer.byteLength&&(o=e.byteOffset+s),e=e.buffer),r?this.lastWrittenByte=i:this.lastWrittenByte=0,this.buffer=e,this.length=i,this.byteLength=i,this.byteOffset=o,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,o,i),this._mark=0,this._marks=[]}available(e=1){return this.offset+e<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(e=1){return this.offset+=e,this}back(e=1){return this.offset-=e,this}seek(e){return this.offset=e,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const e=this._marks.pop();if(e===void 0)throw new Error("Mark stack empty");return this.seek(e),this}rewind(){return this.offset=0,this}ensureAvailable(e=1){if(!this.available(e)){const r=(this.offset+e)*2,s=new Uint8Array(r);s.set(new Uint8Array(this.buffer)),this.buffer=s.buffer,this.length=this.byteLength=r,this._data=new DataView(this.buffer)}return this}readBoolean(){return this.readUint8()!==0}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(e=1){return this.readArray(e,"uint8")}readArray(e,t){const r=typedArrays[t].BYTES_PER_ELEMENT*e,s=this.byteOffset+this.offset,i=this.buffer.slice(s,s+r);if(this.littleEndian===hostBigEndian&&t!=="uint8"&&t!=="int8"){const a=new Uint8Array(this.buffer.slice(s,s+r));a.reverse();const l=new typedArrays[t](a.buffer);return this.offset+=r,l.reverse(),l}const o=new typedArrays[t](i);return this.offset+=r,o}readInt16(){const e=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,e}readUint16(){const e=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,e}readInt32(){const e=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,e}readUint32(){const e=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,e}readFloat32(){const e=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,e}readFloat64(){const e=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,e}readBigInt64(){const e=this._data.getBigInt64(this.offset,this.littleEndian);return this.offset+=8,e}readBigUint64(){const e=this._data.getBigUint64(this.offset,this.littleEndian);return this.offset+=8,e}readChar(){return String.fromCharCode(this.readInt8())}readChars(e=1){let t="";for(let r=0;r<e;r++)t+=this.readChar();return t}readUtf8(e=1){return decode$3(this.readBytes(e))}decodeText(e=1,t="utf-8"){return decode$3(this.readBytes(e),t)}writeBoolean(e){return this.writeUint8(e?255:0),this}writeInt8(e){return this.ensureAvailable(1),this._data.setInt8(this.offset++,e),this._updateLastWrittenByte(),this}writeUint8(e){return this.ensureAvailable(1),this._data.setUint8(this.offset++,e),this._updateLastWrittenByte(),this}writeByte(e){return this.writeUint8(e)}writeBytes(e){this.ensureAvailable(e.length);for(let t=0;t<e.length;t++)this._data.setUint8(this.offset++,e[t]);return this._updateLastWrittenByte(),this}writeInt16(e){return this.ensureAvailable(2),this._data.setInt16(this.offset,e,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(e){return this.ensureAvailable(2),this._data.setUint16(this.offset,e,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(e){return this.ensureAvailable(4),this._data.setInt32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(e){return this.ensureAvailable(4),this._data.setUint32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(e){return this.ensureAvailable(4),this._data.setFloat32(this.offset,e,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(e){return this.ensureAvailable(8),this._data.setFloat64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigInt64(e){return this.ensureAvailable(8),this._data.setBigInt64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigUint64(e){return this.ensureAvailable(8),this._data.setBigUint64(this.offset,e,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(e){return this.writeUint8(e.charCodeAt(0))}writeChars(e){for(let t=0;t<e.length;t++)this.writeUint8(e.charCodeAt(t));return this}writeUtf8(e){return this.writeBytes(encode$1(e))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}var IOBuffer$1=Object.freeze({__proto__:null,IOBuffer}),require$$0$3=getAugmentedNamespace(IOBuffer$1),constants$3,hasRequiredConstants;function requireConstants(){return hasRequiredConstants||(hasRequiredConstants=1,constants$3={BITMAPV5HEADER:{LogicalColorSpace:{LCS_CALIBRATED_RGB:0,LCS_sRGB:1934772034,LCS_WINDOWS_COLOR_SPACE:1466527264},Compression:{BI_RGB:0,BI_RLE8:1,BI_RLE4:2,BI_BITFIELDS:3,BI_JPEG:4,BI_PNG:5,BI_CMYK:11,BI_CMYKRLE8:12,BI_CMYKRLE4:13},GamutMappingIntent:{LCS_GM_ABS_COLORIMETRIC:8,LCS_GM_BUSINESS:1,LCS_GM_GRAPHICS:2,LCS_GM_IMAGES:4}}}),constants$3}var BMPEncoder_1,hasRequiredBMPEncoder;function requireBMPEncoder(){if(hasRequiredBMPEncoder)return BMPEncoder_1;hasRequiredBMPEncoder=1;const{IOBuffer:n}=require$$0$3,e=requireConstants(),t=[];for(let s=0;s<=8;s++)t.push(255<<s);class r extends n{constructor(i){if(i.bitDepth!==1)throw new Error("Only bitDepth of 1 is supported");if(!i.height||!i.width)throw new Error("ImageData width and height are required");super(i.data),this.width=i.width,this.height=i.height,this.bitDepth=i.bitDepth,this.channels=i.channels,this.components=i.components}encode(){this.encoded=new n,this.encoded.skip(14),this.writeBitmapV5Header(),this.writeColorTable();const i=this.encoded.offset;return this.writePixelArray(),this.encoded.rewind(),this.writeBitmapFileHeader(i),this.encoded.toArray()}writePixelArray(){let i=this.encoded;const o=Math.floor((this.bitDepth*this.width+31)/32)*4,a=Math.ceil(this.bitDepth*this.width/8),l=o-a,c=this.bitDepth*this.width%8,u=c===0?0:8-c,h=o*this.height;let d,g,x=0,y=0,w=8;i.mark(),g=this.readUint8();for(let $=this.height-1;$>=0;$--){const S=$===0;i.reset(),i.skip($*o);for(let _=0;_<a;_++){const T=_===a-1;y<=u&&T?(i.writeByte(g<<y),(u===0||u===y)&&!S&&(d=g,g=this.readByte())):y===0?(d=g,g=this.readUint8(),i.writeByte(d)):(d=g,g=this.readUint8(),i.writeByte(d<<y&t[y]|g>>w)),T&&(x+=c||0,i.skip(l),y=x%8,w=8-y)}}o>a&&(i.reset(),i.skip(h-1),i.writeUint8(0))}writeColorTable(){this.encoded.writeUint32(0).writeUint32(16777215)}writeBitmapFileHeader(i){this.encoded.writeChars("BM").writeInt32(this.encoded.lastWrittenByte).writeUint16(0).writeUint16(0).writeUint32(i)}writeBitmapV5Header(){const o=Math.floor((this.bitDepth*this.width+31)/32)*4*this.height;this.encoded.writeUint32(124).writeInt32(this.width).writeInt32(this.height).writeUint16(1).writeUint16(this.bitDepth).writeUint32(e.BITMAPV5HEADER.Compression.BI_RGB).writeUint32(o).writeInt32(0).writeInt32(0).writeUint32(Math.pow(2,this.bitDepth)).writeUint32(Math.pow(2,this.bitDepth)).writeUint32(4278190080).writeUint32(16711680).writeUint32(65280).writeUint32(255).writeUint32(e.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36).skip(12).writeUint32(e.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12)}}return BMPEncoder_1=r,BMPEncoder_1}var hasRequiredSrc$5;function requireSrc$5(){if(hasRequiredSrc$5)return src$5;hasRequiredSrc$5=1;const n=requireBMPEncoder();return src$5.encode=function(t){return new n(t).encode()},src$5}var srcExports$3=requireSrc$5();/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const Z_FIXED$1=4,Z_BINARY=0,Z_TEXT=1,Z_UNKNOWN$1=2;function zero$1(n){let e=n.length;for(;--e>=0;)n[e]=0}const STORED_BLOCK=0,STATIC_TREES=1,DYN_TREES=2,MIN_MATCH$1=3,MAX_MATCH$1=258,LENGTH_CODES$1=29,LITERALS$1=256,L_CODES$1=LITERALS$1+1+LENGTH_CODES$1,D_CODES$1=30,BL_CODES$1=19,HEAP_SIZE$1=2*L_CODES$1+1,MAX_BITS$1=15,Buf_size=16,MAX_BL_BITS=7,END_BLOCK=256,REP_3_6=16,REPZ_3_10=17,REPZ_11_138=18,extra_lbits=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),extra_dbits=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),extra_blbits=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),bl_order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),DIST_CODE_LEN=512,static_ltree=new Array((L_CODES$1+2)*2);zero$1(static_ltree);const static_dtree=new Array(D_CODES$1*2);zero$1(static_dtree);const _dist_code=new Array(DIST_CODE_LEN);zero$1(_dist_code);const _length_code=new Array(MAX_MATCH$1-MIN_MATCH$1+1);zero$1(_length_code);const base_length=new Array(LENGTH_CODES$1);zero$1(base_length);const base_dist=new Array(D_CODES$1);zero$1(base_dist);function StaticTreeDesc(n,e,t,r,s){this.static_tree=n,this.extra_bits=e,this.extra_base=t,this.elems=r,this.max_length=s,this.has_stree=n&&n.length}let static_l_desc,static_d_desc,static_bl_desc;function TreeDesc(n,e){this.dyn_tree=n,this.max_code=0,this.stat_desc=e}const d_code=n=>n<256?_dist_code[n]:_dist_code[256+(n>>>7)],put_short=(n,e)=>{n.pending_buf[n.pending++]=e&255,n.pending_buf[n.pending++]=e>>>8&255},send_bits=(n,e,t)=>{n.bi_valid>Buf_size-t?(n.bi_buf|=e<<n.bi_valid&65535,put_short(n,n.bi_buf),n.bi_buf=e>>Buf_size-n.bi_valid,n.bi_valid+=t-Buf_size):(n.bi_buf|=e<<n.bi_valid&65535,n.bi_valid+=t)},send_code=(n,e,t)=>{send_bits(n,t[e*2],t[e*2+1])},bi_reverse=(n,e)=>{let t=0;do t|=n&1,n>>>=1,t<<=1;while(--e>0);return t>>>1},bi_flush=n=>{n.bi_valid===16?(put_short(n,n.bi_buf),n.bi_buf=0,n.bi_valid=0):n.bi_valid>=8&&(n.pending_buf[n.pending++]=n.bi_buf&255,n.bi_buf>>=8,n.bi_valid-=8)},gen_bitlen=(n,e)=>{const t=e.dyn_tree,r=e.max_code,s=e.stat_desc.static_tree,i=e.stat_desc.has_stree,o=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,l=e.stat_desc.max_length;let c,u,h,d,g,x,y=0;for(d=0;d<=MAX_BITS$1;d++)n.bl_count[d]=0;for(t[n.heap[n.heap_max]*2+1]=0,c=n.heap_max+1;c<HEAP_SIZE$1;c++)u=n.heap[c],d=t[t[u*2+1]*2+1]+1,d>l&&(d=l,y++),t[u*2+1]=d,!(u>r)&&(n.bl_count[d]++,g=0,u>=a&&(g=o[u-a]),x=t[u*2],n.opt_len+=x*(d+g),i&&(n.static_len+=x*(s[u*2+1]+g)));if(y!==0){do{for(d=l-1;n.bl_count[d]===0;)d--;n.bl_count[d]--,n.bl_count[d+1]+=2,n.bl_count[l]--,y-=2}while(y>0);for(d=l;d!==0;d--)for(u=n.bl_count[d];u!==0;)h=n.heap[--c],!(h>r)&&(t[h*2+1]!==d&&(n.opt_len+=(d-t[h*2+1])*t[h*2],t[h*2+1]=d),u--)}},gen_codes=(n,e,t)=>{const r=new Array(MAX_BITS$1+1);let s=0,i,o;for(i=1;i<=MAX_BITS$1;i++)s=s+t[i-1]<<1,r[i]=s;for(o=0;o<=e;o++){let a=n[o*2+1];a!==0&&(n[o*2]=bi_reverse(r[a]++,a))}},tr_static_init=()=>{let n,e,t,r,s;const i=new Array(MAX_BITS$1+1);for(t=0,r=0;r<LENGTH_CODES$1-1;r++)for(base_length[r]=t,n=0;n<1<<extra_lbits[r];n++)_length_code[t++]=r;for(_length_code[t-1]=r,s=0,r=0;r<16;r++)for(base_dist[r]=s,n=0;n<1<<extra_dbits[r];n++)_dist_code[s++]=r;for(s>>=7;r<D_CODES$1;r++)for(base_dist[r]=s<<7,n=0;n<1<<extra_dbits[r]-7;n++)_dist_code[256+s++]=r;for(e=0;e<=MAX_BITS$1;e++)i[e]=0;for(n=0;n<=143;)static_ltree[n*2+1]=8,n++,i[8]++;for(;n<=255;)static_ltree[n*2+1]=9,n++,i[9]++;for(;n<=279;)static_ltree[n*2+1]=7,n++,i[7]++;for(;n<=287;)static_ltree[n*2+1]=8,n++,i[8]++;for(gen_codes(static_ltree,L_CODES$1+1,i),n=0;n<D_CODES$1;n++)static_dtree[n*2+1]=5,static_dtree[n*2]=bi_reverse(n,5);static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS$1+1,L_CODES$1,MAX_BITS$1),static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES$1,MAX_BITS$1),static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES$1,MAX_BL_BITS)},init_block=n=>{let e;for(e=0;e<L_CODES$1;e++)n.dyn_ltree[e*2]=0;for(e=0;e<D_CODES$1;e++)n.dyn_dtree[e*2]=0;for(e=0;e<BL_CODES$1;e++)n.bl_tree[e*2]=0;n.dyn_ltree[END_BLOCK*2]=1,n.opt_len=n.static_len=0,n.sym_next=n.matches=0},bi_windup=n=>{n.bi_valid>8?put_short(n,n.bi_buf):n.bi_valid>0&&(n.pending_buf[n.pending++]=n.bi_buf),n.bi_buf=0,n.bi_valid=0},smaller=(n,e,t,r)=>{const s=e*2,i=t*2;return n[s]<n[i]||n[s]===n[i]&&r[e]<=r[t]},pqdownheap=(n,e,t)=>{const r=n.heap[t];let s=t<<1;for(;s<=n.heap_len&&(s<n.heap_len&&smaller(e,n.heap[s+1],n.heap[s],n.depth)&&s++,!smaller(e,r,n.heap[s],n.depth));)n.heap[t]=n.heap[s],t=s,s<<=1;n.heap[t]=r},compress_block=(n,e,t)=>{let r,s,i=0,o,a;if(n.sym_next!==0)do r=n.pending_buf[n.sym_buf+i++]&255,r+=(n.pending_buf[n.sym_buf+i++]&255)<<8,s=n.pending_buf[n.sym_buf+i++],r===0?send_code(n,s,e):(o=_length_code[s],send_code(n,o+LITERALS$1+1,e),a=extra_lbits[o],a!==0&&(s-=base_length[o],send_bits(n,s,a)),r--,o=d_code(r),send_code(n,o,t),a=extra_dbits[o],a!==0&&(r-=base_dist[o],send_bits(n,r,a)));while(i<n.sym_next);send_code(n,END_BLOCK,e)},build_tree=(n,e)=>{const t=e.dyn_tree,r=e.stat_desc.static_tree,s=e.stat_desc.has_stree,i=e.stat_desc.elems;let o,a,l=-1,c;for(n.heap_len=0,n.heap_max=HEAP_SIZE$1,o=0;o<i;o++)t[o*2]!==0?(n.heap[++n.heap_len]=l=o,n.depth[o]=0):t[o*2+1]=0;for(;n.heap_len<2;)c=n.heap[++n.heap_len]=l<2?++l:0,t[c*2]=1,n.depth[c]=0,n.opt_len--,s&&(n.static_len-=r[c*2+1]);for(e.max_code=l,o=n.heap_len>>1;o>=1;o--)pqdownheap(n,t,o);c=i;do o=n.heap[1],n.heap[1]=n.heap[n.heap_len--],pqdownheap(n,t,1),a=n.heap[1],n.heap[--n.heap_max]=o,n.heap[--n.heap_max]=a,t[c*2]=t[o*2]+t[a*2],n.depth[c]=(n.depth[o]>=n.depth[a]?n.depth[o]:n.depth[a])+1,t[o*2+1]=t[a*2+1]=c,n.heap[1]=c++,pqdownheap(n,t,1);while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],gen_bitlen(n,e),gen_codes(t,l,n.bl_count)},scan_tree=(n,e,t)=>{let r,s=-1,i,o=e[0*2+1],a=0,l=7,c=4;for(o===0&&(l=138,c=3),e[(t+1)*2+1]=65535,r=0;r<=t;r++)i=o,o=e[(r+1)*2+1],!(++a<l&&i===o)&&(a<c?n.bl_tree[i*2]+=a:i!==0?(i!==s&&n.bl_tree[i*2]++,n.bl_tree[REP_3_6*2]++):a<=10?n.bl_tree[REPZ_3_10*2]++:n.bl_tree[REPZ_11_138*2]++,a=0,s=i,o===0?(l=138,c=3):i===o?(l=6,c=3):(l=7,c=4))},send_tree=(n,e,t)=>{let r,s=-1,i,o=e[0*2+1],a=0,l=7,c=4;for(o===0&&(l=138,c=3),r=0;r<=t;r++)if(i=o,o=e[(r+1)*2+1],!(++a<l&&i===o)){if(a<c)do send_code(n,i,n.bl_tree);while(--a!==0);else i!==0?(i!==s&&(send_code(n,i,n.bl_tree),a--),send_code(n,REP_3_6,n.bl_tree),send_bits(n,a-3,2)):a<=10?(send_code(n,REPZ_3_10,n.bl_tree),send_bits(n,a-3,3)):(send_code(n,REPZ_11_138,n.bl_tree),send_bits(n,a-11,7));a=0,s=i,o===0?(l=138,c=3):i===o?(l=6,c=3):(l=7,c=4)}},build_bl_tree=n=>{let e;for(scan_tree(n,n.dyn_ltree,n.l_desc.max_code),scan_tree(n,n.dyn_dtree,n.d_desc.max_code),build_tree(n,n.bl_desc),e=BL_CODES$1-1;e>=3&&n.bl_tree[bl_order[e]*2+1]===0;e--);return n.opt_len+=3*(e+1)+5+5+4,e},send_all_trees=(n,e,t,r)=>{let s;for(send_bits(n,e-257,5),send_bits(n,t-1,5),send_bits(n,r-4,4),s=0;s<r;s++)send_bits(n,n.bl_tree[bl_order[s]*2+1],3);send_tree(n,n.dyn_ltree,e-1),send_tree(n,n.dyn_dtree,t-1)},detect_data_type=n=>{let e=4093624447,t;for(t=0;t<=31;t++,e>>>=1)if(e&1&&n.dyn_ltree[t*2]!==0)return Z_BINARY;if(n.dyn_ltree[9*2]!==0||n.dyn_ltree[10*2]!==0||n.dyn_ltree[13*2]!==0)return Z_TEXT;for(t=32;t<LITERALS$1;t++)if(n.dyn_ltree[t*2]!==0)return Z_TEXT;return Z_BINARY};let static_init_done=!1;const _tr_init$1=n=>{static_init_done||(tr_static_init(),static_init_done=!0),n.l_desc=new TreeDesc(n.dyn_ltree,static_l_desc),n.d_desc=new TreeDesc(n.dyn_dtree,static_d_desc),n.bl_desc=new TreeDesc(n.bl_tree,static_bl_desc),n.bi_buf=0,n.bi_valid=0,init_block(n)},_tr_stored_block$1=(n,e,t,r)=>{send_bits(n,(STORED_BLOCK<<1)+(r?1:0),3),bi_windup(n),put_short(n,t),put_short(n,~t),t&&n.pending_buf.set(n.window.subarray(e,e+t),n.pending),n.pending+=t},_tr_align$1=n=>{send_bits(n,STATIC_TREES<<1,3),send_code(n,END_BLOCK,static_ltree),bi_flush(n)},_tr_flush_block$1=(n,e,t,r)=>{let s,i,o=0;n.level>0?(n.strm.data_type===Z_UNKNOWN$1&&(n.strm.data_type=detect_data_type(n)),build_tree(n,n.l_desc),build_tree(n,n.d_desc),o=build_bl_tree(n),s=n.opt_len+3+7>>>3,i=n.static_len+3+7>>>3,i<=s&&(s=i)):s=i=t+5,t+4<=s&&e!==-1?_tr_stored_block$1(n,e,t,r):n.strategy===Z_FIXED$1||i===s?(send_bits(n,(STATIC_TREES<<1)+(r?1:0),3),compress_block(n,static_ltree,static_dtree)):(send_bits(n,(DYN_TREES<<1)+(r?1:0),3),send_all_trees(n,n.l_desc.max_code+1,n.d_desc.max_code+1,o+1),compress_block(n,n.dyn_ltree,n.dyn_dtree)),init_block(n),r&&bi_windup(n)},_tr_tally$1=(n,e,t)=>(n.pending_buf[n.sym_buf+n.sym_next++]=e,n.pending_buf[n.sym_buf+n.sym_next++]=e>>8,n.pending_buf[n.sym_buf+n.sym_next++]=t,e===0?n.dyn_ltree[t*2]++:(n.matches++,e--,n.dyn_ltree[(_length_code[t]+LITERALS$1+1)*2]++,n.dyn_dtree[d_code(e)*2]++),n.sym_next===n.sym_end);var _tr_init_1=_tr_init$1,_tr_stored_block_1=_tr_stored_block$1,_tr_flush_block_1=_tr_flush_block$1,_tr_tally_1=_tr_tally$1,_tr_align_1=_tr_align$1,trees={_tr_init:_tr_init_1,_tr_stored_block:_tr_stored_block_1,_tr_flush_block:_tr_flush_block_1,_tr_tally:_tr_tally_1,_tr_align:_tr_align_1};const adler32=(n,e,t,r)=>{let s=n&65535|0,i=n>>>16&65535|0,o=0;for(;t!==0;){o=t>2e3?2e3:t,t-=o;do s=s+e[r++]|0,i=i+s|0;while(--o);s%=65521,i%=65521}return s|i<<16|0};var adler32_1=adler32;const makeTable=()=>{let n,e=[];for(var t=0;t<256;t++){n=t;for(var r=0;r<8;r++)n=n&1?3988292384^n>>>1:n>>>1;e[t]=n}return e},crcTable$1=new Uint32Array(makeTable()),crc32=(n,e,t,r)=>{const s=crcTable$1,i=r+t;n^=-1;for(let o=r;o<i;o++)n=n>>>8^s[(n^e[o])&255];return n^-1};var crc32_1=crc32,messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},constants$2={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init,_tr_stored_block,_tr_flush_block,_tr_tally,_tr_align}=trees,{Z_NO_FLUSH:Z_NO_FLUSH$2,Z_PARTIAL_FLUSH,Z_FULL_FLUSH:Z_FULL_FLUSH$1,Z_FINISH:Z_FINISH$3,Z_BLOCK:Z_BLOCK$1,Z_OK:Z_OK$3,Z_STREAM_END:Z_STREAM_END$3,Z_STREAM_ERROR:Z_STREAM_ERROR$2,Z_DATA_ERROR:Z_DATA_ERROR$2,Z_BUF_ERROR:Z_BUF_ERROR$1,Z_DEFAULT_COMPRESSION:Z_DEFAULT_COMPRESSION$1,Z_FILTERED,Z_HUFFMAN_ONLY,Z_RLE,Z_FIXED,Z_DEFAULT_STRATEGY:Z_DEFAULT_STRATEGY$1,Z_UNKNOWN,Z_DEFLATED:Z_DEFLATED$2}=constants$2,MAX_MEM_LEVEL=9,MAX_WBITS$1=15,DEF_MEM_LEVEL=8,LENGTH_CODES=29,LITERALS=256,L_CODES=LITERALS+1+LENGTH_CODES,D_CODES=30,BL_CODES=19,HEAP_SIZE=2*L_CODES+1,MAX_BITS=15,MIN_MATCH=3,MAX_MATCH=258,MIN_LOOKAHEAD=MAX_MATCH+MIN_MATCH+1,PRESET_DICT=32,INIT_STATE=42,GZIP_STATE=57,EXTRA_STATE=69,NAME_STATE=73,COMMENT_STATE=91,HCRC_STATE=103,BUSY_STATE=113,FINISH_STATE=666,BS_NEED_MORE=1,BS_BLOCK_DONE=2,BS_FINISH_STARTED=3,BS_FINISH_DONE=4,OS_CODE=3,err=(n,e)=>(n.msg=messages[e],e),rank=n=>n*2-(n>4?9:0),zero=n=>{let e=n.length;for(;--e>=0;)n[e]=0},slide_hash=n=>{let e,t,r,s=n.w_size;e=n.hash_size,r=e;do t=n.head[--r],n.head[r]=t>=s?t-s:0;while(--e);e=s,r=e;do t=n.prev[--r],n.prev[r]=t>=s?t-s:0;while(--e)};let HASH_ZLIB=(n,e,t)=>(e<<n.hash_shift^t)&n.hash_mask,HASH=HASH_ZLIB;const flush_pending=n=>{const e=n.state;let t=e.pending;t>n.avail_out&&(t=n.avail_out),t!==0&&(n.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+t),n.next_out),n.next_out+=t,e.pending_out+=t,n.total_out+=t,n.avail_out-=t,e.pending-=t,e.pending===0&&(e.pending_out=0))},flush_block_only=(n,e)=>{_tr_flush_block(n,n.block_start>=0?n.block_start:-1,n.strstart-n.block_start,e),n.block_start=n.strstart,flush_pending(n.strm)},put_byte=(n,e)=>{n.pending_buf[n.pending++]=e},putShortMSB=(n,e)=>{n.pending_buf[n.pending++]=e>>>8&255,n.pending_buf[n.pending++]=e&255},read_buf=(n,e,t,r)=>{let s=n.avail_in;return s>r&&(s=r),s===0?0:(n.avail_in-=s,e.set(n.input.subarray(n.next_in,n.next_in+s),t),n.state.wrap===1?n.adler=adler32_1(n.adler,e,s,t):n.state.wrap===2&&(n.adler=crc32_1(n.adler,e,s,t)),n.next_in+=s,n.total_in+=s,s)},longest_match=(n,e)=>{let t=n.max_chain_length,r=n.strstart,s,i,o=n.prev_length,a=n.nice_match;const l=n.strstart>n.w_size-MIN_LOOKAHEAD?n.strstart-(n.w_size-MIN_LOOKAHEAD):0,c=n.window,u=n.w_mask,h=n.prev,d=n.strstart+MAX_MATCH;let g=c[r+o-1],x=c[r+o];n.prev_length>=n.good_match&&(t>>=2),a>n.lookahead&&(a=n.lookahead);do if(s=e,!(c[s+o]!==x||c[s+o-1]!==g||c[s]!==c[r]||c[++s]!==c[r+1])){r+=2,s++;do;while(c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&c[++r]===c[++s]&&r<d);if(i=MAX_MATCH-(d-r),r=d-MAX_MATCH,i>o){if(n.match_start=e,o=i,i>=a)break;g=c[r+o-1],x=c[r+o]}}while((e=h[e&u])>l&&--t!==0);return o<=n.lookahead?o:n.lookahead},fill_window=n=>{const e=n.w_size;let t,r,s;do{if(r=n.window_size-n.lookahead-n.strstart,n.strstart>=e+(e-MIN_LOOKAHEAD)&&(n.window.set(n.window.subarray(e,e+e-r),0),n.match_start-=e,n.strstart-=e,n.block_start-=e,n.insert>n.strstart&&(n.insert=n.strstart),slide_hash(n),r+=e),n.strm.avail_in===0)break;if(t=read_buf(n.strm,n.window,n.strstart+n.lookahead,r),n.lookahead+=t,n.lookahead+n.insert>=MIN_MATCH)for(s=n.strstart-n.insert,n.ins_h=n.window[s],n.ins_h=HASH(n,n.ins_h,n.window[s+1]);n.insert&&(n.ins_h=HASH(n,n.ins_h,n.window[s+MIN_MATCH-1]),n.prev[s&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=s,s++,n.insert--,!(n.lookahead+n.insert<MIN_MATCH)););}while(n.lookahead<MIN_LOOKAHEAD&&n.strm.avail_in!==0)},deflate_stored=(n,e)=>{let t=n.pending_buf_size-5>n.w_size?n.w_size:n.pending_buf_size-5,r,s,i,o=0,a=n.strm.avail_in;do{if(r=65535,i=n.bi_valid+42>>3,n.strm.avail_out<i||(i=n.strm.avail_out-i,s=n.strstart-n.block_start,r>s+n.strm.avail_in&&(r=s+n.strm.avail_in),r>i&&(r=i),r<t&&(r===0&&e!==Z_FINISH$3||e===Z_NO_FLUSH$2||r!==s+n.strm.avail_in)))break;o=e===Z_FINISH$3&&r===s+n.strm.avail_in?1:0,_tr_stored_block(n,0,0,o),n.pending_buf[n.pending-4]=r,n.pending_buf[n.pending-3]=r>>8,n.pending_buf[n.pending-2]=~r,n.pending_buf[n.pending-1]=~r>>8,flush_pending(n.strm),s&&(s>r&&(s=r),n.strm.output.set(n.window.subarray(n.block_start,n.block_start+s),n.strm.next_out),n.strm.next_out+=s,n.strm.avail_out-=s,n.strm.total_out+=s,n.block_start+=s,r-=s),r&&(read_buf(n.strm,n.strm.output,n.strm.next_out,r),n.strm.next_out+=r,n.strm.avail_out-=r,n.strm.total_out+=r)}while(o===0);return a-=n.strm.avail_in,a&&(a>=n.w_size?(n.matches=2,n.window.set(n.strm.input.subarray(n.strm.next_in-n.w_size,n.strm.next_in),0),n.strstart=n.w_size,n.insert=n.strstart):(n.window_size-n.strstart<=a&&(n.strstart-=n.w_size,n.window.set(n.window.subarray(n.w_size,n.w_size+n.strstart),0),n.matches<2&&n.matches++,n.insert>n.strstart&&(n.insert=n.strstart)),n.window.set(n.strm.input.subarray(n.strm.next_in-a,n.strm.next_in),n.strstart),n.strstart+=a,n.insert+=a>n.w_size-n.insert?n.w_size-n.insert:a),n.block_start=n.strstart),n.high_water<n.strstart&&(n.high_water=n.strstart),o?BS_FINISH_DONE:e!==Z_NO_FLUSH$2&&e!==Z_FINISH$3&&n.strm.avail_in===0&&n.strstart===n.block_start?BS_BLOCK_DONE:(i=n.window_size-n.strstart,n.strm.avail_in>i&&n.block_start>=n.w_size&&(n.block_start-=n.w_size,n.strstart-=n.w_size,n.window.set(n.window.subarray(n.w_size,n.w_size+n.strstart),0),n.matches<2&&n.matches++,i+=n.w_size,n.insert>n.strstart&&(n.insert=n.strstart)),i>n.strm.avail_in&&(i=n.strm.avail_in),i&&(read_buf(n.strm,n.window,n.strstart,i),n.strstart+=i,n.insert+=i>n.w_size-n.insert?n.w_size-n.insert:i),n.high_water<n.strstart&&(n.high_water=n.strstart),i=n.bi_valid+42>>3,i=n.pending_buf_size-i>65535?65535:n.pending_buf_size-i,t=i>n.w_size?n.w_size:i,s=n.strstart-n.block_start,(s>=t||(s||e===Z_FINISH$3)&&e!==Z_NO_FLUSH$2&&n.strm.avail_in===0&&s<=i)&&(r=s>i?i:s,o=e===Z_FINISH$3&&n.strm.avail_in===0&&r===s?1:0,_tr_stored_block(n,n.block_start,r,o),n.block_start+=r,flush_pending(n.strm)),o?BS_FINISH_STARTED:BS_NEED_MORE)},deflate_fast=(n,e)=>{let t,r;for(;;){if(n.lookahead<MIN_LOOKAHEAD){if(fill_window(n),n.lookahead<MIN_LOOKAHEAD&&e===Z_NO_FLUSH$2)return BS_NEED_MORE;if(n.lookahead===0)break}if(t=0,n.lookahead>=MIN_MATCH&&(n.ins_h=HASH(n,n.ins_h,n.window[n.strstart+MIN_MATCH-1]),t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),t!==0&&n.strstart-t<=n.w_size-MIN_LOOKAHEAD&&(n.match_length=longest_match(n,t)),n.match_length>=MIN_MATCH)if(r=_tr_tally(n,n.strstart-n.match_start,n.match_length-MIN_MATCH),n.lookahead-=n.match_length,n.match_length<=n.max_lazy_match&&n.lookahead>=MIN_MATCH){n.match_length--;do n.strstart++,n.ins_h=HASH(n,n.ins_h,n.window[n.strstart+MIN_MATCH-1]),t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart;while(--n.match_length!==0);n.strstart++}else n.strstart+=n.match_length,n.match_length=0,n.ins_h=n.window[n.strstart],n.ins_h=HASH(n,n.ins_h,n.window[n.strstart+1]);else r=_tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++;if(r&&(flush_block_only(n,!1),n.strm.avail_out===0))return BS_NEED_MORE}return n.insert=n.strstart<MIN_MATCH-1?n.strstart:MIN_MATCH-1,e===Z_FINISH$3?(flush_block_only(n,!0),n.strm.avail_out===0?BS_FINISH_STARTED:BS_FINISH_DONE):n.sym_next&&(flush_block_only(n,!1),n.strm.avail_out===0)?BS_NEED_MORE:BS_BLOCK_DONE},deflate_slow=(n,e)=>{let t,r,s;for(;;){if(n.lookahead<MIN_LOOKAHEAD){if(fill_window(n),n.lookahead<MIN_LOOKAHEAD&&e===Z_NO_FLUSH$2)return BS_NEED_MORE;if(n.lookahead===0)break}if(t=0,n.lookahead>=MIN_MATCH&&(n.ins_h=HASH(n,n.ins_h,n.window[n.strstart+MIN_MATCH-1]),t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),n.prev_length=n.match_length,n.prev_match=n.match_start,n.match_length=MIN_MATCH-1,t!==0&&n.prev_length<n.max_lazy_match&&n.strstart-t<=n.w_size-MIN_LOOKAHEAD&&(n.match_length=longest_match(n,t),n.match_length<=5&&(n.strategy===Z_FILTERED||n.match_length===MIN_MATCH&&n.strstart-n.match_start>4096)&&(n.match_length=MIN_MATCH-1)),n.prev_length>=MIN_MATCH&&n.match_length<=n.prev_length){s=n.strstart+n.lookahead-MIN_MATCH,r=_tr_tally(n,n.strstart-1-n.prev_match,n.prev_length-MIN_MATCH),n.lookahead-=n.prev_length-1,n.prev_length-=2;do++n.strstart<=s&&(n.ins_h=HASH(n,n.ins_h,n.window[n.strstart+MIN_MATCH-1]),t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart);while(--n.prev_length!==0);if(n.match_available=0,n.match_length=MIN_MATCH-1,n.strstart++,r&&(flush_block_only(n,!1),n.strm.avail_out===0))return BS_NEED_MORE}else if(n.match_available){if(r=_tr_tally(n,0,n.window[n.strstart-1]),r&&flush_block_only(n,!1),n.strstart++,n.lookahead--,n.strm.avail_out===0)return BS_NEED_MORE}else n.match_available=1,n.strstart++,n.lookahead--}return n.match_available&&(r=_tr_tally(n,0,n.window[n.strstart-1]),n.match_available=0),n.insert=n.strstart<MIN_MATCH-1?n.strstart:MIN_MATCH-1,e===Z_FINISH$3?(flush_block_only(n,!0),n.strm.avail_out===0?BS_FINISH_STARTED:BS_FINISH_DONE):n.sym_next&&(flush_block_only(n,!1),n.strm.avail_out===0)?BS_NEED_MORE:BS_BLOCK_DONE},deflate_rle=(n,e)=>{let t,r,s,i;const o=n.window;for(;;){if(n.lookahead<=MAX_MATCH){if(fill_window(n),n.lookahead<=MAX_MATCH&&e===Z_NO_FLUSH$2)return BS_NEED_MORE;if(n.lookahead===0)break}if(n.match_length=0,n.lookahead>=MIN_MATCH&&n.strstart>0&&(s=n.strstart-1,r=o[s],r===o[++s]&&r===o[++s]&&r===o[++s])){i=n.strstart+MAX_MATCH;do;while(r===o[++s]&&r===o[++s]&&r===o[++s]&&r===o[++s]&&r===o[++s]&&r===o[++s]&&r===o[++s]&&r===o[++s]&&s<i);n.match_length=MAX_MATCH-(i-s),n.match_length>n.lookahead&&(n.match_length=n.lookahead)}if(n.match_length>=MIN_MATCH?(t=_tr_tally(n,1,n.match_length-MIN_MATCH),n.lookahead-=n.match_length,n.strstart+=n.match_length,n.match_length=0):(t=_tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++),t&&(flush_block_only(n,!1),n.strm.avail_out===0))return BS_NEED_MORE}return n.insert=0,e===Z_FINISH$3?(flush_block_only(n,!0),n.strm.avail_out===0?BS_FINISH_STARTED:BS_FINISH_DONE):n.sym_next&&(flush_block_only(n,!1),n.strm.avail_out===0)?BS_NEED_MORE:BS_BLOCK_DONE},deflate_huff=(n,e)=>{let t;for(;;){if(n.lookahead===0&&(fill_window(n),n.lookahead===0)){if(e===Z_NO_FLUSH$2)return BS_NEED_MORE;break}if(n.match_length=0,t=_tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++,t&&(flush_block_only(n,!1),n.strm.avail_out===0))return BS_NEED_MORE}return n.insert=0,e===Z_FINISH$3?(flush_block_only(n,!0),n.strm.avail_out===0?BS_FINISH_STARTED:BS_FINISH_DONE):n.sym_next&&(flush_block_only(n,!1),n.strm.avail_out===0)?BS_NEED_MORE:BS_BLOCK_DONE};function Config(n,e,t,r,s){this.good_length=n,this.max_lazy=e,this.nice_length=t,this.max_chain=r,this.func=s}const configuration_table=[new Config(0,0,0,0,deflate_stored),new Config(4,4,8,4,deflate_fast),new Config(4,5,16,8,deflate_fast),new Config(4,6,32,32,deflate_fast),new Config(4,4,16,16,deflate_slow),new Config(8,16,32,32,deflate_slow),new Config(8,16,128,128,deflate_slow),new Config(8,32,128,256,deflate_slow),new Config(32,128,258,1024,deflate_slow),new Config(32,258,258,4096,deflate_slow)],lm_init=n=>{n.window_size=2*n.w_size,zero(n.head),n.max_lazy_match=configuration_table[n.level].max_lazy,n.good_match=configuration_table[n.level].good_length,n.nice_match=configuration_table[n.level].nice_length,n.max_chain_length=configuration_table[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=MIN_MATCH-1,n.match_available=0,n.ins_h=0};function DeflateState(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Z_DEFLATED$2,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(HEAP_SIZE*2),this.dyn_dtree=new Uint16Array((2*D_CODES+1)*2),this.bl_tree=new Uint16Array((2*BL_CODES+1)*2),zero(this.dyn_ltree),zero(this.dyn_dtree),zero(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(MAX_BITS+1),this.heap=new Uint16Array(2*L_CODES+1),zero(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*L_CODES+1),zero(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const deflateStateCheck=n=>{if(!n)return 1;const e=n.state;return!e||e.strm!==n||e.status!==INIT_STATE&&e.status!==GZIP_STATE&&e.status!==EXTRA_STATE&&e.status!==NAME_STATE&&e.status!==COMMENT_STATE&&e.status!==HCRC_STATE&&e.status!==BUSY_STATE&&e.status!==FINISH_STATE?1:0},deflateResetKeep=n=>{if(deflateStateCheck(n))return err(n,Z_STREAM_ERROR$2);n.total_in=n.total_out=0,n.data_type=Z_UNKNOWN;const e=n.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap===2?GZIP_STATE:e.wrap?INIT_STATE:BUSY_STATE,n.adler=e.wrap===2?0:1,e.last_flush=-2,_tr_init(e),Z_OK$3},deflateReset=n=>{const e=deflateResetKeep(n);return e===Z_OK$3&&lm_init(n.state),e},deflateSetHeader=(n,e)=>deflateStateCheck(n)||n.state.wrap!==2?Z_STREAM_ERROR$2:(n.state.gzhead=e,Z_OK$3),deflateInit2=(n,e,t,r,s,i)=>{if(!n)return Z_STREAM_ERROR$2;let o=1;if(e===Z_DEFAULT_COMPRESSION$1&&(e=6),r<0?(o=0,r=-r):r>15&&(o=2,r-=16),s<1||s>MAX_MEM_LEVEL||t!==Z_DEFLATED$2||r<8||r>15||e<0||e>9||i<0||i>Z_FIXED||r===8&&o!==1)return err(n,Z_STREAM_ERROR$2);r===8&&(r=9);const a=new DeflateState;return n.state=a,a.strm=n,a.status=INIT_STATE,a.wrap=o,a.gzhead=null,a.w_bits=r,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=s+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+MIN_MATCH-1)/MIN_MATCH),a.window=new Uint8Array(a.w_size*2),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<s+6,a.pending_buf_size=a.lit_bufsize*4,a.pending_buf=new Uint8Array(a.pending_buf_size),a.sym_buf=a.lit_bufsize,a.sym_end=(a.lit_bufsize-1)*3,a.level=e,a.strategy=i,a.method=t,deflateReset(n)},deflateInit=(n,e)=>deflateInit2(n,e,Z_DEFLATED$2,MAX_WBITS$1,DEF_MEM_LEVEL,Z_DEFAULT_STRATEGY$1),deflate$2=(n,e)=>{if(deflateStateCheck(n)||e>Z_BLOCK$1||e<0)return n?err(n,Z_STREAM_ERROR$2):Z_STREAM_ERROR$2;const t=n.state;if(!n.output||n.avail_in!==0&&!n.input||t.status===FINISH_STATE&&e!==Z_FINISH$3)return err(n,n.avail_out===0?Z_BUF_ERROR$1:Z_STREAM_ERROR$2);const r=t.last_flush;if(t.last_flush=e,t.pending!==0){if(flush_pending(n),n.avail_out===0)return t.last_flush=-1,Z_OK$3}else if(n.avail_in===0&&rank(e)<=rank(r)&&e!==Z_FINISH$3)return err(n,Z_BUF_ERROR$1);if(t.status===FINISH_STATE&&n.avail_in!==0)return err(n,Z_BUF_ERROR$1);if(t.status===INIT_STATE&&t.wrap===0&&(t.status=BUSY_STATE),t.status===INIT_STATE){let s=Z_DEFLATED$2+(t.w_bits-8<<4)<<8,i=-1;if(t.strategy>=Z_HUFFMAN_ONLY||t.level<2?i=0:t.level<6?i=1:t.level===6?i=2:i=3,s|=i<<6,t.strstart!==0&&(s|=PRESET_DICT),s+=31-s%31,putShortMSB(t,s),t.strstart!==0&&(putShortMSB(t,n.adler>>>16),putShortMSB(t,n.adler&65535)),n.adler=1,t.status=BUSY_STATE,flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3}if(t.status===GZIP_STATE){if(n.adler=0,put_byte(t,31),put_byte(t,139),put_byte(t,8),t.gzhead)put_byte(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),put_byte(t,t.gzhead.time&255),put_byte(t,t.gzhead.time>>8&255),put_byte(t,t.gzhead.time>>16&255),put_byte(t,t.gzhead.time>>24&255),put_byte(t,t.level===9?2:t.strategy>=Z_HUFFMAN_ONLY||t.level<2?4:0),put_byte(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(put_byte(t,t.gzhead.extra.length&255),put_byte(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=EXTRA_STATE;else if(put_byte(t,0),put_byte(t,0),put_byte(t,0),put_byte(t,0),put_byte(t,0),put_byte(t,t.level===9?2:t.strategy>=Z_HUFFMAN_ONLY||t.level<2?4:0),put_byte(t,OS_CODE),t.status=BUSY_STATE,flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3}if(t.status===EXTRA_STATE){if(t.gzhead.extra){let s=t.pending,i=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+i>t.pending_buf_size;){let a=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+a),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s)),t.gzindex+=a,flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3;s=0,i-=a}let o=new Uint8Array(t.gzhead.extra);t.pending_buf.set(o.subarray(t.gzindex,t.gzindex+i),t.pending),t.pending+=i,t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s)),t.gzindex=0}t.status=NAME_STATE}if(t.status===NAME_STATE){if(t.gzhead.name){let s=t.pending,i;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s)),flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3;s=0}t.gzindex<t.gzhead.name.length?i=t.gzhead.name.charCodeAt(t.gzindex++)&255:i=0,put_byte(t,i)}while(i!==0);t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s)),t.gzindex=0}t.status=COMMENT_STATE}if(t.status===COMMENT_STATE){if(t.gzhead.comment){let s=t.pending,i;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s)),flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3;s=0}t.gzindex<t.gzhead.comment.length?i=t.gzhead.comment.charCodeAt(t.gzindex++)&255:i=0,put_byte(t,i)}while(i!==0);t.gzhead.hcrc&&t.pending>s&&(n.adler=crc32_1(n.adler,t.pending_buf,t.pending-s,s))}t.status=HCRC_STATE}if(t.status===HCRC_STATE){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(flush_pending(n),t.pending!==0))return t.last_flush=-1,Z_OK$3;put_byte(t,n.adler&255),put_byte(t,n.adler>>8&255),n.adler=0}if(t.status=BUSY_STATE,flush_pending(n),t.pending!==0)return t.last_flush=-1,Z_OK$3}if(n.avail_in!==0||t.lookahead!==0||e!==Z_NO_FLUSH$2&&t.status!==FINISH_STATE){let s=t.level===0?deflate_stored(t,e):t.strategy===Z_HUFFMAN_ONLY?deflate_huff(t,e):t.strategy===Z_RLE?deflate_rle(t,e):configuration_table[t.level].func(t,e);if((s===BS_FINISH_STARTED||s===BS_FINISH_DONE)&&(t.status=FINISH_STATE),s===BS_NEED_MORE||s===BS_FINISH_STARTED)return n.avail_out===0&&(t.last_flush=-1),Z_OK$3;if(s===BS_BLOCK_DONE&&(e===Z_PARTIAL_FLUSH?_tr_align(t):e!==Z_BLOCK$1&&(_tr_stored_block(t,0,0,!1),e===Z_FULL_FLUSH$1&&(zero(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),flush_pending(n),n.avail_out===0))return t.last_flush=-1,Z_OK$3}return e!==Z_FINISH$3?Z_OK$3:t.wrap<=0?Z_STREAM_END$3:(t.wrap===2?(put_byte(t,n.adler&255),put_byte(t,n.adler>>8&255),put_byte(t,n.adler>>16&255),put_byte(t,n.adler>>24&255),put_byte(t,n.total_in&255),put_byte(t,n.total_in>>8&255),put_byte(t,n.total_in>>16&255),put_byte(t,n.total_in>>24&255)):(putShortMSB(t,n.adler>>>16),putShortMSB(t,n.adler&65535)),flush_pending(n),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?Z_OK$3:Z_STREAM_END$3)},deflateEnd=n=>{if(deflateStateCheck(n))return Z_STREAM_ERROR$2;const e=n.state.status;return n.state=null,e===BUSY_STATE?err(n,Z_DATA_ERROR$2):Z_OK$3},deflateSetDictionary=(n,e)=>{let t=e.length;if(deflateStateCheck(n))return Z_STREAM_ERROR$2;const r=n.state,s=r.wrap;if(s===2||s===1&&r.status!==INIT_STATE||r.lookahead)return Z_STREAM_ERROR$2;if(s===1&&(n.adler=adler32_1(n.adler,e,t,0)),r.wrap=0,t>=r.w_size){s===0&&(zero(r.head),r.strstart=0,r.block_start=0,r.insert=0);let l=new Uint8Array(r.w_size);l.set(e.subarray(t-r.w_size,t),0),e=l,t=r.w_size}const i=n.avail_in,o=n.next_in,a=n.input;for(n.avail_in=t,n.next_in=0,n.input=e,fill_window(r);r.lookahead>=MIN_MATCH;){let l=r.strstart,c=r.lookahead-(MIN_MATCH-1);do r.ins_h=HASH(r,r.ins_h,r.window[l+MIN_MATCH-1]),r.prev[l&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=l,l++;while(--c);r.strstart=l,r.lookahead=MIN_MATCH-1,fill_window(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=MIN_MATCH-1,r.match_available=0,n.next_in=o,n.input=a,n.avail_in=i,r.wrap=s,Z_OK$3};var deflateInit_1=deflateInit,deflateInit2_1=deflateInit2,deflateReset_1=deflateReset,deflateResetKeep_1=deflateResetKeep,deflateSetHeader_1=deflateSetHeader,deflate_2$1=deflate$2,deflateEnd_1=deflateEnd,deflateSetDictionary_1=deflateSetDictionary,deflateInfo="pako deflate (from Nodeca project)",deflate_1$2={deflateInit:deflateInit_1,deflateInit2:deflateInit2_1,deflateReset:deflateReset_1,deflateResetKeep:deflateResetKeep_1,deflateSetHeader:deflateSetHeader_1,deflate:deflate_2$1,deflateEnd:deflateEnd_1,deflateSetDictionary:deflateSetDictionary_1,deflateInfo};const _has=(n,e)=>Object.prototype.hasOwnProperty.call(n,e);var assign=function(n){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const t=e.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const r in t)_has(t,r)&&(n[r]=t[r])}}return n},flattenChunks=n=>{let e=0;for(let r=0,s=n.length;r<s;r++)e+=n[r].length;const t=new Uint8Array(e);for(let r=0,s=0,i=n.length;r<i;r++){let o=n[r];t.set(o,s),s+=o.length}return t},common={assign,flattenChunks};let STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(n){STR_APPLY_UIA_OK=!1}const _utf8len=new Uint8Array(256);for(let n=0;n<256;n++)_utf8len[n]=n>=252?6:n>=248?5:n>=240?4:n>=224?3:n>=192?2:1;_utf8len[254]=_utf8len[254]=1;var string2buf=n=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(n);let e,t,r,s,i,o=n.length,a=0;for(s=0;s<o;s++)t=n.charCodeAt(s),(t&64512)===55296&&s+1<o&&(r=n.charCodeAt(s+1),(r&64512)===56320&&(t=65536+(t-55296<<10)+(r-56320),s++)),a+=t<128?1:t<2048?2:t<65536?3:4;for(e=new Uint8Array(a),i=0,s=0;i<a;s++)t=n.charCodeAt(s),(t&64512)===55296&&s+1<o&&(r=n.charCodeAt(s+1),(r&64512)===56320&&(t=65536+(t-55296<<10)+(r-56320),s++)),t<128?e[i++]=t:t<2048?(e[i++]=192|t>>>6,e[i++]=128|t&63):t<65536?(e[i++]=224|t>>>12,e[i++]=128|t>>>6&63,e[i++]=128|t&63):(e[i++]=240|t>>>18,e[i++]=128|t>>>12&63,e[i++]=128|t>>>6&63,e[i++]=128|t&63);return e};const buf2binstring=(n,e)=>{if(e<65534&&n.subarray&&STR_APPLY_UIA_OK)return String.fromCharCode.apply(null,n.length===e?n:n.subarray(0,e));let t="";for(let r=0;r<e;r++)t+=String.fromCharCode(n[r]);return t};var buf2string=(n,e)=>{const t=e||n.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(n.subarray(0,e));let r,s;const i=new Array(t*2);for(s=0,r=0;r<t;){let o=n[r++];if(o<128){i[s++]=o;continue}let a=_utf8len[o];if(a>4){i[s++]=65533,r+=a-1;continue}for(o&=a===2?31:a===3?15:7;a>1&&r<t;)o=o<<6|n[r++]&63,a--;if(a>1){i[s++]=65533;continue}o<65536?i[s++]=o:(o-=65536,i[s++]=55296|o>>10&1023,i[s++]=56320|o&1023)}return buf2binstring(i,s)},utf8border=(n,e)=>{e=e||n.length,e>n.length&&(e=n.length);let t=e-1;for(;t>=0&&(n[t]&192)===128;)t--;return t<0||t===0?e:t+_utf8len[n[t]]>e?t:e},strings={string2buf,buf2string,utf8border};function ZStream(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var zstream=ZStream;const toString$1=Object.prototype.toString,{Z_NO_FLUSH:Z_NO_FLUSH$1,Z_SYNC_FLUSH,Z_FULL_FLUSH,Z_FINISH:Z_FINISH$2,Z_OK:Z_OK$2,Z_STREAM_END:Z_STREAM_END$2,Z_DEFAULT_COMPRESSION,Z_DEFAULT_STRATEGY,Z_DEFLATED:Z_DEFLATED$1}=constants$2;function Deflate$1(n){this.options=common.assign({level:Z_DEFAULT_COMPRESSION,method:Z_DEFLATED$1,chunkSize:16384,windowBits:15,memLevel:8,strategy:Z_DEFAULT_STRATEGY},n||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0;let t=deflate_1$2.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(t!==Z_OK$2)throw new Error(messages[t]);if(e.header&&deflate_1$2.deflateSetHeader(this.strm,e.header),e.dictionary){let r;if(typeof e.dictionary=="string"?r=strings.string2buf(e.dictionary):toString$1.call(e.dictionary)==="[object ArrayBuffer]"?r=new Uint8Array(e.dictionary):r=e.dictionary,t=deflate_1$2.deflateSetDictionary(this.strm,r),t!==Z_OK$2)throw new Error(messages[t]);this._dict_set=!0}}Deflate$1.prototype.push=function(n,e){const t=this.strm,r=this.options.chunkSize;let s,i;if(this.ended)return!1;for(e===~~e?i=e:i=e===!0?Z_FINISH$2:Z_NO_FLUSH$1,typeof n=="string"?t.input=strings.string2buf(n):toString$1.call(n)==="[object ArrayBuffer]"?t.input=new Uint8Array(n):t.input=n,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(r),t.next_out=0,t.avail_out=r),(i===Z_SYNC_FLUSH||i===Z_FULL_FLUSH)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(s=deflate_1$2.deflate(t,i),s===Z_STREAM_END$2)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),s=deflate_1$2.deflateEnd(this.strm),this.onEnd(s),this.ended=!0,s===Z_OK$2;if(t.avail_out===0){this.onData(t.output);continue}if(i>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0},Deflate$1.prototype.onData=function(n){this.chunks.push(n)},Deflate$1.prototype.onEnd=function(n){n===Z_OK$2&&(this.result=common.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg};function deflate$1(n,e){const t=new Deflate$1(e);if(t.push(n,!0),t.err)throw t.msg||messages[t.err];return t.result}function deflateRaw$1(n,e){return e=e||{},e.raw=!0,deflate$1(n,e)}function gzip$1(n,e){return e=e||{},e.gzip=!0,deflate$1(n,e)}var Deflate_1$1=Deflate$1,deflate_2=deflate$1,deflateRaw_1$1=deflateRaw$1,gzip_1$1=gzip$1,constants$1=constants$2,deflate_1$1={Deflate:Deflate_1$1,deflate:deflate_2,deflateRaw:deflateRaw_1$1,gzip:gzip_1$1,constants:constants$1};const BAD$1=16209,TYPE$1=16191;var inffast=function(e,t){let r,s,i,o,a,l,c,u,h,d,g,x,y,w,$,S,_,T,k,P,L,D,M,O;const R=e.state;r=e.next_in,M=e.input,s=r+(e.avail_in-5),i=e.next_out,O=e.output,o=i-(t-e.avail_out),a=i+(e.avail_out-257),l=R.dmax,c=R.wsize,u=R.whave,h=R.wnext,d=R.window,g=R.hold,x=R.bits,y=R.lencode,w=R.distcode,$=(1<<R.lenbits)-1,S=(1<<R.distbits)-1;e:do{x<15&&(g+=M[r++]<<x,x+=8,g+=M[r++]<<x,x+=8),_=y[g&$];t:for(;;){if(T=_>>>24,g>>>=T,x-=T,T=_>>>16&255,T===0)O[i++]=_&65535;else if(T&16){k=_&65535,T&=15,T&&(x<T&&(g+=M[r++]<<x,x+=8),k+=g&(1<<T)-1,g>>>=T,x-=T),x<15&&(g+=M[r++]<<x,x+=8,g+=M[r++]<<x,x+=8),_=w[g&S];n:for(;;){if(T=_>>>24,g>>>=T,x-=T,T=_>>>16&255,T&16){if(P=_&65535,T&=15,x<T&&(g+=M[r++]<<x,x+=8,x<T&&(g+=M[r++]<<x,x+=8)),P+=g&(1<<T)-1,P>l){e.msg="invalid distance too far back",R.mode=BAD$1;break e}if(g>>>=T,x-=T,T=i-o,P>T){if(T=P-T,T>u&&R.sane){e.msg="invalid distance too far back",R.mode=BAD$1;break e}if(L=0,D=d,h===0){if(L+=c-T,T<k){k-=T;do O[i++]=d[L++];while(--T);L=i-P,D=O}}else if(h<T){if(L+=c+h-T,T-=h,T<k){k-=T;do O[i++]=d[L++];while(--T);if(L=0,h<k){T=h,k-=T;do O[i++]=d[L++];while(--T);L=i-P,D=O}}}else if(L+=h-T,T<k){k-=T;do O[i++]=d[L++];while(--T);L=i-P,D=O}for(;k>2;)O[i++]=D[L++],O[i++]=D[L++],O[i++]=D[L++],k-=3;k&&(O[i++]=D[L++],k>1&&(O[i++]=D[L++]))}else{L=i-P;do O[i++]=O[L++],O[i++]=O[L++],O[i++]=O[L++],k-=3;while(k>2);k&&(O[i++]=O[L++],k>1&&(O[i++]=O[L++]))}}else if(T&64){e.msg="invalid distance code",R.mode=BAD$1;break e}else{_=w[(_&65535)+(g&(1<<T)-1)];continue n}break}}else if(T&64)if(T&32){R.mode=TYPE$1;break e}else{e.msg="invalid literal/length code",R.mode=BAD$1;break e}else{_=y[(_&65535)+(g&(1<<T)-1)];continue t}break}}while(r<s&&i<a);k=x>>3,r-=k,x-=k<<3,g&=(1<<x)-1,e.next_in=r,e.next_out=i,e.avail_in=r<s?5+(s-r):5-(r-s),e.avail_out=i<a?257+(a-i):257-(i-a),R.hold=g,R.bits=x};const MAXBITS=15,ENOUGH_LENS$1=852,ENOUGH_DISTS$1=592,CODES$1=0,LENS$1=1,DISTS$1=2,lbase=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),lext=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),dbase=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),dext=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),inflate_table=(n,e,t,r,s,i,o,a)=>{const l=a.bits;let c=0,u=0,h=0,d=0,g=0,x=0,y=0,w=0,$=0,S=0,_,T,k,P,L,D=null,M;const O=new Uint16Array(MAXBITS+1),R=new Uint16Array(MAXBITS+1);let z=null,X,K,Y;for(c=0;c<=MAXBITS;c++)O[c]=0;for(u=0;u<r;u++)O[e[t+u]]++;for(g=l,d=MAXBITS;d>=1&&O[d]===0;d--);if(g>d&&(g=d),d===0)return s[i++]=1<<24|64<<16|0,s[i++]=1<<24|64<<16|0,a.bits=1,0;for(h=1;h<d&&O[h]===0;h++);for(g<h&&(g=h),w=1,c=1;c<=MAXBITS;c++)if(w<<=1,w-=O[c],w<0)return-1;if(w>0&&(n===CODES$1||d!==1))return-1;for(R[1]=0,c=1;c<MAXBITS;c++)R[c+1]=R[c]+O[c];for(u=0;u<r;u++)e[t+u]!==0&&(o[R[e[t+u]]++]=u);if(n===CODES$1?(D=z=o,M=20):n===LENS$1?(D=lbase,z=lext,M=257):(D=dbase,z=dext,M=0),S=0,u=0,c=h,L=i,x=g,y=0,k=-1,$=1<<g,P=$-1,n===LENS$1&&$>ENOUGH_LENS$1||n===DISTS$1&&$>ENOUGH_DISTS$1)return 1;for(;;){X=c-y,o[u]+1<M?(K=0,Y=o[u]):o[u]>=M?(K=z[o[u]-M],Y=D[o[u]-M]):(K=96,Y=0),_=1<<c-y,T=1<<x,h=T;do T-=_,s[L+(S>>y)+T]=X<<24|K<<16|Y|0;while(T!==0);for(_=1<<c-1;S&_;)_>>=1;if(_!==0?(S&=_-1,S+=_):S=0,u++,--O[c]===0){if(c===d)break;c=e[t+o[u]]}if(c>g&&(S&P)!==k){for(y===0&&(y=g),L+=h,x=c-y,w=1<<x;x+y<d&&(w-=O[x+y],!(w<=0));)x++,w<<=1;if($+=1<<x,n===LENS$1&&$>ENOUGH_LENS$1||n===DISTS$1&&$>ENOUGH_DISTS$1)return 1;k=S&P,s[k]=g<<24|x<<16|L-i|0}}return S!==0&&(s[L+S]=c-y<<24|64<<16|0),a.bits=g,0};var inftrees=inflate_table;const CODES=0,LENS=1,DISTS=2,{Z_FINISH:Z_FINISH$1,Z_BLOCK,Z_TREES,Z_OK:Z_OK$1,Z_STREAM_END:Z_STREAM_END$1,Z_NEED_DICT:Z_NEED_DICT$1,Z_STREAM_ERROR:Z_STREAM_ERROR$1,Z_DATA_ERROR:Z_DATA_ERROR$1,Z_MEM_ERROR:Z_MEM_ERROR$1,Z_BUF_ERROR,Z_DEFLATED}=constants$2,HEAD=16180,FLAGS=16181,TIME=16182,OS=16183,EXLEN=16184,EXTRA=16185,NAME=16186,COMMENT=16187,HCRC=16188,DICTID=16189,DICT=16190,TYPE=16191,TYPEDO=16192,STORED=16193,COPY_=16194,COPY=16195,TABLE=16196,LENLENS=16197,CODELENS=16198,LEN_=16199,LEN=16200,LENEXT=16201,DIST=16202,DISTEXT=16203,MATCH=16204,LIT=16205,CHECK=16206,LENGTH=16207,DONE=16208,BAD=16209,MEM=16210,SYNC=16211,ENOUGH_LENS=852,ENOUGH_DISTS=592,MAX_WBITS=15,DEF_WBITS=MAX_WBITS,zswap32=n=>(n>>>24&255)+(n>>>8&65280)+((n&65280)<<8)+((n&255)<<24);function InflateState(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const inflateStateCheck=n=>{if(!n)return 1;const e=n.state;return!e||e.strm!==n||e.mode<HEAD||e.mode>SYNC?1:0},inflateResetKeep=n=>{if(inflateStateCheck(n))return Z_STREAM_ERROR$1;const e=n.state;return n.total_in=n.total_out=e.total=0,n.msg="",e.wrap&&(n.adler=e.wrap&1),e.mode=HEAD,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(ENOUGH_LENS),e.distcode=e.distdyn=new Int32Array(ENOUGH_DISTS),e.sane=1,e.back=-1,Z_OK$1},inflateReset=n=>{if(inflateStateCheck(n))return Z_STREAM_ERROR$1;const e=n.state;return e.wsize=0,e.whave=0,e.wnext=0,inflateResetKeep(n)},inflateReset2=(n,e)=>{let t;if(inflateStateCheck(n))return Z_STREAM_ERROR$1;const r=n.state;return e<0?(t=0,e=-e):(t=(e>>4)+5,e<48&&(e&=15)),e&&(e<8||e>15)?Z_STREAM_ERROR$1:(r.window!==null&&r.wbits!==e&&(r.window=null),r.wrap=t,r.wbits=e,inflateReset(n))},inflateInit2=(n,e)=>{if(!n)return Z_STREAM_ERROR$1;const t=new InflateState;n.state=t,t.strm=n,t.window=null,t.mode=HEAD;const r=inflateReset2(n,e);return r!==Z_OK$1&&(n.state=null),r},inflateInit=n=>inflateInit2(n,DEF_WBITS);let virgin=!0,lenfix,distfix;const fixedtables=n=>{if(virgin){lenfix=new Int32Array(512),distfix=new Int32Array(32);let e=0;for(;e<144;)n.lens[e++]=8;for(;e<256;)n.lens[e++]=9;for(;e<280;)n.lens[e++]=7;for(;e<288;)n.lens[e++]=8;for(inftrees(LENS,n.lens,0,288,lenfix,0,n.work,{bits:9}),e=0;e<32;)n.lens[e++]=5;inftrees(DISTS,n.lens,0,32,distfix,0,n.work,{bits:5}),virgin=!1}n.lencode=lenfix,n.lenbits=9,n.distcode=distfix,n.distbits=5},updatewindow=(n,e,t,r)=>{let s;const i=n.state;return i.window===null&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new Uint8Array(i.wsize)),r>=i.wsize?(i.window.set(e.subarray(t-i.wsize,t),0),i.wnext=0,i.whave=i.wsize):(s=i.wsize-i.wnext,s>r&&(s=r),i.window.set(e.subarray(t-r,t-r+s),i.wnext),r-=s,r?(i.window.set(e.subarray(t-r,t),0),i.wnext=r,i.whave=i.wsize):(i.wnext+=s,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=s))),0},inflate$2=(n,e)=>{let t,r,s,i,o,a,l,c,u,h,d,g,x,y,w=0,$,S,_,T,k,P,L,D;const M=new Uint8Array(4);let O,R;const z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(n)||!n.output||!n.input&&n.avail_in!==0)return Z_STREAM_ERROR$1;t=n.state,t.mode===TYPE&&(t.mode=TYPEDO),o=n.next_out,s=n.output,l=n.avail_out,i=n.next_in,r=n.input,a=n.avail_in,c=t.hold,u=t.bits,h=a,d=l,D=Z_OK$1;e:for(;;)switch(t.mode){case HEAD:if(t.wrap===0){t.mode=TYPEDO;break}for(;u<16;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(t.wrap&2&&c===35615){t.wbits===0&&(t.wbits=15),t.check=0,M[0]=c&255,M[1]=c>>>8&255,t.check=crc32_1(t.check,M,2,0),c=0,u=0,t.mode=FLAGS;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((c&255)<<8)+(c>>8))%31){n.msg="incorrect header check",t.mode=BAD;break}if((c&15)!==Z_DEFLATED){n.msg="unknown compression method",t.mode=BAD;break}if(c>>>=4,u-=4,L=(c&15)+8,t.wbits===0&&(t.wbits=L),L>15||L>t.wbits){n.msg="invalid window size",t.mode=BAD;break}t.dmax=1<<t.wbits,t.flags=0,n.adler=t.check=1,t.mode=c&512?DICTID:TYPE,c=0,u=0;break;case FLAGS:for(;u<16;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(t.flags=c,(t.flags&255)!==Z_DEFLATED){n.msg="unknown compression method",t.mode=BAD;break}if(t.flags&57344){n.msg="unknown header flags set",t.mode=BAD;break}t.head&&(t.head.text=c>>8&1),t.flags&512&&t.wrap&4&&(M[0]=c&255,M[1]=c>>>8&255,t.check=crc32_1(t.check,M,2,0)),c=0,u=0,t.mode=TIME;case TIME:for(;u<32;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.head&&(t.head.time=c),t.flags&512&&t.wrap&4&&(M[0]=c&255,M[1]=c>>>8&255,M[2]=c>>>16&255,M[3]=c>>>24&255,t.check=crc32_1(t.check,M,4,0)),c=0,u=0,t.mode=OS;case OS:for(;u<16;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.head&&(t.head.xflags=c&255,t.head.os=c>>8),t.flags&512&&t.wrap&4&&(M[0]=c&255,M[1]=c>>>8&255,t.check=crc32_1(t.check,M,2,0)),c=0,u=0,t.mode=EXLEN;case EXLEN:if(t.flags&1024){for(;u<16;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.length=c,t.head&&(t.head.extra_len=c),t.flags&512&&t.wrap&4&&(M[0]=c&255,M[1]=c>>>8&255,t.check=crc32_1(t.check,M,2,0)),c=0,u=0}else t.head&&(t.head.extra=null);t.mode=EXTRA;case EXTRA:if(t.flags&1024&&(g=t.length,g>a&&(g=a),g&&(t.head&&(L=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(r.subarray(i,i+g),L)),t.flags&512&&t.wrap&4&&(t.check=crc32_1(t.check,r,g,i)),a-=g,i+=g,t.length-=g),t.length))break e;t.length=0,t.mode=NAME;case NAME:if(t.flags&2048){if(a===0)break e;g=0;do L=r[i+g++],t.head&&L&&t.length<65536&&(t.head.name+=String.fromCharCode(L));while(L&&g<a);if(t.flags&512&&t.wrap&4&&(t.check=crc32_1(t.check,r,g,i)),a-=g,i+=g,L)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=COMMENT;case COMMENT:if(t.flags&4096){if(a===0)break e;g=0;do L=r[i+g++],t.head&&L&&t.length<65536&&(t.head.comment+=String.fromCharCode(L));while(L&&g<a);if(t.flags&512&&t.wrap&4&&(t.check=crc32_1(t.check,r,g,i)),a-=g,i+=g,L)break e}else t.head&&(t.head.comment=null);t.mode=HCRC;case HCRC:if(t.flags&512){for(;u<16;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(t.wrap&4&&c!==(t.check&65535)){n.msg="header crc mismatch",t.mode=BAD;break}c=0,u=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),n.adler=t.check=0,t.mode=TYPE;break;case DICTID:for(;u<32;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}n.adler=t.check=zswap32(c),c=0,u=0,t.mode=DICT;case DICT:if(t.havedict===0)return n.next_out=o,n.avail_out=l,n.next_in=i,n.avail_in=a,t.hold=c,t.bits=u,Z_NEED_DICT$1;n.adler=t.check=1,t.mode=TYPE;case TYPE:if(e===Z_BLOCK||e===Z_TREES)break e;case TYPEDO:if(t.last){c>>>=u&7,u-=u&7,t.mode=CHECK;break}for(;u<3;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}switch(t.last=c&1,c>>>=1,u-=1,c&3){case 0:t.mode=STORED;break;case 1:if(fixedtables(t),t.mode=LEN_,e===Z_TREES){c>>>=2,u-=2;break e}break;case 2:t.mode=TABLE;break;case 3:n.msg="invalid block type",t.mode=BAD}c>>>=2,u-=2;break;case STORED:for(c>>>=u&7,u-=u&7;u<32;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if((c&65535)!==(c>>>16^65535)){n.msg="invalid stored block lengths",t.mode=BAD;break}if(t.length=c&65535,c=0,u=0,t.mode=COPY_,e===Z_TREES)break e;case COPY_:t.mode=COPY;case COPY:if(g=t.length,g){if(g>a&&(g=a),g>l&&(g=l),g===0)break e;s.set(r.subarray(i,i+g),o),a-=g,i+=g,l-=g,o+=g,t.length-=g;break}t.mode=TYPE;break;case TABLE:for(;u<14;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(t.nlen=(c&31)+257,c>>>=5,u-=5,t.ndist=(c&31)+1,c>>>=5,u-=5,t.ncode=(c&15)+4,c>>>=4,u-=4,t.nlen>286||t.ndist>30){n.msg="too many length or distance symbols",t.mode=BAD;break}t.have=0,t.mode=LENLENS;case LENLENS:for(;t.have<t.ncode;){for(;u<3;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.lens[z[t.have++]]=c&7,c>>>=3,u-=3}for(;t.have<19;)t.lens[z[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,O={bits:t.lenbits},D=inftrees(CODES,t.lens,0,19,t.lencode,0,t.work,O),t.lenbits=O.bits,D){n.msg="invalid code lengths set",t.mode=BAD;break}t.have=0,t.mode=CODELENS;case CODELENS:for(;t.have<t.nlen+t.ndist;){for(;w=t.lencode[c&(1<<t.lenbits)-1],$=w>>>24,S=w>>>16&255,_=w&65535,!($<=u);){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(_<16)c>>>=$,u-=$,t.lens[t.have++]=_;else{if(_===16){for(R=$+2;u<R;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(c>>>=$,u-=$,t.have===0){n.msg="invalid bit length repeat",t.mode=BAD;break}L=t.lens[t.have-1],g=3+(c&3),c>>>=2,u-=2}else if(_===17){for(R=$+3;u<R;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}c>>>=$,u-=$,L=0,g=3+(c&7),c>>>=3,u-=3}else{for(R=$+7;u<R;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}c>>>=$,u-=$,L=0,g=11+(c&127),c>>>=7,u-=7}if(t.have+g>t.nlen+t.ndist){n.msg="invalid bit length repeat",t.mode=BAD;break}for(;g--;)t.lens[t.have++]=L}}if(t.mode===BAD)break;if(t.lens[256]===0){n.msg="invalid code -- missing end-of-block",t.mode=BAD;break}if(t.lenbits=9,O={bits:t.lenbits},D=inftrees(LENS,t.lens,0,t.nlen,t.lencode,0,t.work,O),t.lenbits=O.bits,D){n.msg="invalid literal/lengths set",t.mode=BAD;break}if(t.distbits=6,t.distcode=t.distdyn,O={bits:t.distbits},D=inftrees(DISTS,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,O),t.distbits=O.bits,D){n.msg="invalid distances set",t.mode=BAD;break}if(t.mode=LEN_,e===Z_TREES)break e;case LEN_:t.mode=LEN;case LEN:if(a>=6&&l>=258){n.next_out=o,n.avail_out=l,n.next_in=i,n.avail_in=a,t.hold=c,t.bits=u,inffast(n,d),o=n.next_out,s=n.output,l=n.avail_out,i=n.next_in,r=n.input,a=n.avail_in,c=t.hold,u=t.bits,t.mode===TYPE&&(t.back=-1);break}for(t.back=0;w=t.lencode[c&(1<<t.lenbits)-1],$=w>>>24,S=w>>>16&255,_=w&65535,!($<=u);){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(S&&!(S&240)){for(T=$,k=S,P=_;w=t.lencode[P+((c&(1<<T+k)-1)>>T)],$=w>>>24,S=w>>>16&255,_=w&65535,!(T+$<=u);){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}c>>>=T,u-=T,t.back+=T}if(c>>>=$,u-=$,t.back+=$,t.length=_,S===0){t.mode=LIT;break}if(S&32){t.back=-1,t.mode=TYPE;break}if(S&64){n.msg="invalid literal/length code",t.mode=BAD;break}t.extra=S&15,t.mode=LENEXT;case LENEXT:if(t.extra){for(R=t.extra;u<R;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.length+=c&(1<<t.extra)-1,c>>>=t.extra,u-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=DIST;case DIST:for(;w=t.distcode[c&(1<<t.distbits)-1],$=w>>>24,S=w>>>16&255,_=w&65535,!($<=u);){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(!(S&240)){for(T=$,k=S,P=_;w=t.distcode[P+((c&(1<<T+k)-1)>>T)],$=w>>>24,S=w>>>16&255,_=w&65535,!(T+$<=u);){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}c>>>=T,u-=T,t.back+=T}if(c>>>=$,u-=$,t.back+=$,S&64){n.msg="invalid distance code",t.mode=BAD;break}t.offset=_,t.extra=S&15,t.mode=DISTEXT;case DISTEXT:if(t.extra){for(R=t.extra;u<R;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}t.offset+=c&(1<<t.extra)-1,c>>>=t.extra,u-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){n.msg="invalid distance too far back",t.mode=BAD;break}t.mode=MATCH;case MATCH:if(l===0)break e;if(g=d-l,t.offset>g){if(g=t.offset-g,g>t.whave&&t.sane){n.msg="invalid distance too far back",t.mode=BAD;break}g>t.wnext?(g-=t.wnext,x=t.wsize-g):x=t.wnext-g,g>t.length&&(g=t.length),y=t.window}else y=s,x=o-t.offset,g=t.length;g>l&&(g=l),l-=g,t.length-=g;do s[o++]=y[x++];while(--g);t.length===0&&(t.mode=LEN);break;case LIT:if(l===0)break e;s[o++]=t.length,l--,t.mode=LEN;break;case CHECK:if(t.wrap){for(;u<32;){if(a===0)break e;a--,c|=r[i++]<<u,u+=8}if(d-=l,n.total_out+=d,t.total+=d,t.wrap&4&&d&&(n.adler=t.check=t.flags?crc32_1(t.check,s,d,o-d):adler32_1(t.check,s,d,o-d)),d=l,t.wrap&4&&(t.flags?c:zswap32(c))!==t.check){n.msg="incorrect data check",t.mode=BAD;break}c=0,u=0}t.mode=LENGTH;case LENGTH:if(t.wrap&&t.flags){for(;u<32;){if(a===0)break e;a--,c+=r[i++]<<u,u+=8}if(t.wrap&4&&c!==(t.total&4294967295)){n.msg="incorrect length check",t.mode=BAD;break}c=0,u=0}t.mode=DONE;case DONE:D=Z_STREAM_END$1;break e;case BAD:D=Z_DATA_ERROR$1;break e;case MEM:return Z_MEM_ERROR$1;case SYNC:default:return Z_STREAM_ERROR$1}return n.next_out=o,n.avail_out=l,n.next_in=i,n.avail_in=a,t.hold=c,t.bits=u,(t.wsize||d!==n.avail_out&&t.mode<BAD&&(t.mode<CHECK||e!==Z_FINISH$1))&&updatewindow(n,n.output,n.next_out,d-n.avail_out),h-=n.avail_in,d-=n.avail_out,n.total_in+=h,n.total_out+=d,t.total+=d,t.wrap&4&&d&&(n.adler=t.check=t.flags?crc32_1(t.check,s,d,n.next_out-d):adler32_1(t.check,s,d,n.next_out-d)),n.data_type=t.bits+(t.last?64:0)+(t.mode===TYPE?128:0)+(t.mode===LEN_||t.mode===COPY_?256:0),(h===0&&d===0||e===Z_FINISH$1)&&D===Z_OK$1&&(D=Z_BUF_ERROR),D},inflateEnd=n=>{if(inflateStateCheck(n))return Z_STREAM_ERROR$1;let e=n.state;return e.window&&(e.window=null),n.state=null,Z_OK$1},inflateGetHeader=(n,e)=>{if(inflateStateCheck(n))return Z_STREAM_ERROR$1;const t=n.state;return t.wrap&2?(t.head=e,e.done=!1,Z_OK$1):Z_STREAM_ERROR$1},inflateSetDictionary=(n,e)=>{const t=e.length;let r,s,i;return inflateStateCheck(n)||(r=n.state,r.wrap!==0&&r.mode!==DICT)?Z_STREAM_ERROR$1:r.mode===DICT&&(s=1,s=adler32_1(s,e,t,0),s!==r.check)?Z_DATA_ERROR$1:(i=updatewindow(n,e,t,t),i?(r.mode=MEM,Z_MEM_ERROR$1):(r.havedict=1,Z_OK$1))};var inflateReset_1=inflateReset,inflateReset2_1=inflateReset2,inflateResetKeep_1=inflateResetKeep,inflateInit_1=inflateInit,inflateInit2_1=inflateInit2,inflate_2$1=inflate$2,inflateEnd_1=inflateEnd,inflateGetHeader_1=inflateGetHeader,inflateSetDictionary_1=inflateSetDictionary,inflateInfo="pako inflate (from Nodeca project)",inflate_1$2={inflateReset:inflateReset_1,inflateReset2:inflateReset2_1,inflateResetKeep:inflateResetKeep_1,inflateInit:inflateInit_1,inflateInit2:inflateInit2_1,inflate:inflate_2$1,inflateEnd:inflateEnd_1,inflateGetHeader:inflateGetHeader_1,inflateSetDictionary:inflateSetDictionary_1,inflateInfo};function GZheader(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var gzheader=GZheader;const toString$2=Object.prototype.toString,{Z_NO_FLUSH,Z_FINISH,Z_OK,Z_STREAM_END,Z_NEED_DICT,Z_STREAM_ERROR,Z_DATA_ERROR,Z_MEM_ERROR}=constants$2;function Inflate$1(n){this.options=common.assign({chunkSize:1024*64,windowBits:15,to:""},n||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,e.windowBits===0&&(e.windowBits=-15)),e.windowBits>=0&&e.windowBits<16&&!(n&&n.windowBits)&&(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&(e.windowBits&15||(e.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0;let t=inflate_1$2.inflateInit2(this.strm,e.windowBits);if(t!==Z_OK)throw new Error(messages[t]);if(this.header=new gzheader,inflate_1$2.inflateGetHeader(this.strm,this.header),e.dictionary&&(typeof e.dictionary=="string"?e.dictionary=strings.string2buf(e.dictionary):toString$2.call(e.dictionary)==="[object ArrayBuffer]"&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(t=inflate_1$2.inflateSetDictionary(this.strm,e.dictionary),t!==Z_OK)))throw new Error(messages[t])}Inflate$1.prototype.push=function(n,e){const t=this.strm,r=this.options.chunkSize,s=this.options.dictionary;let i,o,a;if(this.ended)return!1;for(e===~~e?o=e:o=e===!0?Z_FINISH:Z_NO_FLUSH,toString$2.call(n)==="[object ArrayBuffer]"?t.input=new Uint8Array(n):t.input=n,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(r),t.next_out=0,t.avail_out=r),i=inflate_1$2.inflate(t,o),i===Z_NEED_DICT&&s&&(i=inflate_1$2.inflateSetDictionary(t,s),i===Z_OK?i=inflate_1$2.inflate(t,o):i===Z_DATA_ERROR&&(i=Z_NEED_DICT));t.avail_in>0&&i===Z_STREAM_END&&t.state.wrap>0&&n[t.next_in]!==0;)inflate_1$2.inflateReset(t),i=inflate_1$2.inflate(t,o);switch(i){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:return this.onEnd(i),this.ended=!0,!1}if(a=t.avail_out,t.next_out&&(t.avail_out===0||i===Z_STREAM_END))if(this.options.to==="string"){let l=strings.utf8border(t.output,t.next_out),c=t.next_out-l,u=strings.buf2string(t.output,l);t.next_out=c,t.avail_out=r-c,c&&t.output.set(t.output.subarray(l,l+c),0),this.onData(u)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(i===Z_OK&&a===0)){if(i===Z_STREAM_END)return i=inflate_1$2.inflateEnd(this.strm),this.onEnd(i),this.ended=!0,!0;if(t.avail_in===0)break}}return!0},Inflate$1.prototype.onData=function(n){this.chunks.push(n)},Inflate$1.prototype.onEnd=function(n){n===Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=common.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg};function inflate$1(n,e){const t=new Inflate$1(e);if(t.push(n),t.err)throw t.msg||messages[t.err];return t.result}function inflateRaw$1(n,e){return e=e||{},e.raw=!0,inflate$1(n,e)}var Inflate_1$1=Inflate$1,inflate_2=inflate$1,inflateRaw_1$1=inflateRaw$1,ungzip$1=inflate$1,constants=constants$2,inflate_1$1={Inflate:Inflate_1$1,inflate:inflate_2,inflateRaw:inflateRaw_1$1,ungzip:ungzip$1,constants};const{Deflate,deflate,deflateRaw,gzip}=deflate_1$1,{Inflate,inflate,inflateRaw,ungzip}=inflate_1$1;var deflate_1=deflate,Inflate_1=Inflate,inflate_1=inflate;const pngSignature=[137,80,78,71,13,10,26,10],crcTable=[];for(let n=0;n<256;n++){let e=n;for(let t=0;t<8;t++)e&1?e=3988292384^e>>>1:e=e>>>1;crcTable[n]=e}const initialCrc=4294967295;function updateCrc(n,e,t){let r=n;for(let s=0;s<t;s++)r=crcTable[(r^e[s])&255]^r>>>8;return r}function crc(n,e){return(updateCrc(initialCrc,n,e)^initialCrc)>>>0}var ColorType;(function(n){n[n.UNKNOWN=-1]="UNKNOWN",n[n.GREYSCALE=0]="GREYSCALE",n[n.TRUECOLOUR=2]="TRUECOLOUR",n[n.INDEXED_COLOUR=3]="INDEXED_COLOUR",n[n.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",n[n.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"})(ColorType||(ColorType={}));var CompressionMethod;(function(n){n[n.UNKNOWN=-1]="UNKNOWN",n[n.DEFLATE=0]="DEFLATE"})(CompressionMethod||(CompressionMethod={}));var FilterMethod;(function(n){n[n.UNKNOWN=-1]="UNKNOWN",n[n.ADAPTIVE=0]="ADAPTIVE"})(FilterMethod||(FilterMethod={}));var InterlaceMethod;(function(n){n[n.UNKNOWN=-1]="UNKNOWN",n[n.NO_INTERLACE=0]="NO_INTERLACE",n[n.ADAM7=1]="ADAM7"})(InterlaceMethod||(InterlaceMethod={}));const empty=new Uint8Array(0),NULL="\0",uint16=new Uint16Array([255]),uint8=new Uint8Array(uint16.buffer),osIsLittleEndian=uint8[0]===255;class PngDecoder extends IOBuffer{constructor(e,t={}){super(e);const{checkCrc:r=!1}=t;this._checkCrc=r,this._inflator=new Inflate_1,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._hasTransparency=!1,this._transparency=new Uint16Array(0),this._compressionMethod=CompressionMethod.UNKNOWN,this._filterMethod=FilterMethod.UNKNOWN,this._interlaceMethod=InterlaceMethod.UNKNOWN,this._colorType=ColorType.UNKNOWN,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let e=0;e<pngSignature.length;e++)if(this.readUint8()!==pngSignature[e])throw new Error(`wrong PNG signature. Byte at ${e} should be ${pngSignature[e]}.`)}decodeChunk(){const e=this.readUint32(),t=this.readChars(4),r=this.offset;switch(t){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(e);break;case"IDAT":this.decodeIDAT(e);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(e);break;case"iCCP":this.decodeiCCP(e);break;case"tEXt":this.decodetEXt(e);break;case"pHYs":this.decodepHYs();break;default:this.skip(e);break}if(this.offset-r!==e)throw new Error(`Length mismatch while decoding chunk ${t}`);if(this._checkCrc){const s=this.readUint32(),i=e+4,o=crc(new Uint8Array(this.buffer,this.byteOffset+this.offset-i-4,i),i);if(o!==s)throw new Error(`CRC mismatch for chunk ${t}. Expected ${s}, found ${o}`)}else this.skip(4)}decodeIHDR(){const e=this._png;e.width=this.readUint32(),e.height=this.readUint32(),e.depth=checkBitDepth(this.readUint8());const t=this.readUint8();this._colorType=t;let r;switch(t){case ColorType.GREYSCALE:r=1;break;case ColorType.TRUECOLOUR:r=3;break;case ColorType.INDEXED_COLOUR:r=1;break;case ColorType.GREYSCALE_ALPHA:r=2;break;case ColorType.TRUECOLOUR_ALPHA:r=4;break;default:throw new Error(`Unknown color type: ${t}`)}if(this._png.channels=r,this._compressionMethod=this.readUint8(),this._compressionMethod!==CompressionMethod.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(e){if(e%3!==0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${e}`);const t=e/3;this._hasPalette=!0;const r=[];this._palette=r;for(let s=0;s<t;s++)r.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(e){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,e)),this.skip(e)}decodetRNS(e){switch(this._colorType){case ColorType.GREYSCALE:case ColorType.TRUECOLOUR:{if(e%2!==0)throw new RangeError(`tRNS chunk length must be a multiple of 2. Got ${e}`);if(e/2>this._png.width*this._png.height)throw new Error(`tRNS chunk contains more alpha values than there are pixels (${e/2} vs ${this._png.width*this._png.height})`);this._hasTransparency=!0,this._transparency=new Uint16Array(e/2);for(let t=0;t<e/2;t++)this._transparency[t]=this.readUint16();break}case ColorType.INDEXED_COLOUR:{if(e>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${e} vs ${this._palette.length})`);let t=0;for(;t<e;t++){const r=this.readByte();this._palette[t].push(r)}for(;t<this._palette.length;t++)this._palette[t].push(255);break}default:throw new Error(`tRNS chunk is not supported for color type ${this._colorType}`)}}decodeiCCP(e){let t="",r;for(;(r=this.readChar())!==NULL;)t+=r;const s=this.readUint8();if(s!==CompressionMethod.DEFLATE)throw new Error(`Unsupported iCCP compression method: ${s}`);const i=this.readBytes(e-t.length-2);this._png.iccEmbeddedProfile={name:t,profile:inflate_1(i)}}decodetEXt(e){let t="",r;for(;(r=this.readChar())!==NULL;)t+=r;this._png.text[t]=this.readChars(e-t.length-1)}decodepHYs(){const e=this.readUint32(),t=this.readUint32(),r=this.readByte();this._png.resolution={x:e,y:t,unit:r}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const e=this._inflator.result;if(this._filterMethod!==FilterMethod.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod===InterlaceMethod.NO_INTERLACE)this.decodeInterlaceNull(e);else throw new Error(`Interlace method ${this._interlaceMethod} not supported`)}decodeInterlaceNull(e){const t=this._png.height,r=this._png.channels*this._png.depth/8,s=this._png.width*r,i=new Uint8Array(this._png.height*s);let o=empty,a=0,l,c;for(let u=0;u<t;u++){switch(l=e.subarray(a+1,a+1+s),c=i.subarray(u*s,(u+1)*s),e[a]){case 0:unfilterNone(l,c,s);break;case 1:unfilterSub(l,c,s,r);break;case 2:unfilterUp(l,c,o,s);break;case 3:unfilterAverage(l,c,o,s,r);break;case 4:unfilterPaeth(l,c,o,s,r);break;default:throw new Error(`Unsupported filter: ${e[a]}`)}o=c,a+=s+1}if(this._hasPalette&&(this._png.palette=this._palette),this._hasTransparency&&(this._png.transparency=this._transparency),this._png.depth===16){const u=new Uint16Array(i.buffer);if(osIsLittleEndian)for(let h=0;h<u.length;h++)u[h]=swap16(u[h]);this._png.data=u}else this._png.data=i}}function unfilterNone(n,e,t){for(let r=0;r<t;r++)e[r]=n[r]}function unfilterSub(n,e,t,r){let s=0;for(;s<r;s++)e[s]=n[s];for(;s<t;s++)e[s]=n[s]+e[s-r]&255}function unfilterUp(n,e,t,r){let s=0;if(t.length===0)for(;s<r;s++)e[s]=n[s];else for(;s<r;s++)e[s]=n[s]+t[s]&255}function unfilterAverage(n,e,t,r,s){let i=0;if(t.length===0){for(;i<s;i++)e[i]=n[i];for(;i<r;i++)e[i]=n[i]+(e[i-s]>>1)&255}else{for(;i<s;i++)e[i]=n[i]+(t[i]>>1)&255;for(;i<r;i++)e[i]=n[i]+(e[i-s]+t[i]>>1)&255}}function unfilterPaeth(n,e,t,r,s){let i=0;if(t.length===0){for(;i<s;i++)e[i]=n[i];for(;i<r;i++)e[i]=n[i]+e[i-s]&255}else{for(;i<s;i++)e[i]=n[i]+t[i]&255;for(;i<r;i++)e[i]=n[i]+paethPredictor(e[i-s],t[i],t[i-s])&255}}function paethPredictor(n,e,t){const r=n+e-t,s=Math.abs(r-n),i=Math.abs(r-e),o=Math.abs(r-t);return s<=i&&s<=o?n:i<=o?e:t}function swap16(n){return(n&255)<<8|n>>8&255}function checkBitDepth(n){if(n!==1&&n!==2&&n!==4&&n!==8&&n!==16)throw new Error(`invalid bit depth: ${n}`);return n}const defaultZlibOptions={level:3};class PngEncoder extends IOBuffer{constructor(e,t={}){super(),this._colorType=ColorType.UNKNOWN,this._zlibOptions={...defaultZlibOptions,...t.zlib},this._png=this._checkData(e),this.setBigEndian()}encode(){return this.encodeSignature(),this.encodeIHDR(),this.encodeData(),this.encodeIEND(),this.toArray()}encodeSignature(){this.writeBytes(pngSignature)}encodeIHDR(){this.writeUint32(13),this.writeChars("IHDR"),this.writeUint32(this._png.width),this.writeUint32(this._png.height),this.writeByte(this._png.depth),this.writeByte(this._colorType),this.writeByte(CompressionMethod.DEFLATE),this.writeByte(FilterMethod.ADAPTIVE),this.writeByte(InterlaceMethod.NO_INTERLACE),this.writeCrc(17)}encodeIEND(){this.writeUint32(0),this.writeChars("IEND"),this.writeCrc(4)}encodeIDAT(e){this.writeUint32(e.length),this.writeChars("IDAT"),this.writeBytes(e),this.writeCrc(e.length+4)}encodeData(){const{width:e,height:t,channels:r,depth:s,data:i}=this._png,o=r*e,a=new IOBuffer().setBigEndian();let l=0;for(let h=0;h<t;h++)if(a.writeByte(0),s===8)l=writeDataBytes(i,a,o,l);else if(s===16)l=writeDataUint16(i,a,o,l);else throw new Error("unreachable");const c=a.toArray(),u=deflate_1(c,this._zlibOptions);this.encodeIDAT(u)}_checkData(e){const{colorType:t,channels:r,depth:s}=getColorType(e),i={width:checkInteger(e.width,"width"),height:checkInteger(e.height,"height"),channels:r,data:e.data,depth:s,text:{}};this._colorType=t;const o=i.width*i.height*r;if(i.data.length!==o)throw new RangeError(`wrong data size. Found ${i.data.length}, expected ${o}`);return i}writeCrc(e){this.writeUint32(crc(new Uint8Array(this.buffer,this.byteOffset+this.offset-e,e),e))}}function checkInteger(n,e){if(Number.isInteger(n)&&n>0)return n;throw new TypeError(`${e} must be a positive integer`)}function getColorType(n){const{channels:e=4,depth:t=8}=n;if(e!==4&&e!==3&&e!==2&&e!==1)throw new RangeError(`unsupported number of channels: ${e}`);if(t!==8&&t!==16)throw new RangeError(`unsupported bit depth: ${t}`);const r={channels:e,depth:t,colorType:ColorType.UNKNOWN};switch(e){case 4:r.colorType=ColorType.TRUECOLOUR_ALPHA;break;case 3:r.colorType=ColorType.TRUECOLOUR;break;case 1:r.colorType=ColorType.GREYSCALE;break;case 2:r.colorType=ColorType.GREYSCALE_ALPHA;break;default:throw new Error("unsupported number of channels")}return r}function writeDataBytes(n,e,t,r){for(let s=0;s<t;s++)e.writeByte(n[r++]);return r}function writeDataUint16(n,e,t,r){for(let s=0;s<t;s++)e.writeUint16(n[r++]);return r}var ResolutionUnitSpecifier;(function(n){n[n.UNKNOWN=0]="UNKNOWN",n[n.METRE=1]="METRE"})(ResolutionUnitSpecifier||(ResolutionUnitSpecifier={}));function decodePng(n,e){return new PngDecoder(n,e).decode()}function encodePng$1(n,e){return new PngEncoder(n,e).encode()}var encoder={exports:{}},hasRequiredEncoder;function requireEncoder(){return hasRequiredEncoder||(hasRequiredEncoder=1,function(n){function e(r){var s=Math.floor,i=new Array(64),o=new Array(64),a=new Array(64),l=new Array(64),c,u,h,d,g=new Array(65535),x=new Array(65535),y=new Array(64),w=new Array(64),$=[],S=0,_=7,T=new Array(64),k=new Array(64),P=new Array(64),L=new Array(256),D=new Array(2048),M,O=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],R=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],z=[0,1,2,3,4,5,6,7,8,9,10,11],X=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],K=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],Y=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],te=[0,1,2,3,4,5,6,7,8,9,10,11],ie=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],Q=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function se(de){for(var Pe=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],Le=0;Le<64;Le++){var Be=s((Pe[Le]*de+50)/100);Be<1?Be=1:Be>255&&(Be=255),i[O[Le]]=Be}for(var Te=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],rt=0;rt<64;rt++){var st=s((Te[rt]*de+50)/100);st<1?st=1:st>255&&(st=255),o[O[rt]]=st}for(var Ue=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],ze=0,Ze=0;Ze<8;Ze++)for(var We=0;We<8;We++)a[ze]=1/(i[O[ze]]*Ue[Ze]*Ue[We]*8),l[ze]=1/(o[O[ze]]*Ue[Ze]*Ue[We]*8),ze++}function le(de,Pe){for(var Le=0,Be=0,Te=new Array,rt=1;rt<=16;rt++){for(var st=1;st<=de[rt];st++)Te[Pe[Be]]=[],Te[Pe[Be]][0]=Le,Te[Pe[Be]][1]=rt,Be++,Le++;Le*=2}return Te}function he(){c=le(R,z),u=le(Y,te),h=le(X,K),d=le(ie,Q)}function re(){for(var de=1,Pe=2,Le=1;Le<=15;Le++){for(var Be=de;Be<Pe;Be++)x[32767+Be]=Le,g[32767+Be]=[],g[32767+Be][1]=Le,g[32767+Be][0]=Be;for(var Te=-(Pe-1);Te<=-de;Te++)x[32767+Te]=Le,g[32767+Te]=[],g[32767+Te][1]=Le,g[32767+Te][0]=Pe-1+Te;de<<=1,Pe<<=1}}function fe(){for(var de=0;de<256;de++)D[de]=19595*de,D[de+256>>0]=38470*de,D[de+512>>0]=7471*de+32768,D[de+768>>0]=-11059*de,D[de+1024>>0]=-21709*de,D[de+1280>>0]=32768*de+8421375,D[de+1536>>0]=-27439*de,D[de+1792>>0]=-5329*de}function ge(de){for(var Pe=de[0],Le=de[1]-1;Le>=0;)Pe&1<<Le&&(S|=1<<_),Le--,_--,_<0&&(S==255?(j(255),j(0)):j(S),_=7,S=0)}function j(de){$.push(de)}function xe(de){j(de>>8&255),j(de&255)}function Ee(de,Pe){var Le,Be,Te,rt,st,Ue,ze,Ze,We=0,it,dt=8,nt=64;for(it=0;it<dt;++it){Le=de[We],Be=de[We+1],Te=de[We+2],rt=de[We+3],st=de[We+4],Ue=de[We+5],ze=de[We+6],Ze=de[We+7];var lt=Le+Ze,ft=Le-Ze,bt=Be+ze,Pt=Be-ze,At=Te+Ue,Kt=Te-Ue,xn=rt+st,Fn=rt-st,Zt=lt+xn,en=lt-xn,Mn=bt+At,tn=bt-At;de[We]=Zt+Mn,de[We+4]=Zt-Mn;var Ft=(tn+en)*.707106781;de[We+2]=en+Ft,de[We+6]=en-Ft,Zt=Fn+Kt,Mn=Kt+Pt,tn=Pt+ft;var hn=(Zt-tn)*.382683433,N=.5411961*Zt+hn,C=1.306562965*tn+hn,v=Mn*.707106781,b=ft+v,I=ft-v;de[We+5]=I+N,de[We+3]=I-N,de[We+1]=b+C,de[We+7]=b-C,We+=8}for(We=0,it=0;it<dt;++it){Le=de[We],Be=de[We+8],Te=de[We+16],rt=de[We+24],st=de[We+32],Ue=de[We+40],ze=de[We+48],Ze=de[We+56];var A=Le+Ze,G=Le-Ze,U=Be+ze,W=Be-ze,q=Te+Ue,ae=Te-Ue,Z=rt+st,me=rt-st,_e=A+Z,pe=A-Z,ye=U+q,Ge=U-q;de[We]=_e+ye,de[We+32]=_e-ye;var ee=(Ge+pe)*.707106781;de[We+16]=pe+ee,de[We+48]=pe-ee,_e=me+ae,ye=ae+W,Ge=W+G;var Ne=(_e-Ge)*.382683433,He=.5411961*_e+Ne,ot=1.306562965*Ge+Ne,ct=ye*.707106781,It=G+ct,Qe=G-ct;de[We+40]=Qe+He,de[We+24]=Qe-He,de[We+8]=It+ot,de[We+56]=It-ot,We++}var et;for(it=0;it<nt;++it)et=de[it]*Pe[it],y[it]=et>0?et+.5|0:et-.5|0;return y}function Se(){xe(65504),xe(16),j(74),j(70),j(73),j(70),j(0),j(1),j(1),j(0),xe(1),xe(1),j(0),j(0)}function Ce(de){if(de){xe(65505),de[0]===69&&de[1]===120&&de[2]===105&&de[3]===102?xe(de.length+2):(xe(de.length+5+2),j(69),j(120),j(105),j(102),j(0));for(var Pe=0;Pe<de.length;Pe++)j(de[Pe])}}function Me(de,Pe){xe(65472),xe(17),j(8),xe(Pe),xe(de),j(3),j(1),j(17),j(0),j(2),j(17),j(1),j(3),j(17),j(1)}function Fe(){xe(65499),xe(132),j(0);for(var de=0;de<64;de++)j(i[de]);j(1);for(var Pe=0;Pe<64;Pe++)j(o[Pe])}function Xe(){xe(65476),xe(418),j(0);for(var de=0;de<16;de++)j(R[de+1]);for(var Pe=0;Pe<=11;Pe++)j(z[Pe]);j(16);for(var Le=0;Le<16;Le++)j(X[Le+1]);for(var Be=0;Be<=161;Be++)j(K[Be]);j(1);for(var Te=0;Te<16;Te++)j(Y[Te+1]);for(var rt=0;rt<=11;rt++)j(te[rt]);j(17);for(var st=0;st<16;st++)j(ie[st+1]);for(var Ue=0;Ue<=161;Ue++)j(Q[Ue])}function qe(de){typeof de>"u"||de.constructor!==Array||de.forEach(Pe=>{if(typeof Pe=="string"){xe(65534);var Le=Pe.length;xe(Le+2);var Be;for(Be=0;Be<Le;Be++)j(Pe.charCodeAt(Be))}})}function ke(){xe(65498),xe(12),j(3),j(1),j(0),j(2),j(17),j(3),j(17),j(0),j(63),j(0)}function we(de,Pe,Le,Be,Te){for(var rt=Te[0],st=Te[240],Ue,ze=16,Ze=63,We=64,it=Ee(de,Pe),dt=0;dt<We;++dt)w[O[dt]]=it[dt];var nt=w[0]-Le;Le=w[0],nt==0?ge(Be[0]):(Ue=32767+nt,ge(Be[x[Ue]]),ge(g[Ue]));for(var lt=63;lt>0&&w[lt]==0;lt--);if(lt==0)return ge(rt),Le;for(var ft=1,bt;ft<=lt;){for(var Pt=ft;w[ft]==0&&ft<=lt;++ft);var At=ft-Pt;if(At>=ze){bt=At>>4;for(var Kt=1;Kt<=bt;++Kt)ge(st);At=At&15}Ue=32767+w[ft],ge(Te[(At<<4)+x[Ue]]),ge(g[Ue]),ft++}return lt!=Ze&&ge(rt),Le}function Ye(){for(var de=String.fromCharCode,Pe=0;Pe<256;Pe++)L[Pe]=de(Pe)}this.encode=function(de,Pe){new Date().getTime(),Pe&&Oe(Pe),$=new Array,S=0,_=7,xe(65496),Se(),qe(de.comments),Ce(de.exifBuffer),Fe(),Me(de.width,de.height),Xe(),ke();var Le=0,Be=0,Te=0;S=0,_=7,this.encode.displayName="_encode_";for(var rt=de.data,st=de.width,Ue=de.height,ze=st*4,Ze,We=0,it,dt,nt,lt,ft,bt,Pt,At;We<Ue;){for(Ze=0;Ze<ze;){for(lt=ze*We+Ze,ft=lt,bt=-1,Pt=0,At=0;At<64;At++)Pt=At>>3,bt=(At&7)*4,ft=lt+Pt*ze+bt,We+Pt>=Ue&&(ft-=ze*(We+1+Pt-Ue)),Ze+bt>=ze&&(ft-=Ze+bt-ze+4),it=rt[ft++],dt=rt[ft++],nt=rt[ft++],T[At]=(D[it]+D[dt+256>>0]+D[nt+512>>0]>>16)-128,k[At]=(D[it+768>>0]+D[dt+1024>>0]+D[nt+1280>>0]>>16)-128,P[At]=(D[it+1280>>0]+D[dt+1536>>0]+D[nt+1792>>0]>>16)-128;Le=we(T,a,Le,c,h),Be=we(k,l,Be,u,d),Te=we(P,l,Te,u,d),Ze+=32}We+=8}if(_>=0){var Kt=[];Kt[1]=_+1,Kt[0]=(1<<_+1)-1,ge(Kt)}return xe(65497),Buffer.from($)};function Oe(de){if(de<=0&&(de=1),de>100&&(de=100),M!=de){var Pe=0;de<50?Pe=Math.floor(5e3/de):Pe=Math.floor(200-de*2),se(Pe),M=de}}function Ve(){var de=new Date().getTime();r||(r=50),Ye(),he(),re(),fe(),Oe(r),new Date().getTime()-de}Ve()}n.exports=t;function t(r,s){typeof s>"u"&&(s=50);var i=new e(s),o=i.encode(r,s);return{data:o,width:r.width,height:r.height}}}(encoder)),encoder.exports}var decoder={exports:{}},hasRequiredDecoder;function requireDecoder(){return hasRequiredDecoder||(hasRequiredDecoder=1,function(n){var e=function(){var s=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),i=4017,o=799,a=3406,l=2276,c=1567,u=3784,h=5793,d=2896;function g(){}function x(k,P){for(var L=0,D=[],M,O,R=16;R>0&&!k[R-1];)R--;D.push({children:[],index:0});var z=D[0],X;for(M=0;M<R;M++){for(O=0;O<k[M];O++){for(z=D.pop(),z.children[z.index]=P[L];z.index>0;){if(D.length===0)throw new Error("Could not recreate Huffman Table");z=D.pop()}for(z.index++,D.push(z);D.length<=M;)D.push(X={children:[],index:0}),z.children[z.index]=X.children,z=X;L++}M+1<R&&(D.push(X={children:[],index:0}),z.children[z.index]=X.children,z=X)}return D[0].children}function y(k,P,L,D,M,O,R,z,X,K){L.precision,L.samplesPerLine,L.scanLines;var Y=L.mcusPerLine,te=L.progressive;L.maxH,L.maxV;var ie=P,Q=0,se=0;function le(){if(se>0)return se--,Q>>se&1;if(Q=k[P++],Q==255){var Ue=k[P++];if(Ue)throw new Error("unexpected marker: "+(Q<<8|Ue).toString(16))}return se=7,Q>>>7}function he(Ue){for(var ze=Ue,Ze;(Ze=le())!==null;){if(ze=ze[Ze],typeof ze=="number")return ze;if(typeof ze!="object")throw new Error("invalid huffman sequence")}return null}function re(Ue){for(var ze=0;Ue>0;){var Ze=le();if(Ze===null)return;ze=ze<<1|Ze,Ue--}return ze}function fe(Ue){var ze=re(Ue);return ze>=1<<Ue-1?ze:ze+(-1<<Ue)+1}function ge(Ue,ze){var Ze=he(Ue.huffmanTableDC),We=Ze===0?0:fe(Ze);ze[0]=Ue.pred+=We;for(var it=1;it<64;){var dt=he(Ue.huffmanTableAC),nt=dt&15,lt=dt>>4;if(nt===0){if(lt<15)break;it+=16;continue}it+=lt;var ft=s[it];ze[ft]=fe(nt),it++}}function j(Ue,ze){var Ze=he(Ue.huffmanTableDC),We=Ze===0?0:fe(Ze)<<X;ze[0]=Ue.pred+=We}function xe(Ue,ze){ze[0]|=le()<<X}var Ee=0;function Se(Ue,ze){if(Ee>0){Ee--;return}for(var Ze=O,We=R;Ze<=We;){var it=he(Ue.huffmanTableAC),dt=it&15,nt=it>>4;if(dt===0){if(nt<15){Ee=re(nt)+(1<<nt)-1;break}Ze+=16;continue}Ze+=nt;var lt=s[Ze];ze[lt]=fe(dt)*(1<<X),Ze++}}var Ce=0,Me;function Fe(Ue,ze){for(var Ze=O,We=R,it=0;Ze<=We;){var dt=s[Ze],nt=ze[dt]<0?-1:1;switch(Ce){case 0:var lt=he(Ue.huffmanTableAC),ft=lt&15,it=lt>>4;if(ft===0)it<15?(Ee=re(it)+(1<<it),Ce=4):(it=16,Ce=1);else{if(ft!==1)throw new Error("invalid ACn encoding");Me=fe(ft),Ce=it?2:3}continue;case 1:case 2:ze[dt]?ze[dt]+=(le()<<X)*nt:(it--,it===0&&(Ce=Ce==2?3:0));break;case 3:ze[dt]?ze[dt]+=(le()<<X)*nt:(ze[dt]=Me<<X,Ce=0);break;case 4:ze[dt]&&(ze[dt]+=(le()<<X)*nt);break}Ze++}Ce===4&&(Ee--,Ee===0&&(Ce=0))}function Xe(Ue,ze,Ze,We,it){var dt=Ze/Y|0,nt=Ze%Y,lt=dt*Ue.v+We,ft=nt*Ue.h+it;Ue.blocks[lt]===void 0&&K.tolerantDecoding||ze(Ue,Ue.blocks[lt][ft])}function qe(Ue,ze,Ze){var We=Ze/Ue.blocksPerLine|0,it=Ze%Ue.blocksPerLine;Ue.blocks[We]===void 0&&K.tolerantDecoding||ze(Ue,Ue.blocks[We][it])}var ke=D.length,we,Ye,Oe,Ve,de,Pe;te?O===0?Pe=z===0?j:xe:Pe=z===0?Se:Fe:Pe=ge;var Le=0,Be,Te;ke==1?Te=D[0].blocksPerLine*D[0].blocksPerColumn:Te=Y*L.mcusPerColumn,M||(M=Te);for(var rt,st;Le<Te;){for(Ye=0;Ye<ke;Ye++)D[Ye].pred=0;if(Ee=0,ke==1)for(we=D[0],de=0;de<M;de++)qe(we,Pe,Le),Le++;else for(de=0;de<M;de++){for(Ye=0;Ye<ke;Ye++)for(we=D[Ye],rt=we.h,st=we.v,Oe=0;Oe<st;Oe++)for(Ve=0;Ve<rt;Ve++)Xe(we,Pe,Le,Oe,Ve);if(Le++,Le===Te)break}if(Le===Te)do{if(k[P]===255&&k[P+1]!==0)break;P+=1}while(P<k.length-2);if(se=0,Be=k[P]<<8|k[P+1],Be<65280)throw new Error("marker was not found");if(Be>=65488&&Be<=65495)P+=2;else break}return P-ie}function w(k,P){var L=[],D=P.blocksPerLine,M=P.blocksPerColumn,O=D<<3,R=new Int32Array(64),z=new Uint8Array(64);function X(re,fe,ge){var j=P.quantizationTable,xe,Ee,Se,Ce,Me,Fe,Xe,qe,ke,we=ge,Ye;for(Ye=0;Ye<64;Ye++)we[Ye]=re[Ye]*j[Ye];for(Ye=0;Ye<8;++Ye){var Oe=8*Ye;if(we[1+Oe]==0&&we[2+Oe]==0&&we[3+Oe]==0&&we[4+Oe]==0&&we[5+Oe]==0&&we[6+Oe]==0&&we[7+Oe]==0){ke=h*we[0+Oe]+512>>10,we[0+Oe]=ke,we[1+Oe]=ke,we[2+Oe]=ke,we[3+Oe]=ke,we[4+Oe]=ke,we[5+Oe]=ke,we[6+Oe]=ke,we[7+Oe]=ke;continue}xe=h*we[0+Oe]+128>>8,Ee=h*we[4+Oe]+128>>8,Se=we[2+Oe],Ce=we[6+Oe],Me=d*(we[1+Oe]-we[7+Oe])+128>>8,qe=d*(we[1+Oe]+we[7+Oe])+128>>8,Fe=we[3+Oe]<<4,Xe=we[5+Oe]<<4,ke=xe-Ee+1>>1,xe=xe+Ee+1>>1,Ee=ke,ke=Se*u+Ce*c+128>>8,Se=Se*c-Ce*u+128>>8,Ce=ke,ke=Me-Xe+1>>1,Me=Me+Xe+1>>1,Xe=ke,ke=qe+Fe+1>>1,Fe=qe-Fe+1>>1,qe=ke,ke=xe-Ce+1>>1,xe=xe+Ce+1>>1,Ce=ke,ke=Ee-Se+1>>1,Ee=Ee+Se+1>>1,Se=ke,ke=Me*l+qe*a+2048>>12,Me=Me*a-qe*l+2048>>12,qe=ke,ke=Fe*o+Xe*i+2048>>12,Fe=Fe*i-Xe*o+2048>>12,Xe=ke,we[0+Oe]=xe+qe,we[7+Oe]=xe-qe,we[1+Oe]=Ee+Xe,we[6+Oe]=Ee-Xe,we[2+Oe]=Se+Fe,we[5+Oe]=Se-Fe,we[3+Oe]=Ce+Me,we[4+Oe]=Ce-Me}for(Ye=0;Ye<8;++Ye){var Ve=Ye;if(we[8+Ve]==0&&we[16+Ve]==0&&we[24+Ve]==0&&we[32+Ve]==0&&we[40+Ve]==0&&we[48+Ve]==0&&we[56+Ve]==0){ke=h*ge[Ye+0]+8192>>14,we[0+Ve]=ke,we[8+Ve]=ke,we[16+Ve]=ke,we[24+Ve]=ke,we[32+Ve]=ke,we[40+Ve]=ke,we[48+Ve]=ke,we[56+Ve]=ke;continue}xe=h*we[0+Ve]+2048>>12,Ee=h*we[32+Ve]+2048>>12,Se=we[16+Ve],Ce=we[48+Ve],Me=d*(we[8+Ve]-we[56+Ve])+2048>>12,qe=d*(we[8+Ve]+we[56+Ve])+2048>>12,Fe=we[24+Ve],Xe=we[40+Ve],ke=xe-Ee+1>>1,xe=xe+Ee+1>>1,Ee=ke,ke=Se*u+Ce*c+2048>>12,Se=Se*c-Ce*u+2048>>12,Ce=ke,ke=Me-Xe+1>>1,Me=Me+Xe+1>>1,Xe=ke,ke=qe+Fe+1>>1,Fe=qe-Fe+1>>1,qe=ke,ke=xe-Ce+1>>1,xe=xe+Ce+1>>1,Ce=ke,ke=Ee-Se+1>>1,Ee=Ee+Se+1>>1,Se=ke,ke=Me*l+qe*a+2048>>12,Me=Me*a-qe*l+2048>>12,qe=ke,ke=Fe*o+Xe*i+2048>>12,Fe=Fe*i-Xe*o+2048>>12,Xe=ke,we[0+Ve]=xe+qe,we[56+Ve]=xe-qe,we[8+Ve]=Ee+Xe,we[48+Ve]=Ee-Xe,we[16+Ve]=Se+Fe,we[40+Ve]=Se-Fe,we[24+Ve]=Ce+Me,we[32+Ve]=Ce-Me}for(Ye=0;Ye<64;++Ye){var de=128+(we[Ye]+8>>4);fe[Ye]=de<0?0:de>255?255:de}}T(O*M*8);for(var K,Y,te=0;te<M;te++){var ie=te<<3;for(K=0;K<8;K++)L.push(new Uint8Array(O));for(var Q=0;Q<D;Q++){X(P.blocks[te][Q],z,R);var se=0,le=Q<<3;for(Y=0;Y<8;Y++){var he=L[ie+Y];for(K=0;K<8;K++)he[le+K]=z[se++]}}}return L}function $(k){return k<0?0:k>255?255:k}g.prototype={load:function(P){var L=new XMLHttpRequest;L.open("GET",P,!0),L.responseType="arraybuffer",L.onload=(function(){var D=new Uint8Array(L.response||L.mozResponseArrayBuffer);this.parse(D),this.onload&&this.onload()}).bind(this),L.send(null)},parse:function(P){var L=this.opts.maxResolutionInMP*1e3*1e3,D=0;P.length;function M(){var nt=P[D]<<8|P[D+1];return D+=2,nt}function O(){var nt=M(),lt=P.subarray(D,D+nt-2);return D+=lt.length,lt}function R(nt){var lt=1,ft=1,bt,Pt;for(Pt in nt.components)nt.components.hasOwnProperty(Pt)&&(bt=nt.components[Pt],lt<bt.h&&(lt=bt.h),ft<bt.v&&(ft=bt.v));var At=Math.ceil(nt.samplesPerLine/8/lt),Kt=Math.ceil(nt.scanLines/8/ft);for(Pt in nt.components)if(nt.components.hasOwnProperty(Pt)){bt=nt.components[Pt];var xn=Math.ceil(Math.ceil(nt.samplesPerLine/8)*bt.h/lt),Fn=Math.ceil(Math.ceil(nt.scanLines/8)*bt.v/ft),Zt=At*bt.h,en=Kt*bt.v,Mn=en*Zt,tn=[];T(Mn*256);for(var Ft=0;Ft<en;Ft++){for(var hn=[],N=0;N<Zt;N++)hn.push(new Int32Array(64));tn.push(hn)}bt.blocksPerLine=xn,bt.blocksPerColumn=Fn,bt.blocks=tn}nt.maxH=lt,nt.maxV=ft,nt.mcusPerLine=At,nt.mcusPerColumn=Kt}var z=null,X=null,K,Y,te=[],ie=[],Q=[],se=[],le=M(),he=-1;if(this.comments=[],le!=65496)throw new Error("SOI not found");for(le=M();le!=65497;){var re,fe;switch(le){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var ge=O();if(le===65534){var j=String.fromCharCode.apply(null,ge);this.comments.push(j)}le===65504&&ge[0]===74&&ge[1]===70&&ge[2]===73&&ge[3]===70&&ge[4]===0&&(z={version:{major:ge[5],minor:ge[6]},densityUnits:ge[7],xDensity:ge[8]<<8|ge[9],yDensity:ge[10]<<8|ge[11],thumbWidth:ge[12],thumbHeight:ge[13],thumbData:ge.subarray(14,14+3*ge[12]*ge[13])}),le===65505&&ge[0]===69&&ge[1]===120&&ge[2]===105&&ge[3]===102&&ge[4]===0&&(this.exifBuffer=ge.subarray(5,ge.length)),le===65518&&ge[0]===65&&ge[1]===100&&ge[2]===111&&ge[3]===98&&ge[4]===101&&ge[5]===0&&(X={version:ge[6],flags0:ge[7]<<8|ge[8],flags1:ge[9]<<8|ge[10],transformCode:ge[11]});break;case 65499:for(var xe=M(),Ee=xe+D-2;D<Ee;){var Se=P[D++];T(256);var Ce=new Int32Array(64);if(Se>>4)if(Se>>4===1)for(fe=0;fe<64;fe++){var Me=s[fe];Ce[Me]=M()}else throw new Error("DQT: invalid table spec");else for(fe=0;fe<64;fe++){var Me=s[fe];Ce[Me]=P[D++]}te[Se&15]=Ce}break;case 65472:case 65473:case 65474:M(),K={},K.extended=le===65473,K.progressive=le===65474,K.precision=P[D++],K.scanLines=M(),K.samplesPerLine=M(),K.components={},K.componentsOrder=[];var Fe=K.scanLines*K.samplesPerLine;if(Fe>L){var Xe=Math.ceil((Fe-L)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${Xe}MP`)}var qe=P[D++],ke;for(re=0;re<qe;re++){ke=P[D];var we=P[D+1]>>4,Ye=P[D+1]&15,Oe=P[D+2];if(we<=0||Ye<=0)throw new Error("Invalid sampling factor, expected values above 0");K.componentsOrder.push(ke),K.components[ke]={h:we,v:Ye,quantizationIdx:Oe},D+=3}R(K),ie.push(K);break;case 65476:var Ve=M();for(re=2;re<Ve;){var de=P[D++],Pe=new Uint8Array(16),Le=0;for(fe=0;fe<16;fe++,D++)Le+=Pe[fe]=P[D];T(16+Le);var Be=new Uint8Array(Le);for(fe=0;fe<Le;fe++,D++)Be[fe]=P[D];re+=17+Le,(de>>4?Q:se)[de&15]=x(Pe,Be)}break;case 65501:M(),Y=M();break;case 65500:M(),M();break;case 65498:M();var Te=P[D++],rt=[],st;for(re=0;re<Te;re++){st=K.components[P[D++]];var Ue=P[D++];st.huffmanTableDC=se[Ue>>4],st.huffmanTableAC=Q[Ue&15],rt.push(st)}var ze=P[D++],Ze=P[D++],We=P[D++],it=y(P,D,K,rt,Y,ze,Ze,We>>4,We&15,this.opts);D+=it;break;case 65535:P[D]!==255&&D--;break;default:if(P[D-3]==255&&P[D-2]>=192&&P[D-2]<=254){D-=3;break}else if(le===224||le==225){if(he!==-1)throw new Error(`first unknown JPEG marker at offset ${he.toString(16)}, second unknown JPEG marker ${le.toString(16)} at offset ${(D-1).toString(16)}`);he=D-1;const nt=M();if(P[D+nt-2]===255){D+=nt-2;break}}throw new Error("unknown JPEG marker "+le.toString(16))}le=M()}if(ie.length!=1)throw new Error("only single frame JPEGs supported");for(var re=0;re<ie.length;re++){var dt=ie[re].components;for(var fe in dt)dt[fe].quantizationTable=te[dt[fe].quantizationIdx],delete dt[fe].quantizationIdx}this.width=K.samplesPerLine,this.height=K.scanLines,this.jfif=z,this.adobe=X,this.components=[];for(var re=0;re<K.componentsOrder.length;re++){var st=K.components[K.componentsOrder[re]];this.components.push({lines:w(K,st),scaleX:st.h/K.maxH,scaleY:st.v/K.maxV})}},getData:function(P,L){var D=this.width/P,M=this.height/L,O,R,z,X,K,Y,te,ie,Q,se,le=0,he,re,fe,ge,j,xe,Ee,Se,Ce,Me,Fe,Xe=P*L*this.components.length;T(Xe);var qe=new Uint8Array(Xe);switch(this.components.length){case 1:for(O=this.components[0],se=0;se<L;se++)for(K=O.lines[0|se*O.scaleY*M],Q=0;Q<P;Q++)he=K[0|Q*O.scaleX*D],qe[le++]=he;break;case 2:for(O=this.components[0],R=this.components[1],se=0;se<L;se++)for(K=O.lines[0|se*O.scaleY*M],Y=R.lines[0|se*R.scaleY*M],Q=0;Q<P;Q++)he=K[0|Q*O.scaleX*D],qe[le++]=he,he=Y[0|Q*R.scaleX*D],qe[le++]=he;break;case 3:for(Fe=!0,this.adobe&&this.adobe.transformCode?Fe=!0:typeof this.opts.colorTransform<"u"&&(Fe=!!this.opts.colorTransform),O=this.components[0],R=this.components[1],z=this.components[2],se=0;se<L;se++)for(K=O.lines[0|se*O.scaleY*M],Y=R.lines[0|se*R.scaleY*M],te=z.lines[0|se*z.scaleY*M],Q=0;Q<P;Q++)Fe?(he=K[0|Q*O.scaleX*D],re=Y[0|Q*R.scaleX*D],fe=te[0|Q*z.scaleX*D],Se=$(he+1.402*(fe-128)),Ce=$(he-.3441363*(re-128)-.71413636*(fe-128)),Me=$(he+1.772*(re-128))):(Se=K[0|Q*O.scaleX*D],Ce=Y[0|Q*R.scaleX*D],Me=te[0|Q*z.scaleX*D]),qe[le++]=Se,qe[le++]=Ce,qe[le++]=Me;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(Fe=!1,this.adobe&&this.adobe.transformCode?Fe=!0:typeof this.opts.colorTransform<"u"&&(Fe=!!this.opts.colorTransform),O=this.components[0],R=this.components[1],z=this.components[2],X=this.components[3],se=0;se<L;se++)for(K=O.lines[0|se*O.scaleY*M],Y=R.lines[0|se*R.scaleY*M],te=z.lines[0|se*z.scaleY*M],ie=X.lines[0|se*X.scaleY*M],Q=0;Q<P;Q++)Fe?(he=K[0|Q*O.scaleX*D],re=Y[0|Q*R.scaleX*D],fe=te[0|Q*z.scaleX*D],ge=ie[0|Q*X.scaleX*D],j=255-$(he+1.402*(fe-128)),xe=255-$(he-.3441363*(re-128)-.71413636*(fe-128)),Ee=255-$(he+1.772*(re-128))):(j=K[0|Q*O.scaleX*D],xe=Y[0|Q*R.scaleX*D],Ee=te[0|Q*z.scaleX*D],ge=ie[0|Q*X.scaleX*D]),qe[le++]=255-j,qe[le++]=255-xe,qe[le++]=255-Ee,qe[le++]=255-ge;break;default:throw new Error("Unsupported color mode")}return qe},copyToImageData:function(P,L){var D=P.width,M=P.height,O=P.data,R=this.getData(D,M),z=0,X=0,K,Y,te,ie,Q,se,le,he,re;switch(this.components.length){case 1:for(Y=0;Y<M;Y++)for(K=0;K<D;K++)te=R[z++],O[X++]=te,O[X++]=te,O[X++]=te,L&&(O[X++]=255);break;case 3:for(Y=0;Y<M;Y++)for(K=0;K<D;K++)le=R[z++],he=R[z++],re=R[z++],O[X++]=le,O[X++]=he,O[X++]=re,L&&(O[X++]=255);break;case 4:for(Y=0;Y<M;Y++)for(K=0;K<D;K++)Q=R[z++],se=R[z++],te=R[z++],ie=R[z++],le=255-$(Q*(1-ie/255)+ie),he=255-$(se*(1-ie/255)+ie),re=255-$(te*(1-ie/255)+ie),O[X++]=le,O[X++]=he,O[X++]=re,L&&(O[X++]=255);break;default:throw new Error("Unsupported color mode")}}};var S=0,_=0;function T(k=0){var P=S+k;if(P>_){var L=Math.ceil((P-_)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${L}MB`)}S=P}return g.resetMaxMemoryUsage=function(k){S=0,_=k},g.getBytesAllocated=function(){return S},g.requestMemoryAllocation=T,g}();n.exports=t;function t(r,s={}){var i={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512},o={...i,...s},a=new Uint8Array(r),l=new e;l.opts=o,e.resetMaxMemoryUsage(o.maxMemoryUsageInMB*1024*1024),l.parse(a);var c=o.formatAsRGBA?4:3,u=l.width*l.height*c;try{e.requestMemoryAllocation(u);var h={width:l.width,height:l.height,exifBuffer:l.exifBuffer,data:o.useTArray?new Uint8Array(u):Buffer.alloc(u)};l.comments.length>0&&(h.comments=l.comments)}catch(d){throw d instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+u):d instanceof ReferenceError&&d.message==="Buffer is not defined"?new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true"):d}return l.copyToImageData(h,o.formatAsRGBA),h}}(decoder)),decoder.exports}var jpegJs,hasRequiredJpegJs;function requireJpegJs(){if(hasRequiredJpegJs)return jpegJs;hasRequiredJpegJs=1;var n=requireEncoder(),e=requireDecoder();return jpegJs={encode:n,decode:e},jpegJs}var jpegJsExports=requireJpegJs();let chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",lookup=new Uint8Array(256);for(let n=0;n<chars.length;n++)lookup[chars.charCodeAt(n)]=n;function encode(n){let e,t=n.length,r="";for(e=0;e<t;e+=3)r+=chars[n[e]>>2],r+=chars[(n[e]&3)<<4|n[e+1]>>4],r+=chars[(n[e+1]&15)<<2|n[e+2]>>6],r+=chars[n[e+2]&63];return t%3===2?r=`${r.substring(0,r.length-1)}=`:t%3===1&&(r=`${r.substring(0,r.length-2)}==`),r}function decode$2(n){let e=n.length*.75,t=n.length,r=0,s,i,o,a;n[n.length-1]==="="&&(e--,n[n.length-2]==="="&&e--);const l=new Uint8Array(e);for(let c=0;c<t;c+=4)s=lookup[n.charCodeAt(c)],i=lookup[n.charCodeAt(c+1)],o=lookup[n.charCodeAt(c+2)],a=lookup[n.charCodeAt(c+3)],l[r++]=s<<2|i>>4,l[r++]=(i&15)<<4|o>>2,l[r++]=(o&3)<<6|a&63;return l}function toBase64URL(n,e){const t=encode(n);return`data:${e};base64,${t}`}const ImageData=self.ImageData,DOMImage=self.Image;function createCanvas(n,e){let t=self.document.createElement("canvas");return t.width=n,t.height=e,t}function fetchBinary(n,{withCredentials:e=!1}={}){return new Promise(function(t,r){let s=new self.XMLHttpRequest;s.open("GET",n,!0),s.responseType="arraybuffer",s.withCredentials=e,s.onload=function(i){this.status!==200?r(i):t(this.response)},s.onerror=r,s.send()})}function createWriteStream(){throw new Error("createWriteStream does not exist in the browser")}function writeFile(){throw new Error("writeFile does not exist in the browser")}function getType(n){return n.includes("/")||(n=`image/${n}`),n}function encodeJpeg(n,e={}){const t={width:n.width,height:n.height,data:n.getRGBAData()};return jpegJsExports.encode(t,e.quality).data}function encodePng(n,e){const t={width:n.width,height:n.height,channels:n.channels,depth:n.bitDepth,data:n.data};return(t.depth===1||t.depth===32)&&(t.depth=8,t.channels=4,t.data=n.getRGBAData()),encodePng$1(t,e)}const exportMethods={save(n,e={}){const{useCanvas:t=!1,encoder:r=void 0}=e;let{format:s}=e;if(!s){const i=/\.(?<format>[a-zA-Z]+)$/.exec(n);i&&(s=i.groups.format.toLowerCase())}if(!s)throw new Error("file format not provided");return new Promise((i,o)=>{let a,l;switch(s.toLowerCase()){case"png":{t?a=this.getCanvas().pngStream():l=encodePng(this,r);break}case"jpg":case"jpeg":t?a=this.getCanvas().jpegStream():l=encodeJpeg(this,r);break;case"bmp":l=srcExports$3.encode(this,r);break;default:throw new RangeError(`invalid output format: ${s}`)}if(a){let c=createWriteStream();c.on("finish",i),c.on("error",o),a.pipe(c)}else l&&writeFile()})},toDataURL(n="image/png",e={}){typeof n=="object"&&(e=n,n="image/png");const{useCanvas:t=!1,encoder:r=void 0}=e;n=getType(n);function s(i,o){const a=i(o,r);return toBase64URL(a,n)}return n==="image/bmp"?s(srcExports$3.encode,this):n==="image/png"&&!t?s(encodePng,this):n==="image/jpeg"&&!t?s(encodeJpeg,this):this.getCanvas().toDataURL(n)},toBuffer(n={}){const{format:e="png",encoder:t=void 0}=n;switch(e.toLowerCase()){case"png":return encodePng(this,t);case"jpeg":case"jpg":return encodeJpeg(this,t);case"bmp":return srcExports$3.encode(this,t);default:throw new RangeError(`invalid output format: ${e}`)}},toBase64(n="image/png",e={}){if(e.async)return this.toDataURL(n,e).then(function(t){return t.substring(t.indexOf(",")+1)});{const t=this.toDataURL(n,e);return t.substring(t.indexOf(",")+1)}},toBlob(n="image/png",e=.8){return canvasToBlob(this.getCanvas(),n,e)},getCanvas(){const n=new ImageData(this.getRGBAData({clamped:!0}),this.width,this.height);let e=createCanvas(this.width,this.height);return e.getContext("2d").putImageData(n,0,0),e}};function setExportMethods(n){for(const e in exportMethods)n.prototype[e]=exportMethods[e]}var hasOwn$1={exports:{}};const name="has-own",version="1.0.1",description="A safer .hasOwnProperty() - hasOwn(name, obj)",main="index.js",scripts={test:"make test"},author="Aaron Heckmann <aaron.heckmann+github@gmail.com>",license="MIT",repository={type:"git",url:"git://github.com/aheckmann/has-own.git"},homepage="https://github.com/aheckmann/has-own/",devDependencies={mocha:"^6.2.2"};var require$$0$2={name,version,description,main,scripts,author,license,repository,homepage,devDependencies},hasRequiredHasOwn;function requireHasOwn(){return hasRequiredHasOwn||(hasRequiredHasOwn=1,function(n,e){var t=Object.prototype.hasOwnProperty;n.exports=e=function(s,i){return t.call(i,s)},e.version=require$$0$2.version}(hasOwn$1,hasOwn$1.exports)),hasOwn$1.exports}var hasOwnExports=requireHasOwn(),hasOwn=getDefaultExportFromCjs(hasOwnExports);let computedPropertyDescriptor$1={configurable:!0,enumerable:!1,get:void 0};function extendMethod(n,e,t={}){let{inPlace:r=!1,returnThis:s=!0,partialArgs:i=[]}=t;return r?Image.prototype[n]=function(...o){this.computed=null;let a=e.apply(this,[...i,...o]);return s?this:a}:Image.prototype[n]=function(...o){return e.apply(this,[...i,...o])},Image}function extendProperty(n,e,t={}){let{partialArgs:r=[]}=t;return computedPropertyDescriptor$1.get=function(){if(this.computed===null)this.computed={};else if(hasOwn(n,this.computed))return this.computed[n];let s=e.apply(this,r);return this.computed[n]=s,s},Object.defineProperty(Image.prototype,n,computedPropertyDescriptor$1),Image}const GREY$1="GREY",RGB$1="RGB",HSL="HSL",HSV="HSV",CMYK$1="CMYK";var ColorModel=Object.freeze({__proto__:null,CMYK:CMYK$1,GREY:GREY$1,HSL,HSV,RGB:RGB$1});function getRGBAData(n={}){const{clamped:e}=n;this.checkProcessable("getRGBAData",{components:[1,3],bitDepth:[1,8,16,32]});const t=this.width*this.height*4;let r=e?new Uint8ClampedArray(t):new Uint8Array(t);return this.bitDepth===1?fillDataFromBinary(this,r):this.bitDepth===32?(this.checkProcessable("getRGBAData",{alpha:0}),this.components===1?fillDataFromGrey32(this,r):this.components===3&&(this.checkProcessable("getRGBAData",{colorModel:[RGB$1]}),fillDataFromRGB32(this,r))):this.components===1?fillDataFromGrey(this,r):this.components===3&&(this.checkProcessable("getRGBAData",{colorModel:[RGB$1]}),fillDataFromRGB(this,r)),this.alpha===1?(this.checkProcessable("getRGBAData",{bitDepth:[8,16]}),copyAlpha(this,r)):fillAlpha(this,r),r}function fillDataFromBinary(n,e){for(let t=0;t<n.size;t++){const r=n.getBit(t);e[t*4]=r*255,e[t*4+1]=r*255,e[t*4+2]=r*255}}function fillDataFromGrey32(n,e){const t=n.min[0],s=n.max[0]-t;for(let i=0;i<n.size;i++){const o=Math.floor(255*(n.data[i]-t)/s);e[i*4]=o,e[i*4+1]=o,e[i*4+2]=o}}function fillDataFromRGB32(n,e){const t=Math.min(...n.min),s=Math.max(...n.max)-t;for(let i=0;i<n.size;i++){const o=Math.floor(255*(n.data[i*3]-t)/s),a=Math.floor(255*(n.data[i*3+1]-t)/s),l=Math.floor(255*(n.data[i*3+2]-t)/s);e[i*4]=o,e[i*4+1]=a,e[i*4+2]=l}}function fillDataFromGrey(n,e){for(let t=0;t<n.size;t++)e[t*4]=n.data[t*n.channels]>>>n.bitDepth-8,e[t*4+1]=n.data[t*n.channels]>>>n.bitDepth-8,e[t*4+2]=n.data[t*n.channels]>>>n.bitDepth-8}function fillDataFromRGB(n,e){for(let t=0;t<n.size;t++)e[t*4]=n.data[t*n.channels]>>>n.bitDepth-8,e[t*4+1]=n.data[t*n.channels+1]>>>n.bitDepth-8,e[t*4+2]=n.data[t*n.channels+2]>>>n.bitDepth-8}function copyAlpha(n,e){for(let t=0;t<n.size;t++)e[t*4+3]=n.data[t*n.channels+n.components]>>n.bitDepth-8}function fillAlpha(n,e){for(let t=0;t<n.size;t++)e[t*4+3]=255}const BINARY="BINARY",GREY="GREY",GREYA="GREYA",RGB="RGB",RGBA="RGBA",CMYK="CMYK",CMYKA="CMYKA",kinds={};kinds[BINARY]={components:1,alpha:0,bitDepth:1,colorModel:GREY$1},kinds[GREYA]={components:1,alpha:1,bitDepth:8,colorModel:GREY$1},kinds[GREY]={components:1,alpha:0,bitDepth:8,colorModel:GREY$1},kinds[RGBA]={components:3,alpha:1,bitDepth:8,colorModel:RGB$1},kinds[RGB]={components:3,alpha:0,bitDepth:8,colorModel:RGB$1},kinds[CMYK]={components:4,alpha:0,bitDepth:8,colorModel:CMYK$1},kinds[CMYKA]={components:4,alpha:1,bitDepth:8,colorModel:CMYK$1};function getKind(n){const e=kinds[n];if(!e)throw new RangeError(`invalid image kind: ${n}`);return e}const validBitDepth=[1,8,16,32];function verifyKindDefinition(n){const{components:e,alpha:t,bitDepth:r,colorModel:s}=n;if(!Number.isInteger(e)||e<=0)throw new RangeError(`invalid components: ${e}. Must be a positive integer`);if(t!==0&&t!==1&&typeof t!="boolean")throw new TypeError(`invalid alpha: ${t}: must be a boolean, 0 or 1`);if(!validBitDepth.includes(r))throw new RangeError(`invalid bitDepth: ${r}. Must be one of ${validBitDepth.join(", ")}`);if(!ColorModel[s])throw new RangeError(`invalid colorModel: ${s}. Must be one of ${Object.keys(ColorModel).join(", ")}`)}function getTheoreticalPixelArraySize(n,e,t){let r=e*n;return t===1&&(r=Math.ceil(r/8)),r}function createPixelArray(n,e,t,r,s,i){const o=r*n;let a;switch(s){case 1:a=new Uint8Array(Math.ceil(o/8));break;case 8:a=new Uint8Array(o);break;case 16:a=new Uint16Array(o);break;case 32:a=new Float32Array(o);break;default:throw new Error(`Cannot create pixel array for bit depth ${s}`)}if(t)for(let l=e;l<a.length;l+=r)a[l]=i;return a}var src$4={},IOBuffer_1,hasRequiredIOBuffer;function requireIOBuffer(){if(hasRequiredIOBuffer)return IOBuffer_1;hasRequiredIOBuffer=1;const n=1024*8,e=[];class t{constructor(s,i){i=i||{},s===void 0&&(s=n),typeof s=="number"&&(s=new ArrayBuffer(s));let o=s.byteLength;const a=i.offset?i.offset>>>0:0;s.buffer&&(o=s.byteLength-a,s.byteLength!==s.buffer.byteLength?s=s.buffer.slice(s.byteOffset+a,s.byteOffset+s.byteLength):a?s=s.buffer.slice(a):s=s.buffer),this.buffer=s,this.length=o,this.byteLength=o,this.byteOffset=0,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer),this._increment=o||n,this._mark=0}available(s){return s===void 0&&(s=1),this.offset+s<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){this.littleEndian=!0}isBigEndian(){return!this.littleEndian}setBigEndian(){this.littleEndian=!1}skip(s){s===void 0&&(s=1),this.offset+=s}seek(s){this.offset=s}mark(){this._mark=this.offset}reset(){this.offset=this._mark}rewind(){this.offset=0}ensureAvailable(s){if(s===void 0&&(s=1),!this.available(s)){const i=this._increment+this._increment;this._increment=i;const o=this.length+i,a=new Uint8Array(o);a.set(new Uint8Array(this.buffer)),this.buffer=a.buffer,this.length=o,this._data=new DataView(this.buffer)}}readBoolean(){return this.readUint8()!==0}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(s){s===void 0&&(s=1);for(var i=new Uint8Array(s),o=0;o<s;o++)i[o]=this.readByte();return i}readInt16(){var s=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,s}readUint16(){var s=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,s}readInt32(){var s=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,s}readUint32(){var s=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,s}readFloat32(){var s=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,s}readFloat64(){var s=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,s}readChar(){return String.fromCharCode(this.readInt8())}readChars(s){s===void 0&&(s=1),e.length=s;for(var i=0;i<s;i++)e[i]=this.readChar();return e.join("")}writeBoolean(s){this.writeUint8(s?255:0)}writeInt8(s){this.ensureAvailable(1),this._data.setInt8(this.offset++,s)}writeUint8(s){this.ensureAvailable(1),this._data.setUint8(this.offset++,s)}writeByte(s){this.writeUint8(s)}writeBytes(s){this.ensureAvailable(s.length);for(var i=0;i<s.length;i++)this._data.setUint8(this.offset++,s[i])}writeInt16(s){this.ensureAvailable(2),this._data.setInt16(this.offset,s,this.littleEndian),this.offset+=2}writeUint16(s){this.ensureAvailable(2),this._data.setUint16(this.offset,s,this.littleEndian),this.offset+=2}writeInt32(s){this.ensureAvailable(4),this._data.setInt32(this.offset,s,this.littleEndian),this.offset+=4}writeUint32(s){this.ensureAvailable(4),this._data.setUint32(this.offset,s,this.littleEndian),this.offset+=4}writeFloat32(s){this.ensureAvailable(4),this._data.setFloat32(this.offset,s,this.littleEndian),this.offset+=4}writeFloat64(s){this.ensureAvailable(8),this._data.setFloat64(this.offset,s,this.littleEndian),this.offset+=8}writeChar(s){this.writeUint8(s.charCodeAt(0))}writeChars(s){for(var i=0;i<s.length;i++)this.writeUint8(s.charCodeAt(i))}toArray(){return new Uint8Array(this.buffer,0,this.offset)}}return IOBuffer_1=t,IOBuffer_1}var src$3={},standard$1,hasRequiredStandard;function requireStandard(){if(hasRequiredStandard)return standard$1;hasRequiredStandard=1;const n={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},e={};for(var t in n)e[n[t]]=t;return standard$1={tagsById:n,tagsByName:e},standard$1}var exif$1,hasRequiredExif;function requireExif(){if(hasRequiredExif)return exif$1;hasRequiredExif=1;const n={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},e={};for(var t in n)e[n[t]]=t;return exif$1={tagsById:n,tagsByName:e},exif$1}var gps$1,hasRequiredGps;function requireGps(){if(hasRequiredGps)return gps$1;hasRequiredGps=1;const n={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},e={};for(var t in n)e[n[t]]=t;return gps$1={tagsById:n,tagsByName:e},gps$1}var ifd,hasRequiredIfd;function requireIfd(){if(hasRequiredIfd)return ifd;hasRequiredIfd=1;const n={standard:requireStandard(),exif:requireExif(),gps:requireGps()};class e{constructor(r){if(!r)throw new Error("missing kind");this.data=null,this.fields=new Map,this.kind=r,this._map=null}get(r){if(typeof r=="number")return this.fields.get(r);if(typeof r=="string")return this.fields.get(n[this.kind].tagsByName[r]);throw new Error("expected a number or string")}get map(){if(!this._map){this._map={};const s=n[this.kind].tagsById;for(var r of this.fields.keys())s[r]&&(this._map[s[r]]=this.fields.get(r))}return this._map}}return ifd=e,ifd}var tiffIfd,hasRequiredTiffIfd;function requireTiffIfd(){if(hasRequiredTiffIfd)return tiffIfd;hasRequiredTiffIfd=1;const n=requireIfd(),e=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;class t extends n{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){var i=new Date,o=e.exec(this.dateTime);return i.setFullYear(o[1],o[2]-1,o[3]),i.setHours(o[4],o[5],o[6]),i}get newSubfileType(){return this.get(254)}get imageWidth(){return this.get(256)}get imageLength(){return this.get(257)}get bitsPerSample(){return this.get(258)}get compression(){return this.get(259)||1}get type(){return this.get(262)}get fillOrder(){return this.get(266)||1}get documentName(){return this.get(269)}get imageDescription(){return this.get(270)}get stripOffsets(){return r(this.get(273))}get orientation(){return this.get(274)}get samplesPerPixel(){return this.get(277)}get rowsPerStrip(){return this.get(278)}get stripByteCounts(){return r(this.get(279))}get minSampleValue(){return this.get(280)||0}get maxSampleValue(){return this.get(281)||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get(282)}get yResolution(){return this.get(283)}get planarConfiguration(){return this.get(284)||1}get resolutionUnit(){return this.get(296)||2}get dateTime(){return this.get(306)}get predictor(){return this.get(317)||1}get sampleFormat(){return this.get(339)||1}get sMinSampleValue(){return this.get(340)||this.minSampleValue}get sMaxSampleValue(){return this.get(341)||this.maxSampleValue}}function r(s){return typeof s=="number"?[s]:s}return tiffIfd=t,tiffIfd}var ifdValue={},hasRequiredIfdValue;function requireIfdValue(){if(hasRequiredIfdValue)return ifdValue;hasRequiredIfdValue=1;var n=new Map([[1,[1,e]],[2,[1,t]],[3,[2,r]],[4,[4,s]],[5,[8,i]],[6,[1,o]],[7,[1,e]],[8,[2,a]],[9,[4,l]],[10,[8,c]],[11,[4,u]],[12,[8,h]]]);ifdValue.getByteLength=function(d,g){return n.get(d)[0]*g},ifdValue.readData=function(d,g,x){return n.get(g)[1](d,x)};function e(d,g){if(g===1)return d.readUint8();for(var x=new Uint8Array(g),y=0;y<g;y++)x[y]=d.readUint8();return x}function t(d,g){for(var x=[],y="",w=0;w<g;w++){var $=String.fromCharCode(d.readUint8());$==="\0"?(x.push(y),y=""):y+=$}return x.length===1?x[0]:x}function r(d,g){if(g===1)return d.readUint16();for(var x=new Uint16Array(g),y=0;y<g;y++)x[y]=d.readUint16();return x}function s(d,g){if(g===1)return d.readUint32();for(var x=new Uint32Array(g),y=0;y<g;y++)x[y]=d.readUint32();return x}function i(d,g){if(g===1)return d.readUint32()/d.readUint32();for(var x=new Array(g),y=0;y<g;y++)x[y]=d.readUint32()/d.readUint32();return x}function o(d,g){if(g===1)return d.readInt8();for(var x=new Int8Array(g),y=0;y<g;y++)x[y]=d.readInt8();return x}function a(d,g){if(g===1)return d.readInt16();for(var x=new Int16Array(g),y=0;y<g;y++)x[y]=d.readInt16();return x}function l(d,g){if(g===1)return d.readInt32();for(var x=new Int32Array(g),y=0;y<g;y++)x[y]=d.readInt32();return x}function c(d,g){if(g===1)return d.readInt32()/d.readInt32();for(var x=new Array(g),y=0;y<g;y++)x[y]=d.readInt32()/d.readInt32();return x}function u(d,g){if(g===1)return d.readFloat32();for(var x=new Float32Array(g),y=0;y<g;y++)x[y]=d.readFloat32();return x}function h(d,g){if(g===1)return d.readFloat64();for(var x=new Float64Array(g),y=0;y<g;y++)x[y]=d.readFloat64();return x}return ifdValue}var tiffDecoder,hasRequiredTiffDecoder;function requireTiffDecoder(){if(hasRequiredTiffDecoder)return tiffDecoder;hasRequiredTiffDecoder=1;const n=requireIOBuffer(),e=requireIfd(),t=requireTiffIfd(),r=requireIfdValue(),s={ignoreImageData:!1,onlyFirst:!1};class i extends n{constructor(g,x){super(g,x),this._nextIFD=0}decode(g){g=Object.assign({},s,g);const x=[];for(this.decodeHeader();this._nextIFD;)if(x.push(this.decodeIFD(g)),g.onlyFirst)return x[0];return x}decodeHeader(){let g=this.readUint16();if(g===18761)this.setLittleEndian();else if(g===19789)this.setBigEndian();else throw new Error("invalid byte order: 0x"+g.toString(16));if(g=this.readUint16(),g!==42)throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(g){this.seek(this._nextIFD);var x;g.kind?x=new e(g.kind):x=new t;const y=this.readUint16();for(var w=0;w<y;w++)this.decodeIFDEntry(x);return g.ignoreImageData||this.decodeImageData(x),this._nextIFD=this.readUint32(),x}decodeIFDEntry(g){const x=this.offset,y=this.readUint16(),w=this.readUint16(),$=this.readUint32();if(w<1||w>12){this.skip(4);return}r.getByteLength(w,$)>4&&this.seek(this.readUint32());const _=r.readData(this,w,$);if(g.fields.set(y,_),y===34665||y===34853){let T=this.offset,k;y===34665?k="exif":y===34853&&(k="gps"),this._nextIFD=_,g[k]=this.decodeIFD({kind:k,ignoreImageData:!0}),this.offset=T}this.seek(x),this.skip(12)}decodeImageData(g){const x=g.orientation;switch(x&&x!==1&&u("orientation",x),g.type){case 1:case 2:this.readStripData(g);break;default:u("image type",g.type);break}}readStripData(g){const x=g.width,y=g.height,w=h(g.bitsPerSample),$=g.sampleFormat;let S=x*y;const _=o(S,1,w,$),T=g.compression,P=g.rowsPerStrip*x,L=g.stripOffsets,D=g.stripByteCounts;for(var M=0,O=0;O<L.length;O++){var R=this.getStripData(T,L[O],D[O]),z=S>P?P:S;S-=z,w===8?M=a(_,R,M,z):w===16?M=l(_,R,M,z,this.isLittleEndian()):w===32&&$===3?M=c(_,R,M,z,this.isLittleEndian()):u("bitDepth",w)}g.data=_}getStripData(g,x,y){switch(g){case 1:return new DataView(this.buffer,x,y);case 2:case 32773:return u("Compression",g);default:throw new Error("invalid compression: "+g)}}}tiffDecoder=i;function o(d,g,x,y){return x===8?new Uint8Array(d*g):x===16?new Uint16Array(d*g):x===32&&y===3?new Float32Array(d*g):u("bit depth / sample format",x+" / "+y)}function a(d,g,x,y){for(var w=0;w<y;w++)d[x++]=g.getUint8(w);return x}function l(d,g,x,y,w){for(var $=0;$<y*2;$+=2)d[x++]=g.getUint16($,w);return x}function c(d,g,x,y,w){for(var $=0;$<y*4;$+=4)d[x++]=g.getFloat32($,w);return x}function u(d,g){throw new Error("Unsupported "+d+": "+g)}function h(d){if(d.length){const x=d;d=x[0];for(var g=0;g<x.length;g++)x[g]!==d&&u("bit depth",x)}return d}return tiffDecoder}var decode$1,hasRequiredDecode$1;function requireDecode$1(){if(hasRequiredDecode$1)return decode$1;hasRequiredDecode$1=1;const n=requireTiffDecoder();return decode$1=function(t,r){return new n(t,r).decode(r)},decode$1}var hasRequiredSrc$4;function requireSrc$4(){return hasRequiredSrc$4||(hasRequiredSrc$4=1,src$3.decode=requireDecode$1()),src$3}var decode_1,hasRequiredDecode;function requireDecode(){if(hasRequiredDecode)return decode_1;hasRequiredDecode=1;const n=requireIOBuffer(),e=requireSrc$4();function t(r){const s=new n(r),i={};if(s.setBigEndian(),s.readUint16()!==65496)throw new Error("SOI marker not found. Not a valid JPEG file");if(s.readUint16()===65505){s.readUint16();const l=s.readBytes(6);if(l[0]===69&&l[1]===120&&l[2]===105&&l[3]===102&&l[4]===0&&l[5]===0){const c=e.decode(s,{onlyFirst:!0,ignoreImageData:!0,offset:s.offset});i.exif=c}}return i}return decode_1=t,decode_1}var hasRequiredSrc$3;function requireSrc$3(){return hasRequiredSrc$3||(hasRequiredSrc$3=1,src$4.decode=requireDecode()),src$4}var srcExports$2=requireSrc$3(),imageType$1={exports:{}},fileType={exports:{}},hasRequiredFileType;function requireFileType(){return hasRequiredFileType||(hasRequiredFileType=1,function(module){const toBytes=n=>[...n].map(e=>e.charCodeAt(0)),xpiZipFilename=toBytes("META-INF/mozilla.rsa"),oxmlContentTypes=toBytes("[Content_Types].xml"),oxmlRels=toBytes("_rels/.rels");function readUInt64LE(n,e=0){let t=n[e],r=1,s=0;for(;++s<8;)r*=256,t+=n[e+s]*r;return t}const fileType=n=>{if(!(n instanceof Uint8Array||n instanceof ArrayBuffer||Buffer.isBuffer(n)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof n}\``);const e=n instanceof Uint8Array?n:new Uint8Array(n);if(!(e&&e.length>1))return null;const t=(s,i)=>{i=Object.assign({offset:0},i);for(let o=0;o<s.length;o++)if(i.mask){if(s[o]!==(i.mask[o]&e[o+i.offset]))return!1}else if(s[o]!==e[o+i.offset])return!1;return!0},r=(s,i)=>t(toBytes(s),i);if(t([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(t([137,80,78,71,13,10,26,10]))return{ext:"png",mime:"image/png"};if(t([71,73,70]))return{ext:"gif",mime:"image/gif"};if(t([87,69,66,80],{offset:8}))return{ext:"webp",mime:"image/webp"};if(t([70,76,73,70]))return{ext:"flif",mime:"image/flif"};if((t([73,73,42,0])||t([77,77,0,42]))&&t([67,82],{offset:8}))return{ext:"cr2",mime:"image/x-canon-cr2"};if(t([73,73,42,0])||t([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(t([66,77]))return{ext:"bmp",mime:"image/bmp"};if(t([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(t([56,66,80,83]))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(t([80,75,3,4])){if(t([109,105,109,101,116,121,112,101,97,112,112,108,105,99,97,116,105,111,110,47,101,112,117,98,43,122,105,112],{offset:30}))return{ext:"epub",mime:"application/epub+zip"};if(t(xpiZipFilename,{offset:30}))return{ext:"xpi",mime:"application/x-xpinstall"};if(r("mimetypeapplication/vnd.oasis.opendocument.text",{offset:30}))return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};if(r("mimetypeapplication/vnd.oasis.opendocument.spreadsheet",{offset:30}))return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};if(r("mimetypeapplication/vnd.oasis.opendocument.presentation",{offset:30}))return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"};const s=(l,c=0)=>l.findIndex((u,h,d)=>h>=c&&d[h]===80&&d[h+1]===75&&d[h+2]===3&&d[h+3]===4);let i=0,o=!1,a=null;do{const l=i+30;if(o||(o=t(oxmlContentTypes,{offset:l})||t(oxmlRels,{offset:l})),a||(r("word/",{offset:l})?a={ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}:r("ppt/",{offset:l})?a={ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"}:r("xl/",{offset:l})&&(a={ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"})),o&&a)return a;i=s(e,l)}while(i>=0);if(a)return a}if(t([80,75])&&(e[2]===3||e[2]===5||e[2]===7)&&(e[3]===4||e[3]===6||e[3]===8))return{ext:"zip",mime:"application/zip"};if(t([117,115,116,97,114],{offset:257}))return{ext:"tar",mime:"application/x-tar"};if(t([82,97,114,33,26,7])&&(e[6]===0||e[6]===1))return{ext:"rar",mime:"application/x-rar-compressed"};if(t([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(t([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(t([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(t([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(t([51,103,112,53])||t([0,0,0])&&t([102,116,121,112],{offset:4})&&(t([109,112,52,49],{offset:8})||t([109,112,52,50],{offset:8})||t([105,115,111,109],{offset:8})||t([105,115,111,50],{offset:8})||t([109,109,112,52],{offset:8})||t([77,52,86],{offset:8})||t([100,97,115,104],{offset:8})))return{ext:"mp4",mime:"video/mp4"};if(t([77,84,104,100]))return{ext:"mid",mime:"audio/midi"};if(t([26,69,223,163])){const s=e.subarray(4,4100),i=s.findIndex((o,a,l)=>l[a]===66&&l[a+1]===130);if(i!==-1){const o=i+3,a=l=>[...l].every((c,u)=>s[o+u]===c.charCodeAt(0));if(a("matroska"))return{ext:"mkv",mime:"video/x-matroska"};if(a("webm"))return{ext:"webm",mime:"video/webm"}}}if(t([0,0,0,20,102,116,121,112,113,116,32,32])||t([102,114,101,101],{offset:4})||t([102,116,121,112,113,116,32,32],{offset:4})||t([109,100,97,116],{offset:4})||t([109,111,111,118],{offset:4})||t([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(t([82,73,70,70])){if(t([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(t([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(t([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(t([48,38,178,117,142,102,207,17,166,217])){let s=30;do{const i=readUInt64LE(e,s+16);if(t([145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101],{offset:s})){if(t([64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43],{offset:s+24}))return{ext:"wma",mime:"audio/x-ms-wma"};if(t([192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43],{offset:s+24}))return{ext:"wmv",mime:"video/x-ms-asf"};break}s+=i}while(s+24<=e.length);return{ext:"asf",mime:"application/vnd.ms-asf"}}if(t([0,0,1,186])||t([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(t([102,116,121,112,51,103],{offset:4}))return{ext:"3gp",mime:"video/3gpp"};for(let s=0;s<2&&s<e.length-16;s++){if(t([73,68,51],{offset:s})||t([255,226],{offset:s,mask:[255,226]}))return{ext:"mp3",mime:"audio/mpeg"};if(t([255,228],{offset:s,mask:[255,228]}))return{ext:"mp2",mime:"audio/mpeg"};if(t([255,248],{offset:s,mask:[255,252]}))return{ext:"mp2",mime:"audio/mpeg"};if(t([255,240],{offset:s,mask:[255,252]}))return{ext:"mp4",mime:"audio/mpeg"}}if(t([102,116,121,112,77,52,65],{offset:4}))return{ext:"m4a",mime:"audio/mp4"};if(t([79,112,117,115,72,101,97,100],{offset:28}))return{ext:"opus",mime:"audio/opus"};if(t([79,103,103,83]))return t([128,116,104,101,111,114,97],{offset:28})?{ext:"ogv",mime:"video/ogg"}:t([1,118,105,100,101,111,0],{offset:28})?{ext:"ogm",mime:"video/ogg"}:t([127,70,76,65,67],{offset:28})?{ext:"oga",mime:"audio/ogg"}:t([83,112,101,101,120,32,32],{offset:28})?{ext:"spx",mime:"audio/ogg"}:t([1,118,111,114,98,105,115],{offset:28})?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"};if(t([102,76,97,67]))return{ext:"flac",mime:"audio/x-flac"};if(t([77,65,67,32]))return{ext:"ape",mime:"audio/ape"};if(t([119,118,112,107]))return{ext:"wv",mime:"audio/wavpack"};if(t([35,33,65,77,82,10]))return{ext:"amr",mime:"audio/amr"};if(t([37,80,68,70]))return{ext:"pdf",mime:"application/pdf"};if(t([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if((e[0]===67||e[0]===70)&&t([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(t([123,92,114,116,102]))return{ext:"rtf",mime:"application/rtf"};if(t([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(t([119,79,70,70])&&(t([0,1,0,0],{offset:4})||t([79,84,84,79],{offset:4})))return{ext:"woff",mime:"font/woff"};if(t([119,79,70,50])&&(t([0,1,0,0],{offset:4})||t([79,84,84,79],{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(t([76,80],{offset:34})&&(t([0,0,1],{offset:8})||t([1,0,2],{offset:8})||t([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(t([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(t([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(t([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(t([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(t([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(t([37,33]))return{ext:"ps",mime:"application/postscript"};if(t([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(t([83,81,76,105]))return{ext:"sqlite",mime:"application/x-sqlite3"};if(t([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(t([67,114,50,52]))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(t([77,83,67,70])||t([73,83,99,40]))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(t([33,60,97,114,99,104,62,10,100,101,98,105,97,110,45,98,105,110,97,114,121]))return{ext:"deb",mime:"application/x-deb"};if(t([33,60,97,114,99,104,62]))return{ext:"ar",mime:"application/x-unix-archive"};if(t([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(t([31,160])||t([31,157]))return{ext:"Z",mime:"application/x-compress"};if(t([76,90,73,80]))return{ext:"lz",mime:"application/x-lzip"};if(t([208,207,17,224,161,177,26,225]))return{ext:"msi",mime:"application/x-msi"};if(t([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(t([71],{offset:4})&&(t([71],{offset:192})||t([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(t([66,76,69,78,68,69,82]))return{ext:"blend",mime:"application/x-blender"};if(t([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(t([0,0,0,12,106,80,32,32,13,10,135,10])){if(t([106,112,50,32],{offset:20}))return{ext:"jp2",mime:"image/jp2"};if(t([106,112,120,32],{offset:20}))return{ext:"jpx",mime:"image/jpx"};if(t([106,112,109,32],{offset:20}))return{ext:"jpm",mime:"image/jpm"};if(t([109,106,112,50],{offset:20}))return{ext:"mj2",mime:"image/mj2"}}if(t([70,79,82,77]))return{ext:"aif",mime:"audio/aiff"};if(r("<?xml "))return{ext:"xml",mime:"application/xml"};if(t([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(t([102,116,121,112],{offset:4})){if(t([109,105,102,49],{offset:8}))return{ext:"heic",mime:"image/heif"};if(t([109,115,102,49],{offset:8}))return{ext:"heic",mime:"image/heif-sequence"};if(t([104,101,105,99],{offset:8})||t([104,101,105,120],{offset:8}))return{ext:"heic",mime:"image/heic"};if(t([104,101,118,99],{offset:8})||t([104,101,118,120],{offset:8}))return{ext:"heic",mime:"image/heic-sequence"}}return t([171,75,84,88,32,49,49,187,13,10,26,10])?{ext:"ktx",mime:"image/ktx"}:t([68,73,67,77],{offset:128})?{ext:"dcm",mime:"application/dicom"}:t([77,80,43])?{ext:"mpc",mime:"audio/x-musepack"}:t([77,80,67,75])?{ext:"mpc",mime:"audio/x-musepack"}:t([66,69,71,73,78,58])?{ext:"ics",mime:"text/calendar"}:t([103,108,84,70,2,0,0,0])?{ext:"glb",mime:"model/gltf-binary"}:t([212,195,178,161])||t([161,178,195,212])?{ext:"pcap",mime:"application/vnd.tcpdump.pcap"}:null};module.exports=fileType,module.exports.default=fileType,Object.defineProperty(fileType,"minimumBytes",{value:4100}),module.exports.stream=readableStream=>new Promise((resolve,reject)=>{const stream=eval("require")("stream");readableStream.once("readable",()=>{const n=new stream.PassThrough,e=readableStream.read(module.exports.minimumBytes)||readableStream.read();try{n.fileType=fileType(e)}catch(t){reject(t)}readableStream.unshift(e),stream.pipeline?resolve(stream.pipeline(readableStream,n,()=>{})):resolve(readableStream.pipe(n))})})}(fileType)),fileType.exports}var hasRequiredImageType;function requireImageType(){if(hasRequiredImageType)return imageType$1.exports;hasRequiredImageType=1;const n=requireFileType(),e=new Set(["jpg","png","gif","webp","flif","cr2","tif","bmp","jxr","psd","ico","bpg","jp2","jpm","jpx","heic","cur","dcm"]),t=r=>{const s=n(r);return e.has(s&&s.ext)?s:null};return imageType$1.exports=t,imageType$1.exports.default=t,Object.defineProperty(t,"minimumBytes",{value:n.minimumBytes}),imageType$1.exports}var imageTypeExports=requireImageType(),imageType=getDefaultExportFromCjs(imageTypeExports);function guessStripByteCounts(n){if(n.compression!==1)throw new Error("missing mandatory StripByteCounts field in compressed image");const e=n.rowsPerStrip*n.width*n.samplesPerPixel*(n.bitsPerSample/8);return new Array(n.stripOffsets.length).fill(e)}function applyHorizontalDifferencing8Bit(n,e,t){let r=0;for(;r<n.length;){for(let s=t;s<e*t;s+=t)for(let i=0;i<t;i++)n[r+s+i]=n[r+s+i]+n[r+s-(t-i)]&255;r+=e*t}}function applyHorizontalDifferencing16Bit(n,e,t){let r=0;for(;r<n.length;){for(let s=t;s<e*t;s+=t)for(let i=0;i<t;i++)n[r+s+i]=n[r+s+i]+n[r+s-(t-i)]&65535;r+=e*t}}const tagsById$2={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},tagsByName$2={};for(let n in tagsById$2)tagsByName$2[tagsById$2[n]]=Number(n);var exif=Object.freeze({__proto__:null,tagsById:tagsById$2,tagsByName:tagsByName$2});const tagsById$1={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},tagsByName$1={};for(let n in tagsById$1)tagsByName$1[tagsById$1[n]]=Number(n);var gps=Object.freeze({__proto__:null,tagsById:tagsById$1,tagsByName:tagsByName$1});const tagsById={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},tagsByName={};for(let n in tagsById)tagsByName[tagsById[n]]=Number(n);var standard=Object.freeze({__proto__:null,tagsById,tagsByName});const tags={standard,exif,gps};class IFD{constructor(e){if(!e)throw new Error("missing kind");this.data=new Uint8Array,this.fields=new Map,this.kind=e,this._hasMap=!1,this._map={}}get(e){if(typeof e=="number")return this.fields.get(e);if(typeof e=="string")return this.fields.get(tags[this.kind].tagsByName[e]);throw new Error("expected a number or string")}get map(){if(!this._hasMap){const e=tags[this.kind].tagsById;for(let t of this.fields.keys())e[t]&&(this._map[e[t]]=this.fields.get(t));this._hasMap=!0}return this._map}}let types=new Map([[1,[1,readByte]],[2,[1,readASCII]],[3,[2,readShort]],[4,[4,readLong]],[5,[8,readRational]],[6,[1,readSByte]],[7,[1,readByte]],[8,[2,readSShort]],[9,[4,readSLong]],[10,[8,readSRational]],[11,[4,readFloat]],[12,[8,readDouble]]]);function getByteLength(n,e){const t=types.get(n);if(!t)throw new Error(`type not found: ${n}`);return t[0]*e}function readData(n,e,t){const r=types.get(e);if(!r)throw new Error(`type not found: ${e}`);return r[1](n,t)}function readByte(n,e){if(e===1)return n.readUint8();let t=new Uint8Array(e);for(let r=0;r<e;r++)t[r]=n.readUint8();return t}function readASCII(n,e){let t=[],r="";for(let s=0;s<e;s++){let i=String.fromCharCode(n.readUint8());i==="\0"?(t.push(r),r=""):r+=i}return t.length===1?t[0]:t}function readShort(n,e){if(e===1)return n.readUint16();let t=new Uint16Array(e);for(let r=0;r<e;r++)t[r]=n.readUint16();return t}function readLong(n,e){if(e===1)return n.readUint32();let t=new Uint32Array(e);for(let r=0;r<e;r++)t[r]=n.readUint32();return t}function readRational(n,e){if(e===1)return n.readUint32()/n.readUint32();let t=new Array(e);for(let r=0;r<e;r++)t[r]=n.readUint32()/n.readUint32();return t}function readSByte(n,e){if(e===1)return n.readInt8();let t=new Int8Array(e);for(let r=0;r<e;r++)t[r]=n.readInt8();return t}function readSShort(n,e){if(e===1)return n.readInt16();let t=new Int16Array(e);for(let r=0;r<e;r++)t[r]=n.readInt16();return t}function readSLong(n,e){if(e===1)return n.readInt32();let t=new Int32Array(e);for(let r=0;r<e;r++)t[r]=n.readInt32();return t}function readSRational(n,e){if(e===1)return n.readInt32()/n.readInt32();let t=new Array(e);for(let r=0;r<e;r++)t[r]=n.readInt32()/n.readInt32();return t}function readFloat(n,e){if(e===1)return n.readFloat32();let t=new Float32Array(e);for(let r=0;r<e;r++)t[r]=n.readFloat32();return t}function readDouble(n,e){if(e===1)return n.readFloat64();let t=new Float64Array(e);for(let r=0;r<e;r++)t[r]=n.readFloat64();return t}const CLEAR_CODE=256,EOI_CODE=257,TABLE_START=258,MIN_BIT_LENGTH=9;let stringTable=[];function initializeStringTable(){if(stringTable.length===0){for(let e=0;e<256;e++)stringTable.push([e]);const n=[];for(let e=256;e<4096;e++)stringTable.push(n)}}const andTable=[511,1023,2047,4095],bitJumps=[0,0,0,0,0,0,0,0,0,511,1023,2047,4095];class LzwDecoder{constructor(e){this.nextData=0,this.nextBits=0,this.bytePointer=0,this.tableLength=TABLE_START,this.currentBitLength=MIN_BIT_LENGTH,this.stripArray=new Uint8Array(e.buffer,e.byteOffset,e.byteLength),this.outData=new IOBuffer(e.byteLength),this.initializeTable()}decode(){let e=0,t=0;for(;(e=this.getNextCode())!==EOI_CODE;)if(e===CLEAR_CODE){if(this.initializeTable(),e=this.getNextCode(),e===EOI_CODE)break;this.writeString(this.stringFromCode(e)),t=e}else if(this.isInTable(e))this.writeString(this.stringFromCode(e)),this.addStringToTable(this.stringFromCode(t).concat(this.stringFromCode(e)[0])),t=e;else{const s=this.stringFromCode(t).concat(this.stringFromCode(t)[0]);this.writeString(s),this.addStringToTable(s),t=e}const r=this.outData.toArray();return new DataView(r.buffer,r.byteOffset,r.byteLength)}initializeTable(){initializeStringTable(),this.tableLength=TABLE_START,this.currentBitLength=MIN_BIT_LENGTH}writeString(e){this.outData.writeBytes(e)}stringFromCode(e){return stringTable[e]}isInTable(e){return e<this.tableLength}addStringToTable(e){if(stringTable[this.tableLength++]=e,stringTable.length>4096)throw stringTable=[],new Error("LZW decoding error. Please open an issue at https://github.com/image-js/tiff/issues/new/choose (include a test image).");this.tableLength===bitJumps[this.currentBitLength]&&this.currentBitLength++}getNextCode(){this.nextData=this.nextData<<8|this.stripArray[this.bytePointer++]&255,this.nextBits+=8,this.nextBits<this.currentBitLength&&(this.nextData=this.nextData<<8|this.stripArray[this.bytePointer++]&255,this.nextBits+=8);const e=this.nextData>>this.nextBits-this.currentBitLength&andTable[this.currentBitLength-9];return this.nextBits-=this.currentBitLength,this.bytePointer>this.stripArray.length?257:e}}function decompressLzw(n){return new LzwDecoder(n).decode()}const dateTimeRegex=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;class TiffIfd extends IFD{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){let e=new Date,t=dateTimeRegex.exec(this.dateTime);if(t===null)throw new Error(`invalid dateTime: ${this.dateTime}`);return e.setFullYear(Number(t[1]),Number(t[2])-1,Number(t[3])),e.setHours(Number(t[4]),Number(t[5]),Number(t[6])),e}get newSubfileType(){return this.get("NewSubfileType")}get imageWidth(){return this.get("ImageWidth")}get imageLength(){return this.get("ImageLength")}get bitsPerSample(){const e=this.get("BitsPerSample");return e&&typeof e!="number"?e[0]:e}get alpha(){const e=this.extraSamples;return e?e[0]!==0:!1}get associatedAlpha(){const e=this.extraSamples;return e?e[0]===1:!1}get extraSamples(){return alwaysArray(this.get("ExtraSamples"))}get compression(){return this.get("Compression")||1}get type(){return this.get("PhotometricInterpretation")}get fillOrder(){return this.get("FillOrder")||1}get documentName(){return this.get("DocumentName")}get imageDescription(){return this.get("ImageDescription")}get stripOffsets(){return alwaysArray(this.get("StripOffsets"))}get orientation(){return this.get("Orientation")}get samplesPerPixel(){return this.get("SamplesPerPixel")||1}get rowsPerStrip(){return this.get("RowsPerStrip")}get stripByteCounts(){return alwaysArray(this.get("StripByteCounts"))}get minSampleValue(){return this.get("MinSampleValue")||0}get maxSampleValue(){return this.get("MaxSampleValue")||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get("XResolution")}get yResolution(){return this.get("YResolution")}get planarConfiguration(){return this.get("PlanarConfiguration")||1}get resolutionUnit(){return this.get("ResolutionUnit")||2}get dateTime(){return this.get("DateTime")}get predictor(){return this.get("Predictor")||1}get sampleFormat(){return this.get("SampleFormat")||1}get sMinSampleValue(){return this.get("SMinSampleValue")||this.minSampleValue}get sMaxSampleValue(){return this.get("SMaxSampleValue")||this.maxSampleValue}get palette(){const e=2**this.bitsPerSample,t=this.get("ColorMap");if(!t)return;if(t.length!==3*e)throw new Error(`ColorMap size must be ${e}`);const r=[];for(let s=0;s<e;s++)r.push([t[s],t[s+e],t[s+2*e]]);return r}}function alwaysArray(n){return typeof n=="number"?[n]:n}function decompressZlib(n){const e=new Uint8Array(n.buffer,n.byteOffset,n.byteLength),t=inflate_1(e);return new DataView(t.buffer,t.byteOffset,t.byteLength)}const defaultOptions$3={ignoreImageData:!1,onlyFirst:!1};class TIFFDecoder extends IOBuffer{constructor(e){super(e),this._nextIFD=0}get isMultiPage(){let e=0;for(this.decodeHeader();this._nextIFD;)if(e++,this.decodeIFD({ignoreImageData:!0},!0),e===2)return!0;if(e===1)return!1;throw unsupported("ifdCount",e)}get pageCount(){let e=0;for(this.decodeHeader();this._nextIFD;)e++,this.decodeIFD({ignoreImageData:!0},!0);if(e>0)return e;throw unsupported("ifdCount",e)}decode(e={}){e=Object.assign({},defaultOptions$3,e);const t=[];for(this.decodeHeader();this._nextIFD;)if(t.push(this.decodeIFD(e,!0)),e.onlyFirst)return[t[0]];return t}decodeHeader(){const e=this.readUint16();if(e===18761)this.setLittleEndian();else if(e===19789)this.setBigEndian();else throw new Error(`invalid byte order: 0x${e.toString(16)}`);if(this.readUint16()!==42)throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(e,t){this.seek(this._nextIFD);let r;if(t)r=new TiffIfd;else{if(!e.kind)throw new Error("kind is missing");r=new IFD(e.kind)}const s=this.readUint16();for(let i=0;i<s;i++)this.decodeIFDEntry(r);if(!e.ignoreImageData){if(!(r instanceof TiffIfd))throw new Error("must be a tiff ifd");this.decodeImageData(r)}return this._nextIFD=this.readUint32(),r}decodeIFDEntry(e){const t=this.offset,r=this.readUint16(),s=this.readUint16(),i=this.readUint32();if(s<1||s>12){this.skip(4);return}getByteLength(s,i)>4&&this.seek(this.readUint32());const a=readData(this,s,i);if(e.fields.set(r,a),r===34665||r===34853){let l=this.offset,c="exif";r===34665?c="exif":r===34853&&(c="gps"),this._nextIFD=a,e[c]=this.decodeIFD({kind:c,ignoreImageData:!0},!1),this.offset=l}this.seek(t),this.skip(12)}decodeImageData(e){const t=e.orientation;if(t&&t!==1)throw unsupported("orientation",t);switch(e.type){case 0:case 1:case 2:case 3:this.readStripData(e);break;default:throw unsupported("image type",e.type)}if(this.applyPredictor(e),this.convertAlpha(e),e.type===0){const r=e.bitsPerSample,s=Math.pow(2,r)-1;for(let i=0;i<e.data.length;i++)e.data[i]=s-e.data[i]}}readStripData(e){const t=e.width,r=e.height,s=e.bitsPerSample,i=e.sampleFormat,o=t*r*e.samplesPerPixel,a=getDataArray(o,s,i),c=e.rowsPerStrip*t*e.samplesPerPixel,u=e.stripOffsets,h=e.stripByteCounts||guessStripByteCounts(e);let d=o,g=0;for(let x=0;x<u.length;x++){let y=new DataView(this.buffer,this.byteOffset+u[x],h[x]),w=d>c?c:d;d-=w;let $=y;switch(e.compression){case 1:break;case 5:{$=decompressLzw(y);break}case 8:{$=decompressZlib(y);break}case 2:throw unsupported("Compression","CCITT Group 3");case 32773:throw unsupported("Compression","PackBits");default:throw unsupported("Compression",e.compression)}g=this.fillUncompressed(s,i,a,$,g,w)}e.data=a}fillUncompressed(e,t,r,s,i,o){if(e===8)return fill8bit(r,s,i,o);if(e===16)return fill16bit(r,s,i,o,this.isLittleEndian());if(e===32&&t===3)return fillFloat32(r,s,i,o,this.isLittleEndian());throw unsupported("bitDepth",e)}applyPredictor(e){const t=e.bitsPerSample;switch(e.predictor){case 1:break;case 2:{if(t===8)applyHorizontalDifferencing8Bit(e.data,e.width,e.components);else if(t===16)applyHorizontalDifferencing16Bit(e.data,e.width,e.components);else throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${t}`);break}default:throw new Error(`invalid predictor: ${e.predictor}`)}}convertAlpha(e){if(e.alpha&&e.associatedAlpha){const{data:t,components:r,maxSampleValue:s}=e;for(let i=0;i<t.length;i+=r){const o=t[i+r-1];for(let a=0;a<r-1;a++)t[i+a]=Math.round(t[i+a]*s/o)}}}}function getDataArray(n,e,t){if(e===8)return new Uint8Array(n);if(e===16)return new Uint16Array(n);if(e===32&&t===3)return new Float32Array(n);throw unsupported("bit depth / sample format",`${e} / ${t}`)}function fill8bit(n,e,t,r){for(let s=0;s<r;s++)n[t++]=e.getUint8(s);return t}function fill16bit(n,e,t,r,s){for(let i=0;i<r*2;i+=2)n[t++]=e.getUint16(i,s);return t}function fillFloat32(n,e,t,r,s){for(let i=0;i<r*4;i+=4)n[t++]=e.getFloat32(i,s);return t}function unsupported(n,e){return new Error(`Unsupported ${n}: ${e}`)}function decodeTIFF(n,e){return new TIFFDecoder(n).decode(e)}function matchAndCrop(n={}){let{algorithm:e="matchToPrevious",ignoreBorder:t=[0,0]}=n;this.checkProcessable("matchAndCrop",{bitDepth:[8,16]});let r=e==="matchToPrevious",s=this[0],i=[];i[0]={position:[0,0],image:this[0]};let o=[0,0];for(let d=1;d<this.length;d++){let g=s.getBestMatch(this[d],{border:t});i[d]={position:[g[0]+o[0],g[1]+o[1]],image:this[d]},r&&(o[0]+=g[0],o[1]+=g[1],s=this[d])}let a=0,l=0,c=0,u=0;for(let d=0;d<i.length;d++){let g=i[d];g.position[0]>a&&(a=g.position[0]),g.position[0]<l&&(l=g.position[0]),g.position[1]>c&&(c=g.position[1]),g.position[1]<u&&(u=g.position[1])}l=0-l,u=0-u;for(let d=0;d<i.length;d++){let g=i[d];g.crop=g.image.crop({x:a-g.position[0],y:c-g.position[1],width:s.width-l-a,height:s.height-u-c})}let h=[];for(let d=0;d<i.length;d++)h[d]=i[d].crop;return new Stack(h)}function min$2(){this.checkProcessable("min",{bitDepth:[8,16]});let n=this[0].min;for(let e=1;e<this.length;e++)for(let t=0;t<n.length;t++)n[t]=Math.min(n[t],this[e].min[t]);return n}function max$2(){this.checkProcessable("min",{bitDepth:[8,16]});let n=this[0].max;for(let e=1;e<this.length;e++)for(let t=0;t<n.length;t++)n[t]=Math.max(n[t],this[e].max[t]);return n}function median$2(n){let e=n.reduce((o,a)=>o+a);if(e===0)throw new Error("unreachable");let t=0,r=0,s=e/2,i;for(;;){if(n[t]>0){if(i!==void 0)return(i+t)/2;if(r+=n[t],r>s)return t;r===s&&(i=t)}t++}}function mean$2(n){let e=0,t=0;for(let r=0;r<n.length;r++)e+=n[r],t+=n[r]*r;return e===0?0:t/e}function median$1(){this.checkProcessable("median",{bitDepth:[8,16]});let n=this.getHistograms({maxSlots:this[0].maxValue+1}),e=new Array(n.length);for(let t=0;t<n.length;t++){let r=n[t];e[t]=median$2(r)}return e}function histogram(n){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistogram(n);for(let t=1;t<this.length;t++){let r=this[t].getHistogram(n);for(let s=0;s<e.length;s++)e[s]+=r[s]}return e}function histograms(n){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistograms(n),t=e[0].length;for(let r=1;r<this.length;r++){let s=this[r].getHistograms(n);for(let i=0;i<e.length;i++)for(let o=0;o<t;o++)e[i][o]+=s[i][o]}return e}function averageImage(){this.checkProcessable("averageImage",{bitDepth:[8,16]});let n=new Uint32Array(this[0].data.length);for(let r=0;r<this.length;r++){let s=this[r];for(let i=0;i<this[0].data.length;i++)n[i]+=s.data[i]}let e=Image.createFrom(this[0]),t=e.data;for(let r=0;r<this[0].data.length;r++)t[r]=n[r]/this.length;return e}function maxImage(){this.checkProcessable("max",{bitDepth:[8,16]});let n=Image.createFrom(this[0]);n.data.fill(0);for(const e of this)for(let t=0;t<n.data.length;t++)n.data[t]=Math.max(e.data[t],n.data[t]);return n}function minImage(){this.checkProcessable("max",{bitDepth:[8,16]});let n=Image.createFrom(this[0]);n.data.fill(n.maxValue);for(const e of this)for(let t=0;t<n.data.length;t++)n.data[t]=Math.min(e.data[t],n.data[t]);return n}function extend$2(n){n.extendMethod("matchAndCrop",matchAndCrop),n.extendMethod("getMin",min$2),n.extendMethod("getMax",max$2),n.extendMethod("getMedian",median$1),n.extendMethod("getHistogram",histogram),n.extendMethod("getHistograms",histograms),n.extendMethod("getAverage",averageImage),n.extendMethod("getAverageImage",averageImage),n.extendMethod("getMaxImage",maxImage),n.extendMethod("getMinImage",minImage)}let computedPropertyDescriptor={configurable:!0,enumerable:!1,get:void 0};class Stack extends Array{constructor(e){if(Array.isArray(e)){super(e.length);for(let t=0;t<e.length;t++)this[t]=e[t]}else typeof e=="number"?super(e):super();this.computed=null}static load(e){return Promise.all(e.map(Image.load)).then(t=>new Stack(t))}static extendMethod(e,t,r={}){let{inPlace:s=!1,returnThis:i=!0,partialArgs:o=[]}=r;return s?Stack.prototype[e]=function(...a){this.computed=null;let l=t.apply(this,[...o,...a]);return i?this:l}:Stack.prototype[e]=function(...a){return t.apply(this,[...o,...a])},Stack}static extendProperty(e,t,r={}){let{partialArgs:s=[]}=r;return computedPropertyDescriptor.get=function(){if(this.computed===null)this.computed={};else if(hasOwn(e,this.computed))return this.computed[e];let i=t.apply(this,s);return this.computed[e]=i,i},Object.defineProperty(Stack.prototype,e,computedPropertyDescriptor),Stack}checkProcessable(e,t={}){if(typeof e!="string")throw new TypeError("checkProcessable requires as first parameter the processName (a string)");if(this.size===0)throw new TypeError(`The process: ${e} can not be applied on an empty stack`);this[0].checkProcessable(e,t);for(let r=1;r<this.length;r++){if((t.sameSize===void 0||t.sameSize)&&this[0].width!==this[r].width)throw new TypeError(`The process: ${e} can not be applied if width is not identical in all images`);if((t.sameSize===void 0||t.sameSize)&&this[0].height!==this[r].height)throw new TypeError(`The process: ${e} can not be applied if height is not identical in all images`);if((t.sameAlpha===void 0||t.sameAlpha)&&this[0].alpha!==this[r].alpha)throw new TypeError(`The process: ${e} can not be applied if alpha is not identical in all images`);if((t.sameBitDepth===void 0||t.sameBitDepth)&&this[0].bitDepth!==this[r].bitDepth)throw new TypeError(`The process: ${e} can not be applied if bitDepth is not identical in all images`);if((t.sameColorModel===void 0||t.sameColorModel)&&this[0].colorModel!==this[r].colorModel)throw new TypeError(`The process: ${e} can not be applied if colorModel is not identical in all images`);if((t.sameNumberChannels===void 0||t.sameNumberChannels)&&this[0].channels!==this[r].channels)throw new TypeError(`The process: ${e} can not be applied if channels is not identical in all images`)}}}Array[Symbol.species]||(Stack.prototype.map=function(n,e){if(typeof n!="function")throw new TypeError(`${n} is not a function`);let t=new Stack(this.length);for(let r=0;r<this.length;r++)t[r]=n.call(e,this[r],r,this);return t}),extend$2(Stack);const isDataURL=/^data:[a-z]+\/(?:[a-z]+);base64,/;function load(n,e){if(typeof n=="string")return loadURL(n,e);if(n instanceof ArrayBuffer)return Promise.resolve(loadBinary(new Uint8Array(n),void 0,e&&e.ignorePalette));if(n.buffer)return Promise.resolve(loadBinary(n,void 0,e&&e.ignorePalette));throw new Error('argument to "load" must be a string or buffer.')}function loadBinary(n,e,t){const r=imageType(n);if(r)switch(r.mime){case"image/png":return loadPNG(n);case"image/jpeg":return loadJPEG(n);case"image/tiff":return loadTIFF(n,t);default:return loadGeneric(s(r.mime))}return loadGeneric(s("application/octet-stream"));function s(i){return e||toBase64URL(n,i)}}function loadURL(n,e){const t=n.slice(0,64).match(isDataURL);let r;return t!==null?r=Promise.resolve(decode$2(n.slice(t[0].length))):r=fetchBinary(n,e),r.then(s=>{const i=new Uint8Array(s);return loadBinary(i,t?n:void 0,e&&e.ignorePalette)})}function loadPNG(n){const e=decodePng(n);let t=e.channels,r,s=0;return t===2||t===4?(r=t-1,s=1):r=t,e.palette?loadPNGFromPalette(e):new Image(e.width,e.height,e.data,{components:r,alpha:s,bitDepth:e.depth})}function loadPNGFromPalette(n){const e=n.width*n.height,t=n.palette[0].length,r=new Uint8Array(e*t),s=8/n.depth,i=n.depth<8?s:1,o=parseInt("1".repeat(n.depth),2),a=t===4;let l=0;for(let c=0;c<e;c++){const u=Math.floor(c/i);let h=n.data[u];n.depth<8&&(h=h>>>n.depth*(s-1-c%s)&o);const d=n.palette[h];r[l++]=d[0],r[l++]=d[1],r[l++]=d[2],a&&(r[l++]=d[3])}return new Image(n.width,n.height,r,{components:3,alpha:a,bitDepth:8})}function loadJPEG(n){const e=srcExports$2.decode(n);let t;e.exif&&(t=getMetadata(e.exif));const r=jpegJsExports.decode(n,{useTArray:!0,maxMemoryUsageInMB:1024});let s=new Image(r.width,r.height,r.data,{meta:t});if(t&&t.tiff.tags.Orientation){const i=t.tiff.tags.Orientation;i>2&&(s=s.rotate({3:180,4:180,5:90,6:90,7:270,8:270}[i])),[2,4,5,7].includes(i)&&(s=s.flipX())}return s}function loadTIFF(n,e){let t=decodeTIFF(n);return t.length===1?getImageFromIFD(t[0],e):new Stack(t.map(function(r){return getImageFromIFD(r,e)}))}function getMetadata(n){const e={tiff:{fields:n.fields,tags:n.map}};return n.exif&&(e.exif=n.exif),n.gps&&(e.gps=n.gps),e}function getImageFromIFD(n,e){if(!e&&n.type===3){const t=new Uint16Array(3*n.width*n.height),r=n.palette;let s=0;for(let i=0;i<n.data.length;i++){const o=n.data[i],a=r[o];t[s++]=a[0],t[s++]=a[1],t[s++]=a[2]}return new Image(n.width,n.height,t,{components:3,alpha:n.alpha,colorModel:RGB$1,bitDepth:16,meta:getMetadata(n)})}else return new Image(n.width,n.height,n.data,{components:n.type===2?3:1,alpha:n.alpha,colorModel:n.type===2?RGB$1:GREY$1,bitDepth:n.bitsPerSample.length?n.bitsPerSample[0]:n.bitsPerSample,meta:getMetadata(n)})}function loadGeneric(n,e){return e=e||{},new Promise(function(t,r){let s=new DOMImage;s.onload=function(){let i=s.width,o=s.height,l=createCanvas(i,o).getContext("2d");l.drawImage(s,0,0,i,o);let c=l.getImageData(0,0,i,o).data;t(new Image(i,o,c,e))},s.onerror=function(){r(new Error(`Could not load ${n}`))},s.src=n})}const valueMethods={getValueXY(n,e,t){return this.data[(e*this.width+n)*this.channels+t]},setValueXY(n,e,t,r){return this.data[(e*this.width+n)*this.channels+t]=r,this.computed=null,this},getValue(n,e){return this.data[n*this.channels+e]},setValue(n,e,t){return this.data[n*this.channels+e]=t,this.computed=null,this},getPixelXY(n,e){return this.getPixel(e*this.width+n)},setPixelXY(n,e,t){return this.setPixel(e*this.width+n,t)},getPixel(n){const e=new Array(this.channels),t=n*this.channels;for(let r=0;r<this.channels;r++)e[r]=this.data[t+r];return e},setPixel(n,e){const t=n*this.channels;for(let r=0;r<e.length;r++)this.data[t+r]=e[r];return this.computed=null,this}};function setValueMethods(n){for(const e in valueMethods)n.prototype[e]=valueMethods[e]}function getImageParameters(n){return{width:n.width,height:n.height,components:n.components,alpha:n.alpha,colorModel:n.colorModel,bitDepth:n.bitDepth}}function getOutputImage(n,e,t,r={}){const{out:s}=e;if(s===void 0)return r.copy?n.clone():Image.createFrom(n,t);{if(!Image.isImage(s))throw new TypeError("out must be an Image object");const i=Object.assign(getImageParameters(n),t);for(const o in i)if(s[o]!==i[o])throw new RangeError(`cannot use out. Its ${o} must be "${i[o]}" (found "${s[o]}")`);return s}}function getOutputImageOrInPlace(n,e,t){if(e.inPlace!==void 0&&typeof e.inPlace!="boolean")throw new TypeError("inPlace option must be a boolean");if(e.inPlace){if(e.out!==void 0)throw new TypeError("out option must not be set if inPlace option is true");return n}return getOutputImage(n,e,null,t)}function abs(n={}){this.checkProcessable("abs",{bitDepth:[32]});const e=getOutputImageOrInPlace(this,n);return absolute(this,e),e}function absolute(n,e){for(let t=0;t<n.data.length;t++)e.data[t]=Math.abs(n.data[t])}function copyAlphaChannel(n,e){if(n.alpha===1&&e.alpha===1)for(let t=0;t<n.size;t++)e.data[t*e.channels+e.components]=n.data[t*n.channels+n.components]}function invert(n={}){this.checkProcessable("invert",{bitDepth:[1,8,16]});const e=getOutputImageOrInPlace(this,n);return this.bitDepth===1?invertBinary(this,e):(invertColor(this,e),this!==e&&copyAlphaChannel(this,e)),e}function invertBinary(n,e){for(let t=0;t<n.data.length;t++)e.data[t]=~n.data[t]}function invertColor(n,e){for(let t=0;t<n.data.length;t+=n.channels)for(let r=0;r<n.components;r++)e.data[t+r]=n.maxValue-n.data[t+r]}function flipX(){this.checkProcessable("flipX",{bitDepth:[8,16]});for(let n=0;n<this.height;n++){let e=n*this.width*this.channels;for(let t=0;t<Math.floor(this.width/2);t++){let r=t*this.channels+e,s=(this.width-t-1)*this.channels+e;for(let i=0;i<this.channels;i++){let o=this.data[r+i];this.data[r+i]=this.data[s+i],this.data[s+i]=o}}}return this}function flipY(){this.checkProcessable("flipY",{bitDepth:[8,16]});for(let n=0;n<Math.floor(this.height/2);n++)for(let e=0;e<this.width;e++){let t=e*this.channels+n*this.width*this.channels,r=e*this.channels+(this.height-1-n)*this.channels*this.width;for(let s=0;s<this.channels;s++){let i=this.data[t+s];this.data[t+s]=this.data[r+s],this.data[r+s]=i}}return this}function blurFilter(n={}){const{radius:e=1}=n;if(e<1)throw new Error("radius must be greater than 1");const t=2*e+1,r=new Array(t);for(let s=0;s<t;s++){r[s]=new Array(t);for(let i=0;i<t;i++)r[s][i]=1/(t*t)}return this.convolution(r)}var medianQuickselect_min={exports:{}},hasRequiredMedianQuickselect_min;function requireMedianQuickselect_min(){return hasRequiredMedianQuickselect_min||(hasRequiredMedianQuickselect_min=1,function(n){(function(){function e(s){for(var i=0,o=s.length-1,a=void 0,l=void 0,c=void 0,u=r(i,o);;){if(o<=i)return s[u];if(o==i+1)return s[i]>s[o]&&t(s,i,o),s[u];for(a=r(i,o),s[a]>s[o]&&t(s,a,o),s[i]>s[o]&&t(s,i,o),s[a]>s[i]&&t(s,a,i),t(s,a,i+1),l=i+1,c=o;;){do l++;while(s[i]>s[l]);do c--;while(s[c]>s[i]);if(c<l)break;t(s,l,c)}t(s,i,c),c<=u&&(i=l),c>=u&&(o=c-1)}}var t=function(i,o,a){var l;return l=[i[a],i[o]],i[o]=l[0],i[a]=l[1],l},r=function(i,o){return~~((i+o)/2)};n.exports?n.exports=e:window.median=e})()}(medianQuickselect_min)),medianQuickselect_min.exports}var medianQuickselect_minExports=requireMedianQuickselect_min(),quickSelectMedian=getDefaultExportFromCjs(medianQuickselect_minExports);function validateArrayOfChannels(n,e={}){let{channels:t,allowAlpha:r,defaultAlpha:s}=e;return typeof r!="boolean"&&(r=!0),typeof t>"u"?allChannels(n,s):validateChannels(n,t,r)}function allChannels(n,e){let t=e?n.channels:n.components,r=new Array(t);for(let s=0;s<t;s++)r[s]=s;return r}function validateChannels(n,e,t){Array.isArray(e)||(e=[e]);for(let r=0;r<e.length;r++)e[r]=validateChannel(n,e[r],t);return e}function validateChannel(n,e,t=!0){if(e===void 0)throw new RangeError(`validateChannel : the channel has to be >=0 and <${n.channels}`);if(typeof e=="string"){switch(n.colorModel){case GREY$1:break;case RGB$1:if("rgb".includes(e))switch(e){case"r":e=0;break;case"g":e=1;break;case"b":e=2;break}break;case HSL:if("hsl".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"l":e=2;break}break;case HSV:if("hsv".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"v":e=2;break}break;case CMYK$1:if("cmyk".includes(e))switch(e){case"c":e=0;break;case"m":e=1;break;case"y":e=2;break;case"k":e=3;break}break;default:throw new Error(`Unexpected color model: ${n.colorModel}`)}if(e==="a"){if(!n.alpha)throw new Error("validateChannel : the image does not contain alpha channel");e=n.components}if(typeof e=="string")throw new Error(`validateChannel : undefined channel: ${e}`)}if(e>=n.channels)throw new RangeError(`validateChannel : the channel has to be >=0 and <${n.channels}`);if(!t&&e>=n.components)throw new RangeError("validateChannel : alpha channel may not be selected");return e}function medianFilter(n={}){let{radius:e=1,border:t="copy",channels:r}=n;if(this.checkProcessable("medianFilter",{bitDepth:[8,16]}),e<1)throw new Error("radius must be greater than 0");r=validateArrayOfChannels(this,r);let s=e,i=e,o=Image.createFrom(this),a=(s*2+1)*(i*2+1),l=new Array(a);for(let c=0;c<r.length;c++){let u=r[c];for(let h=i;h<this.height-i;h++)for(let d=s;d<this.width-s;d++){let g=0;for(let y=-i;y<=i;y++)for(let w=-s;w<=s;w++){let $=((h+y)*this.width+d+w)*this.channels+u;l[g++]=this.data[$]}let x=(h*this.width+d)*this.channels+u;o.data[x]=quickSelectMedian(l)}}if(this.alpha&&!r.includes(this.channels))for(let c=this.components;c<this.data.length;c=c+this.channels)o.data[c]=this.data[c];return o.setBorder({size:[s,i],algorithm:t}),o}function gaussianFilter(n={}){let{radius:e=1,sigma:t,channels:r,border:s="copy"}=n;this.checkProcessable("gaussian",{bitDepth:[8,16]});const i=getKernel(e,t);return this.convolution([i,i],{border:s,channels:r,algorithm:"separable"})}function getKernel(n,e){const t=n*2+1,r=new Array(t),s=e||((t-1)*.5-1)*.3+.8,i=-.5/(s*s);let o=0;for(let a=0;a<t;a++){const l=a-n,c=Math.exp(i*l*l);r[a]=c,o+=c}for(let a=0;a<t;a++)r[a]/=o;return r}const SOBEL_X=[[-1,0,1],[-2,0,2],[-1,0,1]],SOBEL_Y=[[-1,-2,-1],[0,0,0],[1,2,1]],SCHARR_X=[[3,0,-3],[10,0,-10],[3,0,-3]],SCHARR_Y=[[3,10,3],[0,0,0],[-3,-10,-3]];var src$2={},fftlib={},hasRequiredFftlib;function requireFftlib(){return hasRequiredFftlib||(hasRequiredFftlib=1,function(n){(function(){var e;e=n;var t={release:"0.3.0",date:"2013-03"};e.toString=function(){return"version "+t.release+", released "+t.date};for(var r=0,s=null,i=null,o={init:function(c){if(c!==0&&!(c&c-1))r=c,o._initArray(),o._makeBitReversalTable(),o._makeCosSinTable();else throw new Error("init: radix-2 required")},fft1d:function(c,u){o.fft(c,u,1)},ifft1d:function(c,u){var h=1/r;o.fft(c,u,-1);for(var d=0;d<r;d++)c[d]*=h,u[d]*=h},bt1d:function(c,u){o.fft(c,u,-1)},fft2d:function(c,u){for(var h=[],d=[],g=0,x=0;x<r;x++){g=x*r;for(var y=0;y<r;y++)h[y]=c[y+g],d[y]=u[y+g];o.fft1d(h,d);for(var w=0;w<r;w++)c[w+g]=h[w],u[w+g]=d[w]}for(var $=0;$<r;$++){for(var S=0;S<r;S++)g=$+S*r,h[S]=c[g],d[S]=u[g];o.fft1d(h,d);for(var _=0;_<r;_++)g=$+_*r,c[g]=h[_],u[g]=d[_]}},ifft2d:function(c,u){for(var h=[],d=[],g=0,x=0;x<r;x++){g=x*r;for(var y=0;y<r;y++)h[y]=c[y+g],d[y]=u[y+g];o.ifft1d(h,d);for(var w=0;w<r;w++)c[w+g]=h[w],u[w+g]=d[w]}for(var $=0;$<r;$++){for(var S=0;S<r;S++)g=$+S*r,h[S]=c[g],d[S]=u[g];o.ifft1d(h,d);for(var _=0;_<r;_++)g=$+_*r,c[g]=h[_],u[g]=d[_]}},fft:function(c,u,h){for(var d,g,x,y,w,$,S,_,T,k=r>>2,P=0;P<r;P++)y=s[P],P<y&&(w=c[P],c[P]=c[y],c[y]=w,w=u[P],u[P]=u[y],u[y]=w);for(var L=1;L<r;L<<=1){g=0,d=r/(L<<1);for(var D=0;D<L;D++){$=i[g+k],S=h*i[g];for(var M=D;M<r;M+=L<<1)x=M+L,_=$*c[x]+S*u[x],T=$*u[x]-S*c[x],c[x]=c[M]-_,c[M]+=_,u[x]=u[M]-T,u[M]+=T;g+=d}}},_initArray:function(){typeof Uint32Array<"u"?s=new Uint32Array(r):s=[],typeof Float64Array<"u"?i=new Float64Array(r*1.25):i=[]},_paddingZero:function(){},_makeBitReversalTable:function(){var c=0,u=0,h=0;for(s[0]=0;++c<r;){for(h=r>>1;h<=u;)u-=h,h>>=1;u+=h,s[c]=u}},_makeCosSinTable:function(){var c=r>>1,u=r>>2,h=r>>3,d=c+u,g=Math.sin(Math.PI/r),x=2*g*g,y=Math.sqrt(x*(2-x)),w=i[u]=1,$=i[0]=0;g=2*x;for(var S=1;S<h;S++)w-=x,x+=g*w,$+=y,y-=g*$,i[S]=$,i[u-S]=w;h!==0&&(i[h]=Math.sqrt(.5));for(var _=0;_<u;_++)i[c-_]=i[_];for(var T=0;T<d;T++)i[T+c]=-i[T]}},a=["init","fft1d","ifft1d","fft2d","ifft2d"],l=0;l<a.length;l++)e[a[l]]=o[a[l]];return e.bt=o.bt1d,e.fft=o.fft1d,e.ifft=o.ifft1d,e}).call(fftlib)}(fftlib)),fftlib}var FFTUtils_1,hasRequiredFFTUtils;function requireFFTUtils(){if(hasRequiredFFTUtils)return FFTUtils_1;hasRequiredFFTUtils=1;var n=requireFftlib(),e={DEBUG:!1,ifft2DArray:function(t,r,s){var i=new Array(r*s),o=r/2,a=(s-1)*2;n.init(o);for(var l={re:new Array(o),im:new Array(o)},c=0;c<s;c++){for(var u=o-1;u>=0;u--)l.re[u]=t[u*2*s+c],l.im[u]=t[(u*2+1)*s+c];n.bt(l.re,l.im);for(var u=o-1;u>=0;u--)i[u*2*s+c]=l.re[u],i[(u*2+1)*s+c]=l.im[u]}var h=new Array(o*a);n.init(a);for(var d={re:new Array(a),im:new Array(a)},g=a*o,u=0;u<r;u+=2){d.re[0]=i[u*s],d.im[0]=i[(u+1)*s];for(var c=1;c<s;c++)d.re[c]=i[u*s+c],d.im[c]=i[(u+1)*s+c],d.re[a-c]=i[u*s+c],d.im[a-c]=-i[(u+1)*s+c];n.bt(d.re,d.im);for(var x=u/2*a,c=a-1;c>=0;c--)h[x+c]=d.re[c]/g}return h},fft2DArray:function(t,r,s,i){Object.assign({},{inplace:!0});var o=s/2+1,a=r*2,l=new Array(a*o);n.init(s);for(var c={re:new Array(s),im:new Array(s)},u={re:new Array(s),im:new Array(s)},h={re:new Array(s),im:new Array(s)},d,g,x,y,w,$=0;$<r/2;$++){d=$*2*s,c.re=t.slice(d,d+s),d=($*2+1)*s,c.im=t.slice(d,d+s),n.fft1d(c.re,c.im),this.reconstructTwoRealFFT(c,u,h),g=$*4*o,x=($*4+1)*o,y=($*4+2)*o,w=($*4+3)*o;for(var S=o-1;S>=0;S--)l[g+S]=u.re[S],l[x+S]=u.im[S],l[y+S]=h.re[S],l[w+S]=h.im[S]}u=null,h=null;var _=new Array(a*o);n.init(r);for(var T={re:new Array(r),im:new Array(r)},k=o-1;k>=0;k--){for(var $=r-1;$>=0;$--)T.re[$]=l[$*2*o+k],T.im[$]=l[($*2+1)*o+k],isNaN(T.re[$])&&(T.re[$]=0),isNaN(T.im[$])&&(T.im[$]=0);n.fft1d(T.re,T.im);for(var $=r-1;$>=0;$--)_[$*2*o+k]=T.re[$],_[($*2+1)*o+k]=T.im[$]}return _},reconstructTwoRealFFT:function(t,r,s){var i=t.re.length;r.re[0]=t.re[0],r.im[0]=0,s.re[0]=t.im[0],s.im[0]=0;for(var o,a,l,c,u,h=i/2;h>0;h--)u=i-h,o=.5*(t.re[h]-t.re[u]),a=.5*(t.re[h]+t.re[u]),l=.5*(t.im[h]-t.im[u]),c=.5*(t.im[h]+t.im[u]),r.re[h]=a,r.im[h]=l,r.re[u]=a,r.im[u]=-l,s.re[h]=c,s.im[h]=-o,s.re[u]=c,s.im[u]=o},convolute2DI:function(t,r,s,i){for(var o,a,l=0;l<s/2;l++)for(var c=0;c<i;c++)o=t[l*2*i+c]*r[l*2*i+c]-t[(l*2+1)*i+c]*r[(l*2+1)*i+c],a=t[l*2*i+c]*r[(l*2+1)*i+c]+t[(l*2+1)*i+c]*r[l*2*i+c],t[l*2*i+c]=o,t[(l*2+1)*i+c]=a},convolute:function(t,r,s,i,o){for(var a=new Array(i*s),l=0;l<s*i;l++)a[l]=t[l];a=this.fft2DArray(a,s,i);for(var c=r.length,u=r[0].length,h=new Array(i*s),l=0;l<i*s;l++)h[l]=0;for(var d,g,x=Math.floor((c-1)/2),y=Math.floor((u-1)/2),w=0;w<c;w++){d=(w-x+s)%s;for(var $=0;$<u;$++)g=($-y+i)%i,h[d*i+g]=r[w][$]}h=this.fft2DArray(h,s,i);var S=s*2,_=i/2+1;return this.convolute2DI(a,h,S,_),this.ifft2DArray(a,S,_)},toRadix2:function(t,r,s){var i,o,a,l,c=s,u=r;if(!(s!==0&&!(s&s-1))){for(c=0;s>>++c;);c=1<<c}if(!(r!==0&&!(r&r-1))){for(u=0;r>>++u;);u=1<<u}if(u==r&&c==s)return{data:t,rows:r,cols:s};var h=new Array(u*c),d=Math.floor((u-r)/2)-r,g=Math.floor((c-s)/2)-s;for(i=0;i<u;i++)for(a=i*c,l=(i-d)%r*s,o=0;o<c;o++)h[a+o]=t[l+(o-g)%s];return{data:h,rows:u,cols:c}},crop:function(t,r,s,i,o,a){if(r==i&&s==o)return t;Object.assign({},a);var l=new Array(o*i),c=Math.floor((r-i)/2),u=Math.floor((s-o)/2),h,d,g,x;for(g=0;g<i;g++)for(h=g*o,d=(g+c)*s,x=0;x<o;x++)l[h+x]=t[d+(x+u)];return l}};return FFTUtils_1=e,FFTUtils_1}var hasRequiredSrc$2;function requireSrc$2(){return hasRequiredSrc$2||(hasRequiredSrc$2=1,src$2.FFTUtils=requireFFTUtils(),src$2.FFT=requireFftlib()),src$2}var src$1,hasRequiredSrc$1;function requireSrc$1(){if(hasRequiredSrc$1)return src$1;hasRequiredSrc$1=1;var n=requireSrc$2().FFTUtils;function e(i,o,a){var l=s(i),c=l.data,u=Object.assign({normalize:!1,divisor:1,rows:l.rows,cols:l.cols},a),h,d;if(u.rows&&u.cols)h=u.rows,d=u.cols;else throw new Error("Invalid number of rows or columns "+h+" "+d);var g=u.divisor,x,y,w=o.length,$=o[0].length;if(u.normalize)for(g=0,x=0;x<w;x++)for(y=0;y<$;y++)g+=o[x][y];if(g===0)throw new RangeError("convolution: The divisor is equal to zero");var S=n.toRadix2(c,h,d),_=n.convolute(S.data,o,S.rows,S.cols);if(_=n.crop(_,S.rows,S.cols,h,d),g!=0&&g!=1)for(x=0;x<_.length;x++)_[x]/=g;return _}function t(i,o,a){var l=s(i),c=l.data,u=Object.assign({normalize:!1,divisor:1,rows:l.rows,cols:l.cols},a),h,d;if(u.rows&&u.cols)h=u.rows,d=u.cols;else throw new Error("Invalid number of rows or columns "+h+" "+d);var g=u.divisor,x=o.length,y=o[0].length,w,$,S,_,T,k,P,L,D;if(u.normalize)for(g=0,w=0;w<x;w++)for($=0;$<y;$++)g+=o[w][$];if(g===0)throw new RangeError("convolution: The divisor is equal to zero");var M=new Array(h*d),O=Math.floor(x/2),R=Math.floor(y/2);for(_=0;_<h;_++)for(S=0;S<d;S++){for(k=0,$=0;$<x;$++)for(w=0;w<y;w++)P=o[x-$-1][y-w-1],L=(_+$-O+h)%h,D=(S+w-R+d)%d,T=L*d+D,k+=c[T]*P;T=_*d+S,M[T]=k/g}return M}function r(i,o,a){var l=1e3;a&&a.factor&&(l=a.factor);var c=new Array(o),u,h,d,g;l*=-1;var x=(o-1)/2,y=2*i*i;for(u=0;u<o;u++)for(c[u]=new Array(o),g=(u-x)*(u-x),h=0;h<o;h++)d=-((h-x)*(h-x)+g)/y,c[u][h]=Math.round(l*(1+d)*Math.exp(d));return c}function s(i){var o=i,a,l;if(typeof i[0]!="number"){a=i.length,l=i[0].length,o=new Array(a*l);for(var c=0;c<a;c++)for(var u=0;u<l;u++)o[c*l+u]=i[c][u]}else{var h=Math.sqrt(i.length);Number.isInteger(h)&&(a=h,l=h)}return{data:o,rows:a,cols:l}}return src$1={fft:e,direct:t,kernelFactory:{LoG:r},matrix2Array:s},src$1}var srcExports$1=requireSrc$1(),_isFinite,hasRequired_isFinite;function require_isFinite(){return hasRequired_isFinite||(hasRequired_isFinite=1,_isFinite=Number.isFinite||function(n){return!(typeof n!="number"||n!==n||n===1/0||n===-1/0)}),_isFinite}var isInteger$1,hasRequiredIsInteger;function requireIsInteger(){if(hasRequiredIsInteger)return isInteger$1;hasRequiredIsInteger=1;var n=require_isFinite();return isInteger$1=Number.isInteger||function(e){return typeof e=="number"&&n(e)&&Math.floor(e)===e},isInteger$1}var isIntegerExports=requireIsInteger(),isInteger=getDefaultExportFromCjs(isIntegerExports);function validateKernel(n){let e,t;if(Array.isArray(n))if(Array.isArray(n[0])){if(!(n.length&1)||!(n[0].length&1))throw new RangeError("validateKernel: Kernel rows and columns should be odd numbers");e=Math.floor(n.length/2),t=Math.floor(n[0].length/2)}else{let r=Math.sqrt(n.length);if(isInteger(r))t=e=Math.floor(Math.sqrt(n.length)/2);else throw new RangeError("validateKernel: Kernel array should be a square");let s=new Array(r);for(let i=0;i<r;i++){s[i]=new Array(r);for(let o=0;o<r;o++)s[i][o]=n[i*r+o]}n=s}else throw new Error(`validateKernel: Invalid Kernel: ${n}`);return{kernel:n,kWidth:t,kHeight:e}}function clamp(n,e){return Math.round(Math.min(Math.max(n,0),e.maxValue))}function directConvolution(n,e,t){if(t===void 0){const i=n.length+e.length-1;t=new Array(i)}fill(t);for(var r=0;r<n.length;r++)for(var s=0;s<e.length;s++)t[r+s]+=n[r]*e[s];return t}function fill(n){for(var e=0;e<n.length;e++)n[e]=0}var fft,hasRequiredFft;function requireFft(){if(hasRequiredFft)return fft;hasRequiredFft=1;function n(e){if(this.size=e|0,this.size<=1||this.size&this.size-1)throw new Error("FFT size must be a power of two and bigger than 1");this._csize=e<<1;for(var t=new Array(this.size*2),r=0;r<t.length;r+=2){const c=Math.PI*r/this.size;t[r]=Math.cos(c),t[r+1]=-Math.sin(c)}this.table=t;for(var s=0,i=1;this.size>i;i<<=1)s++;this._width=s%2===0?s-1:s,this._bitrev=new Array(1<<this._width);for(var o=0;o<this._bitrev.length;o++){this._bitrev[o]=0;for(var a=0;a<this._width;a+=2){var l=this._width-a-2;this._bitrev[o]|=(o>>>a&3)<<l}}this._out=null,this._data=null,this._inv=0}return fft=n,n.prototype.fromComplexArray=function(t,r){for(var s=r||new Array(t.length>>>1),i=0;i<t.length;i+=2)s[i>>>1]=t[i];return s},n.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var r=0;r<t.length;r++)t[r]=0;return t},n.prototype.toComplexArray=function(t,r){for(var s=r||this.createComplexArray(),i=0;i<s.length;i+=2)s[i]=t[i>>>1],s[i+1]=0;return s},n.prototype.completeSpectrum=function(t){for(var r=this._csize,s=r>>>1,i=2;i<s;i+=2)t[r-i]=t[i],t[r-i+1]=-t[i+1]},n.prototype.transform=function(t,r){if(t===r)throw new Error("Input and output buffers must be different");this._out=t,this._data=r,this._inv=0,this._transform4(),this._out=null,this._data=null},n.prototype.realTransform=function(t,r){if(t===r)throw new Error("Input and output buffers must be different");this._out=t,this._data=r,this._inv=0,this._realTransform4(),this._out=null,this._data=null},n.prototype.inverseTransform=function(t,r){if(t===r)throw new Error("Input and output buffers must be different");this._out=t,this._data=r,this._inv=1,this._transform4();for(var s=0;s<t.length;s++)t[s]/=this.size;this._out=null,this._data=null},n.prototype._transform4=function(){var t=this._out,r=this._csize,s=this._width,i=1<<s,o=r/i<<1,a,l,c=this._bitrev;if(o===4)for(a=0,l=0;a<r;a+=o,l++){const w=c[l];this._singleTransform2(a,w,i)}else for(a=0,l=0;a<r;a+=o,l++){const w=c[l];this._singleTransform4(a,w,i)}var u=this._inv?-1:1,h=this.table;for(i>>=2;i>=2;i>>=2){o=r/i<<1;var d=o>>>2;for(a=0;a<r;a+=o)for(var g=a+d,x=a,y=0;x<g;x+=2,y+=i){const w=x,$=w+d,S=$+d,_=S+d,T=t[w],k=t[w+1],P=t[$],L=t[$+1],D=t[S],M=t[S+1],O=t[_],R=t[_+1],z=T,X=k,K=h[y],Y=u*h[y+1],te=P*K-L*Y,ie=P*Y+L*K,Q=h[2*y],se=u*h[2*y+1],le=D*Q-M*se,he=D*se+M*Q,re=h[3*y],fe=u*h[3*y+1],ge=O*re-R*fe,j=O*fe+R*re,xe=z+le,Ee=X+he,Se=z-le,Ce=X-he,Me=te+ge,Fe=ie+j,Xe=u*(te-ge),qe=u*(ie-j),ke=xe+Me,we=Ee+Fe,Ye=xe-Me,Oe=Ee-Fe,Ve=Se+qe,de=Ce-Xe,Pe=Se-qe,Le=Ce+Xe;t[w]=ke,t[w+1]=we,t[$]=Ve,t[$+1]=de,t[S]=Ye,t[S+1]=Oe,t[_]=Pe,t[_+1]=Le}}},n.prototype._singleTransform2=function(t,r,s){const i=this._out,o=this._data,a=o[r],l=o[r+1],c=o[r+s],u=o[r+s+1],h=a+c,d=l+u,g=a-c,x=l-u;i[t]=h,i[t+1]=d,i[t+2]=g,i[t+3]=x},n.prototype._singleTransform4=function(t,r,s){const i=this._out,o=this._data,a=this._inv?-1:1,l=s*2,c=s*3,u=o[r],h=o[r+1],d=o[r+s],g=o[r+s+1],x=o[r+l],y=o[r+l+1],w=o[r+c],$=o[r+c+1],S=u+x,_=h+y,T=u-x,k=h-y,P=d+w,L=g+$,D=a*(d-w),M=a*(g-$),O=S+P,R=_+L,z=T+M,X=k-D,K=S-P,Y=_-L,te=T-M,ie=k+D;i[t]=O,i[t+1]=R,i[t+2]=z,i[t+3]=X,i[t+4]=K,i[t+5]=Y,i[t+6]=te,i[t+7]=ie},n.prototype._realTransform4=function(){var t=this._out,r=this._csize,s=this._width,i=1<<s,o=r/i<<1,a,l,c=this._bitrev;if(o===4)for(a=0,l=0;a<r;a+=o,l++){const bt=c[l];this._singleRealTransform2(a,bt>>>1,i>>>1)}else for(a=0,l=0;a<r;a+=o,l++){const bt=c[l];this._singleRealTransform4(a,bt>>>1,i>>>1)}var u=this._inv?-1:1,h=this.table;for(i>>=2;i>=2;i>>=2){o=r/i<<1;var d=o>>>1,g=d>>>1,x=g>>>1;for(a=0;a<r;a+=o)for(var y=0,w=0;y<=x;y+=2,w+=i){var $=a+y,S=$+g,_=S+g,T=_+g,k=t[$],P=t[$+1],L=t[S],D=t[S+1],M=t[_],O=t[_+1],R=t[T],z=t[T+1],X=k,K=P,Y=h[w],te=u*h[w+1],ie=L*Y-D*te,Q=L*te+D*Y,se=h[2*w],le=u*h[2*w+1],he=M*se-O*le,re=M*le+O*se,fe=h[3*w],ge=u*h[3*w+1],j=R*fe-z*ge,xe=R*ge+z*fe,Ee=X+he,Se=K+re,Ce=X-he,Me=K-re,Fe=ie+j,Xe=Q+xe,qe=u*(ie-j),ke=u*(Q-xe),we=Ee+Fe,Ye=Se+Xe,Oe=Ce+ke,Ve=Me-qe;if(t[$]=we,t[$+1]=Ye,t[S]=Oe,t[S+1]=Ve,y===0){var de=Ee-Fe,Pe=Se-Xe;t[_]=de,t[_+1]=Pe;continue}if(y!==x){var Le=Ce,Be=-Me,Te=Ee,rt=-Se,st=-u*ke,Ue=-u*qe,ze=-u*Xe,Ze=-u*Fe,We=Le+st,it=Be+Ue,dt=Te+Ze,nt=rt-ze,lt=a+g-y,ft=a+d-y;t[lt]=We,t[lt+1]=it,t[ft]=dt,t[ft+1]=nt}}}},n.prototype._singleRealTransform2=function(t,r,s){const i=this._out,o=this._data,a=o[r],l=o[r+s],c=a+l,u=a-l;i[t]=c,i[t+1]=0,i[t+2]=u,i[t+3]=0},n.prototype._singleRealTransform4=function(t,r,s){const i=this._out,o=this._data,a=this._inv?-1:1,l=s*2,c=s*3,u=o[r],h=o[r+s],d=o[r+l],g=o[r+c],x=u+d,y=u-d,w=h+g,$=a*(h-g),S=x+w,_=y,T=-$,k=x-w,P=y,L=$;i[t]=S,i[t+1]=0,i[t+2]=_,i[t+3]=T,i[t+4]=k,i[t+5]=0,i[t+6]=P,i[t+7]=L},fft}requireFft();function convolutionSeparable(n,e,t,r){const s=new Array(n.length);let i,o,a,l;l=e[1],a=(l.length-1)/2,o=new Array(t+l.length-1),i=new Array(t);for(let c=0;c<r;c++){for(let u=0;u<t;u++)i[u]=n[c*t+u];directConvolution(i,l,o);for(let u=0;u<t;u++)s[c*t+u]=o[a+u]}l=e[0],a=(l.length-1)/2,o=new Array(r+l.length-1),i=new Array(r);for(let c=0;c<t;c++){for(let u=0;u<r;u++)i[u]=s[u*t+c];directConvolution(i,l,o);for(let u=0;u<r;u++)s[u*t+c]=o[a+u]}return s}var matrix$1={};const toString=Object.prototype.toString;function isAnyArray(n){const e=toString.call(n);return e.endsWith("Array]")&&!e.includes("Big")}var libEsm=Object.freeze({__proto__:null,isAnyArray}),require$$0$1=getAugmentedNamespace(libEsm);function max$1(n){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(!isAnyArray(n))throw new TypeError("input must be an array");if(n.length===0)throw new TypeError("input must not be empty");var t=e.fromIndex,r=t===void 0?0:t,s=e.toIndex,i=s===void 0?n.length:s;if(r<0||r>=n.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>n.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var o=n[r],a=r+1;a<i;a++)n[a]>o&&(o=n[a]);return o}function min$1(n){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(!isAnyArray(n))throw new TypeError("input must be an array");if(n.length===0)throw new TypeError("input must not be empty");var t=e.fromIndex,r=t===void 0?0:t,s=e.toIndex,i=s===void 0?n.length:s;if(r<0||r>=n.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>n.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var o=n[r],a=r+1;a<i;a++)n[a]<o&&(o=n[a]);return o}function rescale(n){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(isAnyArray(n)){if(n.length===0)throw new TypeError("input must not be empty")}else throw new TypeError("input must be an array");var t;if(e.output!==void 0){if(!isAnyArray(e.output))throw new TypeError("output option must be an array if specified");t=e.output}else t=new Array(n.length);var r=min$1(n),s=max$1(n);if(r===s)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var i=e.min,o=i===void 0?e.autoMinMax?r:0:i,a=e.max,l=a===void 0?e.autoMinMax?s:1:a;if(o>=l)throw new RangeError("min option must be smaller than max option");for(var c=(l-o)/(s-r),u=0;u<n.length;u++)t[u]=(n[u]-r)*c+o;return t}var libEs6=Object.freeze({__proto__:null,default:rescale}),require$$1=getAugmentedNamespace(libEs6),hasRequiredMatrix;function requireMatrix(){var en,Zi,Ft;if(hasRequiredMatrix)return matrix$1;hasRequiredMatrix=1,Object.defineProperty(matrix$1,"__esModule",{value:!0});var n=require$$0$1,e=require$$1;const t=" ".repeat(2),r=" ".repeat(4);function s(){return i(this)}function i(N,C={}){const{maxRows:v=15,maxColumns:b=10,maxNumSize:I=8,padMinus:A="auto"}=C;return`${N.constructor.name} {
${t}[
${r}${o(N,v,b,I,A)}
${t}]
${t}rows: ${N.rows}
${t}columns: ${N.columns}
}`}function o(N,C,v,b,I){const{rows:A,columns:G}=N,U=Math.min(A,C),W=Math.min(G,v),q=[];if(I==="auto"){I=!1;e:for(let ae=0;ae<U;ae++)for(let Z=0;Z<W;Z++)if(N.get(ae,Z)<0){I=!0;break e}}for(let ae=0;ae<U;ae++){let Z=[];for(let me=0;me<W;me++)Z.push(a(N.get(ae,me),b,I));q.push(`${Z.join(" ")}`)}return W!==G&&(q[q.length-1]+=` ... ${G-v} more columns`),U!==A&&q.push(`... ${A-C} more rows`),q.join(`
${r}`)}function a(N,C,v){return(N>=0&&v?` ${l(N,C-1)}`:l(N,C)).padEnd(C)}function l(N,C){let v=N.toString();if(v.length<=C)return v;let b=N.toFixed(C);if(b.length>C&&(b=N.toFixed(Math.max(0,C-(b.length-C)))),b.length<=C&&!b.startsWith("0.000")&&!b.startsWith("-0.000"))return b;let I=N.toExponential(C);return I.length>C&&(I=N.toExponential(Math.max(0,C-(I.length-C)))),I.slice(0)}function c(N,C){N.prototype.add=function(b){return typeof b=="number"?this.addS(b):this.addM(b)},N.prototype.addS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)+b);return this},N.prototype.addM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)+b.get(I,A));return this},N.add=function(b,I){return new C(b).add(I)},N.prototype.sub=function(b){return typeof b=="number"?this.subS(b):this.subM(b)},N.prototype.subS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)-b);return this},N.prototype.subM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)-b.get(I,A));return this},N.sub=function(b,I){return new C(b).sub(I)},N.prototype.subtract=N.prototype.sub,N.prototype.subtractS=N.prototype.subS,N.prototype.subtractM=N.prototype.subM,N.subtract=N.sub,N.prototype.mul=function(b){return typeof b=="number"?this.mulS(b):this.mulM(b)},N.prototype.mulS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)*b);return this},N.prototype.mulM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)*b.get(I,A));return this},N.mul=function(b,I){return new C(b).mul(I)},N.prototype.multiply=N.prototype.mul,N.prototype.multiplyS=N.prototype.mulS,N.prototype.multiplyM=N.prototype.mulM,N.multiply=N.mul,N.prototype.div=function(b){return typeof b=="number"?this.divS(b):this.divM(b)},N.prototype.divS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)/b);return this},N.prototype.divM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)/b.get(I,A));return this},N.div=function(b,I){return new C(b).div(I)},N.prototype.divide=N.prototype.div,N.prototype.divideS=N.prototype.divS,N.prototype.divideM=N.prototype.divM,N.divide=N.div,N.prototype.mod=function(b){return typeof b=="number"?this.modS(b):this.modM(b)},N.prototype.modS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)%b);return this},N.prototype.modM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)%b.get(I,A));return this},N.mod=function(b,I){return new C(b).mod(I)},N.prototype.modulus=N.prototype.mod,N.prototype.modulusS=N.prototype.modS,N.prototype.modulusM=N.prototype.modM,N.modulus=N.mod,N.prototype.and=function(b){return typeof b=="number"?this.andS(b):this.andM(b)},N.prototype.andS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)&b);return this},N.prototype.andM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)&b.get(I,A));return this},N.and=function(b,I){return new C(b).and(I)},N.prototype.or=function(b){return typeof b=="number"?this.orS(b):this.orM(b)},N.prototype.orS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)|b);return this},N.prototype.orM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)|b.get(I,A));return this},N.or=function(b,I){return new C(b).or(I)},N.prototype.xor=function(b){return typeof b=="number"?this.xorS(b):this.xorM(b)},N.prototype.xorS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)^b);return this},N.prototype.xorM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)^b.get(I,A));return this},N.xor=function(b,I){return new C(b).xor(I)},N.prototype.leftShift=function(b){return typeof b=="number"?this.leftShiftS(b):this.leftShiftM(b)},N.prototype.leftShiftS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)<<b);return this},N.prototype.leftShiftM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)<<b.get(I,A));return this},N.leftShift=function(b,I){return new C(b).leftShift(I)},N.prototype.signPropagatingRightShift=function(b){return typeof b=="number"?this.signPropagatingRightShiftS(b):this.signPropagatingRightShiftM(b)},N.prototype.signPropagatingRightShiftS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)>>b);return this},N.prototype.signPropagatingRightShiftM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)>>b.get(I,A));return this},N.signPropagatingRightShift=function(b,I){return new C(b).signPropagatingRightShift(I)},N.prototype.rightShift=function(b){return typeof b=="number"?this.rightShiftS(b):this.rightShiftM(b)},N.prototype.rightShiftS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)>>>b);return this},N.prototype.rightShiftM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)>>>b.get(I,A));return this},N.rightShift=function(b,I){return new C(b).rightShift(I)},N.prototype.zeroFillRightShift=N.prototype.rightShift,N.prototype.zeroFillRightShiftS=N.prototype.rightShiftS,N.prototype.zeroFillRightShiftM=N.prototype.rightShiftM,N.zeroFillRightShift=N.rightShift,N.prototype.not=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,~this.get(b,I));return this},N.not=function(b){return new C(b).not()},N.prototype.abs=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.abs(this.get(b,I)));return this},N.abs=function(b){return new C(b).abs()},N.prototype.acos=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.acos(this.get(b,I)));return this},N.acos=function(b){return new C(b).acos()},N.prototype.acosh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.acosh(this.get(b,I)));return this},N.acosh=function(b){return new C(b).acosh()},N.prototype.asin=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.asin(this.get(b,I)));return this},N.asin=function(b){return new C(b).asin()},N.prototype.asinh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.asinh(this.get(b,I)));return this},N.asinh=function(b){return new C(b).asinh()},N.prototype.atan=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.atan(this.get(b,I)));return this},N.atan=function(b){return new C(b).atan()},N.prototype.atanh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.atanh(this.get(b,I)));return this},N.atanh=function(b){return new C(b).atanh()},N.prototype.cbrt=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.cbrt(this.get(b,I)));return this},N.cbrt=function(b){return new C(b).cbrt()},N.prototype.ceil=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.ceil(this.get(b,I)));return this},N.ceil=function(b){return new C(b).ceil()},N.prototype.clz32=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.clz32(this.get(b,I)));return this},N.clz32=function(b){return new C(b).clz32()},N.prototype.cos=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.cos(this.get(b,I)));return this},N.cos=function(b){return new C(b).cos()},N.prototype.cosh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.cosh(this.get(b,I)));return this},N.cosh=function(b){return new C(b).cosh()},N.prototype.exp=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.exp(this.get(b,I)));return this},N.exp=function(b){return new C(b).exp()},N.prototype.expm1=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.expm1(this.get(b,I)));return this},N.expm1=function(b){return new C(b).expm1()},N.prototype.floor=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.floor(this.get(b,I)));return this},N.floor=function(b){return new C(b).floor()},N.prototype.fround=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.fround(this.get(b,I)));return this},N.fround=function(b){return new C(b).fround()},N.prototype.log=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.log(this.get(b,I)));return this},N.log=function(b){return new C(b).log()},N.prototype.log1p=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.log1p(this.get(b,I)));return this},N.log1p=function(b){return new C(b).log1p()},N.prototype.log10=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.log10(this.get(b,I)));return this},N.log10=function(b){return new C(b).log10()},N.prototype.log2=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.log2(this.get(b,I)));return this},N.log2=function(b){return new C(b).log2()},N.prototype.round=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.round(this.get(b,I)));return this},N.round=function(b){return new C(b).round()},N.prototype.sign=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.sign(this.get(b,I)));return this},N.sign=function(b){return new C(b).sign()},N.prototype.sin=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.sin(this.get(b,I)));return this},N.sin=function(b){return new C(b).sin()},N.prototype.sinh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.sinh(this.get(b,I)));return this},N.sinh=function(b){return new C(b).sinh()},N.prototype.sqrt=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.sqrt(this.get(b,I)));return this},N.sqrt=function(b){return new C(b).sqrt()},N.prototype.tan=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.tan(this.get(b,I)));return this},N.tan=function(b){return new C(b).tan()},N.prototype.tanh=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.tanh(this.get(b,I)));return this},N.tanh=function(b){return new C(b).tanh()},N.prototype.trunc=function(){for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.set(b,I,Math.trunc(this.get(b,I)));return this},N.trunc=function(b){return new C(b).trunc()},N.pow=function(b,I){return new C(b).pow(I)},N.prototype.pow=function(b){return typeof b=="number"?this.powS(b):this.powM(b)},N.prototype.powS=function(b){for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)**b);return this},N.prototype.powM=function(b){if(b=C.checkMatrix(b),this.rows!==b.rows||this.columns!==b.columns)throw new RangeError("Matrices dimensions must be equal");for(let I=0;I<this.rows;I++)for(let A=0;A<this.columns;A++)this.set(I,A,this.get(I,A)**b.get(I,A));return this}}function u(N,C,v){let b=v?N.rows:N.rows-1;if(C<0||C>b)throw new RangeError("Row index out of range")}function h(N,C,v){let b=v?N.columns:N.columns-1;if(C<0||C>b)throw new RangeError("Column index out of range")}function d(N,C){if(C.to1DArray&&(C=C.to1DArray()),C.length!==N.columns)throw new RangeError("vector size must be the same as the number of columns");return C}function g(N,C){if(C.to1DArray&&(C=C.to1DArray()),C.length!==N.rows)throw new RangeError("vector size must be the same as the number of rows");return C}function x(N,C){if(!n.isAnyArray(C))throw new TypeError("row indices must be an array");for(let v=0;v<C.length;v++)if(C[v]<0||C[v]>=N.rows)throw new RangeError("row indices are out of range")}function y(N,C){if(!n.isAnyArray(C))throw new TypeError("column indices must be an array");for(let v=0;v<C.length;v++)if(C[v]<0||C[v]>=N.columns)throw new RangeError("column indices are out of range")}function w(N,C,v,b,I){if(arguments.length!==5)throw new RangeError("expected 4 arguments");if(S("startRow",C),S("endRow",v),S("startColumn",b),S("endColumn",I),C>v||b>I||C<0||C>=N.rows||v<0||v>=N.rows||b<0||b>=N.columns||I<0||I>=N.columns)throw new RangeError("Submatrix indices are out of range")}function $(N,C=0){let v=[];for(let b=0;b<N;b++)v.push(C);return v}function S(N,C){if(typeof C!="number")throw new TypeError(`${N} must be a number`)}function _(N){if(N.isEmpty())throw new Error("Empty matrix has no elements to index")}function T(N){let C=$(N.rows);for(let v=0;v<N.rows;++v)for(let b=0;b<N.columns;++b)C[v]+=N.get(v,b);return C}function k(N){let C=$(N.columns);for(let v=0;v<N.rows;++v)for(let b=0;b<N.columns;++b)C[b]+=N.get(v,b);return C}function P(N){let C=0;for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)C+=N.get(v,b);return C}function L(N){let C=$(N.rows,1);for(let v=0;v<N.rows;++v)for(let b=0;b<N.columns;++b)C[v]*=N.get(v,b);return C}function D(N){let C=$(N.columns,1);for(let v=0;v<N.rows;++v)for(let b=0;b<N.columns;++b)C[b]*=N.get(v,b);return C}function M(N){let C=1;for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)C*=N.get(v,b);return C}function O(N,C,v){const b=N.rows,I=N.columns,A=[];for(let G=0;G<b;G++){let U=0,W=0,q=0;for(let ae=0;ae<I;ae++)q=N.get(G,ae)-v[G],U+=q,W+=q*q;C?A.push((W-U*U/I)/(I-1)):A.push((W-U*U/I)/I)}return A}function R(N,C,v){const b=N.rows,I=N.columns,A=[];for(let G=0;G<I;G++){let U=0,W=0,q=0;for(let ae=0;ae<b;ae++)q=N.get(ae,G)-v[G],U+=q,W+=q*q;C?A.push((W-U*U/b)/(b-1)):A.push((W-U*U/b)/b)}return A}function z(N,C,v){const b=N.rows,I=N.columns,A=b*I;let G=0,U=0,W=0;for(let q=0;q<b;q++)for(let ae=0;ae<I;ae++)W=N.get(q,ae)-v,G+=W,U+=W*W;return C?(U-G*G/A)/(A-1):(U-G*G/A)/A}function X(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)-C[v])}function K(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)-C[b])}function Y(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)-C)}function te(N){const C=[];for(let v=0;v<N.rows;v++){let b=0;for(let I=0;I<N.columns;I++)b+=N.get(v,I)**2/(N.columns-1);C.push(Math.sqrt(b))}return C}function ie(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)/C[v])}function Q(N){const C=[];for(let v=0;v<N.columns;v++){let b=0;for(let I=0;I<N.rows;I++)b+=N.get(I,v)**2/(N.rows-1);C.push(Math.sqrt(b))}return C}function se(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)/C[b])}function le(N){const C=N.size-1;let v=0;for(let b=0;b<N.columns;b++)for(let I=0;I<N.rows;I++)v+=N.get(I,b)**2/C;return Math.sqrt(v)}function he(N,C){for(let v=0;v<N.rows;v++)for(let b=0;b<N.columns;b++)N.set(v,b,N.get(v,b)/C)}class re{static from1DArray(C,v,b){if(C*v!==b.length)throw new RangeError("data length does not match given dimensions");let A=new j(C,v);for(let G=0;G<C;G++)for(let U=0;U<v;U++)A.set(G,U,b[G*v+U]);return A}static rowVector(C){let v=new j(1,C.length);for(let b=0;b<C.length;b++)v.set(0,b,C[b]);return v}static columnVector(C){let v=new j(C.length,1);for(let b=0;b<C.length;b++)v.set(b,0,C[b]);return v}static zeros(C,v){return new j(C,v)}static ones(C,v){return new j(C,v).fill(1)}static rand(C,v,b={}){if(typeof b!="object")throw new TypeError("options must be an object");const{random:I=Math.random}=b;let A=new j(C,v);for(let G=0;G<C;G++)for(let U=0;U<v;U++)A.set(G,U,I());return A}static randInt(C,v,b={}){if(typeof b!="object")throw new TypeError("options must be an object");const{min:I=0,max:A=1e3,random:G=Math.random}=b;if(!Number.isInteger(I))throw new TypeError("min must be an integer");if(!Number.isInteger(A))throw new TypeError("max must be an integer");if(I>=A)throw new RangeError("min must be smaller than max");let U=A-I,W=new j(C,v);for(let q=0;q<C;q++)for(let ae=0;ae<v;ae++){let Z=I+Math.round(G()*U);W.set(q,ae,Z)}return W}static eye(C,v,b){v===void 0&&(v=C),b===void 0&&(b=1);let I=Math.min(C,v),A=this.zeros(C,v);for(let G=0;G<I;G++)A.set(G,G,b);return A}static diag(C,v,b){let I=C.length;v===void 0&&(v=I),b===void 0&&(b=v);let A=Math.min(I,v,b),G=this.zeros(v,b);for(let U=0;U<A;U++)G.set(U,U,C[U]);return G}static min(C,v){C=this.checkMatrix(C),v=this.checkMatrix(v);let b=C.rows,I=C.columns,A=new j(b,I);for(let G=0;G<b;G++)for(let U=0;U<I;U++)A.set(G,U,Math.min(C.get(G,U),v.get(G,U)));return A}static max(C,v){C=this.checkMatrix(C),v=this.checkMatrix(v);let b=C.rows,I=C.columns,A=new this(b,I);for(let G=0;G<b;G++)for(let U=0;U<I;U++)A.set(G,U,Math.max(C.get(G,U),v.get(G,U)));return A}static checkMatrix(C){return re.isMatrix(C)?C:new j(C)}static isMatrix(C){return C!=null&&C.klass==="Matrix"}get size(){return this.rows*this.columns}apply(C){if(typeof C!="function")throw new TypeError("callback must be a function");for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)C.call(this,v,b);return this}to1DArray(){let C=[];for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)C.push(this.get(v,b));return C}to2DArray(){let C=[];for(let v=0;v<this.rows;v++){C.push([]);for(let b=0;b<this.columns;b++)C[v].push(this.get(v,b))}return C}toJSON(){return this.to2DArray()}isRowVector(){return this.rows===1}isColumnVector(){return this.columns===1}isVector(){return this.rows===1||this.columns===1}isSquare(){return this.rows===this.columns}isEmpty(){return this.rows===0||this.columns===0}isSymmetric(){if(this.isSquare()){for(let C=0;C<this.rows;C++)for(let v=0;v<=C;v++)if(this.get(C,v)!==this.get(v,C))return!1;return!0}return!1}isDistance(){if(!this.isSymmetric())return!1;for(let C=0;C<this.rows;C++)if(this.get(C,C)!==0)return!1;return!0}isEchelonForm(){let C=0,v=0,b=-1,I=!0,A=!1;for(;C<this.rows&&I;){for(v=0,A=!1;v<this.columns&&A===!1;)this.get(C,v)===0?v++:this.get(C,v)===1&&v>b?(A=!0,b=v):(I=!1,A=!0);C++}return I}isReducedEchelonForm(){let C=0,v=0,b=-1,I=!0,A=!1;for(;C<this.rows&&I;){for(v=0,A=!1;v<this.columns&&A===!1;)this.get(C,v)===0?v++:this.get(C,v)===1&&v>b?(A=!0,b=v):(I=!1,A=!0);for(let G=v+1;G<this.rows;G++)this.get(C,G)!==0&&(I=!1);C++}return I}echelonForm(){let C=this.clone(),v=0,b=0;for(;v<C.rows&&b<C.columns;){let I=v;for(let A=v;A<C.rows;A++)C.get(A,b)>C.get(I,b)&&(I=A);if(C.get(I,b)===0)b++;else{C.swapRows(v,I);let A=C.get(v,b);for(let G=b;G<C.columns;G++)C.set(v,G,C.get(v,G)/A);for(let G=v+1;G<C.rows;G++){let U=C.get(G,b)/C.get(v,b);C.set(G,b,0);for(let W=b+1;W<C.columns;W++)C.set(G,W,C.get(G,W)-C.get(v,W)*U)}v++,b++}}return C}reducedEchelonForm(){let C=this.echelonForm(),v=C.columns,b=C.rows,I=b-1;for(;I>=0;)if(C.maxRow(I)===0)I--;else{let A=0,G=!1;for(;A<b&&G===!1;)C.get(I,A)===1?G=!0:A++;for(let U=0;U<I;U++){let W=C.get(U,A);for(let q=A;q<v;q++){let ae=C.get(U,q)-W*C.get(I,q);C.set(U,q,ae)}}I--}return C}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(C={}){if(typeof C!="object")throw new TypeError("options must be an object");const{rows:v=1,columns:b=1}=C;if(!Number.isInteger(v)||v<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(b)||b<=0)throw new TypeError("columns must be a positive integer");let I=new j(this.rows*v,this.columns*b);for(let A=0;A<v;A++)for(let G=0;G<b;G++)I.setSubMatrix(this,this.rows*A,this.columns*G);return I}fill(C){for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,C);return this}neg(){return this.mulS(-1)}getRow(C){u(this,C);let v=[];for(let b=0;b<this.columns;b++)v.push(this.get(C,b));return v}getRowVector(C){return j.rowVector(this.getRow(C))}setRow(C,v){u(this,C),v=d(this,v);for(let b=0;b<this.columns;b++)this.set(C,b,v[b]);return this}swapRows(C,v){u(this,C),u(this,v);for(let b=0;b<this.columns;b++){let I=this.get(C,b);this.set(C,b,this.get(v,b)),this.set(v,b,I)}return this}getColumn(C){h(this,C);let v=[];for(let b=0;b<this.rows;b++)v.push(this.get(b,C));return v}getColumnVector(C){return j.columnVector(this.getColumn(C))}setColumn(C,v){h(this,C),v=g(this,v);for(let b=0;b<this.rows;b++)this.set(b,C,v[b]);return this}swapColumns(C,v){h(this,C),h(this,v);for(let b=0;b<this.rows;b++){let I=this.get(b,C);this.set(b,C,this.get(b,v)),this.set(b,v,I)}return this}addRowVector(C){C=d(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)+C[b]);return this}subRowVector(C){C=d(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)-C[b]);return this}mulRowVector(C){C=d(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)*C[b]);return this}divRowVector(C){C=d(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)/C[b]);return this}addColumnVector(C){C=g(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)+C[v]);return this}subColumnVector(C){C=g(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)-C[v]);return this}mulColumnVector(C){C=g(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)*C[v]);return this}divColumnVector(C){C=g(this,C);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)this.set(v,b,this.get(v,b)/C[v]);return this}mulRow(C,v){u(this,C);for(let b=0;b<this.columns;b++)this.set(C,b,this.get(C,b)*v);return this}mulColumn(C,v){h(this,C);for(let b=0;b<this.rows;b++)this.set(b,C,this.get(b,C)*v);return this}max(C){if(this.isEmpty())return NaN;switch(C){case"row":{const v=new Array(this.rows).fill(Number.NEGATIVE_INFINITY);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)>v[b]&&(v[b]=this.get(b,I));return v}case"column":{const v=new Array(this.columns).fill(Number.NEGATIVE_INFINITY);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)>v[I]&&(v[I]=this.get(b,I));return v}case void 0:{let v=this.get(0,0);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)>v&&(v=this.get(b,I));return v}default:throw new Error(`invalid option: ${C}`)}}maxIndex(){_(this);let C=this.get(0,0),v=[0,0];for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)>C&&(C=this.get(b,I),v[0]=b,v[1]=I);return v}min(C){if(this.isEmpty())return NaN;switch(C){case"row":{const v=new Array(this.rows).fill(Number.POSITIVE_INFINITY);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)<v[b]&&(v[b]=this.get(b,I));return v}case"column":{const v=new Array(this.columns).fill(Number.POSITIVE_INFINITY);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)<v[I]&&(v[I]=this.get(b,I));return v}case void 0:{let v=this.get(0,0);for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)<v&&(v=this.get(b,I));return v}default:throw new Error(`invalid option: ${C}`)}}minIndex(){_(this);let C=this.get(0,0),v=[0,0];for(let b=0;b<this.rows;b++)for(let I=0;I<this.columns;I++)this.get(b,I)<C&&(C=this.get(b,I),v[0]=b,v[1]=I);return v}maxRow(C){if(u(this,C),this.isEmpty())return NaN;let v=this.get(C,0);for(let b=1;b<this.columns;b++)this.get(C,b)>v&&(v=this.get(C,b));return v}maxRowIndex(C){u(this,C),_(this);let v=this.get(C,0),b=[C,0];for(let I=1;I<this.columns;I++)this.get(C,I)>v&&(v=this.get(C,I),b[1]=I);return b}minRow(C){if(u(this,C),this.isEmpty())return NaN;let v=this.get(C,0);for(let b=1;b<this.columns;b++)this.get(C,b)<v&&(v=this.get(C,b));return v}minRowIndex(C){u(this,C),_(this);let v=this.get(C,0),b=[C,0];for(let I=1;I<this.columns;I++)this.get(C,I)<v&&(v=this.get(C,I),b[1]=I);return b}maxColumn(C){if(h(this,C),this.isEmpty())return NaN;let v=this.get(0,C);for(let b=1;b<this.rows;b++)this.get(b,C)>v&&(v=this.get(b,C));return v}maxColumnIndex(C){h(this,C),_(this);let v=this.get(0,C),b=[0,C];for(let I=1;I<this.rows;I++)this.get(I,C)>v&&(v=this.get(I,C),b[0]=I);return b}minColumn(C){if(h(this,C),this.isEmpty())return NaN;let v=this.get(0,C);for(let b=1;b<this.rows;b++)this.get(b,C)<v&&(v=this.get(b,C));return v}minColumnIndex(C){h(this,C),_(this);let v=this.get(0,C),b=[0,C];for(let I=1;I<this.rows;I++)this.get(I,C)<v&&(v=this.get(I,C),b[0]=I);return b}diag(){let C=Math.min(this.rows,this.columns),v=[];for(let b=0;b<C;b++)v.push(this.get(b,b));return v}norm(C="frobenius"){switch(C){case"max":return this.max();case"frobenius":return Math.sqrt(this.dot(this));default:throw new RangeError(`unknown norm type: ${C}`)}}cumulativeSum(){let C=0;for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)C+=this.get(v,b),this.set(v,b,C);return this}dot(C){re.isMatrix(C)&&(C=C.to1DArray());let v=this.to1DArray();if(v.length!==C.length)throw new RangeError("vectors do not have the same size");let b=0;for(let I=0;I<v.length;I++)b+=v[I]*C[I];return b}mmul(C){C=j.checkMatrix(C);let v=this.rows,b=this.columns,I=C.columns,A=new j(v,I),G=new Float64Array(b);for(let U=0;U<I;U++){for(let W=0;W<b;W++)G[W]=C.get(W,U);for(let W=0;W<v;W++){let q=0;for(let ae=0;ae<b;ae++)q+=this.get(W,ae)*G[ae];A.set(W,U,q)}}return A}mpow(C){if(!this.isSquare())throw new RangeError("Matrix must be square");if(!Number.isInteger(C)||C<0)throw new RangeError("Exponent must be a non-negative integer");let v=j.eye(this.rows),b=this;for(let I=C;I>1;I/=2)I&1&&(v=v.mmul(b)),b=b.mmul(b);return v}strassen2x2(C){C=j.checkMatrix(C);let v=new j(2,2);const b=this.get(0,0),I=C.get(0,0),A=this.get(0,1),G=C.get(0,1),U=this.get(1,0),W=C.get(1,0),q=this.get(1,1),ae=C.get(1,1),Z=(b+q)*(I+ae),me=(U+q)*I,_e=b*(G-ae),pe=q*(W-I),ye=(b+A)*ae,Ge=(U-b)*(I+G),ee=(A-q)*(W+ae),Ne=Z+pe-ye+ee,He=_e+ye,ot=me+pe,ct=Z-me+_e+Ge;return v.set(0,0,Ne),v.set(0,1,He),v.set(1,0,ot),v.set(1,1,ct),v}strassen3x3(C){C=j.checkMatrix(C);let v=new j(3,3);const b=this.get(0,0),I=this.get(0,1),A=this.get(0,2),G=this.get(1,0),U=this.get(1,1),W=this.get(1,2),q=this.get(2,0),ae=this.get(2,1),Z=this.get(2,2),me=C.get(0,0),_e=C.get(0,1),pe=C.get(0,2),ye=C.get(1,0),Ge=C.get(1,1),ee=C.get(1,2),Ne=C.get(2,0),He=C.get(2,1),ot=C.get(2,2),ct=(b+I+A-G-U-ae-Z)*Ge,It=(b-G)*(-_e+Ge),Qe=U*(-me+_e+ye-Ge-ee-Ne+ot),et=(-b+G+U)*(me-_e+Ge),_t=(G+U)*(-me+_e),oe=b*me,Ae=(-b+q+ae)*(me-pe+ee),Ke=(-b+q)*(pe-ee),De=(q+ae)*(-me+pe),Nt=(b+I+A-U-W-q-ae)*ee,St=ae*(-me+pe+ye-Ge-ee-Ne+He),Rt=(-A+ae+Z)*(Ge+Ne-He),Mt=(A-Z)*(Ge-He),Xt=A*Ne,dn=(ae+Z)*(-Ne+He),Gt=(-A+U+W)*(ee+Ne-ot),bn=(A-W)*(ee-ot),yn=(U+W)*(-Ne+ot),wt=I*ye,Ht=W*He,Jt=G*pe,sn=q*_e,Vt=Z*ot,jr=oe+Xt+wt,Zr=ct+et+_t+oe+Rt+Xt+dn,Nr=oe+Ae+De+Nt+Xt+Gt+yn,zs=It+Qe+et+oe+Xt+Gt+bn,Jr=It+et+_t+oe+Ht,Rr=Xt+Gt+bn+yn+Jt,Dr=oe+Ae+Ke+St+Rt+Mt+Xt,Qn=Rt+Mt+Xt+dn+sn,Qr=oe+Ae+Ke+De+Vt;return v.set(0,0,jr),v.set(0,1,Zr),v.set(0,2,Nr),v.set(1,0,zs),v.set(1,1,Jr),v.set(1,2,Rr),v.set(2,0,Dr),v.set(2,1,Qn),v.set(2,2,Qr),v}mmulStrassen(C){C=j.checkMatrix(C);let v=this.clone(),b=v.rows,I=v.columns,A=C.rows,G=C.columns;I!==A&&console.warn(`Multiplying ${b} x ${I} and ${A} x ${G} matrix: dimensions do not match.`);function U(Z,me,_e){let pe=Z.rows,ye=Z.columns;if(pe===me&&ye===_e)return Z;{let Ge=re.zeros(me,_e);return Ge=Ge.setSubMatrix(Z,0,0),Ge}}let W=Math.max(b,A),q=Math.max(I,G);v=U(v,W,q),C=U(C,W,q);function ae(Z,me,_e,pe){if(_e<=512||pe<=512)return Z.mmul(me);_e%2===1&&pe%2===1?(Z=U(Z,_e+1,pe+1),me=U(me,_e+1,pe+1)):_e%2===1?(Z=U(Z,_e+1,pe),me=U(me,_e+1,pe)):pe%2===1&&(Z=U(Z,_e,pe+1),me=U(me,_e,pe+1));let ye=parseInt(Z.rows/2,10),Ge=parseInt(Z.columns/2,10),ee=Z.subMatrix(0,ye-1,0,Ge-1),Ne=me.subMatrix(0,ye-1,0,Ge-1),He=Z.subMatrix(0,ye-1,Ge,Z.columns-1),ot=me.subMatrix(0,ye-1,Ge,me.columns-1),ct=Z.subMatrix(ye,Z.rows-1,0,Ge-1),It=me.subMatrix(ye,me.rows-1,0,Ge-1),Qe=Z.subMatrix(ye,Z.rows-1,Ge,Z.columns-1),et=me.subMatrix(ye,me.rows-1,Ge,me.columns-1),_t=ae(re.add(ee,Qe),re.add(Ne,et),ye,Ge),oe=ae(re.add(ct,Qe),Ne,ye,Ge),Ae=ae(ee,re.sub(ot,et),ye,Ge),Ke=ae(Qe,re.sub(It,Ne),ye,Ge),De=ae(re.add(ee,He),et,ye,Ge),Nt=ae(re.sub(ct,ee),re.add(Ne,ot),ye,Ge),St=ae(re.sub(He,Qe),re.add(It,et),ye,Ge),Rt=re.add(_t,Ke);Rt.sub(De),Rt.add(St);let Mt=re.add(Ae,De),Xt=re.add(oe,Ke),dn=re.sub(_t,oe);dn.add(Ae),dn.add(Nt);let Gt=re.zeros(2*Rt.rows,2*Rt.columns);return Gt=Gt.setSubMatrix(Rt,0,0),Gt=Gt.setSubMatrix(Mt,Rt.rows,0),Gt=Gt.setSubMatrix(Xt,0,Rt.columns),Gt=Gt.setSubMatrix(dn,Rt.rows,Rt.columns),Gt.subMatrix(0,_e-1,0,pe-1)}return ae(v,C,W,q)}scaleRows(C={}){if(typeof C!="object")throw new TypeError("options must be an object");const{min:v=0,max:b=1}=C;if(!Number.isFinite(v))throw new TypeError("min must be a number");if(!Number.isFinite(b))throw new TypeError("max must be a number");if(v>=b)throw new RangeError("min must be smaller than max");let I=new j(this.rows,this.columns);for(let A=0;A<this.rows;A++){const G=this.getRow(A);G.length>0&&e(G,{min:v,max:b,output:G}),I.setRow(A,G)}return I}scaleColumns(C={}){if(typeof C!="object")throw new TypeError("options must be an object");const{min:v=0,max:b=1}=C;if(!Number.isFinite(v))throw new TypeError("min must be a number");if(!Number.isFinite(b))throw new TypeError("max must be a number");if(v>=b)throw new RangeError("min must be smaller than max");let I=new j(this.rows,this.columns);for(let A=0;A<this.columns;A++){const G=this.getColumn(A);G.length&&e(G,{min:v,max:b,output:G}),I.setColumn(A,G)}return I}flipRows(){const C=Math.ceil(this.columns/2);for(let v=0;v<this.rows;v++)for(let b=0;b<C;b++){let I=this.get(v,b),A=this.get(v,this.columns-1-b);this.set(v,b,A),this.set(v,this.columns-1-b,I)}return this}flipColumns(){const C=Math.ceil(this.rows/2);for(let v=0;v<this.columns;v++)for(let b=0;b<C;b++){let I=this.get(b,v),A=this.get(this.rows-1-b,v);this.set(b,v,A),this.set(this.rows-1-b,v,I)}return this}kroneckerProduct(C){C=j.checkMatrix(C);let v=this.rows,b=this.columns,I=C.rows,A=C.columns,G=new j(v*I,b*A);for(let U=0;U<v;U++)for(let W=0;W<b;W++)for(let q=0;q<I;q++)for(let ae=0;ae<A;ae++)G.set(I*U+q,A*W+ae,this.get(U,W)*C.get(q,ae));return G}kroneckerSum(C){if(C=j.checkMatrix(C),!this.isSquare()||!C.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let v=this.rows,b=C.rows,I=this.kroneckerProduct(j.eye(b,b)),A=j.eye(v,v).kroneckerProduct(C);return I.add(A)}transpose(){let C=new j(this.columns,this.rows);for(let v=0;v<this.rows;v++)for(let b=0;b<this.columns;b++)C.set(b,v,this.get(v,b));return C}sortRows(C=fe){for(let v=0;v<this.rows;v++)this.setRow(v,this.getRow(v).sort(C));return this}sortColumns(C=fe){for(let v=0;v<this.columns;v++)this.setColumn(v,this.getColumn(v).sort(C));return this}subMatrix(C,v,b,I){w(this,C,v,b,I);let A=new j(v-C+1,I-b+1);for(let G=C;G<=v;G++)for(let U=b;U<=I;U++)A.set(G-C,U-b,this.get(G,U));return A}subMatrixRow(C,v,b){if(v===void 0&&(v=0),b===void 0&&(b=this.columns-1),v>b||v<0||v>=this.columns||b<0||b>=this.columns)throw new RangeError("Argument out of range");let I=new j(C.length,b-v+1);for(let A=0;A<C.length;A++)for(let G=v;G<=b;G++){if(C[A]<0||C[A]>=this.rows)throw new RangeError(`Row index out of range: ${C[A]}`);I.set(A,G-v,this.get(C[A],G))}return I}subMatrixColumn(C,v,b){if(v===void 0&&(v=0),b===void 0&&(b=this.rows-1),v>b||v<0||v>=this.rows||b<0||b>=this.rows)throw new RangeError("Argument out of range");let I=new j(b-v+1,C.length);for(let A=0;A<C.length;A++)for(let G=v;G<=b;G++){if(C[A]<0||C[A]>=this.columns)throw new RangeError(`Column index out of range: ${C[A]}`);I.set(G-v,A,this.get(G,C[A]))}return I}setSubMatrix(C,v,b){if(C=j.checkMatrix(C),C.isEmpty())return this;let I=v+C.rows-1,A=b+C.columns-1;w(this,v,I,b,A);for(let G=0;G<C.rows;G++)for(let U=0;U<C.columns;U++)this.set(v+G,b+U,C.get(G,U));return this}selection(C,v){x(this,C),y(this,v);let b=new j(C.length,v.length);for(let I=0;I<C.length;I++){let A=C[I];for(let G=0;G<v.length;G++){let U=v[G];b.set(I,G,this.get(A,U))}}return b}trace(){let C=Math.min(this.rows,this.columns),v=0;for(let b=0;b<C;b++)v+=this.get(b,b);return v}clone(){return this.constructor.copy(this,new j(this.rows,this.columns))}static copy(C,v){for(const[b,I,A]of C.entries())v.set(b,I,A);return v}sum(C){switch(C){case"row":return T(this);case"column":return k(this);case void 0:return P(this);default:throw new Error(`invalid option: ${C}`)}}product(C){switch(C){case"row":return L(this);case"column":return D(this);case void 0:return M(this);default:throw new Error(`invalid option: ${C}`)}}mean(C){const v=this.sum(C);switch(C){case"row":{for(let b=0;b<this.rows;b++)v[b]/=this.columns;return v}case"column":{for(let b=0;b<this.columns;b++)v[b]/=this.rows;return v}case void 0:return v/this.size;default:throw new Error(`invalid option: ${C}`)}}variance(C,v={}){if(typeof C=="object"&&(v=C,C=void 0),typeof v!="object")throw new TypeError("options must be an object");const{unbiased:b=!0,mean:I=this.mean(C)}=v;if(typeof b!="boolean")throw new TypeError("unbiased must be a boolean");switch(C){case"row":{if(!n.isAnyArray(I))throw new TypeError("mean must be an array");return O(this,b,I)}case"column":{if(!n.isAnyArray(I))throw new TypeError("mean must be an array");return R(this,b,I)}case void 0:{if(typeof I!="number")throw new TypeError("mean must be a number");return z(this,b,I)}default:throw new Error(`invalid option: ${C}`)}}standardDeviation(C,v){typeof C=="object"&&(v=C,C=void 0);const b=this.variance(C,v);if(C===void 0)return Math.sqrt(b);for(let I=0;I<b.length;I++)b[I]=Math.sqrt(b[I]);return b}center(C,v={}){if(typeof C=="object"&&(v=C,C=void 0),typeof v!="object")throw new TypeError("options must be an object");const{center:b=this.mean(C)}=v;switch(C){case"row":{if(!n.isAnyArray(b))throw new TypeError("center must be an array");return X(this,b),this}case"column":{if(!n.isAnyArray(b))throw new TypeError("center must be an array");return K(this,b),this}case void 0:{if(typeof b!="number")throw new TypeError("center must be a number");return Y(this,b),this}default:throw new Error(`invalid option: ${C}`)}}scale(C,v={}){if(typeof C=="object"&&(v=C,C=void 0),typeof v!="object")throw new TypeError("options must be an object");let b=v.scale;switch(C){case"row":{if(b===void 0)b=te(this);else if(!n.isAnyArray(b))throw new TypeError("scale must be an array");return ie(this,b),this}case"column":{if(b===void 0)b=Q(this);else if(!n.isAnyArray(b))throw new TypeError("scale must be an array");return se(this,b),this}case void 0:{if(b===void 0)b=le(this);else if(typeof b!="number")throw new TypeError("scale must be a number");return he(this,b),this}default:throw new Error(`invalid option: ${C}`)}}toString(C){return i(this,C)}[Symbol.iterator](){return this.entries()}*entries(){for(let C=0;C<this.rows;C++)for(let v=0;v<this.columns;v++)yield[C,v,this.get(C,v)]}*values(){for(let C=0;C<this.rows;C++)for(let v=0;v<this.columns;v++)yield this.get(C,v)}}re.prototype.klass="Matrix",typeof Symbol<"u"&&(re.prototype[Symbol.for("nodejs.util.inspect.custom")]=s);function fe(N,C){return N-C}function ge(N){return N.every(C=>typeof C=="number")}re.random=re.rand,re.randomInt=re.randInt,re.diagonal=re.diag,re.prototype.diagonal=re.prototype.diag,re.identity=re.eye,re.prototype.negate=re.prototype.neg,re.prototype.tensorProduct=re.prototype.kroneckerProduct;const tn=class tn extends re{constructor(v,b){super();Yi(this,en);fl(this,"data");if(tn.isMatrix(v))ji(this,en,Zi).call(this,v.rows,v.columns),tn.copy(v,this);else if(Number.isInteger(v)&&v>=0)ji(this,en,Zi).call(this,v,b);else if(n.isAnyArray(v)){const I=v;if(v=I.length,b=v?I[0].length:0,typeof b!="number")throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let A=0;A<v;A++){if(I[A].length!==b)throw new RangeError("Inconsistent array dimensions");if(!ge(I[A]))throw new TypeError("Input data contains non-numeric values");this.data.push(Float64Array.from(I[A]))}this.rows=v,this.columns=b}else throw new TypeError("First argument must be a positive number or an array")}set(v,b,I){return this.data[v][b]=I,this}get(v,b){return this.data[v][b]}removeRow(v){return u(this,v),this.data.splice(v,1),this.rows-=1,this}addRow(v,b){return b===void 0&&(b=v,v=this.rows),u(this,v,!0),b=Float64Array.from(d(this,b)),this.data.splice(v,0,b),this.rows+=1,this}removeColumn(v){h(this,v);for(let b=0;b<this.rows;b++){const I=new Float64Array(this.columns-1);for(let A=0;A<v;A++)I[A]=this.data[b][A];for(let A=v+1;A<this.columns;A++)I[A-1]=this.data[b][A];this.data[b]=I}return this.columns-=1,this}addColumn(v,b){typeof b>"u"&&(b=v,v=this.columns),h(this,v,!0),b=g(this,b);for(let I=0;I<this.rows;I++){const A=new Float64Array(this.columns+1);let G=0;for(;G<v;G++)A[G]=this.data[I][G];for(A[G++]=b[I];G<this.columns+1;G++)A[G]=this.data[I][G-1];this.data[I]=A}return this.columns+=1,this}};en=new WeakSet,Zi=function(v,b){if(this.data=[],Number.isInteger(b)&&b>=0)for(let I=0;I<v;I++)this.data.push(new Float64Array(b));else throw new TypeError("nColumns must be a positive integer");this.rows=v,this.columns=b};let j=tn;c(re,j);const hn=class hn extends re{constructor(v){super();Yi(this,Ft);if(j.isMatrix(v)){if(!v.isSymmetric())throw new TypeError("not symmetric data");Bs(this,Ft,j.copy(v,new j(v.rows,v.rows)))}else if(Number.isInteger(v)&&v>=0)Bs(this,Ft,new j(v,v));else if(Bs(this,Ft,new j(v)),!this.isSymmetric())throw new TypeError("not symmetric data")}get size(){return zn(this,Ft).size}get rows(){return zn(this,Ft).rows}get columns(){return zn(this,Ft).columns}get diagonalSize(){return this.rows}static isSymmetricMatrix(v){return j.isMatrix(v)&&v.klassType==="SymmetricMatrix"}static zeros(v){return new this(v)}static ones(v){return new this(v).fill(1)}clone(){const v=new hn(this.diagonalSize);for(const[b,I,A]of this.upperRightEntries())v.set(b,I,A);return v}toMatrix(){return new j(this)}get(v,b){return zn(this,Ft).get(v,b)}set(v,b,I){return zn(this,Ft).set(v,b,I),zn(this,Ft).set(b,v,I),this}removeCross(v){return zn(this,Ft).removeRow(v),zn(this,Ft).removeColumn(v),this}addCross(v,b){b===void 0&&(b=v,v=this.diagonalSize);const I=b.slice();return I.splice(v,1),zn(this,Ft).addRow(v,I),zn(this,Ft).addColumn(v,b),this}applyMask(v){if(v.length!==this.diagonalSize)throw new RangeError("Mask size do not match with matrix size");const b=[];for(const[I,A]of v.entries())A||b.push(I);b.reverse();for(const I of b)this.removeCross(I);return this}toCompact(){const{diagonalSize:v}=this,b=new Array(v*(v+1)/2);for(let I=0,A=0,G=0;G<b.length;G++)b[G]=this.get(A,I),++I>=v&&(I=++A);return b}static fromCompact(v){const b=v.length,I=(Math.sqrt(8*b+1)-1)/2;if(!Number.isInteger(I))throw new TypeError(`This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(v)}`);const A=new hn(I);for(let G=0,U=0,W=0;W<b;W++)A.set(G,U,v[W]),++G>=I&&(G=++U);return A}*upperRightEntries(){for(let v=0,b=0;v<this.diagonalSize;void 0){const I=this.get(v,b);yield[v,b,I],++b>=this.diagonalSize&&(b=++v)}}*upperRightValues(){for(let v=0,b=0;v<this.diagonalSize;void 0)yield this.get(v,b),++b>=this.diagonalSize&&(b=++v)}};Ft=new WeakMap;let xe=hn;xe.prototype.klassType="SymmetricMatrix";class Ee extends xe{static isDistanceMatrix(C){return xe.isSymmetricMatrix(C)&&C.klassSubType==="DistanceMatrix"}constructor(C){if(super(C),!this.isDistance())throw new TypeError("Provided arguments do no produce a distance matrix")}set(C,v,b){return C===v&&(b=0),super.set(C,v,b)}addCross(C,v){return v===void 0&&(v=C,C=this.diagonalSize),v=v.slice(),v[C]=0,super.addCross(C,v)}toSymmetricMatrix(){return new xe(this)}clone(){const C=new Ee(this.diagonalSize);for(const[v,b,I]of this.upperRightEntries())v!==b&&C.set(v,b,I);return C}toCompact(){const{diagonalSize:C}=this,v=(C-1)*C/2,b=new Array(v);for(let I=1,A=0,G=0;G<b.length;G++)b[G]=this.get(A,I),++I>=C&&(I=++A+1);return b}static fromCompact(C){const v=C.length;if(v===0)return new this(0);const b=(Math.sqrt(8*v+1)+1)/2;if(!Number.isInteger(b))throw new TypeError(`This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(C)}`);const I=new this(b);for(let A=1,G=0,U=0;U<v;U++)I.set(A,G,C[U]),++A>=b&&(A=++G+1);return I}}Ee.prototype.klassSubType="DistanceMatrix";class Se extends re{constructor(C,v,b){super(),this.matrix=C,this.rows=v,this.columns=b}}class Ce extends Se{constructor(C,v){h(C,v),super(C,C.rows,1),this.column=v}set(C,v,b){return this.matrix.set(C,this.column,b),this}get(C){return this.matrix.get(C,this.column)}}class Me extends Se{constructor(C,v){y(C,v),super(C,C.rows,v.length),this.columnIndices=v}set(C,v,b){return this.matrix.set(C,this.columnIndices[v],b),this}get(C,v){return this.matrix.get(C,this.columnIndices[v])}}class Fe extends Se{constructor(C){super(C,C.rows,C.columns)}set(C,v,b){return this.matrix.set(C,this.columns-v-1,b),this}get(C,v){return this.matrix.get(C,this.columns-v-1)}}class Xe extends Se{constructor(C){super(C,C.rows,C.columns)}set(C,v,b){return this.matrix.set(this.rows-C-1,v,b),this}get(C,v){return this.matrix.get(this.rows-C-1,v)}}class qe extends Se{constructor(C,v){u(C,v),super(C,1,C.columns),this.row=v}set(C,v,b){return this.matrix.set(this.row,v,b),this}get(C,v){return this.matrix.get(this.row,v)}}class ke extends Se{constructor(C,v){x(C,v),super(C,v.length,C.columns),this.rowIndices=v}set(C,v,b){return this.matrix.set(this.rowIndices[C],v,b),this}get(C,v){return this.matrix.get(this.rowIndices[C],v)}}class we extends Se{constructor(C,v,b){x(C,v),y(C,b),super(C,v.length,b.length),this.rowIndices=v,this.columnIndices=b}set(C,v,b){return this.matrix.set(this.rowIndices[C],this.columnIndices[v],b),this}get(C,v){return this.matrix.get(this.rowIndices[C],this.columnIndices[v])}}class Ye extends Se{constructor(C,v,b,I,A){w(C,v,b,I,A),super(C,b-v+1,A-I+1),this.startRow=v,this.startColumn=I}set(C,v,b){return this.matrix.set(this.startRow+C,this.startColumn+v,b),this}get(C,v){return this.matrix.get(this.startRow+C,this.startColumn+v)}}class Oe extends Se{constructor(C){super(C,C.columns,C.rows)}set(C,v,b){return this.matrix.set(v,C,b),this}get(C,v){return this.matrix.get(v,C)}}class Ve extends re{constructor(C,v={}){const{rows:b=1}=v;if(C.length%b!==0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=b,this.columns=C.length/b,this.data=C}set(C,v,b){let I=this._calculateIndex(C,v);return this.data[I]=b,this}get(C,v){let b=this._calculateIndex(C,v);return this.data[b]}_calculateIndex(C,v){return C*this.columns+v}}class de extends re{constructor(C){super(),this.data=C,this.rows=C.length,this.columns=C[0].length}set(C,v,b){return this.data[C][v]=b,this}get(C,v){return this.data[C][v]}}function Pe(N,C){if(n.isAnyArray(N))return N[0]&&n.isAnyArray(N[0])?new de(N):new Ve(N,C);throw new Error("the argument is not an array")}class Le{constructor(C){C=de.checkMatrix(C);let v=C.clone(),b=v.rows,I=v.columns,A=new Float64Array(b),G=1,U,W,q,ae,Z,me,_e,pe,ye;for(U=0;U<b;U++)A[U]=U;for(pe=new Float64Array(b),W=0;W<I;W++){for(U=0;U<b;U++)pe[U]=v.get(U,W);for(U=0;U<b;U++){for(ye=Math.min(U,W),Z=0,q=0;q<ye;q++)Z+=v.get(U,q)*pe[q];pe[U]-=Z,v.set(U,W,pe[U])}for(ae=W,U=W+1;U<b;U++)Math.abs(pe[U])>Math.abs(pe[ae])&&(ae=U);if(ae!==W){for(q=0;q<I;q++)me=v.get(ae,q),v.set(ae,q,v.get(W,q)),v.set(W,q,me);_e=A[ae],A[ae]=A[W],A[W]=_e,G=-G}if(W<b&&v.get(W,W)!==0)for(U=W+1;U<b;U++)v.set(U,W,v.get(U,W)/v.get(W,W))}this.LU=v,this.pivotVector=A,this.pivotSign=G}isSingular(){let C=this.LU,v=C.columns;for(let b=0;b<v;b++)if(C.get(b,b)===0)return!0;return!1}solve(C){C=j.checkMatrix(C);let v=this.LU;if(v.rows!==C.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let I=C.columns,A=C.subMatrixRow(this.pivotVector,0,I-1),G=v.columns,U,W,q;for(q=0;q<G;q++)for(U=q+1;U<G;U++)for(W=0;W<I;W++)A.set(U,W,A.get(U,W)-A.get(q,W)*v.get(U,q));for(q=G-1;q>=0;q--){for(W=0;W<I;W++)A.set(q,W,A.get(q,W)/v.get(q,q));for(U=0;U<q;U++)for(W=0;W<I;W++)A.set(U,W,A.get(U,W)-A.get(q,W)*v.get(U,q))}return A}get determinant(){let C=this.LU;if(!C.isSquare())throw new Error("Matrix must be square");let v=this.pivotSign,b=C.columns;for(let I=0;I<b;I++)v*=C.get(I,I);return v}get lowerTriangularMatrix(){let C=this.LU,v=C.rows,b=C.columns,I=new j(v,b);for(let A=0;A<v;A++)for(let G=0;G<b;G++)A>G?I.set(A,G,C.get(A,G)):A===G?I.set(A,G,1):I.set(A,G,0);return I}get upperTriangularMatrix(){let C=this.LU,v=C.rows,b=C.columns,I=new j(v,b);for(let A=0;A<v;A++)for(let G=0;G<b;G++)A<=G?I.set(A,G,C.get(A,G)):I.set(A,G,0);return I}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function Be(N,C){let v=0;return Math.abs(N)>Math.abs(C)?(v=C/N,Math.abs(N)*Math.sqrt(1+v*v)):C!==0?(v=N/C,Math.abs(C)*Math.sqrt(1+v*v)):0}class Te{constructor(C){C=de.checkMatrix(C);let v=C.clone(),b=C.rows,I=C.columns,A=new Float64Array(I),G,U,W,q;for(W=0;W<I;W++){let ae=0;for(G=W;G<b;G++)ae=Be(ae,v.get(G,W));if(ae!==0){for(v.get(W,W)<0&&(ae=-ae),G=W;G<b;G++)v.set(G,W,v.get(G,W)/ae);for(v.set(W,W,v.get(W,W)+1),U=W+1;U<I;U++){for(q=0,G=W;G<b;G++)q+=v.get(G,W)*v.get(G,U);for(q=-q/v.get(W,W),G=W;G<b;G++)v.set(G,U,v.get(G,U)+q*v.get(G,W))}}A[W]=-ae}this.QR=v,this.Rdiag=A}solve(C){C=j.checkMatrix(C);let v=this.QR,b=v.rows;if(C.rows!==b)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let I=C.columns,A=C.clone(),G=v.columns,U,W,q,ae;for(q=0;q<G;q++)for(W=0;W<I;W++){for(ae=0,U=q;U<b;U++)ae+=v.get(U,q)*A.get(U,W);for(ae=-ae/v.get(q,q),U=q;U<b;U++)A.set(U,W,A.get(U,W)+ae*v.get(U,q))}for(q=G-1;q>=0;q--){for(W=0;W<I;W++)A.set(q,W,A.get(q,W)/this.Rdiag[q]);for(U=0;U<q;U++)for(W=0;W<I;W++)A.set(U,W,A.get(U,W)-A.get(q,W)*v.get(U,q))}return A.subMatrix(0,G-1,0,I-1)}isFullRank(){let C=this.QR.columns;for(let v=0;v<C;v++)if(this.Rdiag[v]===0)return!1;return!0}get upperTriangularMatrix(){let C=this.QR,v=C.columns,b=new j(v,v),I,A;for(I=0;I<v;I++)for(A=0;A<v;A++)I<A?b.set(I,A,C.get(I,A)):I===A?b.set(I,A,this.Rdiag[I]):b.set(I,A,0);return b}get orthogonalMatrix(){let C=this.QR,v=C.rows,b=C.columns,I=new j(v,b),A,G,U,W;for(U=b-1;U>=0;U--){for(A=0;A<v;A++)I.set(A,U,0);for(I.set(U,U,1),G=U;G<b;G++)if(C.get(U,U)!==0){for(W=0,A=U;A<v;A++)W+=C.get(A,U)*I.get(A,G);for(W=-W/C.get(U,U),A=U;A<v;A++)I.set(A,G,I.get(A,G)+W*C.get(A,U))}}return I}}class rt{constructor(C,v={}){if(C=de.checkMatrix(C),C.isEmpty())throw new Error("Matrix must be non-empty");let b=C.rows,I=C.columns;const{computeLeftSingularVectors:A=!0,computeRightSingularVectors:G=!0,autoTranspose:U=!1}=v;let W=!!A,q=!!G,ae=!1,Z;if(b<I)if(!U)Z=C.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else{Z=C.transpose(),b=Z.rows,I=Z.columns,ae=!0;let oe=W;W=q,q=oe}else Z=C.clone();let me=Math.min(b,I),_e=Math.min(b+1,I),pe=new Float64Array(_e),ye=new j(b,me),Ge=new j(I,I),ee=new Float64Array(I),Ne=new Float64Array(b),He=new Float64Array(_e);for(let oe=0;oe<_e;oe++)He[oe]=oe;let ot=Math.min(b-1,I),ct=Math.max(0,Math.min(I-2,b)),It=Math.max(ot,ct);for(let oe=0;oe<It;oe++){if(oe<ot){pe[oe]=0;for(let Ae=oe;Ae<b;Ae++)pe[oe]=Be(pe[oe],Z.get(Ae,oe));if(pe[oe]!==0){Z.get(oe,oe)<0&&(pe[oe]=-pe[oe]);for(let Ae=oe;Ae<b;Ae++)Z.set(Ae,oe,Z.get(Ae,oe)/pe[oe]);Z.set(oe,oe,Z.get(oe,oe)+1)}pe[oe]=-pe[oe]}for(let Ae=oe+1;Ae<I;Ae++){if(oe<ot&&pe[oe]!==0){let Ke=0;for(let De=oe;De<b;De++)Ke+=Z.get(De,oe)*Z.get(De,Ae);Ke=-Ke/Z.get(oe,oe);for(let De=oe;De<b;De++)Z.set(De,Ae,Z.get(De,Ae)+Ke*Z.get(De,oe))}ee[Ae]=Z.get(oe,Ae)}if(W&&oe<ot)for(let Ae=oe;Ae<b;Ae++)ye.set(Ae,oe,Z.get(Ae,oe));if(oe<ct){ee[oe]=0;for(let Ae=oe+1;Ae<I;Ae++)ee[oe]=Be(ee[oe],ee[Ae]);if(ee[oe]!==0){ee[oe+1]<0&&(ee[oe]=0-ee[oe]);for(let Ae=oe+1;Ae<I;Ae++)ee[Ae]/=ee[oe];ee[oe+1]+=1}if(ee[oe]=-ee[oe],oe+1<b&&ee[oe]!==0){for(let Ae=oe+1;Ae<b;Ae++)Ne[Ae]=0;for(let Ae=oe+1;Ae<b;Ae++)for(let Ke=oe+1;Ke<I;Ke++)Ne[Ae]+=ee[Ke]*Z.get(Ae,Ke);for(let Ae=oe+1;Ae<I;Ae++){let Ke=-ee[Ae]/ee[oe+1];for(let De=oe+1;De<b;De++)Z.set(De,Ae,Z.get(De,Ae)+Ke*Ne[De])}}if(q)for(let Ae=oe+1;Ae<I;Ae++)Ge.set(Ae,oe,ee[Ae])}}let Qe=Math.min(I,b+1);if(ot<I&&(pe[ot]=Z.get(ot,ot)),b<Qe&&(pe[Qe-1]=0),ct+1<Qe&&(ee[ct]=Z.get(ct,Qe-1)),ee[Qe-1]=0,W){for(let oe=ot;oe<me;oe++){for(let Ae=0;Ae<b;Ae++)ye.set(Ae,oe,0);ye.set(oe,oe,1)}for(let oe=ot-1;oe>=0;oe--)if(pe[oe]!==0){for(let Ae=oe+1;Ae<me;Ae++){let Ke=0;for(let De=oe;De<b;De++)Ke+=ye.get(De,oe)*ye.get(De,Ae);Ke=-Ke/ye.get(oe,oe);for(let De=oe;De<b;De++)ye.set(De,Ae,ye.get(De,Ae)+Ke*ye.get(De,oe))}for(let Ae=oe;Ae<b;Ae++)ye.set(Ae,oe,-ye.get(Ae,oe));ye.set(oe,oe,1+ye.get(oe,oe));for(let Ae=0;Ae<oe-1;Ae++)ye.set(Ae,oe,0)}else{for(let Ae=0;Ae<b;Ae++)ye.set(Ae,oe,0);ye.set(oe,oe,1)}}if(q)for(let oe=I-1;oe>=0;oe--){if(oe<ct&&ee[oe]!==0)for(let Ae=oe+1;Ae<I;Ae++){let Ke=0;for(let De=oe+1;De<I;De++)Ke+=Ge.get(De,oe)*Ge.get(De,Ae);Ke=-Ke/Ge.get(oe+1,oe);for(let De=oe+1;De<I;De++)Ge.set(De,Ae,Ge.get(De,Ae)+Ke*Ge.get(De,oe))}for(let Ae=0;Ae<I;Ae++)Ge.set(Ae,oe,0);Ge.set(oe,oe,1)}let et=Qe-1,_t=Number.EPSILON;for(;Qe>0;){let oe,Ae;for(oe=Qe-2;oe>=-1&&oe!==-1;oe--){const Ke=Number.MIN_VALUE+_t*Math.abs(pe[oe]+Math.abs(pe[oe+1]));if(Math.abs(ee[oe])<=Ke||Number.isNaN(ee[oe])){ee[oe]=0;break}}if(oe===Qe-2)Ae=4;else{let Ke;for(Ke=Qe-1;Ke>=oe&&Ke!==oe;Ke--){let De=(Ke!==Qe?Math.abs(ee[Ke]):0)+(Ke!==oe+1?Math.abs(ee[Ke-1]):0);if(Math.abs(pe[Ke])<=_t*De){pe[Ke]=0;break}}Ke===oe?Ae=3:Ke===Qe-1?Ae=1:(Ae=2,oe=Ke)}switch(oe++,Ae){case 1:{let Ke=ee[Qe-2];ee[Qe-2]=0;for(let De=Qe-2;De>=oe;De--){let Nt=Be(pe[De],Ke),St=pe[De]/Nt,Rt=Ke/Nt;if(pe[De]=Nt,De!==oe&&(Ke=-Rt*ee[De-1],ee[De-1]=St*ee[De-1]),q)for(let Mt=0;Mt<I;Mt++)Nt=St*Ge.get(Mt,De)+Rt*Ge.get(Mt,Qe-1),Ge.set(Mt,Qe-1,-Rt*Ge.get(Mt,De)+St*Ge.get(Mt,Qe-1)),Ge.set(Mt,De,Nt)}break}case 2:{let Ke=ee[oe-1];ee[oe-1]=0;for(let De=oe;De<Qe;De++){let Nt=Be(pe[De],Ke),St=pe[De]/Nt,Rt=Ke/Nt;if(pe[De]=Nt,Ke=-Rt*ee[De],ee[De]=St*ee[De],W)for(let Mt=0;Mt<b;Mt++)Nt=St*ye.get(Mt,De)+Rt*ye.get(Mt,oe-1),ye.set(Mt,oe-1,-Rt*ye.get(Mt,De)+St*ye.get(Mt,oe-1)),ye.set(Mt,De,Nt)}break}case 3:{const Ke=Math.max(Math.abs(pe[Qe-1]),Math.abs(pe[Qe-2]),Math.abs(ee[Qe-2]),Math.abs(pe[oe]),Math.abs(ee[oe])),De=pe[Qe-1]/Ke,Nt=pe[Qe-2]/Ke,St=ee[Qe-2]/Ke,Rt=pe[oe]/Ke,Mt=ee[oe]/Ke,Xt=((Nt+De)*(Nt-De)+St*St)/2,dn=De*St*(De*St);let Gt=0;(Xt!==0||dn!==0)&&(Xt<0?Gt=0-Math.sqrt(Xt*Xt+dn):Gt=Math.sqrt(Xt*Xt+dn),Gt=dn/(Xt+Gt));let bn=(Rt+De)*(Rt-De)+Gt,yn=Rt*Mt;for(let wt=oe;wt<Qe-1;wt++){let Ht=Be(bn,yn);Ht===0&&(Ht=Number.MIN_VALUE);let Jt=bn/Ht,sn=yn/Ht;if(wt!==oe&&(ee[wt-1]=Ht),bn=Jt*pe[wt]+sn*ee[wt],ee[wt]=Jt*ee[wt]-sn*pe[wt],yn=sn*pe[wt+1],pe[wt+1]=Jt*pe[wt+1],q)for(let Vt=0;Vt<I;Vt++)Ht=Jt*Ge.get(Vt,wt)+sn*Ge.get(Vt,wt+1),Ge.set(Vt,wt+1,-sn*Ge.get(Vt,wt)+Jt*Ge.get(Vt,wt+1)),Ge.set(Vt,wt,Ht);if(Ht=Be(bn,yn),Ht===0&&(Ht=Number.MIN_VALUE),Jt=bn/Ht,sn=yn/Ht,pe[wt]=Ht,bn=Jt*ee[wt]+sn*pe[wt+1],pe[wt+1]=-sn*ee[wt]+Jt*pe[wt+1],yn=sn*ee[wt+1],ee[wt+1]=Jt*ee[wt+1],W&&wt<b-1)for(let Vt=0;Vt<b;Vt++)Ht=Jt*ye.get(Vt,wt)+sn*ye.get(Vt,wt+1),ye.set(Vt,wt+1,-sn*ye.get(Vt,wt)+Jt*ye.get(Vt,wt+1)),ye.set(Vt,wt,Ht)}ee[Qe-2]=bn;break}case 4:{if(pe[oe]<=0&&(pe[oe]=pe[oe]<0?-pe[oe]:0,q))for(let Ke=0;Ke<=et;Ke++)Ge.set(Ke,oe,-Ge.get(Ke,oe));for(;oe<et&&!(pe[oe]>=pe[oe+1]);){let Ke=pe[oe];if(pe[oe]=pe[oe+1],pe[oe+1]=Ke,q&&oe<I-1)for(let De=0;De<I;De++)Ke=Ge.get(De,oe+1),Ge.set(De,oe+1,Ge.get(De,oe)),Ge.set(De,oe,Ke);if(W&&oe<b-1)for(let De=0;De<b;De++)Ke=ye.get(De,oe+1),ye.set(De,oe+1,ye.get(De,oe)),ye.set(De,oe,Ke);oe++}Qe--;break}}}if(ae){let oe=Ge;Ge=ye,ye=oe}this.m=b,this.n=I,this.s=pe,this.U=ye,this.V=Ge}solve(C){let v=C,b=this.threshold,I=this.s.length,A=j.zeros(I,I);for(let me=0;me<I;me++)Math.abs(this.s[me])<=b?A.set(me,me,0):A.set(me,me,1/this.s[me]);let G=this.U,U=this.rightSingularVectors,W=U.mmul(A),q=U.rows,ae=G.rows,Z=j.zeros(q,ae);for(let me=0;me<q;me++)for(let _e=0;_e<ae;_e++){let pe=0;for(let ye=0;ye<I;ye++)pe+=W.get(me,ye)*G.get(_e,ye);Z.set(me,_e,pe)}return Z.mmul(v)}solveForDiagonal(C){return this.solve(j.diag(C))}inverse(){let C=this.V,v=this.threshold,b=C.rows,I=C.columns,A=new j(b,this.s.length);for(let ae=0;ae<b;ae++)for(let Z=0;Z<I;Z++)Math.abs(this.s[Z])>v&&A.set(ae,Z,C.get(ae,Z)/this.s[Z]);let G=this.U,U=G.rows,W=G.columns,q=new j(b,U);for(let ae=0;ae<b;ae++)for(let Z=0;Z<U;Z++){let me=0;for(let _e=0;_e<W;_e++)me+=A.get(ae,_e)*G.get(Z,_e);q.set(ae,Z,me)}return q}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let C=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,v=0,b=this.s;for(let I=0,A=b.length;I<A;I++)b[I]>C&&v++;return v}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return j.diag(this.s)}}function st(N,C=!1){return N=de.checkMatrix(N),C?new rt(N).inverse():Ue(N,j.eye(N.rows))}function Ue(N,C,v=!1){return N=de.checkMatrix(N),C=de.checkMatrix(C),v?new rt(N).solve(C):N.isSquare()?new Le(N).solve(C):new Te(N).solve(C)}function ze(N){if(N=j.checkMatrix(N),N.isSquare()){if(N.columns===0)return 1;let C,v,b,I;if(N.columns===2)return C=N.get(0,0),v=N.get(0,1),b=N.get(1,0),I=N.get(1,1),C*I-v*b;if(N.columns===3){let A,G,U;return A=new we(N,[1,2],[1,2]),G=new we(N,[1,2],[0,2]),U=new we(N,[1,2],[0,1]),C=N.get(0,0),v=N.get(0,1),b=N.get(0,2),C*ze(A)-v*ze(G)+b*ze(U)}else return new Le(N).determinant}else throw Error("determinant can only be calculated for a square matrix")}function Ze(N,C){let v=[];for(let b=0;b<N;b++)b!==C&&v.push(b);return v}function We(N,C,v,b=1e-9,I=1e-9){if(N>I)return new Array(C.rows+1).fill(0);{let A=C.addRow(v,[0]);for(let G=0;G<A.rows;G++)Math.abs(A.get(G,0))<b&&A.set(G,0,0);return A.to1DArray()}}function it(N,C={}){const{thresholdValue:v=1e-9,thresholdError:b=1e-9}=C;N=j.checkMatrix(N);let I=N.rows,A=new j(I,I);for(let G=0;G<I;G++){let U=j.columnVector(N.getRow(G)),W=N.subMatrixRow(Ze(I,G)).transpose(),ae=new rt(W).solve(U),Z=j.sub(U,W.mmul(ae)).abs().max();A.setRow(G,We(Z,ae,G,v,b))}return A}function dt(N,C=Number.EPSILON){if(N=j.checkMatrix(N),N.isEmpty())return N.transpose();let v=new rt(N,{autoTranspose:!0}),b=v.leftSingularVectors,I=v.rightSingularVectors,A=v.diagonal;for(let G=0;G<A.length;G++)Math.abs(A[G])>C?A[G]=1/A[G]:A[G]=0;return I.mmul(j.diag(A).mmul(b.transpose()))}function nt(N,C=N,v={}){N=new j(N);let b=!1;if(typeof C=="object"&&!j.isMatrix(C)&&!n.isAnyArray(C)?(v=C,C=N,b=!0):C=new j(C),N.rows!==C.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:I=!0}=v;I&&(N=N.center("column"),b||(C=C.center("column")));const A=N.transpose().mmul(C);for(let G=0;G<A.rows;G++)for(let U=0;U<A.columns;U++)A.set(G,U,A.get(G,U)*(1/(N.rows-1)));return A}function lt(N,C=N,v={}){N=new j(N);let b=!1;if(typeof C=="object"&&!j.isMatrix(C)&&!n.isAnyArray(C)?(v=C,C=N,b=!0):C=new j(C),N.rows!==C.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:I=!0,scale:A=!0}=v;I&&(N.center("column"),b||C.center("column")),A&&(N.scale("column"),b||C.scale("column"));const G=N.standardDeviation("column",{unbiased:!0}),U=b?G:C.standardDeviation("column",{unbiased:!0}),W=N.transpose().mmul(C);for(let q=0;q<W.rows;q++)for(let ae=0;ae<W.columns;ae++)W.set(q,ae,W.get(q,ae)*(1/(G[q]*U[ae]))*(1/(N.rows-1)));return W}class ft{constructor(C,v={}){const{assumeSymmetric:b=!1}=v;if(C=de.checkMatrix(C),!C.isSquare())throw new Error("Matrix is not a square matrix");if(C.isEmpty())throw new Error("Matrix must be non-empty");let I=C.columns,A=new j(I,I),G=new Float64Array(I),U=new Float64Array(I),W=C,q,ae,Z=!1;if(b?Z=!0:Z=C.isSymmetric(),Z){for(q=0;q<I;q++)for(ae=0;ae<I;ae++)A.set(q,ae,W.get(q,ae));bt(I,U,G,A),Pt(I,U,G,A)}else{let me=new j(I,I),_e=new Float64Array(I);for(ae=0;ae<I;ae++)for(q=0;q<I;q++)me.set(q,ae,W.get(q,ae));At(I,me,_e,A),Kt(I,U,G,A,me)}this.n=I,this.e=U,this.d=G,this.V=A}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let C=this.n,v=this.e,b=this.d,I=new j(C,C),A,G;for(A=0;A<C;A++){for(G=0;G<C;G++)I.set(A,G,0);I.set(A,A,b[A]),v[A]>0?I.set(A,A+1,v[A]):v[A]<0&&I.set(A,A-1,v[A])}return I}}function bt(N,C,v,b){let I,A,G,U,W,q,ae,Z;for(W=0;W<N;W++)v[W]=b.get(N-1,W);for(U=N-1;U>0;U--){for(Z=0,G=0,q=0;q<U;q++)Z=Z+Math.abs(v[q]);if(Z===0)for(C[U]=v[U-1],W=0;W<U;W++)v[W]=b.get(U-1,W),b.set(U,W,0),b.set(W,U,0);else{for(q=0;q<U;q++)v[q]/=Z,G+=v[q]*v[q];for(I=v[U-1],A=Math.sqrt(G),I>0&&(A=-A),C[U]=Z*A,G=G-I*A,v[U-1]=I-A,W=0;W<U;W++)C[W]=0;for(W=0;W<U;W++){for(I=v[W],b.set(W,U,I),A=C[W]+b.get(W,W)*I,q=W+1;q<=U-1;q++)A+=b.get(q,W)*v[q],C[q]+=b.get(q,W)*I;C[W]=A}for(I=0,W=0;W<U;W++)C[W]/=G,I+=C[W]*v[W];for(ae=I/(G+G),W=0;W<U;W++)C[W]-=ae*v[W];for(W=0;W<U;W++){for(I=v[W],A=C[W],q=W;q<=U-1;q++)b.set(q,W,b.get(q,W)-(I*C[q]+A*v[q]));v[W]=b.get(U-1,W),b.set(U,W,0)}}v[U]=G}for(U=0;U<N-1;U++){if(b.set(N-1,U,b.get(U,U)),b.set(U,U,1),G=v[U+1],G!==0){for(q=0;q<=U;q++)v[q]=b.get(q,U+1)/G;for(W=0;W<=U;W++){for(A=0,q=0;q<=U;q++)A+=b.get(q,U+1)*b.get(q,W);for(q=0;q<=U;q++)b.set(q,W,b.get(q,W)-A*v[q])}}for(q=0;q<=U;q++)b.set(q,U+1,0)}for(W=0;W<N;W++)v[W]=b.get(N-1,W),b.set(N-1,W,0);b.set(N-1,N-1,1),C[0]=0}function Pt(N,C,v,b){let I,A,G,U,W,q,ae,Z,me,_e,pe,ye,Ge,ee,Ne,He;for(G=1;G<N;G++)C[G-1]=C[G];C[N-1]=0;let ot=0,ct=0,It=Number.EPSILON;for(q=0;q<N;q++){for(ct=Math.max(ct,Math.abs(v[q])+Math.abs(C[q])),ae=q;ae<N&&!(Math.abs(C[ae])<=It*ct);)ae++;if(ae>q)do{for(I=v[q],Z=(v[q+1]-I)/(2*C[q]),me=Be(Z,1),Z<0&&(me=-me),v[q]=C[q]/(Z+me),v[q+1]=C[q]*(Z+me),_e=v[q+1],A=I-v[q],G=q+2;G<N;G++)v[G]-=A;for(ot=ot+A,Z=v[ae],pe=1,ye=pe,Ge=pe,ee=C[q+1],Ne=0,He=0,G=ae-1;G>=q;G--)for(Ge=ye,ye=pe,He=Ne,I=pe*C[G],A=pe*Z,me=Be(Z,C[G]),C[G+1]=Ne*me,Ne=C[G]/me,pe=Z/me,Z=pe*v[G]-Ne*I,v[G+1]=A+Ne*(pe*I+Ne*v[G]),W=0;W<N;W++)A=b.get(W,G+1),b.set(W,G+1,Ne*b.get(W,G)+pe*A),b.set(W,G,pe*b.get(W,G)-Ne*A);Z=-Ne*He*Ge*ee*C[q]/_e,C[q]=Ne*Z,v[q]=pe*Z}while(Math.abs(C[q])>It*ct);v[q]=v[q]+ot,C[q]=0}for(G=0;G<N-1;G++){for(W=G,Z=v[G],U=G+1;U<N;U++)v[U]<Z&&(W=U,Z=v[U]);if(W!==G)for(v[W]=v[G],v[G]=Z,U=0;U<N;U++)Z=b.get(U,G),b.set(U,G,b.get(U,W)),b.set(U,W,Z)}}function At(N,C,v,b){let I=0,A=N-1,G,U,W,q,ae,Z,me;for(Z=I+1;Z<=A-1;Z++){for(me=0,q=Z;q<=A;q++)me=me+Math.abs(C.get(q,Z-1));if(me!==0){for(W=0,q=A;q>=Z;q--)v[q]=C.get(q,Z-1)/me,W+=v[q]*v[q];for(U=Math.sqrt(W),v[Z]>0&&(U=-U),W=W-v[Z]*U,v[Z]=v[Z]-U,ae=Z;ae<N;ae++){for(G=0,q=A;q>=Z;q--)G+=v[q]*C.get(q,ae);for(G=G/W,q=Z;q<=A;q++)C.set(q,ae,C.get(q,ae)-G*v[q])}for(q=0;q<=A;q++){for(G=0,ae=A;ae>=Z;ae--)G+=v[ae]*C.get(q,ae);for(G=G/W,ae=Z;ae<=A;ae++)C.set(q,ae,C.get(q,ae)-G*v[ae])}v[Z]=me*v[Z],C.set(Z,Z-1,me*U)}}for(q=0;q<N;q++)for(ae=0;ae<N;ae++)b.set(q,ae,q===ae?1:0);for(Z=A-1;Z>=I+1;Z--)if(C.get(Z,Z-1)!==0){for(q=Z+1;q<=A;q++)v[q]=C.get(q,Z-1);for(ae=Z;ae<=A;ae++){for(U=0,q=Z;q<=A;q++)U+=v[q]*b.get(q,ae);for(U=U/v[Z]/C.get(Z,Z-1),q=Z;q<=A;q++)b.set(q,ae,b.get(q,ae)+U*v[q])}}}function Kt(N,C,v,b,I){let A=N-1,G=0,U=N-1,W=Number.EPSILON,q=0,ae=0,Z=0,me=0,_e=0,pe=0,ye=0,Ge=0,ee,Ne,He,ot,ct,It,Qe,et,_t,oe,Ae,Ke,De,Nt,St;for(ee=0;ee<N;ee++)for((ee<G||ee>U)&&(v[ee]=I.get(ee,ee),C[ee]=0),Ne=Math.max(ee-1,0);Ne<N;Ne++)ae=ae+Math.abs(I.get(ee,Ne));for(;A>=G;){for(ot=A;ot>G&&(pe=Math.abs(I.get(ot-1,ot-1))+Math.abs(I.get(ot,ot)),pe===0&&(pe=ae),!(Math.abs(I.get(ot,ot-1))<W*pe));)ot--;if(ot===A)I.set(A,A,I.get(A,A)+q),v[A]=I.get(A,A),C[A]=0,A--,Ge=0;else if(ot===A-1){if(Qe=I.get(A,A-1)*I.get(A-1,A),Z=(I.get(A-1,A-1)-I.get(A,A))/2,me=Z*Z+Qe,ye=Math.sqrt(Math.abs(me)),I.set(A,A,I.get(A,A)+q),I.set(A-1,A-1,I.get(A-1,A-1)+q),et=I.get(A,A),me>=0){for(ye=Z>=0?Z+ye:Z-ye,v[A-1]=et+ye,v[A]=v[A-1],ye!==0&&(v[A]=et-Qe/ye),C[A-1]=0,C[A]=0,et=I.get(A,A-1),pe=Math.abs(et)+Math.abs(ye),Z=et/pe,me=ye/pe,_e=Math.sqrt(Z*Z+me*me),Z=Z/_e,me=me/_e,Ne=A-1;Ne<N;Ne++)ye=I.get(A-1,Ne),I.set(A-1,Ne,me*ye+Z*I.get(A,Ne)),I.set(A,Ne,me*I.get(A,Ne)-Z*ye);for(ee=0;ee<=A;ee++)ye=I.get(ee,A-1),I.set(ee,A-1,me*ye+Z*I.get(ee,A)),I.set(ee,A,me*I.get(ee,A)-Z*ye);for(ee=G;ee<=U;ee++)ye=b.get(ee,A-1),b.set(ee,A-1,me*ye+Z*b.get(ee,A)),b.set(ee,A,me*b.get(ee,A)-Z*ye)}else v[A-1]=et+Z,v[A]=et+Z,C[A-1]=ye,C[A]=-ye;A=A-2,Ge=0}else{if(et=I.get(A,A),_t=0,Qe=0,ot<A&&(_t=I.get(A-1,A-1),Qe=I.get(A,A-1)*I.get(A-1,A)),Ge===10){for(q+=et,ee=G;ee<=A;ee++)I.set(ee,ee,I.get(ee,ee)-et);pe=Math.abs(I.get(A,A-1))+Math.abs(I.get(A-1,A-2)),et=_t=.75*pe,Qe=-.4375*pe*pe}if(Ge===30&&(pe=(_t-et)/2,pe=pe*pe+Qe,pe>0)){for(pe=Math.sqrt(pe),_t<et&&(pe=-pe),pe=et-Qe/((_t-et)/2+pe),ee=G;ee<=A;ee++)I.set(ee,ee,I.get(ee,ee)-pe);q+=pe,et=_t=Qe=.964}for(Ge=Ge+1,ct=A-2;ct>=ot&&(ye=I.get(ct,ct),_e=et-ye,pe=_t-ye,Z=(_e*pe-Qe)/I.get(ct+1,ct)+I.get(ct,ct+1),me=I.get(ct+1,ct+1)-ye-_e-pe,_e=I.get(ct+2,ct+1),pe=Math.abs(Z)+Math.abs(me)+Math.abs(_e),Z=Z/pe,me=me/pe,_e=_e/pe,!(ct===ot||Math.abs(I.get(ct,ct-1))*(Math.abs(me)+Math.abs(_e))<W*(Math.abs(Z)*(Math.abs(I.get(ct-1,ct-1))+Math.abs(ye)+Math.abs(I.get(ct+1,ct+1))))));)ct--;for(ee=ct+2;ee<=A;ee++)I.set(ee,ee-2,0),ee>ct+2&&I.set(ee,ee-3,0);for(He=ct;He<=A-1&&(Nt=He!==A-1,He!==ct&&(Z=I.get(He,He-1),me=I.get(He+1,He-1),_e=Nt?I.get(He+2,He-1):0,et=Math.abs(Z)+Math.abs(me)+Math.abs(_e),et!==0&&(Z=Z/et,me=me/et,_e=_e/et)),et!==0);He++)if(pe=Math.sqrt(Z*Z+me*me+_e*_e),Z<0&&(pe=-pe),pe!==0){for(He!==ct?I.set(He,He-1,-pe*et):ot!==ct&&I.set(He,He-1,-I.get(He,He-1)),Z=Z+pe,et=Z/pe,_t=me/pe,ye=_e/pe,me=me/Z,_e=_e/Z,Ne=He;Ne<N;Ne++)Z=I.get(He,Ne)+me*I.get(He+1,Ne),Nt&&(Z=Z+_e*I.get(He+2,Ne),I.set(He+2,Ne,I.get(He+2,Ne)-Z*ye)),I.set(He,Ne,I.get(He,Ne)-Z*et),I.set(He+1,Ne,I.get(He+1,Ne)-Z*_t);for(ee=0;ee<=Math.min(A,He+3);ee++)Z=et*I.get(ee,He)+_t*I.get(ee,He+1),Nt&&(Z=Z+ye*I.get(ee,He+2),I.set(ee,He+2,I.get(ee,He+2)-Z*_e)),I.set(ee,He,I.get(ee,He)-Z),I.set(ee,He+1,I.get(ee,He+1)-Z*me);for(ee=G;ee<=U;ee++)Z=et*b.get(ee,He)+_t*b.get(ee,He+1),Nt&&(Z=Z+ye*b.get(ee,He+2),b.set(ee,He+2,b.get(ee,He+2)-Z*_e)),b.set(ee,He,b.get(ee,He)-Z),b.set(ee,He+1,b.get(ee,He+1)-Z*me)}}}if(ae!==0){for(A=N-1;A>=0;A--)if(Z=v[A],me=C[A],me===0)for(ot=A,I.set(A,A,1),ee=A-1;ee>=0;ee--){for(Qe=I.get(ee,ee)-Z,_e=0,Ne=ot;Ne<=A;Ne++)_e=_e+I.get(ee,Ne)*I.get(Ne,A);if(C[ee]<0)ye=Qe,pe=_e;else if(ot=ee,C[ee]===0?I.set(ee,A,Qe!==0?-_e/Qe:-_e/(W*ae)):(et=I.get(ee,ee+1),_t=I.get(ee+1,ee),me=(v[ee]-Z)*(v[ee]-Z)+C[ee]*C[ee],It=(et*pe-ye*_e)/me,I.set(ee,A,It),I.set(ee+1,A,Math.abs(et)>Math.abs(ye)?(-_e-Qe*It)/et:(-pe-_t*It)/ye)),It=Math.abs(I.get(ee,A)),W*It*It>1)for(Ne=ee;Ne<=A;Ne++)I.set(Ne,A,I.get(Ne,A)/It)}else if(me<0)for(ot=A-1,Math.abs(I.get(A,A-1))>Math.abs(I.get(A-1,A))?(I.set(A-1,A-1,me/I.get(A,A-1)),I.set(A-1,A,-(I.get(A,A)-Z)/I.get(A,A-1))):(St=xn(0,-I.get(A-1,A),I.get(A-1,A-1)-Z,me),I.set(A-1,A-1,St[0]),I.set(A-1,A,St[1])),I.set(A,A-1,0),I.set(A,A,1),ee=A-2;ee>=0;ee--){for(oe=0,Ae=0,Ne=ot;Ne<=A;Ne++)oe=oe+I.get(ee,Ne)*I.get(Ne,A-1),Ae=Ae+I.get(ee,Ne)*I.get(Ne,A);if(Qe=I.get(ee,ee)-Z,C[ee]<0)ye=Qe,_e=oe,pe=Ae;else if(ot=ee,C[ee]===0?(St=xn(-oe,-Ae,Qe,me),I.set(ee,A-1,St[0]),I.set(ee,A,St[1])):(et=I.get(ee,ee+1),_t=I.get(ee+1,ee),Ke=(v[ee]-Z)*(v[ee]-Z)+C[ee]*C[ee]-me*me,De=(v[ee]-Z)*2*me,Ke===0&&De===0&&(Ke=W*ae*(Math.abs(Qe)+Math.abs(me)+Math.abs(et)+Math.abs(_t)+Math.abs(ye))),St=xn(et*_e-ye*oe+me*Ae,et*pe-ye*Ae-me*oe,Ke,De),I.set(ee,A-1,St[0]),I.set(ee,A,St[1]),Math.abs(et)>Math.abs(ye)+Math.abs(me)?(I.set(ee+1,A-1,(-oe-Qe*I.get(ee,A-1)+me*I.get(ee,A))/et),I.set(ee+1,A,(-Ae-Qe*I.get(ee,A)-me*I.get(ee,A-1))/et)):(St=xn(-_e-_t*I.get(ee,A-1),-pe-_t*I.get(ee,A),ye,me),I.set(ee+1,A-1,St[0]),I.set(ee+1,A,St[1]))),It=Math.max(Math.abs(I.get(ee,A-1)),Math.abs(I.get(ee,A))),W*It*It>1)for(Ne=ee;Ne<=A;Ne++)I.set(Ne,A-1,I.get(Ne,A-1)/It),I.set(Ne,A,I.get(Ne,A)/It)}for(ee=0;ee<N;ee++)if(ee<G||ee>U)for(Ne=ee;Ne<N;Ne++)b.set(ee,Ne,I.get(ee,Ne));for(Ne=N-1;Ne>=G;Ne--)for(ee=G;ee<=U;ee++){for(ye=0,He=G;He<=Math.min(Ne,U);He++)ye=ye+b.get(ee,He)*I.get(He,Ne);b.set(ee,Ne,ye)}}}function xn(N,C,v,b){let I,A;return Math.abs(v)>Math.abs(b)?(I=b/v,A=v+I*b,[(N+I*C)/A,(C-I*N)/A]):(I=v/b,A=b+I*v,[(I*N+C)/A,(I*C-N)/A])}class Fn{constructor(C){if(C=de.checkMatrix(C),!C.isSymmetric())throw new Error("Matrix is not symmetric");let v=C,b=v.rows,I=new j(b,b),A=!0,G,U,W;for(U=0;U<b;U++){let q=0;for(W=0;W<U;W++){let ae=0;for(G=0;G<W;G++)ae+=I.get(W,G)*I.get(U,G);ae=(v.get(U,W)-ae)/I.get(W,W),I.set(U,W,ae),q=q+ae*ae}for(q=v.get(U,U)-q,A&&(A=q>0),I.set(U,U,Math.sqrt(Math.max(q,0))),W=U+1;W<b;W++)I.set(U,W,0)}this.L=I,this.positiveDefinite=A}isPositiveDefinite(){return this.positiveDefinite}solve(C){C=de.checkMatrix(C);let v=this.L,b=v.rows;if(C.rows!==b)throw new Error("Matrix dimensions do not match");if(this.isPositiveDefinite()===!1)throw new Error("Matrix is not positive definite");let I=C.columns,A=C.clone(),G,U,W;for(W=0;W<b;W++)for(U=0;U<I;U++){for(G=0;G<W;G++)A.set(W,U,A.get(W,U)-A.get(G,U)*v.get(W,G));A.set(W,U,A.get(W,U)/v.get(W,W))}for(W=b-1;W>=0;W--)for(U=0;U<I;U++){for(G=W+1;G<b;G++)A.set(W,U,A.get(W,U)-A.get(G,U)*v.get(G,W));A.set(W,U,A.get(W,U)/v.get(W,W))}return A}get lowerTriangularMatrix(){return this.L}}class Zt{constructor(C,v={}){C=de.checkMatrix(C);let{Y:b}=v;const{scaleScores:I=!1,maxIterations:A=1e3,terminationCriteria:G=1e-10}=v;let U;if(b){if(n.isAnyArray(b)&&typeof b[0]=="number"?b=j.columnVector(b):b=de.checkMatrix(b),b.rows!==C.rows)throw new Error("Y should have the same number of rows as X");U=b.getColumnVector(0)}else U=C.getColumnVector(0);let W=1,q,ae,Z,me;for(let _e=0;_e<A&&W>G;_e++)Z=C.transpose().mmul(U).div(U.transpose().mmul(U).get(0,0)),Z=Z.div(Z.norm()),q=C.mmul(Z).div(Z.transpose().mmul(Z).get(0,0)),_e>0&&(W=q.clone().sub(me).pow(2).sum()),me=q.clone(),b?(ae=b.transpose().mmul(q).div(q.transpose().mmul(q).get(0,0)),ae=ae.div(ae.norm()),U=b.mmul(ae).div(ae.transpose().mmul(ae).get(0,0))):U=q;if(b){let _e=C.transpose().mmul(q).div(q.transpose().mmul(q).get(0,0));_e=_e.div(_e.norm());let pe=C.clone().sub(q.clone().mmul(_e.transpose())),ye=U.transpose().mmul(q).div(q.transpose().mmul(q).get(0,0)),Ge=b.clone().sub(q.clone().mulS(ye.get(0,0)).mmul(ae.transpose()));this.t=q,this.p=_e.transpose(),this.w=Z.transpose(),this.q=ae,this.u=U,this.s=q.transpose().mmul(q),this.xResidual=pe,this.yResidual=Ge,this.betas=ye}else this.w=Z.transpose(),this.s=q.transpose().mmul(q).sqrt(),I?this.t=q.clone().div(this.s.get(0,0)):this.t=q,this.xResidual=C.sub(q.mmul(Z.transpose()))}}return matrix$1.AbstractMatrix=re,matrix$1.CHO=Fn,matrix$1.CholeskyDecomposition=Fn,matrix$1.DistanceMatrix=Ee,matrix$1.EVD=ft,matrix$1.EigenvalueDecomposition=ft,matrix$1.LU=Le,matrix$1.LuDecomposition=Le,matrix$1.Matrix=j,matrix$1.MatrixColumnSelectionView=Me,matrix$1.MatrixColumnView=Ce,matrix$1.MatrixFlipColumnView=Fe,matrix$1.MatrixFlipRowView=Xe,matrix$1.MatrixRowSelectionView=ke,matrix$1.MatrixRowView=qe,matrix$1.MatrixSelectionView=we,matrix$1.MatrixSubView=Ye,matrix$1.MatrixTransposeView=Oe,matrix$1.NIPALS=Zt,matrix$1.Nipals=Zt,matrix$1.QR=Te,matrix$1.QrDecomposition=Te,matrix$1.SVD=rt,matrix$1.SingularValueDecomposition=rt,matrix$1.SymmetricMatrix=xe,matrix$1.WrapperMatrix1D=Ve,matrix$1.WrapperMatrix2D=de,matrix$1.correlation=lt,matrix$1.covariance=nt,matrix$1.default=j,matrix$1.determinant=ze,matrix$1.inverse=st,matrix$1.linearDependencies=it,matrix$1.pseudoInverse=dt,matrix$1.solve=Ue,matrix$1.wrap=Pe,matrix$1}var matrixExports=requireMatrix(),matrix=getDefaultExportFromCjs(matrixExports);const Matrix$1=matrixExports.Matrix,SVD=matrixExports.SVD,SingularValueDecomposition=matrixExports.SingularValueDecomposition;matrix.Matrix?matrix.Matrix:matrixExports.Matrix;const inverse=matrixExports.inverse,solve=matrixExports.solve;function getSeparatedKernel(n){const e=new SVD(n,{autoTranspose:!0});if(e.rank!==1)return null;const t=Math.sqrt(e.s[0]),r=e.U.to2DArray().map(i=>i[0]*t),s=e.V.to2DArray().map(i=>i[0]*t);return[r,s]}function convolution(n,e={}){let{channels:t,bitDepth:r,normalize:s=!1,divisor:i=1,border:o="copy",algorithm:a="auto"}=e,l={};r&&(l.bitDepth=r);let c=Image.createFrom(this,l);if(t=validateArrayOfChannels(this,t),a!=="separable")({kernel:n}=validateKernel(n));else if(!Array.isArray(n)||n.length!==2)throw new RangeError("separable convolution requires two arrays of numbers to represent the kernel");if(a==="auto"){let T=getSeparatedKernel(n);T!==null?(a="separable",n=T):(n.length>9||n[0].length>9)&&this.width<=4096&&this.height<=4096?a="fft":a="direct"}let u,h;a==="separable"?(u=Math.floor(n[0].length/2),h=Math.floor(n[1].length/2)):(u=Math.floor(n.length/2),h=Math.floor(n[0].length/2));let d=c.isClamped,g=new Array(this.height*this.width),x,y,w,$,S,_;for($=0;$<t.length;$++){for(S=t[$],w=0;w<this.height;w++)for(y=0;y<this.width;y++)x=w*this.width+y,g[x]=this.data[x*this.channels+S];if(a==="direct")_=srcExports$1.direct(g,n,{rows:this.height,cols:this.width,normalize:s,divisor:i});else if(a==="separable"){if(_=convolutionSeparable(g,n,this.width,this.height),s){i=0;for(let T=0;T<n[0].length;T++)for(let k=0;k<n[1].length;k++)i+=n[0][T]*n[1][k]}if(i!==1)for(let T=0;T<_.length;T++)_[T]/=i}else _=srcExports$1.fft(g,n,{rows:this.height,cols:this.width,normalize:s,divisor:i});for(w=0;w<this.height;w++)for(y=0;y<this.width;y++)x=w*this.width+y,d?c.data[x*this.channels+S]=clamp(_[x],c):c.data[x*this.channels+S]=_[x]}if(this.alpha&&!t.includes(this.channels))for(y=this.components;y<this.data.length;y=y+this.channels)c.data[y]=this.data[y];return o!=="periodic"&&c.setBorder({size:[h,u],algorithm:o}),c}function gradientFilter(n={}){let{direction:e="xy",border:t="copy",kernelX:r,kernelY:s,channels:i,bitDepth:o=this.bitDepth}=n;switch(this.checkProcessable("gradientFilter",{bitDepth:[8,16]}),e){case"x":if(!r)throw new Error("kernelX option is missing");return convolution.call(this,r,{channels:i,border:t,bitDepth:o});case"y":if(!s)throw new Error("kernelY option is missing");return convolution.call(this,s,{channels:i,border:t,bitDepth:o});case"xy":{if(!r)throw new Error("kernelX option is missing");if(!s)throw new Error("kernelY option is missing");const a=convolution.call(this,r,{channels:i,border:t,bitDepth:32}),l=convolution.call(this,s,{channels:i,border:t,bitDepth:32});return a.hypotenuse(l,{bitDepth:o,channels:i})}default:throw new Error(`Unknown parameter direction: ${e}`)}}function sobelFilter(n){return gradientFilter.call(this,Object.assign({},n,{kernelX:SOBEL_X,kernelY:SOBEL_Y}))}function scharrFilter(n){return gradientFilter.call(this,Object.assign({},n,{kernelX:SCHARR_X,kernelY:SCHARR_Y}))}var newArray_1,hasRequiredNewArray;function requireNewArray(){if(hasRequiredNewArray)return newArray_1;hasRequiredNewArray=1,newArray_1=n;function n(e,t){e=e||0;for(var r=new Array(e),s=0;s<e;s++)r[s]=t;return r}return newArray_1}var newArrayExports=requireNewArray(),newArray=getDefaultExportFromCjs(newArrayExports);function level(n={}){let{algorithm:e="range",channels:t,min:r=this.min,max:s=this.max}=n;switch(this.checkProcessable("level",{bitDepth:[8,16,32]}),t=validateArrayOfChannels(this,{channels:t}),t.length!==this.channel&&(Array.isArray(r)&&r.length===this.channels&&(r=r.filter((i,o)=>t.includes(o))),Array.isArray(s)&&s.length===this.channels&&(s=s.filter((i,o)=>t.includes(o)))),e){case"range":r<0&&(r=0),s>this.maxValue&&(s=this.maxValue),Array.isArray(r)||(r=newArray(t.length,r)),Array.isArray(s)||(s=newArray(t.length,s)),processImage(this,r,s,t);break;default:throw new Error(`level: algorithm not implement: ${e}`)}return this}function processImage(n,e,t,r){let s=1e-5,i=new Array(r.length);for(let o=0;o<r.length;o++)e[o]===0&&t[o]===n.maxValue||t[o]===e[o]?i[o]=0:i[o]=(n.maxValue+1-s)/(t[o]-e[o]),e[o]+=(.5-s/2)/i[o];for(let o=0;o<r.length;o++){let a=r[o];if(i[o]!==0)for(let l=0;l<n.data.length;l+=n.channels)n.data[l+a]=Math.min(Math.max(0,(n.data[l+a]-e[o])*i[o]+.5|0),n.maxValue)}}var isArrayType,hasRequiredIsArrayType;function requireIsArrayType(){if(hasRequiredIsArrayType)return isArrayType;hasRequiredIsArrayType=1;var n=Object.prototype.toString;return isArrayType=function(t){return n.call(t).substr(-6,5)==="Array"},isArrayType}var isArrayTypeExports=requireIsArrayType(),isArray=getDefaultExportFromCjs(isArrayTypeExports);function checkNumberArray(n){if(isNaN(n)){if(n instanceof Image)return n.data;if(!isArray(n))throw new Error("checkNumberArray: the value should be either a number, array or Image");return n}else{if(n<=0)throw new Error("checkNumberArray: the value must be greater than 0");return n}}function add(n,e={}){let{channels:t}=e;if(this.checkProcessable("add",{bitDepth:[8,16]}),t=validateArrayOfChannels(this,{channels:t}),n=checkNumberArray(n),isNaN(n)){if(this.data.length!==n.length)throw new Error("add: the data size is different");for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.max(0,Math.min(this.maxValue,this.data[i+s]+n[i+s]>>0))}}else for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.min(this.maxValue,this.data[i+s]+n>>0)}return this}function subtract(n,e={}){let{channels:t}=e;if(this.checkProcessable("subtract",{bitDepth:[8,16]}),t=validateArrayOfChannels(this,{channels:t}),n=checkNumberArray(n),isNaN(n)){if(this.data.length!==n.length)throw new Error("subtract: the data size is different");for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.max(0,Math.min(this.maxValue,this.data[i+s]-n[i+s]>>0))}}else for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.max(0,this.data[i+s]-n>>0)}return this}function subtractImage(n,e={}){let{channels:t,absolute:r=!1}=e;if(this.checkProcessable("subtractImage",{bitDepth:[8,16]}),this.width!==n.width||this.height!==n.height)throw new Error("subtractImage: both images must have the same size");if(this.alpha!==n.alpha||this.bitDepth!==n.bitDepth)throw new Error("subtractImage: both images must have the same alpha and bitDepth");if(this.channels!==n.channels)throw new Error("subtractImage: both images must have the same number of channels");let s=this.clone();t=validateArrayOfChannels(this,{channels:t});for(let i=0;i<t.length;i++){let o=t[i];for(let a=o;a<this.data.length;a+=this.channels){let l=this.data[a]-n.data[a];r?s.data[a]=Math.abs(l):s.data[a]=Math.max(l,0)}}return s}function hypotenuse(n,e={}){let{bitDepth:t=this.bitDepth,channels:r}=e;if(this.checkProcessable("hypotenuse",{bitDepth:[8,16,32]}),this.width!==n.width||this.height!==n.height)throw new Error("hypotenuse: both images must have the same size");if(this.alpha!==n.alpha||this.bitDepth!==n.bitDepth)throw new Error("hypotenuse: both images must have the same alpha and bitDepth");if(this.channels!==n.channels)throw new Error("hypotenuse: both images must have the same number of channels");let s=Image.createFrom(this,{bitDepth:t});r=validateArrayOfChannels(this,{channels:r});let i=s.isClamped;for(let o=0;o<r.length;o++){let a=r[o];for(let l=a;l<this.data.length;l+=this.channels){let c=Math.hypot(this.data[l],n.data[l]);i?s.data[l]=Math.min(Math.max(Math.round(c),0),s.maxValue):s.data[l]=c}}return s}function multiply(n,e={}){let{channels:t}=e;if(this.checkProcessable("multiply",{bitDepth:[8,16]}),n<=0)throw new Error("multiply: the value must be greater than 0");if(t=validateArrayOfChannels(this,{channels:t}),n=checkNumberArray(n),isNaN(n)){if(this.data.length!==n.length)throw new Error("multiply: the data size is different");for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.max(0,Math.min(this.maxValue,this.data[i+s]*n[i+s]>>0))}}else for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.min(this.maxValue,this.data[i+s]*n>>0)}return this}function divide(n,e={}){let{channels:t}=e;if(this.checkProcessable("divide",{bitDepth:[8,16]}),t=validateArrayOfChannels(this,{channels:t}),n=checkNumberArray(n),isNaN(n)){if(this.data.length!==n.length)throw new Error("divide: the: the data size is different");for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.max(0,Math.min(this.maxValue,this.data[i+s]/n[i+s]>>0))}}else for(let r=0;r<t.length;r++){let s=t[r];for(let i=0;i<this.data.length;i+=this.channels)this.data[i+s]=Math.min(this.maxValue,this.data[i+s]/n>>0)}return this}class BaseRegression{constructor(){if(new.target===BaseRegression)throw new Error("BaseRegression must be subclassed")}predict(e){if(typeof e=="number")return this._predict(e);if(isAnyArray(e)){const t=[];for(let r=0;r<e.length;r++)t.push(this._predict(e[r]));return t}else throw new TypeError("x must be a number or array")}_predict(){throw new Error("_predict must be implemented")}train(){}toString(){return""}toLaTeX(){return""}score(e,t){if(!isAnyArray(e)||!isAnyArray(t)||e.length!==t.length)throw new Error("x and y must be arrays of the same length");const r=e.length,s=new Array(r);for(let g=0;g<r;g++)s[g]=this._predict(e[g]);let i=0,o=0,a=0,l=0,c=0,u=0,h=0;for(let g=0;g<r;g++)i+=s[g],o+=t[g],c+=s[g]*s[g],u+=t[g]*t[g],h+=s[g]*t[g],t[g]!==0&&(a+=(t[g]-s[g])*(t[g]-s[g])/t[g]),l+=(t[g]-s[g])*(t[g]-s[g]);const d=(r*h-i*o)/Math.sqrt((r*c-i*i)*(r*u-o*o));return{r:d,r2:d*d,chi2:a,rmsd:Math.sqrt(l/r)}}}function squaredEuclidean(n,e){let t=0;for(let r=0;r<n.length;r++)t+=(n[r]-e[r])*(n[r]-e[r]);return t}function euclidean(n,e){return Math.sqrt(squaredEuclidean(n,e))}var euclidean$1=Object.freeze({__proto__:null,euclidean,squaredEuclidean}),require$$0=getAugmentedNamespace(euclidean$1),gaussianKernel,hasRequiredGaussianKernel;function requireGaussianKernel(){if(hasRequiredGaussianKernel)return gaussianKernel;hasRequiredGaussianKernel=1;const{squaredEuclidean:n}=require$$0,e={sigma:1};class t{constructor(s){s=Object.assign({},e,s),this.sigma=s.sigma,this.divisor=2*s.sigma*s.sigma}compute(s,i){const o=n(s,i);return Math.exp(-o/this.divisor)}}return gaussianKernel=t,gaussianKernel}var polynomialKernel,hasRequiredPolynomialKernel;function requirePolynomialKernel(){if(hasRequiredPolynomialKernel)return polynomialKernel;hasRequiredPolynomialKernel=1;const n={degree:1,constant:1,scale:1};class e{constructor(r){r=Object.assign({},n,r),this.degree=r.degree,this.constant=r.constant,this.scale=r.scale}compute(r,s){for(var i=0,o=0;o<r.length;o++)i+=r[o]*s[o];return Math.pow(this.scale*i+this.constant,this.degree)}}return polynomialKernel=e,polynomialKernel}var sigmoidKernel,hasRequiredSigmoidKernel;function requireSigmoidKernel(){if(hasRequiredSigmoidKernel)return sigmoidKernel;hasRequiredSigmoidKernel=1;const n={alpha:.01,constant:-Math.E};class e{constructor(r){r=Object.assign({},n,r),this.alpha=r.alpha,this.constant=r.constant}compute(r,s){for(var i=0,o=0;o<r.length;o++)i+=r[o]*s[o];return Math.tanh(this.alpha*i+this.constant)}}return sigmoidKernel=e,sigmoidKernel}var anovaKernel,hasRequiredAnovaKernel;function requireAnovaKernel(){if(hasRequiredAnovaKernel)return anovaKernel;hasRequiredAnovaKernel=1;const n={sigma:1,degree:1};class e{constructor(r){r=Object.assign({},n,r),this.sigma=r.sigma,this.degree=r.degree}compute(r,s){for(var i=0,o=Math.min(r.length,s.length),a=1;a<=o;++a)i+=Math.pow(Math.exp(-this.sigma*Math.pow(Math.pow(r[a-1],a)-Math.pow(s[a-1],a),2)),this.degree);return i}}return anovaKernel=e,anovaKernel}var cauchyKernel,hasRequiredCauchyKernel;function requireCauchyKernel(){if(hasRequiredCauchyKernel)return cauchyKernel;hasRequiredCauchyKernel=1;const{squaredEuclidean:n}=require$$0,e={sigma:1};class t{constructor(s){s=Object.assign({},e,s),this.sigma=s.sigma}compute(s,i){return 1/(1+n(s,i)/(this.sigma*this.sigma))}}return cauchyKernel=t,cauchyKernel}var exponentialKernel,hasRequiredExponentialKernel;function requireExponentialKernel(){if(hasRequiredExponentialKernel)return exponentialKernel;hasRequiredExponentialKernel=1;const{euclidean:n}=require$$0,e={sigma:1};class t{constructor(s){s=Object.assign({},e,s),this.sigma=s.sigma,this.divisor=2*s.sigma*s.sigma}compute(s,i){const o=n(s,i);return Math.exp(-o/this.divisor)}}return exponentialKernel=t,exponentialKernel}var histogramIntersectionKernel,hasRequiredHistogramIntersectionKernel;function requireHistogramIntersectionKernel(){if(hasRequiredHistogramIntersectionKernel)return histogramIntersectionKernel;hasRequiredHistogramIntersectionKernel=1;class n{compute(t,r){for(var s=Math.min(t.length,r.length),i=0,o=0;o<s;++o)i+=Math.min(t[o],r[o]);return i}}return histogramIntersectionKernel=n,histogramIntersectionKernel}var laplacianKernel,hasRequiredLaplacianKernel;function requireLaplacianKernel(){if(hasRequiredLaplacianKernel)return laplacianKernel;hasRequiredLaplacianKernel=1;const{euclidean:n}=require$$0,e={sigma:1};class t{constructor(s){s=Object.assign({},e,s),this.sigma=s.sigma}compute(s,i){const o=n(s,i);return Math.exp(-o/this.sigma)}}return laplacianKernel=t,laplacianKernel}var multiquadraticKernel,hasRequiredMultiquadraticKernel;function requireMultiquadraticKernel(){if(hasRequiredMultiquadraticKernel)return multiquadraticKernel;hasRequiredMultiquadraticKernel=1;const{squaredEuclidean:n}=require$$0,e={constant:1};class t{constructor(s){s=Object.assign({},e,s),this.constant=s.constant}compute(s,i){return Math.sqrt(n(s,i)+this.constant*this.constant)}}return multiquadraticKernel=t,multiquadraticKernel}var rationalQuadraticKernel,hasRequiredRationalQuadraticKernel;function requireRationalQuadraticKernel(){if(hasRequiredRationalQuadraticKernel)return rationalQuadraticKernel;hasRequiredRationalQuadraticKernel=1;const{squaredEuclidean:n}=require$$0,e={constant:1};class t{constructor(s){s=Object.assign({},e,s),this.constant=s.constant}compute(s,i){const o=n(s,i);return 1-o/(o+this.constant)}}return rationalQuadraticKernel=t,rationalQuadraticKernel}var kernel,hasRequiredKernel;function requireKernel(){if(hasRequiredKernel)return kernel;hasRequiredKernel=1;const{Matrix:n,MatrixTransposeView:e}=requireMatrix(),t=requireGaussianKernel(),r=requirePolynomialKernel(),s=requireSigmoidKernel(),i=requireAnovaKernel(),o=requireCauchyKernel(),a=requireExponentialKernel(),l=requireHistogramIntersectionKernel(),c=requireLaplacianKernel(),u=requireMultiquadraticKernel(),h=requireRationalQuadraticKernel(),d={gaussian:t,rbf:t,polynomial:r,poly:r,anova:i,cauchy:o,exponential:a,histogram:l,min:l,laplacian:c,multiquadratic:u,rational:h,sigmoid:s,mlp:s};class g{constructor(y,w){if(this.kernelType=y,y!=="linear")if(typeof y=="string"){y=y.toLowerCase();var $=d[y];if($)this.kernelFunction=new $(w);else throw new Error(`unsupported kernel type: ${y}`)}else if(typeof y=="object"&&typeof y.compute=="function")this.kernelFunction=y;else throw new TypeError("first argument must be a valid kernel type or instance")}compute(y,w){if(y=n.checkMatrix(y),w===void 0?w=y:w=n.checkMatrix(w),this.kernelType==="linear")return y.mmul(new e(w));const $=new n(y.rows,w.rows);if(y===w)for(let S=0;S<y.rows;S++)for(let _=S;_<y.rows;_++){const T=this.kernelFunction.compute(y.getRow(S),y.getRow(_));$.set(S,_,T),$.set(_,S,T)}else for(let S=0;S<y.rows;S++)for(let _=0;_<w.rows;_++)$.set(S,_,this.kernelFunction.compute(y.getRow(S),w.getRow(_)));return $}}return kernel=g,kernel}var kernelExports=requireKernel(),Kernel=getDefaultExportFromCjs(kernelExports);const defaultOptions$2={lambda:.1,kernelType:"gaussian",kernelOptions:{},computeCoefficient:!1};class KernelRidgeRegression extends BaseRegression{constructor(e,t,r){if(super(),e===!0)this.alpha=t.alpha,this.inputs=t.inputs,this.kernelType=t.kernelType,this.kernelOptions=t.kernelOptions,this.kernel=new Kernel(t.kernelType,t.kernelOptions);else{e=Matrix$1.checkMatrix(e),r=Object.assign({},defaultOptions$2,r);const s=new Kernel(r.kernelType,r.kernelOptions),i=s.compute(e),o=e.rows;i.add(Matrix$1.eye(o,o).mul(r.lambda)),this.alpha=solve(i,t),this.inputs=e,this.kernelType=r.kernelType,this.kernelOptions=r.kernelOptions,this.kernel=s}}_predict(e){return this.kernel.compute([e],this.inputs).mmul(this.alpha).getRow(0)}toJSON(){return{name:"kernelRidgeRegression",alpha:this.alpha,inputs:this.inputs,kernelType:this.kernelType,kernelOptions:this.kernelOptions}}static load(e){if(e.name!=="kernelRidgeRegression")throw new TypeError("not a KRR model");return new KernelRidgeRegression(!0,e)}}function background$1(n,e,t){const r=new KernelRidgeRegression(n,e,t),s=new Array(this.size);for(let a=0;a<this.width;a++)for(let l=0;l<this.height;l++)s[l*this.width+a]=[a,l];const i=r.predict(s),o=Image.createFrom(this);for(let a=0;a<this.size;a++)o.data[a]=Math.min(this.maxValue,Math.max(0,i[a][0]));return o}function dilate(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("dilate",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("dilate: The number of rows and columns of the kernel must be odd");let r=!0;e:for(const i of e)for(const o of i)if(o!==1){r=!1;break e}let s=this;for(let i=0;i<t;i++)if(this.bitDepth===1)if(r){const o=s.clone();s=dilateOnceBinaryOnlyOnes(s,o,e.length,e[0].length)}else{const o=Image.createFrom(s);s=dilateOnceBinary(s,o,e)}else if(r){const o=Image.createFrom(s);s=dilateOnceGreyOnlyOnes(s,o,e.length,e[0].length)}else{const o=Image.createFrom(s);s=dilateOnceGrey(s,o,e)}return s}function dilateOnceGrey(n,e,t){const r=t.length,s=t[0].length;let i=(r-1)/2,o=(s-1)/2;for(let a=0;a<n.height;a++)for(let l=0;l<n.width;l++){let c=0;for(let u=0;u<s;u++)for(let h=0;h<r;h++){if(t[h][u]!==1)continue;let d=h-i+l,g=u-o+a;if(d<0||g<0||d>=n.width||g>=n.height)continue;const x=n.getValueXY(d,g,0);x>c&&(c=x)}e.setValueXY(l,a,0,c)}return e}function dilateOnceGreyOnlyOnes(n,e,t,r){const s=(t-1)/2,i=(r-1)/2,o=[];for(let a=0;a<n.width;a++)o.push(0);for(let a=0;a<n.height;a++){for(let l=0;l<n.width;l++){let c=0;for(let u=Math.max(0,a-i);u<Math.min(n.height,a+i+1);u++){const h=n.getValueXY(l,u,0);h>c&&(c=h)}o[l]=c}for(let l=0;l<n.width;l++){let c=0;for(let u=Math.max(0,l-s);u<Math.min(n.width,l+s+1);u++)o[u]>c&&(c=o[u]);e.setValueXY(l,a,0,c)}}return e}function dilateOnceBinary(n,e,t){const r=t.length,s=t[0].length;let i=(r-1)/2,o=(s-1)/2;for(let a=0;a<n.height;a++)for(let l=0;l<n.width;l++){let c=0;e:for(let u=0;u<s;u++)for(let h=0;h<r;h++){if(t[h][u]!==1)continue;let d=h-i+l,g=u-o+a;if(g<0||d<0||d>=n.width||g>=n.height)continue;if(n.getBitXY(d,g)===1){c=1;break e}}c===1&&e.setBitXY(l,a)}return e}function dilateOnceBinaryOnlyOnes(n,e,t,r){const s=(t-1)/2,i=(r-1)/2,o=[];for(let a=0;a<n.width;a++)o.push(1);for(let a=0;a<n.height;a++){for(let l=0;l<n.width;l++){o[l]=0;for(let c=Math.max(0,a-i);c<Math.min(n.height,a+i+1);c++)if(n.getBitXY(l,c)===1){o[l]=1;break}}for(let l=0;l<n.width;l++)if(e.getBitXY(l,a)!==1){for(let c=Math.max(0,l-s);c<Math.min(n.width,l+s+1);c++)if(o[c]===1){e.setBitXY(l,a);break}}}return e}function erode(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("erode",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("erode: The number of rows and columns of the kernel must be odd");let r=!0;e:for(const i of e)for(const o of i)if(o!==1){r=!1;break e}let s=this;for(let i=0;i<t;i++)if(this.bitDepth===1)if(r){const o=s.clone();s=erodeOnceBinaryOnlyOnes(s,o,e.length,e[0].length)}else{const o=Image.createFrom(s);s=erodeOnceBinary(s,o,e)}else if(r){const o=Image.createFrom(s);s=erodeOnceGreyOnlyOnes(s,o,e.length,e[0].length)}else{const o=Image.createFrom(s);s=erodeOnceGrey(s,o,e)}return s}function erodeOnceGrey(n,e,t){const r=t.length,s=t[0].length;let i=(r-1)/2,o=(s-1)/2;for(let a=0;a<n.height;a++)for(let l=0;l<n.width;l++){let c=n.maxValue;for(let u=0;u<s;u++)for(let h=0;h<r;h++){if(t[h][u]!==1)continue;let d=h-i+l,g=u-o+a;if(d<0||g<0||d>=n.width||g>=n.height)continue;const x=n.getValueXY(d,g,0);x<c&&(c=x)}e.setValueXY(l,a,0,c)}return e}function erodeOnceGreyOnlyOnes(n,e,t,r){const s=(t-1)/2,i=(r-1)/2,o=[];for(let a=0;a<n.width;a++)o.push(0);for(let a=0;a<n.height;a++){for(let l=0;l<n.width;l++){let c=n.maxValue;for(let u=Math.max(0,a-i);u<Math.min(n.height,a+i+1);u++){const h=n.getValueXY(l,u,0);h<c&&(c=h)}o[l]=c}for(let l=0;l<n.width;l++){let c=n.maxValue;for(let u=Math.max(0,l-s);u<Math.min(n.width,l+s+1);u++)o[u]<c&&(c=o[u]);e.setValueXY(l,a,0,c)}}return e}function erodeOnceBinary(n,e,t){const r=t.length,s=t[0].length;let i=(r-1)/2,o=(s-1)/2;for(let a=0;a<n.height;a++)for(let l=0;l<n.width;l++){let c=1;e:for(let u=0;u<s;u++)for(let h=0;h<r;h++){if(t[h][u]!==1)continue;let d=h-i+l,g=u-o+a;if(g<0||d<0||d>=n.width||g>=n.height)continue;if(n.getBitXY(d,g)===0){c=0;break e}}c===1&&e.setBitXY(l,a)}return e}function erodeOnceBinaryOnlyOnes(n,e,t,r){const s=(t-1)/2,i=(r-1)/2,o=[];for(let a=0;a<n.width;a++)o.push(0);for(let a=0;a<n.height;a++){for(let l=0;l<n.width;l++){o[l]=1;for(let c=Math.max(0,a-i);c<Math.min(n.height,a+i+1);c++)if(n.getBitXY(l,c)===0){o[l]=0;break}}for(let l=0;l<n.width;l++)if(e.getBitXY(l,a)!==0){for(let c=Math.max(0,l-s);c<Math.min(n.width,l+s+1);c++)if(o[c]===0){e.clearBitXY(l,a);break}}}return e}function open(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("open",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("open: The number of rows and columns of the kernel must be odd");let r=this;for(let s=0;s<t;s++)r=r.erode({kernel:e}),r=r.dilate({kernel:e});return r}function close(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("close",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("close: The number of rows and columns of the kernel must be odd");let r=this;for(let s=0;s<t;s++)r=r.dilate({kernel:e}).erode({kernel:e});return r}function topHat(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("topHat",{bitDepth:[8,16],components:1,alpha:0}),e.length%2===0||e[0].length%2===0)throw new TypeError("topHat: The number of rows and columns of the kernel must be odd");let r=this;for(let s=0;s<t;s++)r=r.open({kernel:e}).subtractImage(r,{absolute:!0});return r}function blackHat(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("blackHat",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("blackHat: The number of rows and columns of the kernel must be odd");let r=this;for(let s=0;s<t;s++)r=r.close({kernel:e}).subtractImage(r,{absolute:!0});return r}function morphologicalGradient(n={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:t=1}=n;if(this.checkProcessable("morphologicalGradient",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2===0||e.rows%2===0)throw new TypeError("morphologicalGradient: The number of rows and columns of the kernel must be odd");let r=this;for(let s=0;s<t;s++){let i=r.dilate({kernel:e}),o=r.erode({kernel:e});r=i.subtractImage(o,{absolute:!0})}return r}function order4Points(n){let e=0,t=0,r=0,s=0,i=n[0][0],o=0;for(let c=1;c<n.length;c++)n[c][0]<i&&(i=n[c][0],o=c);let a=n[(o+1)%n.length][0],l=(o+1)%n.length;for(let c=1;c<n.length;c++)n[c][0]<a&&c!==o&&(a=n[c][0],l=c);return n[l][1]<n[o][1]?(e=n[l],s=n[o],o!==(l+1)%4?(t=n[(l+1)%4],r=n[(l+2)%4]):(t=n[(l+2)%4],r=n[(l+3)%4])):(s=n[l],e=n[o],l!==(o+1)%4?(t=n[(o+1)%4],r=n[(o+2)%4]):(t=n[(o+2)%4],r=n[(o+3)%4])),[e,t,r,s]}function distance2Points(n,e){return Math.sqrt(Math.pow(n[0]-e[0],2)+Math.pow(n[1]-e[1],2))}function crossVect(n,e){return[n[1]*e[2]-n[2]*e[1],n[2]*e[0]-n[0]*e[2],n[0]*e[1]-n[1]*e[0]]}function dotVect(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]}function computeWidthAndHeigth(n,e,t,r,s,i){let o=Math.max(distance2Points(n,e),distance2Points(r,t)),a=Math.max(distance2Points(n,r),distance2Points(e,t)),l=0,c=0,u=Math.ceil(s/2),h=Math.ceil(i/2),d=o/a,g=[n[0],n[1],1],x=[e[0],e[1],1],y=[r[0],r[1],1],w=[t[0],t[1],1],$=dotVect(crossVect(g,w),y)/dotVect(crossVect(x,w),y),S=dotVect(crossVect(g,w),x)/dotVect(crossVect(y,w),x),_=[$*x[0]-g[0],$*x[1]-g[1],$*x[2]-g[2]],T=[S*y[0]-g[0],S*y[1]-g[1],S*y[2]-g[2]],k=_[0],P=_[1],L=_[2],D=T[0],M=T[1],O=T[2],R=1/(L*O)*(k*D-(k*O+L*D)*u+L*O*u*u+(P*M-(P*O+L*M)*h+L*O*h*h));R>=0?R=Math.sqrt(R):R=Math.sqrt(-R);let z=new Matrix$1([[R,0,u],[0,R,h],[0,0,1]]),X=z.transpose(),K=inverse(X),Y=inverse(z),te=Matrix$1.rowVector(_),ie=Matrix$1.rowVector(T),Q=Math.sqrt(dotVect(te.mmul(K).mmul(Y).to1DArray(),_)/dotVect(ie.mmul(K).mmul(Y).to1DArray(),T));return Q===0||d===0?(l=Math.ceil(o),c=Math.ceil(a)):Q<d?(l=Math.ceil(o),c=Math.ceil(l/Q)):(c=Math.ceil(a),l=Math.ceil(Q*c)),[l,c]}function projectionPoint(n,e,t,r,s,i,o,a,l,c,u,h){let[d,g]=[(t*n+r*e+s)/(l*n+c*e+1),(i*n+o*e+a)/(l*n+c*e+1)];return u.getValueXY(Math.floor(d),Math.floor(g),h)}function warpingFourPoints(n,e={}){let{calculateRatio:t=!0}=e;if(n.length!==4)throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${n.length} elements`);let[r,s,i,o]=n,a=[r,s,i,o],[l,c,u,h]=order4Points(a),d,g;t?[d,g]=computeWidthAndHeigth(l,c,u,h,this.width,this.height):(d=Math.ceil(Math.max(distance2Points(l,c),distance2Points(h,u))),g=Math.ceil(Math.max(distance2Points(l,h),distance2Points(c,u))));let x=Image.createFrom(this,{width:d,height:g}),[y,w]=l,[$,S]=c,[_,T]=u,[k,P]=h,[L,D]=[0,0],[M,O]=[0,d-1],[R,z]=[g-1,d-1],[X,K]=[g-1,0],Y=new Matrix$1([[L,D,1,0,0,0,-L*y,-D*y],[M,O,1,0,0,0,-M*$,-O*$],[R,z,1,0,0,0,-R*_,-D*_],[X,K,1,0,0,0,-X*k,-K*k],[0,0,0,L,D,1,-L*w,-D*w],[0,0,0,M,O,1,-M*S,-O*S],[0,0,0,R,z,1,-R*T,-z*T],[0,0,0,X,K,1,-X*P,-K*P]]),te=Matrix$1.columnVector([y,$,_,k,w,S,T,P]),Q=new SingularValueDecomposition(Y).solve(te),[se,le,he,re,fe,ge,j,xe]=Q.to1DArray(),Ee=new Matrix$1(g,d);for(let Se=0;Se<this.channels;Se++){for(let Ce=0;Ce<g;Ce++)for(let Me=0;Me<d;Me++)Ee.set(Ce,Me,projectionPoint(Ce,Me,se,le,he,re,fe,ge,j,xe,this,Se));x.setMatrix(Ee,{channel:Se})}return x}function crop(n={}){let{x:e=0,y:t=0,width:r=this.width-e,height:s=this.height-t}=n;if(this.checkProcessable("crop",{bitDepth:[1,8,16]}),e=Math.round(e),t=Math.round(t),r=Math.round(r),s=Math.round(s),e>this.width-1||t>this.height-1)throw new RangeError(`crop: origin (x:${e}, y:${t}) out of range (${this.width-1}; ${this.height-1})`);if(r<=0||s<=0)throw new RangeError(`crop: width and height (width:${r}; height:${s}) must be positive numbers`);if(e<0||t<0)throw new RangeError(`crop: x and y (x:${e}, y:${t}) must be positive numbers`);if(r>this.width-e||s>this.height-t)throw new RangeError(`crop: (x: ${e}, y:${t}, width:${r}, height:${s}) size is out of range`);let i=this;if(this.bitDepth===1){const o=new Image(r,s,{kind:"BINARY",parent:this});i=cropBinary(this,o,e,t,r,s)}else{const o=Image.createFrom(this,{width:r,height:s,position:[e,t]});i=cropDefault(this,o,e,t,r,s)}return i}function cropDefault(n,e,t,r,s,i){let o=s*n.channels,a=r+i,l=0,c=t*n.channels;for(let u=r;u<a;u++){let h=u*n.width*n.channels+c,d=h+o;for(;h<d;h++)e.data[l++]=n.data[h]}return e}function cropBinary(n,e,t,r,s,i){let o=s*n.channels,a=r+i,l=0,c=t*n.channels;for(let u=r;u<a;u++){let h=u*n.width*n.channels+c,d=h+o;for(;h<d;h++)n.getBit(h)&&e.setBit(l),++l}return e}function cropAlpha(n={}){this.checkProcessable("cropAlpha",{alpha:1});const{threshold:e=this.maxValue}=n;let t=findLeft(this,e,this.components);if(t===-1)throw new Error("Could not find new dimensions. Threshold may be too high.");let r=findTop(this,e,this.components,t),s=findBottom(this,e,this.components,t),i=findRight(this,e,this.components,t,r,s);return this.crop({x:t,y:r,width:i-t+1,height:s-r+1})}function findLeft(n,e,t){for(let r=0;r<n.width;r++)for(let s=0;s<n.height;s++)if(n.getValueXY(r,s,t)>=e)return r;return-1}function findTop(n,e,t,r){for(let s=0;s<n.height;s++)for(let i=r;i<n.width;i++)if(n.getValueXY(i,s,t)>=e)return s;return-1}function findBottom(n,e,t,r){for(let s=n.height-1;s>=0;s--)for(let i=r;i<n.width;i++)if(n.getValueXY(i,s,t)>=e)return s;return-1}function findRight(n,e,t,r,s,i){for(let o=n.width-1;o>=r;o--)for(let a=s;a<=i;a++)if(n.getValueXY(o,a,t)>=e)return o;return-1}function getFactor(n){if(typeof n=="string"){const e=n[n.length-1];n=parseFloat(n),e==="%"&&(n/=100)}return n}function getThreshold$1(n,e){if(!e)throw Error("getThreshold : the maxValue should be specified");if(typeof n=="string"){if(n[n.length-1]!=="%")throw Error("getThreshold : if the value is a string it must finish by %");return parseFloat(n)/100*e}else{if(typeof n=="number")return n<1?n*e:n;throw Error("getThreshold : the value is not valid")}}function factorDimensions(n,e,t){n=getFactor(n);let r=Math.round(n*e),s=Math.round(n*t);return r<=0&&(r=1),s<=0&&(s=1),{width:r,height:s}}function checkRow(n,e){if(e<0||e>=n.height)throw new RangeError(`row must be included between 0 and ${n.height-1}. Current value: ${e}`)}function checkColumn(n,e){if(e<0||e>=n.width)throw new RangeError(`column must be included between 0 and ${n.width-1}. Current value: ${e}`)}function checkChannel(n,e){if(e<0||e>=n.channels)throw new RangeError(`channel must be included between 0 and ${n.channels-1}. Current value: ${e}`)}const validInterpolations={nearestneighbor:"nearestNeighbor",nearestneighbour:"nearestNeighbor",bilinear:"bilinear"};function checkInterpolation(n){if(typeof n!="string")throw new TypeError("interpolation must be a string");if(n=n.toLowerCase(),!validInterpolations[n])throw new RangeError(`invalid interpolation algorithm: ${n}`);return validInterpolations[n]}function nearestNeighbor(n,e,t){const r=this.width/e,s=this.height/t;if(this.bitDepth>1)for(let i=0;i<e;i++){const o=Math.floor((i+.5)*r);for(let a=0;a<t;a++){const l=Math.floor((a+.5)*s);for(let c=0;c<this.channels;c++)n.setValueXY(i,a,c,this.getValueXY(o,l,c))}}else for(let i=0;i<e;i++){const o=Math.floor((i+.5)*r);for(let a=0;a<t;a++){const l=Math.floor((a+.5)*s);this.getBitXY(o,l)&&n.setBitXY(i,a)}}}function resize(n={}){const{factor:e=1,interpolation:t=validInterpolations.nearestneighbor,preserveAspectRatio:r=!0}=n,s=checkInterpolation(t);let i=n.width,o=n.height;if(i||(o&&r?i=Math.round(o*(this.width/this.height)):i=this.width),o||(r?o=Math.round(i*(this.height/this.width)):o=this.height),{width:i,height:o}=factorDimensions(e,i,o),i===this.width&&o===this.height){const u=this.clone();return u.position=[0,0],u}let a=Math.round((this.width-i)/2),l=Math.round((this.height-o)/2);const c=Image.createFrom(this,{width:i,height:o,position:[a,l]});switch(s){case validInterpolations.nearestneighbor:nearestNeighbor.call(this,c,i,o);break;default:throw new Error(`unsupported resize interpolation: ${s}`)}return c}function hsv(){this.checkProcessable("hsv",{bitDepth:[8,16],alpha:[0,1],colorModel:[RGB$1]});let n=Image.createFrom(this,{colorModel:HSV}),e=0,t=this.data;for(let r=0;r<t.length;r+=this.channels){let s=t[r],i=t[r+1],o=t[r+2],a=Math.min(s,i,o),l=Math.max(s,i,o),c=l-a,u=0,h=l===0?0:c/l,d=l;if(l!==a){switch(l){case s:u=(i-o)/c+(i<o?6:0);break;case i:u=(o-s)/c+2;break;case o:u=(s-i)/c+4;break;default:throw new Error("unreachable")}u/=6}n.data[e++]=u*this.maxValue,n.data[e++]=h*this.maxValue,n.data[e++]=d,this.alpha&&(n.data[e++]=t[r+3])}return n}function hsl$1(){this.checkProcessable("hsl",{bitDepth:[8,16],alpha:[0,1],colorModel:[RGB$1]});let n=Image.createFrom(this,{colorModel:HSL}),e=Math.floor(this.maxValue/2),t=0,r=this.data;for(let s=0;s<r.length;s+=this.channels){let i=r[s],o=r[s+1],a=r[s+2],l=Math.max(i,o,a),c=Math.min(i,o,a),u=0,h=0,d=(l+c)/2;if(l!==c){let g=l-c;switch(h=d>e?g/(2-l-c):g/(l+c),l){case i:u=(o-a)/g+(o<a?6:0);break;case o:u=(a-i)/g+2;break;case a:u=(i-o)/g+4;break;default:throw new Error("unreachable")}u/=6}n.data[t++]=u*this.maxValue,n.data[t++]=h*this.maxValue,n.data[t++]=d,this.alpha&&(n.data[t++]=r[s+3])}return n}function cmyk(){this.checkProcessable("cmyk",{bitDepth:[8,16],alpha:[0,1],colorModel:[RGB$1]});let n=Image.createFrom(this,{components:4,colorModel:CMYK$1}),e=0,t=this.data;for(let r=0;r<t.length;r+=this.channels){let s=t[r],i=t[r+1],o=t[r+2],a=Math.min(this.maxValue-s,this.maxValue-i,this.maxValue-o),l=(this.maxValue-s-a)/(1-a/this.maxValue),c=(this.maxValue-i-a)/(1-a/this.maxValue),u=(this.maxValue-o-a)/(1-a/this.maxValue);n.data[e++]=Math.round(l),n.data[e++]=Math.round(c),n.data[e++]=Math.round(u),n.data[e++]=Math.round(a),this.alpha&&(n.data[e++]=t[r+3])}return n}function rgba8(){return new Image(this.width,this.height,this.getRGBAData(),{kind:"RGBA",parent:this})}const methods$1={luma709(n,e,t){return n*6966+e*23436+t*2366>>15},luma601(n,e,t){return n*9798+e*19235+t*3735>>15},maximum(n,e,t){return Math.max(n,e,t)},minimum(n,e,t){return Math.min(n,e,t)},average(n,e,t){return(n+e+t)/3>>0},minmax(n,e,t){return(Math.max(n,e,t)+Math.min(n,e,t))/2},red(n){return n},green(n,e){return e},blue(n,e,t){return t},cyan(n,e,t,r){let s=methods$1.black(n,e,t,r);return(r.maxValue-n-s)/(1-s/r.maxValue)>>0},magenta(n,e,t,r){let s=methods$1.black(n,e,t,r);return(r.maxValue-e-s)/(1-s/r.maxValue)>>0},yellow(n,e,t,r){let s=methods$1.black(n,e,t,r);return(r.maxValue-t-s)/(1-s/r.maxValue)>>0},black(n,e,t,r){return Math.min(r.maxValue-n,r.maxValue-e,r.maxValue-t)},hue(n,e,t,r){let s=methods$1.min(n,e,t),i=methods$1.max(n,e,t);if(i===s)return 0;let o=0,a=i-s;switch(i){case n:o=(e-t)/a+(e<t?6:0);break;case e:o=(t-n)/a+2;break;case t:o=(n-e)/a+4;break;default:throw new Error("unreachable")}return o/6*r.maxValue>>0},saturation(n,e,t,r){let s=methods$1.min(n,e,t),i=methods$1.max(n,e,t),o=i-s;return i===0?0:o/i*r.maxValue},lightness(n,e,t){let r=methods$1.min(n,e,t);return(methods$1.max(n,e,t)+r)/2}};Object.defineProperty(methods$1,"luminosity",{enumerable:!1,value:methods$1.lightness}),Object.defineProperty(methods$1,"luminance",{enumerable:!1,value:methods$1.lightness}),Object.defineProperty(methods$1,"min",{enumerable:!1,value:methods$1.minimum}),Object.defineProperty(methods$1,"max",{enumerable:!1,value:methods$1.maximum}),Object.defineProperty(methods$1,"brightness",{enumerable:!1,value:methods$1.maximum}),Object.keys(methods$1).forEach(n=>{});function grey(n={}){let{algorithm:e="luma709",keepAlpha:t=!1,mergeAlpha:r=!0}=n;if(typeof e!="string"&&typeof e!="function")throw new TypeError("algorithm must be a string or a function");this.checkProcessable("grey",{bitDepth:[8,16],alpha:[0,1]}),this.components===1&&(e="red"),t&=this.alpha,r&=this.alpha,t&&(r=!1);let s=getOutputImage(this,n,{components:1,alpha:t,colorModel:GREY$1}),i;if(typeof e=="function")i=e;else if(i=methods$1[e.toLowerCase()],!i)throw new Error(`unsupported grey algorithm: ${e}`);let o=0;for(let a=0;a<this.data.length;a+=this.channels)r?s.data[o++]=clamp(i(this.data[a],this.data[a+1],this.data[a+2],this)*this.data[a+this.components]/this.maxValue,this):(s.data[o++]=clamp(i(this.data[a],this.data[a+1],this.data[a+2],this),this),s.alpha&&(s.data[o++]=this.data[a+this.components]));return s}function huang(n){let e=0;for(let u=0;u<n.length;u++)if(n[u]!==0){e=u;break}let t=n.length-1;for(let u=n.length-1;u>=e;u--)if(n[u]!==0){t=u;break}let r=1/(t-e),s=new Array(n.length),i=0,o=0;for(let u=e;u<n.length;u++)i+=u*n[u],o+=n[u],s[u]=i/o;let a=new Array(n.length);i=o=0;for(let u=t;u>0;u--)i+=u*n[u],o+=n[u],a[u-1]=i/o;let l=-1,c=Number.MAX_VALUE;for(let u=0;u<n.length;u++){let h=0,d;for(let g=0;g<=u;g++)d=1/(1+r*Math.abs(g-s[u])),d<1e-6||d>.999999||(h+=n[g]*(-d*Math.log(d)-(1-d)*Math.log(1-d)));for(let g=u+1;g<n.length;g++)d=1/(1+r*Math.abs(g-a[u])),d<1e-6||d>.999999||(h+=n[g]*(-d*Math.log(d)-(1-d)*Math.log(1-d)));h<c&&(c=h,l=u)}return l}function intermodes(n){let e=n.slice(),t=0;for(;!bimodalTest$1(e);){let s=0,i=0,o=e[0];for(let a=0;a<n.length-1;a++)s=i,i=o,o=e[a+1],e[a]=(s+i+o)/3;if(e[n.length-1]=(i+o)/3,t++,t>1e4)throw new Error("Intermodes Threshold not found after 10000 iterations")}let r=0;for(let s=1;s<n.length-1;s++)e[s-1]<e[s]&&e[s+1]<e[s]&&(r+=s);return Math.floor(r/2)}function bimodalTest$1(n){let e=!1,t=0;for(let r=1;r<n.length-1;r++)if(n[r-1]<n[r]&&n[r+1]<n[r]&&(t++,t>2))return!1;return t===2&&(e=!0),e}function isodata(n){let e,t,r,s,i=0;for(let o=1;o<n.length;o++)if(n[o]>0){i=o+1;break}for(;;){e=0,r=0;for(let o=0;o<i;o++)r=r+n[o],e=e+n[o]*o;s=0,t=0;for(let o=i+1;o<n.length;o++)t+=n[o],s+=n[o]*o;if(r>0&&t>0&&(e/=r,s/=t,i===Math.round((e+s)/2)))break;if(i++,i>n.length-2)throw new Error("Threshold not found")}return i}function li(n,e){let t,r,s,i,o,a,l,c,u,h,d,g;d=.5,h=0;for(let x=0;x<n.length;x++)h+=x*n[x];h/=e,l=h;do{a=l,t=a+.5|0,r=0,i=0;for(let x=0;x<=t;x++)r+=x*n[x],i+=n[x];c=i===0?0:r/i,s=0,o=0;for(let x=t+1;x<n.length;x++)s+=x*n[x],o+=n[x];u=o===0?0:s/o,g=(c-u)/(Math.log(c)-Math.log(u)),g<-Number.EPSILON?l=g-.5|0:l=g+.5|0}while(Math.abs(l-a)>d);return t}function maxEntropy(n,e){let t=new Array(n.length);for(let d=0;d<n.length;d++)t[d]=n[d]/e;let r=new Array(n.length),s=new Array(n.length);r[0]=t[0],s[0]=1-r[0];for(let d=1;d<n.length;d++)r[d]=r[d-1]+t[d],s[d]=1-r[d];let i=0;for(let d=0;d<n.length;d++)if(Math.abs(r[d])>=Number.EPSILON){i=d;break}let o=n.length-1;for(let d=n.length-1;d>=i;d--)if(Math.abs(s[d])>=Number.EPSILON){o=d;break}let a=-1,l,c=Number.MIN_VALUE,u,h;for(let d=i;d<=o;d++){u=0;for(let g=0;g<=d;g++)n[g]!==0&&(u-=t[g]/r[d]*Math.log(t[g]/r[d]));h=0;for(let g=d+1;g<n.length;g++)n[g]!==0&&(h-=t[g]/s[d]*Math.log(t[g]/s[d]));l=u+h,c<l&&(c=l,a=d)}return a}function mean$1(n,e){let t=0;for(let r=0;r<n.length;r++)t+=r*n[r];return Math.floor(t/e)}function minError(n,e){let t,r=-2,s,i,o,a,l,c,u,h,d,g,x,y=0;for(let w=0;w<n.length;w++)y+=w*n[w];for(y/=e,t=y;t!==r;){let w=sumA(n,t),$=sumA(n,n.length-1),S=sumB(n,t),_=sumB(n,n.length-1),T=sumC(n,t),k=sumC(n,n.length-1);if(s=S/w,i=(_-S)/($-w),o=w/$,a=($-w)/$,l=T/w-s*s,c=(k-T)/($-w)-i*i,u=1/l-1/c,h=s/l-i/c,d=s*s/l-i*i/c+Math.log10(l*(a*a)/(c*(o*o))),g=h*h-u*d,g<0)return t;r=t,x=(h+Math.sqrt(g))/u,isNaN(x)?t=r:t=Math.floor(x)}return t}function sumA(n,e){let t=0;for(let r=0;r<=e;r++)t+=n[r];return t}function sumB(n,e){let t=0;for(let r=0;r<=e;r++)t+=r*n[r];return t}function sumC(n,e){let t=0;for(let r=0;r<=e;r++)t+=r*r*n[r];return t}function minimum(n){if(n.length<2)return 0;let e=0,t=-1,r=-1,s=new Array(n.length);for(let i=0;i<n.length;i++)s[i]=n[i],n[i]>0&&(r=i);for(;!bimodalTest(s);)if(s=smoothed(s),e++,e>1e4)return t;return t=minimumBetweenPeeks(s,r),t}function smoothed(n){let e=new Array(n.length);for(let t=1;t<n.length-1;t++)e[t]=(n[t-1]+n[t]+n[t+1])/3;return e[0]=(n[0]+n[1])/3,e[n.length-1]=(n[n.length-2]+n[n.length-1])/3,e}function minimumBetweenPeeks(n,e){let t;for(let r=1;r<e;r++)if(n[r-1]>n[r]&&n[r+1]>=n[r]){t=r;break}return t}function bimodalTest(n){let e=n.length,t=!1,r=0;for(let s=1;s<e-1;s++)if(n[s-1]<n[s]&&n[s+1]<n[s]&&(r++,r>2))return!1;return r===2&&(t=!0),t}function moments(n,e){let t=1,r=0,s=0,i=0,o=0,a,l,c,u,h,d,g=-1,x=n.length,y=new Array(x);for(let w=0;w<x;w++)y[w]=n[w]/e;for(let w=0;w<x;w++)r+=w*y[w],s+=w*w*y[w],i+=w*w*w*y[w];l=t*s-r*r,c=(-s*s+r*i)/l,u=(t*-i+s*r)/l,h=.5*(-u-Math.sqrt(u*u-4*c)),d=.5*(-u+Math.sqrt(u*u-4*c)),a=(d-r)/(d-h);for(let w=0;w<x;w++)if(o+=y[w],o>a){g=w;break}return g}function otsu(n,e){let t=0,r=0,s=0,i=0,o=0;for(let a=0;a<n.length;a++)o+=a*n[a];for(let a=0;a<n.length;a++){r=r+n[a];const l=e-r;if(r===0||l===0)continue;t=t+a*n[a];const c=(o-t)/l,u=r*l*(t/r-c)*(t/r-c);u>=s&&(i=a,s=u)}return i}function percentile(n){let e=-1,t=.5,r=new Array(n.length),s=partialSum(n,n.length-1),i=1;for(let o=0;o<n.length;o++)r[o]=Math.abs(partialSum(n,o)/s-t),r[o]<i&&(i=r[o],e=o);return e}function partialSum(n,e){let t=0;for(let r=0;r<=e;r++)t+=n[r];return t}function renyiEntropy(n,e){let t,r,s,i=new Array(n.length),o=new Array(n.length),a=new Array(n.length),l=0,c=0,u=0,h=0,d=0,g=0,y=1/(1-.5),$=1/(1-2);for(let k=0;k<n.length;k++)i[k]=n[k]/e;o[0]=i[0],a[0]=1-o[0];for(let k=1;k<n.length;k++)o[k]=o[k-1]+i[k],a[k]=1-o[k];r=0;for(let k=0;k<n.length;k++)if(Math.abs(o[k])>=Number.EPSILON){r=k;break}s=n.length-1;for(let k=n.length-1;k>=r;k--)if(Math.abs(a[k])>=Number.EPSILON){s=k;break}for(let k=r;k<=s;k++){let P=0,L=0,D=0;for(let Y=0;Y<=k;Y++)n[Y]!==0&&(P-=i[Y]/o[k]*Math.log(i[Y]/o[k])),L+=Math.sqrt(i[Y]/o[k]),D+=i[Y]*i[Y]/(o[k]*o[k]);let M=0,O=0,R=0;for(let Y=k+1;Y<n.length;Y++)n[Y]!==0&&(M-=i[Y]/a[k]*Math.log(i[Y]/a[k])),O+=Math.sqrt(i[Y]/a[k]),R+=i[Y]*i[Y]/(a[k]*a[k]);let z=P+M,X=y*(L*O>0?Math.log(L*O):0),K=$*(D*R>0?Math.log(D*R):0);z>h&&(h=z,l=k),X>d&&(d=X,c=k),K>g&&(g=K,u=k)}let S=[l,c,u];S.sort((k,P)=>k-P);let _;Math.abs(S[0]-S[1])<=5?Math.abs(S[1]-S[2])<=5?_=[1,2,1]:_=[0,1,3]:Math.abs(S[1]-S[2])<=5?_=[3,1,0]:_=[1,2,1];let T=o[S[2]]-o[S[0]];return t=Math.round(S[0]*(o[S[0]]+.25*T*_[0])+.25*S[1]*T*_[1]+S[2]*(a[S[2]]+.25*T*_[2])),t}function shanbhag(n,e){let t=new Array(n.length);for(let g=0;g<n.length;g++)t[g]=n[g]/e;let r=new Array(n.length),s=new Array(n.length);r[0]=t[0],s[0]=1-r[0];for(let g=1;g<n.length;g++)r[g]=r[g-1]+t[g],s[g]=1-r[g];let i=0;for(let g=0;g<n.length;g++)if(Math.abs(r[g])>=Number.EPSILON){i=g;break}let o=n.length-1;for(let g=n.length-1;g>=i;g--)if(Math.abs(s[g])>=Number.EPSILON){o=g;break}let a=-1,l=Number.MAX_VALUE,c,u,h,d;for(let g=i;g<=o;g++){h=0,c=.5/r[g];for(let x=1;x<=g;x++)h-=t[x]*Math.log(1-c*r[x-1]);h*=c,d=0,c=.5/s[g];for(let x=g+1;x<n.length;x++)d-=t[x]*Math.log(1-c*s[x]);d*=c,u=Math.abs(h-d),u<l&&(l=u,a=g)}return a}function triangle$1(n){let e=0,t=0,r=0,s=0;for(let h=0;h<n.length;h++)if(n[h]>0){e=h;break}e>0&&e--;for(let h=n.length-1;h>0;h--)if(n[h]>0){s=h;break}s<n.length-1&&s++;for(let h=0;h<n.length;h++)n[h]>t&&(r=h,t=n[h]);let i=!1;if(r-e<s-r){i=!0;let h=0,d=n.length-1;for(;h<d;){let g=n[h];n[h]=n[d],n[d]=g,h++,d--}e=n.length-1-s,r=n.length-1-r}if(e===r)return e;let o,a,l;o=n[r],a=e-r,l=Math.sqrt(o*o+a*a),o/=l,a/=l,l=o*e+a*n[e];let c=e,u=0;for(let h=e+1;h<=r;h++){let d=o*h+a*n[h]-l;d>u&&(c=h,u=d)}if(c--,i){let h=0,d=n.length-1;for(;h<d;){let g=n[h];n[h]=n[d],n[d]=g,h++,d--}return n.length-1-c}else return c}function yen(n,e){let t=new Array(n.length);for(let c=0;c<n.length;c++)t[c]=n[c]/e;let r=new Array(n.length);r[0]=t[0];for(let c=1;c<n.length;c++)r[c]=r[c-1]+t[c];let s=new Array(n.length);s[0]=t[0]*t[0];for(let c=1;c<n.length;c++)s[c]=s[c-1]+t[c]*t[c];let i=new Array(n.length);i[n.length-1]=0;for(let c=n.length-2;c>=0;c--)i[c]=i[c+1]+t[c+1]*t[c+1];let o=-1,a=Number.MIN_VALUE,l;for(let c=0;c<n.length;c++)l=-1*(s[c]*i[c]>0?Math.log(s[c]*i[c]):0)+2*(r[c]*(1-r[c])>0?Math.log(r[c]*(1-r[c])):0),l>a&&(a=l,o=c);return o}const methods={huang,intermodes,isodata,li,maxentropy:maxEntropy,mean:mean$1,minerror:minError,minimum,moments,otsu,percentile,renyientropy:renyiEntropy,shanbhag,triangle:triangle$1,yen},names={};Object.keys(methods).forEach(n=>{names[n]=n});function getThreshold(n={}){let{algorithm:e=names.otsu}=n;this.checkProcessable("getThreshold",{components:1,bitDepth:[8,16]});let t=methods[e.toLowerCase()];if(t){let r=this.getHistogram();return t(r,this.size)}else throw new Error(`unknown thresholding algorithm: ${e}`)}const THRESHOLD="threshold";function mask(n={}){let{algorithm:e=THRESHOLD,threshold:t=.5,useAlpha:r=!0,invert:s=!1}=n;this.checkProcessable("mask",{components:1,bitDepth:[8,16]}),e===THRESHOLD?t=getThreshold$1(t,this.maxValue):t=getThreshold.call(this,n);let i=new Image(this.width,this.height,{kind:"BINARY",parent:this}),o=0;if(this.alpha&&r)for(let a=0;a<this.data.length;a+=this.channels){let l=this.data[a]+(this.maxValue-this.data[a])*(this.maxValue-this.data[a+1])/this.maxValue;(s&&l<=t||!s&&l>=t)&&i.setBit(o),o++}else for(let a=0;a<this.data.length;a+=this.channels)(s&&this.data[a]<=t||!s&&this.data[a]>=t)&&i.setBit(o),o++;return i}function copyImage(n,e,t,r){let s=n.width,i=n.height,o=e.width,a=n.channels;for(let l=0;l<s;l++)for(let c=0;c<i;c++)for(let u=0;u<a;u++){let h=(c*s+l)*a+u,d=((r+c)*o+t+l)*a+u;e.data[d]=n.data[h]}}function pad(n={}){let{size:e=0,algorithm:t="copy",color:r}=n;if(this.checkProcessable("pad",{bitDepth:[8,16]}),t==="set"){if(r.length!==this.channels)throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let l=0;l<r.length;l++)r[l]===0&&(r[l]=.001)}else r=newArray(this.channels,null);Array.isArray(e)||(e=[e,e]);let s=this.width+e[0]*2,i=this.height+e[1]*2,o=this.channels,a=Image.createFrom(this,{width:s,height:i});copyImage(this,a,e[0],e[1]);for(let l=e[0];l<s-e[0];l++)for(let c=0;c<o;c++){let u=r[c]||a.data[(e[1]*s+l)*o+c];for(let h=0;h<e[1];h++)a.data[(h*s+l)*o+c]=u;u=r[c]||a.data[((i-e[1]-1)*s+l)*o+c];for(let h=i-e[1];h<i;h++)a.data[(h*s+l)*o+c]=u}for(let l=0;l<i;l++)for(let c=0;c<o;c++){let u=r[c]||a.data[(l*s+e[0])*o+c];for(let h=0;h<e[0];h++)a.data[(l*s+h)*o+c]=u;u=r[c]||a.data[(l*s+s-e[0]-1)*o+c];for(let h=s-e[0];h<s;h++)a.data[(l*s+h)*o+c]=u}return a}function colorDepth(n=8){if(this.checkProcessable("colorDepth",{bitDepth:[1,8,16]}),![8,16].includes(n))throw Error("You need to specify the new colorDepth as 8 or 16");if(this.bitDepth===n)return this.clone();let e=Image.createFrom(this,{bitDepth:n});switch(n){case 8:if(this.bitDepth===1)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=255);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]>>8;break;case 16:if(this.bitDepth===1)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=65535);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]<<8|this.data[t];break;default:throw new Error("colorDepth conversion unexpected case")}return e}function rotateFree(n,e={}){const{interpolation:t=validInterpolations.nearestneighbor,width:r=this.width,height:s=this.height}=e;if(typeof n!="number")throw new TypeError("degrees must be a number");const i=checkInterpolation(t),o=n*Math.PI/180,a=Math.floor(Math.abs(r*Math.cos(o))+Math.abs(s*Math.sin(o))),l=Math.floor(Math.abs(s*Math.cos(o))+Math.abs(r*Math.sin(o))),c=Math.cos(-o),u=Math.sin(-o);let h=a/2,d=l/2;a%2===0?(h=h-.5,l%2===0?d=d-.5:d=Math.floor(d)):(h=Math.floor(h),l%2===0?d=d-.5:d=Math.floor(d));const g=Math.floor(r/2-h),x=Math.floor(s/2-d);if(this.bitDepth===1){const y=new Image(a,l,{kind:"BINARY",parent:this});switch(i){case validInterpolations.nearestneighbor:return rotateBinaryNearestNeighbor(this,y,g,x,h,d,c,u);case validInterpolations.bilinear:return rotateBinaryBilinear(this,y,g,x,h,d,c,u);default:throw new Error(`unsupported rotate interpolation: ${i}`)}}else{const y=Image.createFrom(this,{width:a,height:l});switch(i){case validInterpolations.nearestneighbor:return rotateNearestNeighbor(this,y,g,x,h,d,c,u);case validInterpolations.bilinear:return rotateBilinear(this,y,g,x,h,d,c,u);default:throw new Error(`unsupported rotate interpolation: ${i}`)}}}function rotateNearestNeighbor(n,e,t,r,s,i,o,a){for(let l=0;l<e.width;l+=1)for(let c=0;c<e.height;c+=1)for(let u=0;u<n.channels;u++){let h=Math.round((l-s)*o-(c-i)*a+s)+t,d=Math.round((c-i)*o+(l-s)*a+i)+r;h<0||h>=n.width||d<0||d>=n.height?n.alpha===1&&u===n.channels-1?e.setValueXY(l,c,u,0):e.setValueXY(l,c,u,n.maxValue):e.setValueXY(l,c,u,n.getValueXY(h,d,u))}return e}function rotateBinaryNearestNeighbor(n,e,t,r,s,i,o,a){for(let l=0;l<e.width;l+=1)for(let c=0;c<e.height;c+=1){let u=Math.round((l-s)*o-(c-i)*a+s)+t,h=Math.round((c-i)*o+(l-s)*a+i)+r;(u<0||u>=n.width||h<0||h>=n.height||n.getBitXY(u,h))&&e.setBitXY(l,c)}return e}function rotateBilinear(n,e,t,r,s,i,o,a){let l=n.width*n.channels;for(let c=0;c<e.height;c++)for(let u=0;u<e.width;u++){let h=(u-s)*o-(c-i)*a+s+t,d=(c-i)*o+(u-s)*a+i+r,g=h|0,x=d|0,y=h-g,w=d-x;for(let $=0;$<n.channels;$++)if(h<0||h>=n.width||d<0||d>=n.height)n.alpha===1&&$===n.channels-1?e.setValueXY(u,c,$,0):e.setValueXY(u,c,$,n.maxValue);else{let S=(x*n.width+g)*n.channels+$,_=n.data[S],T=n.data[S+n.channels],k=n.data[S+l],P=n.data[S+l+n.channels],L=_+y*(T-_)+w*(k-_)+y*w*(_-T-k+P)|0;e.setValueXY(u,c,$,L)}}return e}function rotateBinaryBilinear(n,e,t,r,s,i,o,a){let l=n.width;for(let c=0;c<e.height;c++)for(let u=0;u<e.width;u++){let h=(u-s)*o-(c-i)*a+s+t,d=(c-i)*o+(u-s)*a+i+r,g=h|0,x=d|0,y=h-g,w=d-x;if(h<0||h>=n.width||d<0||d>=n.height)e.setBitXY(u,c);else{let $=x*n.width+g,S=n.getBit($),_=n.getBit($+1),T=n.getBit($+l),k=n.getBit($+1+l);(S|y&_-S|w&T-S|y&w&S-_-T+k)>0&&e.setBitXY(u,c)}}return e}function rotate$1(n,e){if(this.checkProcessable("rotate",{bitDepth:[1,8,16]}),typeof n!="number")throw new TypeError("angle must be a number");switch(n<0&&(n=Math.ceil(-n/360)*360+n),n%360){case 0:return this.clone();case 90:return rotateRight.call(this);case 180:return rotate180.call(this);case 270:return rotateLeft.call(this);default:return rotateFree.call(this,n,e)}}function rotateLeft(){if(this.bitDepth===1){const n=new Image(this.height,this.width,{kind:"BINARY",parent:this}),e=n.height-1;for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)this.getBitXY(r,t)&&n.setBitXY(t,e-r);return n}else{const n=Image.createFrom(this,{width:this.height,height:this.width}),e=n.height-1;for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)for(let s=0;s<this.channels;s++)n.setValueXY(t,e-r,s,this.getValueXY(r,t,s));return n}}function rotateRight(){if(this.bitDepth===1){const n=new Image(this.height,this.width,{kind:"BINARY",parent:this}),e=n.width-1;for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)this.getBitXY(r,t)&&n.setBitXY(e-t,r);return n}else{const n=Image.createFrom(this,{width:this.height,height:this.width}),e=n.width-1;for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)for(let s=0;s<this.channels;s++)n.setValueXY(e-t,r,s,this.getValueXY(r,t,s));return n}}function rotate180(){if(this.bitDepth===1){const n=new Image(this.width,this.height,{kind:"BINARY",parent:this}),e=n.width-1,t=n.height-1;for(let r=0;r<this.height;r++)for(let s=0;s<this.width;s++)this.getBitXY(s,r)&&n.setBitXY(e-s,t-r);return n}else{const n=Image.createFrom(this),e=n.width-1,t=n.height-1;for(let r=0;r<this.height;r++)for(let s=0;s<this.width;s++)for(let i=0;i<this.channels;i++)n.setValueXY(e-s,t-r,i,this.getValueXY(s,r,i));return n}}function insert(n,e={}){const t=getImageParameters(n);this.checkProcessable("insert",t);let{x:r=0,y:s=0}=e;const i=getOutputImageOrInPlace(this,e,{copy:!0}),o=Math.min(i.height,s+n.height),a=Math.min(i.width,r+n.width);if(i.bitDepth===1)for(let l=s;l<o;l++)for(let c=r;c<a;c++)n.getBitXY(c-r,l-s)?i.setBitXY(c,l):i.clearBitXY(c,l);else for(let l=s;l<o;l++)for(let c=r;c<a;c++)i.setPixelXY(c,l,n.getPixelXY(c-r,l-s));return i}function setBorder(n={}){let{size:e=0,algorithm:t="copy",color:r}=n;if(this.checkProcessable("setBorder",{bitDepth:[8,16,32,64]}),t==="set"){if(r.length!==this.channels)throw new Error(`setBorder: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let a=0;a<r.length;a++)r[a]===0&&(r[a]=.001)}else r=newArray(this.channels,null);Array.isArray(e)||(e=[e,e]);let s=e[0],i=e[1],o=this.channels;for(let a=s;a<this.width-s;a++)for(let l=0;l<o;l++){let c=r[l]||this.data[(a+this.width*i)*o+l];for(let u=0;u<i;u++)this.data[(u*this.width+a)*o+l]=c;c=r[l]||this.data[(a+this.width*(this.height-i-1))*o+l];for(let u=this.height-i;u<this.height;u++)this.data[(u*this.width+a)*o+l]=c}for(let a=0;a<this.height;a++)for(let l=0;l<o;l++){let c=r[l]||this.data[(a*this.width+s)*o+l];for(let u=0;u<s;u++)this.data[(a*this.width+u)*o+l]=c;c=r[l]||this.data[(a*this.width+this.width-s-1)*o+l];for(let u=this.width-s;u<this.width;u++)this.data[(a*this.width+u)*o+l]=c}return this}function split(n={}){let{preserveAlpha:e=!0}=n;if(this.checkProcessable("split",{bitDepth:[8,16]}),this.components===1)return new Stack([this.clone()]);let t=new Stack,r=this.data;if(this.alpha&&e)for(let s=0;s<this.components;s++){let i=Image.createFrom(this,{components:1,alpha:!0,colorModel:GREY$1}),o=0;for(let a=0;a<r.length;a+=this.channels)i.data[o++]=r[a+s],i.data[o++]=r[a+this.components];t.push(i)}else for(let s=0;s<this.channels;s++){let i=Image.createFrom(this,{components:1,alpha:!1,colorModel:GREY$1}),o=0;for(let a=0;a<r.length;a+=this.channels)i.data[o++]=r[a+s];t.push(i)}return t}function getChannel(n,e={}){let{keepAlpha:t=!1,mergeAlpha:r=!1}=e;t&=this.alpha,r&=this.alpha,this.checkProcessable("getChannel",{bitDepth:[8,16]}),n=validateChannel(this,n);let s=Image.createFrom(this,{components:1,alpha:t,colorModel:GREY$1}),i=0;for(let o=0;o<this.data.length;o+=this.channels)r?s.data[i++]=this.data[o+n]*this.data[o+this.components]/this.maxValue:(s.data[i++]=this.data[o+n],t&&(s.data[i++]=this.data[o+this.components]));return s}function combineChannels(n=defaultCombineMethod,e={}){let{mergeAlpha:t=!1,keepAlpha:r=!1}=e;t&=this.alpha,r&=this.alpha,this.checkProcessable("combineChannels",{bitDepth:[8,16]});let s=Image.createFrom(this,{components:1,alpha:r,colorModel:GREY$1}),i=0;for(let o=0;o<this.size;o++){let a=n(this.getPixel(o));t?s.data[i++]=a*this.data[o*this.channels+this.components]/this.maxValue:(s.data[i++]=a,r&&(s.data[i++]=this.data[o*this.channels+this.components]))}return s}function defaultCombineMethod(n){return(n[0]+n[1]+n[2])/3}function setChannel(n,e){if(this.checkProcessable("setChannel",{bitDepth:[8,16]}),e.checkProcessable("setChannel (image parameter check)",{bitDepth:[this.bitDepth],alpha:[0],components:[1]}),e.width!==this.width||e.height!==this.height)throw new Error("Images must have exactly the same width and height");n=validateChannel(this,n);let t=n;for(let r=0;r<e.data.length;r++)this.data[t]=e.data[r],t+=this.channels;return this}function getSimilarity(n,e={}){let{shift:t=[0,0],average:r,channels:s,defaultAlpha:i,normalize:o,border:a=[0,0]}=e;if(this.checkProcessable("getSimilarity",{bitDepth:[8,16]}),Array.isArray(a)||(a=[a,a]),s=validateArrayOfChannels(this,{channels:s,defaultAlpha:i}),this.bitDepth!==n.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==n.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==n.colorModel)throw new Error("Both images must have the same colorModel");typeof r>"u"&&(r=!0);let l=Math.max(a[0],-t[0]),c=Math.min(this.width-a[0],this.width-t[0]),u=Math.max(a[1],-t[1]),h=Math.min(this.height-a[1],this.height-t[1]),d=newArray(s.length,0);for(let g=0;g<s.length;g++){let x=s[g],y=o?this.sum[x]:Math.max(this.sum[x],n.sum[x]),w=o?n.sum[x]:Math.max(this.sum[x],n.sum[x]);if(y!==0&&w!==0)for(let $=l;$<c;$++)for(let S=u;S<h;S++){let _=$*this.multiplierX+S*this.multiplierY+x,T=_+t[0]*this.multiplierX+t[1]*this.multiplierY;d[g]+=Math.min(this.data[_]/y,n.data[T]/w)}}return r?d.reduce((g,x)=>g+x)/d.length:d}function getPixelsGrid(n={}){let{sampling:e=[10,10],painted:t=!1,mask:r}=n;this.checkProcessable("getPixelsGrid",{bitDepth:[8,16],channels:1}),Array.isArray(e)||(e=[e,e]);const s=e[0],i=e[1],o=[],a=[],l=this.width/s,c=this.height/i;let u=Math.floor(l/2);for(let d=0;d<s;d++){let g=Math.floor(c/2);for(let x=0;x<i;x++){let y=Math.round(u),w=Math.round(g);(!r||r.getBitXY(y,w))&&(o.push([y,w]),a.push(this.getPixelXY(y,w))),g+=c}u+=l}const h={xyS:o,zS:a};return t&&(h.painted=this.rgba8().paintPoints(o)),h}function Matrix(n,e,t){const r=new Array(n);for(let s=0;s<n;s++)r[s]=new Array(e);if(t)for(let s=0;s<n;s++)for(let i=0;i<e;i++)r[s][i]=t;return r.width=n,r.height=e,Object.setPrototypeOf(r,Matrix.prototype),r}Matrix.prototype.localMin=function(n,e){let t=this[n][e],r=[n,e];for(let s=Math.max(0,n-1);s<Math.min(this.length,n+2);s++)for(let i=Math.max(0,e-1);i<Math.min(this[0].length,e+2);i++)this[s][i]<t&&(t=this[s][i],r=[s,i]);return{position:r,value:t}},Matrix.prototype.localMax=function(n,e){let t=this[n][e],r=[n,e];for(let s=Math.max(0,n-1);s<Math.min(this.length,n+2);s++)for(let i=Math.max(0,e-1);i<Math.min(this[0].length,e+2);i++)this[s][i]>t&&(t=this[s][i],r=[s,i]);return{position:r,value:t}},Matrix.prototype.localSearch=function(n,e,t){let r=[];for(let s=Math.max(0,n-1);s<Math.min(this.length,n+2);s++)for(let i=Math.max(0,e-1);i<Math.min(this[0].length,e+2);i++)this[s][i]===t&&r.push([s,i]);return r};function getBestMatch(n,e={}){let{border:t}=e;if(this.checkProcessable("getChannel",{bitDepth:[8,16]}),this.bitDepth!==n.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==n.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==n.colorModel)throw new Error("Both images must have the same colorModel");let r=new Matrix(n.width,n.height,-1/0),s=Math.floor(n.width/2),i=Math.floor(n.height/2),o=s,a=i,l=!1;for(;!l;){let c=r.localSearch(s,i,-1/0);for(let h=0;h<c.length;h++){let d=c[h],g=this.getSimilarity(n,{border:t,shift:[o-d[0],a-d[1]]});r[d[0]][d[1]]=g}let u=r.localMax(s,i);u.position[0]!==s||u.position[1]!==i?(s=u.position[0],i=u.position[1]):l=!0}return[s-o,i-a]}function getRow(n,e=0){this.checkProcessable("getRow",{bitDepth:[8,16]}),checkRow(this,n),checkChannel(this,e);let t=new Array(this.width),r=0,s=n*this.width*this.channels+e,i=s+this.width*this.channels;for(let o=s;o<i;o+=this.channels)t[r++]=this.data[o];return t}function getColumn(n,e=0){this.checkProcessable("getColumn",{bitDepth:[8,16]}),checkColumn(this,n),checkChannel(this,e);let t=new Array(this.height),r=0,s=this.width*this.channels;for(let i=e+n*this.channels;i<this.data.length;i+=s)t[r++]=this.data[i];return t}function getMatrix(n={}){let{channel:e}=n;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),e===void 0){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");e=0}let t=new Matrix$1(this.height,this.width);for(let r=0;r<this.height;r++)for(let s=0;s<this.width;s++)t.set(r,s,this.getValueXY(s,r,e));return t}function setMatrix(n,e={}){n=new Matrix$1(n);let{channel:t}=e;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),t===void 0){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");t=0}if(this.width!==n.columns||this.height!==n.rows)throw new RangeError("The size of the matrix must be equal to the size of the image");for(let r=0;r<this.height;r++)for(let s=0;s<this.width;s++)this.setValueXY(s,r,t,n.get(r,s))}function getPixelsArray(){this.checkProcessable("getPixelsArray",{bitDepth:[8,16,32]});let n=new Array(this.size),e=0;for(let t=0;t<this.data.length;t+=this.channels){let r=new Array(this.components);for(let s=0;s<this.components;s++)r[s]=this.data[t+s];n[e++]=r}return n}function getIntersection(n){let e=this,t=e.getClosestCommonParent(n),r=e.getRelativePosition(t,{defaultFurther:!0}),s=getRelativePositionForAllPixels(e,r),i=n.getRelativePosition(t,{defaultFurther:!0}),o=getRelativePositionForAllPixels(n,i),a=getCommonSurface(s,o),l={whitePixelsMask1:[],whitePixelsMask2:[],commonWhitePixels:[]};for(let c=0;c<a.length;c++){let u=a[c],h=[u[0]-r[0],u[1]-r[1]],d=[u[0]-i[0],u[1]-i[1]],g=e.getBitXY(h[0],h[1]),x=n.getBitXY(d[0],d[1]);g===1&&x===1&&l.commonWhitePixels.push(u)}for(let c=0;c<s.length;c++){let u,h;c!==0&&(u=Math.floor(c/e.width),h=c%e.width),e.getBitXY(u,h)===1&&l.whitePixelsMask1.push(s[c])}for(let c=0;c<o.length;c++){let u=0,h=0;c!==0&&(u=Math.floor(c/n.width),h=c%n.width),n.getBitXY(u,h)===1&&l.whitePixelsMask2.push(o[c])}return l}function getRelativePositionForAllPixels(n,e){let t=[];for(let r=0;r<n.height;r++)for(let s=0;s<n.width;s++){let i=[r,s];t.push([i[0]+e[0],i[1]+e[1]])}return t}function getCommonSurface(n,e){let t=0,r=0,s=[];for(;t<n.length&&r<e.length;)n[t][0]===e[r][0]&&n[t][1]===e[r][1]?(s.push(n[t]),t++,r++):n[t][0]<e[r][0]||n[t][0]===e[r][0]&&n[t][1]<e[r][1]?t++:r++;return s}function getClosestCommonParent(n){let e=getDepth(this),t=getDepth(n),r;if(e>=t?r=getFurthestParent(this,e):r=getFurthestParent(n,t),e===0||t===0)return r;let s=this,i=n;for(;e!==t;)if(e>t){if(s=s.parent,s===null)return r;e=e-1}else{if(i=i.parent,i===null)return r;t=t-1}for(;s!==i&&s!==null&&i!==null;)if(s=s.parent,i=i.parent,s===null||i===null)return r;return s!==i?r:s}function getDepth(n){let e=0,t=n;for(;t.parent!=null;)t=t.parent,e++;return e}function getFurthestParent(n,e){let t=n;for(;e>0;)t=t.parent,e=e-1;return t}const defaultOptions$1={lowThreshold:10,highThreshold:30,gaussianBlur:1.1},Gx=[[-1,0,1],[-2,0,2],[-1,0,1]],Gy=[[-1,-2,-1],[0,0,0],[1,2,1]],convOptions={bitDepth:32,mode:"periodic"};function cannyEdgeDetector(n,e){n.checkProcessable("Canny edge detector",{bitDepth:8,channels:1,components:1}),e=Object.assign({},defaultOptions$1,e);const t=n.width,r=n.height,s=n.maxValue,i={sigma:e.gaussianBlur,radius:3},o=n.gaussianFilter(i),a=o.convolution(Gy,convOptions),l=o.convolution(Gx,convOptions),c=l.hypotenuse(a),u=n.constructor,h=new u(t,r,{kind:"GREY",bitDepth:32}),d=new u(t,r,{kind:"GREY",bitDepth:32}),g=new u(t,r,{kind:"GREY"});for(var x=1;x<t-1;x++)for(var y=1;y<r-1;y++){var w=(Math.round(Math.atan2(l.getValueXY(x,y,0),a.getValueXY(x,y,0))*(5/Math.PI))+5)%5;w===0&&(c.getValueXY(x,y,0)<=c.getValueXY(x,y-1,0)||c.getValueXY(x,y,0)<=c.getValueXY(x,y+1,0))||w===1&&(c.getValueXY(x,y,0)<=c.getValueXY(x-1,y+1,0)||c.getValueXY(x,y,0)<=c.getValueXY(x+1,y-1,0))||w===2&&(c.getValueXY(x,y,0)<=c.getValueXY(x-1,y,0)||c.getValueXY(x,y,0)<=c.getValueXY(x+1,y,0))||w===3&&(c.getValueXY(x,y,0)<=c.getValueXY(x-1,y-1,0)||c.getValueXY(x,y,0)<=c.getValueXY(x+1,y+1,0))||h.setValueXY(x,y,0,c.getValueXY(x,y,0))}for(x=0;x<t*r;++x){var $=h.data[x],S=0;$>e.highThreshold&&(S++,g.data[x]=s),$>e.lowThreshold&&S++,d.data[x]=S}var _=[];for(x=1;x<t-1;++x)for(y=1;y<r-1;++y)if(d.getValueXY(x,y,0)===1){e:for(var T=x-1;T<x+2;++T)for(var k=y-1;k<y+2;++k)if(d.getValueXY(T,k,0)===2){_.push([x,y]),g.setValueXY(x,y,0,s);break e}}for(;_.length>0;){var P=[];for(x=0;x<_.length;++x)for(y=-1;y<2;++y)for(T=-1;T<2;++T)if(!(y===0&&T===0)){var L=_[x][0]+y,D=_[x][1]+T;d.getValueXY(L,D,0)===1&&g.getValueXY(L,D,0)===0&&(P.push([L,D]),g.setValueXY(L,D,0,s))}_=P}return g}function cannyEdge(n){return cannyEdgeDetector(this,n)}function extract(n,e={}){let{position:t}=e;if(this.checkProcessable("extract",{bitDepth:[1,8,16]}),!t&&(t=n.getRelativePosition(this),!t))throw new Error("extract : can not extract an image because the relative position can not be determined, try to specify manually the position as an array of 2 elements [x,y].");if(this.bitDepth>1){let r=Image.createFrom(this,{width:n.width,height:n.height,alpha:1,position:t,parent:this});for(let s=0;s<n.width;s++)for(let i=0;i<n.height;i++){for(let o=0;o<this.channels;o++){let a=this.getValueXY(s+t[0],i+t[1],o);r.setValueXY(s,i,o,a)}n.getBitXY(s,i)||r.setValueXY(s,i,this.components,0)}return r}else{let r=Image.createFrom(this,{width:n.width,height:n.height,position:t,parent:this});for(let s=0;s<n.height;s++)for(let i=0;i<n.width;i++)n.getBitXY(i,s)&&this.getBitXY(i+t[0],s+t[1])&&r.setBitXY(i,s);return r}}var fastList={exports:{}},hasRequiredFastList;function requireFastList(){return hasRequiredFastList||(hasRequiredFastList=1,function(n,e){(function(){function t(s,i,o){this.next=o,o&&(o.prev=this),this.prev=i,i&&(i.next=this),this.data=s}function r(){if(!(this instanceof r))return new r;this._head=null,this._tail=null,this.length=0}r.prototype={push:function(s){this._tail=new t(s,this._tail,null),this._head||(this._head=this._tail),this.length++},pop:function(){if(this.length!==0){var s=this._tail;return this._tail=s.prev,s.prev&&(s.prev=this._tail.next=null),this.length--,this.length===1?this._head=this._tail:this.length===0&&(this._head=this._tail=null),s.data}},unshift:function(s){this._head=new t(s,null,this._head),this._tail||(this._tail=this._head),this.length++},shift:function(){if(this.length!==0){var s=this._head;return this._head=s.next,s.next&&(s.next=this._head.prev=null),this.length--,this.length===1?this._tail=this._head:this.length===0&&(this._head=this._tail=null),s.data}},item:function(s){s<0&&(s=this.length+s);for(var i=this._head;s-- >0&&i;)i=i.next;return i?i.data:void 0},slice:function(s,i){if(s||(s=0),i||(i=this.length),i<0&&(i=this.length+i),s<0&&(s=this.length+s),i===s)return[];if(i<s)throw new Error("invalid offset: "+s+","+i+" (length="+this.length+")");for(var o=i-s,a=new Array(o),l=0,c=this._head;s-- >0&&c;)c=c.next;for(;l<o&&c;)a[l++]=c.data,c=c.next;return a},drop:function(){r.call(this)},forEach:function(s,i){for(var o=this._head,a=0,l=this.length;a<l&&o;)s.call(i||this,o.data,a,this),o=o.next,a++},map:function(s,i){var o=new r;return this.forEach(function(a,l,c){o.push(s.call(i||c,a,l,c))}),o},filter:function(s,i){var o=new r;return this.forEach(function(a,l,c){s.call(i||c,a,l,c)&&o.push(a)}),o},reduce:function(s,i,o){var a=0,l=this._head,c=this.length;for(i||(a=1,i=l&&l.data,l=l&&l.next);a<c&&l;)i=s.call(o||this,i,l.data,this),a++,l=l.next;return i}},n.exports=r})()}(fastList)),fastList.exports}var fastListExports=requireFastList(),LinkedList=getDefaultExportFromCjs(fastListExports);function floodFill(n={}){const{x:e=0,y:t=0,inPlace:r=!0}=n,s=r?this:Image.createFrom(this);if(this.checkProcessable("floodFill",{bitDepth:1}),this.getBitXY(e,t))return s;const o=new LinkedList;for(o.push(new Node(e,t));o.length>0;){const a=o.shift();s.setBitXY(a.x,a.y);for(let l=a.x+1;l<this.width&&(!s.getBitXY(l,a.y)&&!this.getBitXY(l,a.y));l++)s.setBitXY(l,a.y),a.y+1<this.height&&!this.getBitXY(l,a.y+1)&&o.push(new Node(l,a.y+1)),a.y-1>=0&&!this.getBitXY(l,a.y-1)&&o.push(new Node(l,a.y-1));for(let l=a.x-1;l>=0&&(!s.getBitXY(l,a.y)&&!this.getBitXY(l,a.y));l++)s.setBitXY(l,a.y),a.y+1<this.height&&!this.getBitXY(l,a.y+1)&&o.push(new Node(l,a.y+1)),a.y-1>=0&&!this.getBitXY(l,a.y-1)&&o.push(new Node(l,a.y-1))}return s}function Node(n,e){this.x=n,this.y=e}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function hsv2rgb(n,e,t){e=e/100,t=t/100;var r=[],s=t*e,i=n/60,o=s*(1-Math.abs(i%2-1)),a=t-s;return i>=0&&i<1?r=[s,o,0]:i>=1&&i<2?r=[o,s,0]:i>=2&&i<3?r=[0,s,o]:n>=3&&i<4?r=[0,o,s]:n>=4&&i<5?r=[o,0,s]:n>=5&&i<=6?r=[s,0,o]:r=[0,0,0],{r:Math.round(255*(r[0]+a)),g:Math.round(255*(r[1]+a)),b:Math.round(255*(r[2]+a))}}function hsl2hsv(n,e,t){return e*=(t<50?t:100-t)/100,{h:n,s:2*e/(t+e)*100,v:t+e}}function hsl2rgb$1(n,e,t){var r=hsl2hsv(n,e,t);return hsv2rgb(r.h,r.s,r.v)}var colors={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]};function parse(n){return named(n)||hex3(n)||hex6(n)||rgb(n)||rgba$1(n)||hsl(n)||hsla(n)}function named(n){var e=colors[n.toLowerCase()];if(e)return{r:e[0],g:e[1],b:e[2],a:100}}function rgb(n){var e=n.match(/rgb\(([^)]+)\)/);if(e){var t=e[1].split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:100}}}function rgba$1(n){var e=n.match(/rgba\(([^)]+)\)/);if(e){var t=e[1].split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:t[3]*100}}}function hex6(n){if(n[0]==="#"&&n.length===7)return{r:parseInt(n.slice(1,3),16),g:parseInt(n.slice(3,5),16),b:parseInt(n.slice(5,7),16),a:100}}function hex3(n){if(n[0]==="#"&&n.length===4)return{r:parseInt(n[1]+n[1],16),g:parseInt(n[2]+n[2],16),b:parseInt(n[3]+n[3],16),a:100}}function hsl(n){var e=n.match(/hsl\(([^)]+)\)/);if(e){var t=e[1].split(/ *, */),r=parseInt(t[0],10),s=parseInt(t[1],10),i=parseInt(t[2],10),o=hsl2rgb$1(r,s,i);return _extends({},o,{a:100})}}function hsla(n){var e=n.match(/hsla\(([^)]+)\)/);if(e){var t=e[1].split(/ *, */),r=parseInt(t[0],10),s=parseInt(t[1],10),i=parseInt(t[2],10),o=parseInt(parseFloat(t[3])*100,10),a=hsl2rgb$1(r,s,i);return _extends({},a,{a:o})}}function css2array(n){let e=parse(n);return[e.r,e.g,e.b,Math.round(e.a*255/100)]}function hue2rgb(n,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+(e-n)*6*t:t<1/2?e:t<2/3?n+(e-n)*(2/3-t)*6:n}function hsl2rgb(n,e,t){let r,s,i,o,a,l;return e/=100,t/=100,e===0?o=a=l=t*255:(t<=.5?s=t*(e+1):s=t+e-t*e,r=t*2-s,i=n/360,o=hue2rgb(r,s,i+1/3),a=hue2rgb(r,s,i),l=hue2rgb(r,s,i-1/3)),{r:o,g:a,b:l}}function getDistinctColors(n){let e=new Array(n),t=0;for(let r=0;r<360;r+=360/n){t++;let s=hsl2rgb(r,100,30+t%4*15);e[t-1]=[Math.round(s.r*255),Math.round(s.g*255),Math.round(s.b*255)]}return e}function getRandomColor(){return[Math.floor(Math.random()*256),Math.floor(Math.random()*256),Math.floor(Math.random()*256)]}function getColors(n){let{color:e,colors:t,randomColors:r,numberColors:s=50}=n;if(e&&!Array.isArray(e)&&(e=css2array(e)),e)return[e];if(t)return t=t.map(function(i){return Array.isArray(i)?i:css2array(i)}),t;if(r){t=new Array(s);for(let i=0;i<s;i++)t[i]=getRandomColor()}return getDistinctColors(s)}function paintLabels(n,e,t={}){let{color:r="blue",colors:s,font:i="12px Helvetica",rotate:o=0}=t;if(this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:RGB$1}),!Array.isArray(n))throw Error("paintLabels: labels must be an array");if(!Array.isArray(e))throw Error("paintLabels: positions must be an array");if(r&&!Array.isArray(r)&&(r=css2array(r)),s?s=s.map(function(c){return Array.isArray(c)?c:css2array(c)}):s=[r],n.length!==e.length)throw Error("paintLabels: positions and labels must be arrays from the same size");Array.isArray(i)||(i=[i]),Array.isArray(o)||(o=[o]);let l=this.getCanvas().getContext("2d");for(let c=0;c<n.length;c++){l.save();let u=s[c%s.length];l.fillStyle=`rgba(${u[0]},${u[1]},${u[2]},${u[3]/this.maxValue})`,l.font=i[c%i.length];let h=e[c];l.translate(h[0],h[1]),l.rotate(o[c%o.length]/180*Math.PI),l.fillText(n[c],0,0),l.restore()}return this.data=Uint8Array.from(l.getImageData(0,0,this.width,this.height).data),this}function paintMasks(n,e={}){let{alpha:t=255,labels:r=[],labelsPosition:s=[],labelColor:i="blue",labelFont:o="12px Helvetica"}=e;this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:RGB$1});let a=getColors(Object.assign({},e,{numberColors:n.length}));Array.isArray(n)||(n=[n]);for(let l=0;l<n.length;l++){let c=n[l],u=a[l%a.length];for(let h=0;h<c.width;h++)for(let d=0;d<c.height;d++)if(c.getBitXY(h,d))for(let g=0;g<Math.min(this.components,u.length);g++)if(t===255)this.setValueXY(h+c.position[0],d+c.position[1],g,u[g]);else{let x=this.getValueXY(h+c.position[0],d+c.position[1],g);x=Math.round((x*(255-t)+u[g]*t)/255),this.setValueXY(h+c.position[0],d+c.position[1],g,x)}}if(Array.isArray(r)&&r.length>0){let c=this.getCanvas().getContext("2d");c.fillStyle=i,c.font=o;for(let u=0;u<Math.min(n.length,r.length);u++){let h=s[u]?s[u]:n[u].position;c.fillText(r[u],h[0],h[1])}this.data=Uint8Array.from(c.getImageData(0,0,this.width,this.height).data)}return this}function zerosMatrix(n,e){let t=new Array(n);for(let r=0;r<n;r++)t[r]=new Array(e).fill(0);return t}const cross=[[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0]],smallCross=[[0,1,0],[1,1,1],[0,1,0]];class Shape{constructor(e={}){let{kind:t="cross",shape:r,size:s,width:i,height:o,filled:a=!0}=e;if(s&&(i=s,o=s),r)switch(r.toLowerCase()){case"square":case"rectangle":this.matrix=rectangle(i,o,{filled:a});break;case"circle":case"ellipse":this.matrix=ellipse(i,o,{filled:a});break;case"triangle":this.matrix=triangle(i,o,{filled:a});break;default:throw new Error(`Shape: unexpected shape: ${r}`)}else if(t)switch(t.toLowerCase()){case"cross":this.matrix=cross;break;case"smallcross":this.matrix=smallCross;break;default:throw new Error(`Shape: unexpected kind: ${t}`)}else throw new Error("Shape: expected a kind or a shape option");this.height=this.matrix.length,this.width=this.matrix[0].length,this.halfHeight=this.height/2>>0,this.halfWidth=this.width/2>>0}getPoints(){let e=this.matrix,t=[];for(let r=0;r<e.length;r++)for(let s=0;s<e[0].length;s++)e[r][s]&&t.push([s-this.halfWidth,r-this.halfHeight]);return t}getMask(){let e=new Image(this.width,this.height,{kind:BINARY});for(let t=0;t<this.matrix.length;t++)for(let r=0;r<this.matrix[0].length;r++)this.matrix[t][r]&&e.setBitXY(r,t);return e}}function rectangle(n,e,t){const r=zerosMatrix(e,n);if(t.filled)for(let s=0;s<e;s++)for(let i=0;i<n;i++)r[s][i]=1;else{for(let s of[0,e-1])for(let i=0;i<n;i++)r[s][i]=1;for(let s=0;s<e;s++)for(let i of[0,n-1])r[s][i]=1}return r}function ellipse(n,e,t){const r=zerosMatrix(e,n);let s=1-e%2,i=1-n%2,o=Math.floor((n-1)/2),a=Math.floor((e-1)/2),l=o*o,c=a*a;if(t.filled)for(let u=0;u<=a;u++){let h=Math.floor(Math.sqrt(l-l*u*u/c));for(let d=o-h;d<=o;d++)r[a-u][d]=1,r[a+u+s][d]=1,r[a-u][n-d-1]=1,r[a+u+s][n-d-1]=1}else{for(let u=0;u<=a;u++){let h=Math.floor(Math.sqrt(l-l*u*u/c)),d=o-h;r[a-u][d]=1,r[a+u+s][d]=1,r[a-u][n-d-1]=1,r[a+u+s][n-d-1]=1}for(let u=0;u<=o;u++){let h=Math.floor(Math.sqrt(c-c*u*u/l)),d=a-h;r[d][o-u]=1,r[d][o+u+i]=1,r[e-d-1][o-u]=1,r[e-d-1][o+u+i]=1}}return r}function triangle(n,e,t){if(!t.filled)throw new Error("Non filled triangle is not implemented");const r=zerosMatrix(e,n);for(let s=0;s<e;s++){let i=Math.floor((1-s/e)*n/2);for(let o=i;o<n-i;o++)r[s][o]=1}return r}function paintPoints(n,e={}){let{shape:t}=e;this.checkProcessable("paintPoints",{bitDepth:[8,16]});let r=getColors(Object.assign({},e,{numberColors:n.length})),s=new Shape(t).getPoints(),i=Math.min(this.channels,r[0].length);for(let o=0;o<n.length;o++){let a=r[o%r.length],l=n[o][0],c=n[o][1];for(let u=0;u<s.length;u++){let h=s[u][0],d=s[u][1];if(l+h>=0&&c+d>=0&&l+h<this.width&&c+d<this.height){let g=(l+h+(c+d)*this.width)*this.channels;for(let x=0;x<i;x++)this.data[g+x]=a[x]}}}return this}function paintPolyline(n,e={}){let{color:t=[this.maxValue,0,0],closed:r=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]});let s=Math.min(this.channels,t.length);for(let i=0;i<n.length-1+r;i++){let o=n[i],a=n[(i+1)%n.length],l=a[0]-o[0],c=a[1]-o[1],u=Math.max(Math.abs(l),Math.abs(c)),h=l/u,d=c/u,g=o[0],x=o[1];for(let y=0;y<=u;y++){let w=Math.round(g),$=Math.round(x);if(w>=0&&$>=0&&w<this.width&&$<this.height)if(this.bitDepth===1)this.setBitXY(w,$);else{let S=(w+$*this.width)*this.channels;for(let _=0;_<s;_++)this.data[S+_]=t[_]}g=g+h,x=x+d}}return this}function paintPolylines(n,e={}){let t=Object.assign({},e);this.checkProcessable("paintPolylines",{bitDepth:[8,16]});let r=getColors(Object.assign({},e,{numberColors:n.length}));for(let s=0;s<n.length;s++)t.color=r[s%r.length],this.paintPolyline(n[s],t);return this}function paintPolygon(n,e={}){let{color:t=[this.maxValue,0,0],filled:r=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]}),e.closed=!0;let s=deleteDouble(n);if(r===!1)return this.paintPolyline(n,e);{let i=Array(this.height);for(let o=0;o<this.height;o++){i[o]=[];for(let a=0;a<this.width;a++)i[o].push(0)}for(let o=0;o<s.length;o++){const a=lineBetweenTwoPoints(s[o],s[(o+1)%s.length]);for(let l=0;l<this.height;l++)for(let c=0;c<this.width;c++)isAtTheRightOfTheLine(c,l,a,this.height)&&(i[l][c]=i[l][c]===0?1:0)}for(let o=0;o<this.height;o++)for(let a=0;a<this.width;a++)if(i[o][a]===1)if(this.bitDepth===1)this.setBitXY(a,o);else{let l=Math.min(this.channels,t.length),c=(a+o*this.width)*this.channels;for(let u=0;u<l;u++)this.data[c+u]=t[u]}return this.paintPolyline(n,e)}}function deleteDouble(n){let e=[];for(let t=0;t<n.length;t++)if(!(n[t][0]===n[(t+1)%n.length][0]&&n[t][1]===n[(t+1)%n.length][1])){if(n[t][0]===n[(t-1+n.length)%n.length][0]&&n[t][1]===n[(t-1+n.length)%n.length][1])continue;if(n[(t+1)%n.length][0]===n[(t-1+n.length)%n.length][0]&&n[(t-1+n.length)%n.length][1]===n[(t+1)%n.length][1])continue;e.push(n[t])}return e}function lineBetweenTwoPoints(n,e){if(n[0]===e[0])return{a:0,b:n[0],vertical:!0};{const t=(e[1]-n[1])/(e[0]-n[0]),r=n[1]-t*n[0];return{a:t,b:r,vertical:!1}}}function isAtTheRightOfTheLine(n,e,t,r){if(t.vertical===!0)return t.b<=n;if(t.a===0)return!1;{const s=(e-t.b)/t.a;return s<n&&s>=0&&s<=r}}function paintPolygons(n,e={}){let t=Object.assign({},e);this.checkProcessable("paintPolygons",{bitDepth:[8,16]});let r=getColors(Object.assign({},e,{numberColors:n.length}));for(let s=0;s<n.length;s++)t.color=r[s%r.length],this.paintPolygon(n[s],t);return this}function getHistogram(n={}){let{maxSlots:e=256,channel:t,useAlpha:r=!0}=n;if(this.checkProcessable("getHistogram",{bitDepth:[1,8,16]}),t===void 0){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");t=0}return getChannelHistogram.call(this,t,{useAlpha:r,maxSlots:e})}function getHistograms(n={}){const{maxSlots:e=256,useAlpha:t=!0}=n;this.checkProcessable("getHistograms",{bitDepth:[8,16]});let r=new Array(t?this.components:this.channels);for(let s=0;s<r.length;s++)r[s]=getChannelHistogram.call(this,s,{useAlpha:t,maxSlots:e});return r}function getChannelHistogram(n,e){let{useAlpha:t,maxSlots:r}=e;if(this.bitDepth===1){let l=[0,0];for(let c=0;c<this.height;c++)for(let u=0;u<this.width;u++){let h=this.getBitXY(c,u);h===0?l[0]+=1:h===1&&(l[1]+=1)}return l}let s=Math.log2(r);if(!isInteger(s))throw new RangeError("maxSlots must be a power of 2, for example: 64, 256, 1024");let i=0;this.bitDepth>s&&(i=this.bitDepth-s);let o=this.data,a=newArray(Math.pow(2,Math.min(this.bitDepth,s)),0);if(t&&this.alpha){let l=this.channels-n-1;for(let c=n;c<o.length;c+=this.channels)a[o[c]>>i]+=o[c+l]/this.maxValue}else for(let l=n;l<o.length;l+=this.channels)a[o[l]>>i]++;return a}function getColorHistogram(n={}){let{useAlpha:e=!0,nbSlots:t=512}=n;this.checkProcessable("getColorHistogram",{bitDepth:[8,16],components:[3]});let r=Math.log(t)/Math.log(8);if(r!==Math.floor(r))throw new RangeError("nbSlots must be a power of 8. Usually 8, 64, 512 or 4096");let s=this.bitDepth-r,i=this.data,o=newArray(Math.pow(8,r),0),a=Math.pow(2,r*2),l=Math.pow(2,r);for(let c=0;c<i.length;c+=this.channels){let u=(i[c]>>s)*a+(i[c+1]>>s)*l+(i[c+2]>>s);e&&this.alpha?o[u]+=i[c+this.channels-1]/this.maxValue:o[u]++}return o}function min(){this.checkProcessable("min",{bitDepth:[8,16,32]});let n=newArray(this.channels,1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let t=0;t<this.channels;t++)this.data[e+t]<n[t]&&(n[t]=this.data[e+t]);return n}function max(){this.checkProcessable("max",{bitDepth:[8,16,32]});let n=newArray(this.channels,-1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let t=0;t<this.channels;t++)this.data[e+t]>n[t]&&(n[t]=this.data[e+t]);return n}function sum(){this.checkProcessable("sum",{bitDepth:[8,16]});let n=newArray(this.channels,0);for(let e=0;e<this.data.length;e+=this.channels)for(let t=0;t<this.channels;t++)n[t]+=this.data[e+t];return n}function getMoment(n=0,e=0){this.checkProcessable("getMoment",{bitDepth:[1]});let t=0;for(let r=0;r<this.width;r++)for(let s=0;s<this.height;s++)this.getBitXY(r,s)===1&&(t+=r**n*s**e);return t}function localMaxima(n={}){let{mask:e,region:t=3,removeClosePoints:r=0,invert:s=!1,maxEquals:i=2}=n,o=this;this.checkProcessable("localMaxima",{bitDepth:[8,16],components:1}),t*=4;let a=s?0:1,l=[1,0,-1,0,1,1,-1,-1,2,0,-2,0,2,2,-2,-2],c=[0,1,0,-1,1,-1,1,-1,0,2,0,-2,2,-2,2,-2],u=t<=8?1:2,h=[];for(let d=u;d<o.height-u;d++)for(let g=u;g<o.width-u;g++){if(e&&e.getBitXY(g,d)!==a)continue;let x=0,y=0,w=o.data[g+d*o.width];for(let $=0;$<t;$++)s?o.data[g+l[$]+(d+c[$])*o.width]>w&&x++:o.data[g+l[$]+(d+c[$])*o.width]<w&&x++,o.data[g+l[$]+(d+c[$])*o.width]===w&&y++;x+y===t&&y<=i&&h.push([g,d])}if(r>0)for(let d=0;d<h.length;d++)for(let g=d+1;g<h.length;g++)Math.sqrt(Math.pow(h[d][0]-h[g][0],2)+Math.pow(h[d][1]-h[g][1],2))<r&&(h[d][0]=h[d][0]+h[g][0]>>1,h[d][1]=h[d][1]+h[g][1]>>1,h.splice(g,1),g--);return h}function mean(){let n=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(n.length);for(let t=0;t<n.length;t++){let r=n[t];e[t]=mean$2(r)}return e}function median(){let n=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(n.length);for(let t=0;t<n.length;t++){let r=n[t];e[t]=median$2(r)}return e}function points(){this.checkProcessable("points",{bitDepth:[1]});const n=[];for(let e=0;e<this.width;e++)for(let t=0;t<this.height;t++)this.getBitXY(e,t)===1&&n.push([e,t]);return n}function extendedPoints(){this.checkProcessable("extendedPoints",{bitDepth:[1]});const n=[];for(let e=0;e<this.height;e++)for(let t=0;t<this.width;t++)if(this.getBitXY(t,e)===1)for(n.push([t,e]),this.getBitXY(t+1,e)!==1?(n.push([t+1,e]),n.push([t+1,e+1]),this.getBitXY(t,e+1)!==1&&n.push([t,e+1])):this.getBitXY(t,e+1)!==1&&(n.push([t,e+1]),n.push([t+1,e+1]));t<this.width-2&&this.getBitXY(t+1,e)===1&&this.getBitXY(t+2,e)===1;)t++;return n}function getRelativePosition(n,e={}){if(this===n)return[0,0];let t=[0,0],r=this;for(;r;){if(r===n)return t;r.position&&(t[0]+=r.position[0],t[1]+=r.position[1]),r=r.parent}return e.defaultFurther?t:!1}function countAlphaPixels(n={}){let{alpha:e=1}=n;this.checkProcessable("countAlphaPixels",{bitDepth:[8,16],alpha:1});let t=0;if(e!==void 0){for(let r=this.components;r<this.data.length;r+=this.channels)this.data[r]===e&&t++;return t}else return this.size}function monotoneChainConvexHull$1(n,e={}){const{sorted:t}=e;t||(n=n.slice().sort(byXThenY));const r=n.length,s=new Array(r*2);let i=0;for(let a=0;a<r;a++){const l=n[a];for(;i>=2&&cw(s[i-2],s[i-1],l)<=0;)i--;s[i++]=l}const o=i+1;for(let a=r-2;a>=0;a--){const l=n[a];for(;i>=o&&cw(s[i-2],s[i-1],l)<=0;)i--;s[i++]=l}return s.slice(0,i-1)}function cw(n,e,t){return(e[1]-n[1])*(t[0]-n[0])-(e[0]-n[0])*(t[1]-n[1])}function byXThenY(n,e){return n[0]===e[0]?n[1]-e[1]:n[0]-e[0]}function monotoneChainConvexHull(){return monotoneChainConvexHull$1(this.extendedPoints,{sorted:!1})}function round(n){for(let e=0;e<n.length;e++)n[e][0]=Math.round(n[e][0]),n[e][1]=Math.round(n[e][1]);return n}function difference(n,e){return[n[0]-e[0],n[1]-e[1]]}function normalize(n){let e=Math.sqrt(n[0]**2+n[1]**2);return[n[0]/e,n[1]/e]}function rotate(n,e,t){t===void 0&&(t=new Array(e.length));let r=Math.cos(n),s=Math.sin(n);for(let i=0;i<t.length;++i)t[i]=[r*e[i][0]-s*e[i][1],s*e[i][0]+r*e[i][1]];return t}function perimeter(n){let e=0;for(let t=0;t<n.length;t++){let r=n[t][0],s=n[t][1],i=n[t===n.length-1?0:t+1][0],o=n[t===n.length-1?0:t+1][1];e+=Math.sqrt((i-r)**2+(o-s)**2)}return e}function surface(n){let e=0;for(let t=0;t<n.length;t++){let r=n[t][0],s=n[t===n.length-1?0:t+1][1],i=n[t===n.length-1?0:t+1][0],o=n[t][1];e+=r*s*.5,e-=i*o*.5}return Math.abs(e)}function minMax(n){let e=1/0,t=1/0,r=-1/0,s=-1/0;for(let i=0;i<n.length;i++)n[i][0]<e&&(e=n[i][0]),n[i][0]>r&&(r=n[i][0]),n[i][1]<t&&(t=n[i][1]),n[i][1]>s&&(s=n[i][1]);return[[e,t],[r,s]]}function moveToZeroZero(n,e){e===void 0&&(e=new Array(n.length).fill(0).map(()=>[]));let t=minMax(n),r=t[0][0],s=t[0][1];for(let i=0;i<n.length;i++)e[i][0]=n[i][0]-r,e[i][1]=n[i][1]-s;return e}function minimalBoundingRectangle(n={}){const{originalPoints:e=monotoneChainConvexHull.call(this)}=n;if(e.length===0)return[];if(e.length===1)return[e[0],e[0],e[0],e[0]];const t=new Array(e.length);let r=1/0,s=0,i;for(let o=0;o<t.length;o++){let a=getAngle$1(e[o],e[(o+1)%t.length]);rotate(-a,e,t);let l=t[o][0],c=t[o][1],u=t[(o+1)%t.length][0],h=t[(o+1)%t.length][1],d=!0,g=0,x=0,y=0;for(let _=0;_<t.length;_++){let T=t[_][0],k=t[_][1],P=(T-l)/(u-l);d===!0?(d=!1,g=P,x=P):(P<g&&(g=P),P>x&&(x=P));let L=(-(u-l)*k+u*c-h*l)/(u-l);Math.abs(L)>Math.abs(y)&&(y=L)}let w=[l+g*(u-l),c],$=[l+x*(u-l),c],S=Math.abs(y*(g-x)*(u-l));S<r&&(s=a,r=S,i=[w,$,[$[0],$[1]-y],[w[0],w[1]-y]])}return rotate(s,i,i),i}function getAngle$1(n,e){let t=difference(e,n),r=normalize(t),s=Math.acos(r[0]);return r[1]<0?-s:s}function extend$1(n){let e={inPlace:!0};n.extendMethod("invert",invert),n.extendMethod("abs",abs),n.extendMethod("level",level,e),n.extendMethod("add",add,e),n.extendMethod("subtract",subtract,e),n.extendMethod("subtractImage",subtractImage),n.extendMethod("multiply",multiply,e),n.extendMethod("divide",divide,e),n.extendMethod("hypotenuse",hypotenuse),n.extendMethod("background",background$1),n.extendMethod("flipX",flipX),n.extendMethod("flipY",flipY),n.extendMethod("blurFilter",blurFilter),n.extendMethod("medianFilter",medianFilter),n.extendMethod("gaussianFilter",gaussianFilter),n.extendMethod("sobelFilter",sobelFilter),n.extendMethod("gradientFilter",gradientFilter),n.extendMethod("scharrFilter",scharrFilter),n.extendMethod("dilate",dilate),n.extendMethod("erode",erode),n.extendMethod("open",open),n.extendMethod("close",close),n.extendMethod("topHat",topHat),n.extendMethod("blackHat",blackHat),n.extendMethod("morphologicalGradient",morphologicalGradient),n.extendMethod("warpingFourPoints",warpingFourPoints),n.extendMethod("crop",crop),n.extendMethod("cropAlpha",cropAlpha),n.extendMethod("resize",resize).extendMethod("scale",resize),n.extendMethod("hsv",hsv),n.extendMethod("hsl",hsl$1),n.extendMethod("cmyk",cmyk),n.extendMethod("rgba8",rgba8),n.extendMethod("grey",grey).extendMethod("gray",grey),n.extendMethod("mask",mask),n.extendMethod("pad",pad),n.extendMethod("colorDepth",colorDepth),n.extendMethod("setBorder",setBorder,e),n.extendMethod("rotate",rotate$1),n.extendMethod("rotateLeft",rotateLeft),n.extendMethod("rotateRight",rotateRight),n.extendMethod("insert",insert),n.extendMethod("getRow",getRow),n.extendMethod("getColumn",getColumn),n.extendMethod("getMatrix",getMatrix),n.extendMethod("setMatrix",setMatrix),n.extendMethod("getPixelsArray",getPixelsArray),n.extendMethod("getIntersection",getIntersection),n.extendMethod("getClosestCommonParent",getClosestCommonParent),n.extendMethod("getThreshold",getThreshold),n.extendMethod("split",split),n.extendMethod("getChannel",getChannel),n.extendMethod("combineChannels",combineChannels),n.extendMethod("setChannel",setChannel),n.extendMethod("getSimilarity",getSimilarity),n.extendMethod("getPixelsGrid",getPixelsGrid),n.extendMethod("getBestMatch",getBestMatch),n.extendMethod("cannyEdge",cannyEdge),n.extendMethod("convolution",convolution),n.extendMethod("extract",extract),n.extendMethod("floodFill",floodFill),n.extendMethod("paintLabels",paintLabels,e),n.extendMethod("paintMasks",paintMasks,e),n.extendMethod("paintPoints",paintPoints,e),n.extendMethod("paintPolyline",paintPolyline,e),n.extendMethod("paintPolylines",paintPolylines,e),n.extendMethod("paintPolygon",paintPolygon,e),n.extendMethod("paintPolygons",paintPolygons,e),n.extendMethod("countAlphaPixels",countAlphaPixels),n.extendMethod("monotoneChainConvexHull",monotoneChainConvexHull),n.extendMethod("minimalBoundingRectangle",minimalBoundingRectangle),n.extendMethod("getHistogram",getHistogram).extendProperty("histogram",getHistogram),n.extendMethod("getHistograms",getHistograms).extendProperty("histograms",getHistograms),n.extendMethod("getColorHistogram",getColorHistogram).extendProperty("colorHistogram",getColorHistogram),n.extendMethod("getMin",min).extendProperty("min",min),n.extendMethod("getMax",max).extendProperty("max",max),n.extendMethod("getSum",sum).extendProperty("sum",sum),n.extendMethod("getMoment",getMoment).extendProperty("moment",getMoment),n.extendMethod("getLocalMaxima",localMaxima),n.extendMethod("getMedian",median).extendProperty("median",median),n.extendMethod("getMean",mean).extendProperty("mean",mean),n.extendMethod("getPoints",points).extendProperty("points",points),n.extendMethod("getExtendedPoints",extendedPoints).extendProperty("extendedPoints",extendedPoints),n.extendMethod("getRelativePosition",getRelativePosition)}var quantities$1={exports:{}},quantities=quantities$1.exports,hasRequiredQuantities;function requireQuantities(){return hasRequiredQuantities||(hasRequiredQuantities=1,function(n,e){(function(t,r){n.exports=r()})(quantities,function(){function t(N){return typeof N=="string"||N instanceof String}var r=Number.isFinite||window.isFinite;function s(N){return r(N)}function i(N){return N}function o(N){var C={};return N.filter(function(v){return C.hasOwnProperty(v)?!1:C[v]=!0})}function a(N,C){if(C.length!==N.length)return!1;for(var v=0;v<N.length;v++)if(C[v].compareArray&&!C[v].compareArray(N[v])||C[v]!==N[v])return!1;return!0}function l(N,C){Object.keys(C).forEach(function(v){N[v]=C[v]})}function c(){for(var N=1,C=0,v=0;v<arguments.length;v++){var b=arguments[v];C=C+d(b),N*=b}return C!==0?h(N,C):N}function u(N,C){if(C===0)throw new Error("Divide by zero");var v=Math.pow(10,d(C)),b=v/(v*C);return c(N,b)}function h(N,C){return Math.round(N*Math.pow(10,C))/Math.pow(10,C)}function d(N){if(!isFinite(N))return 0;for(var C=0;N%1!==0;)N*=10,C++;return C}function g(){var N;if(!this)return N=Object.create(g.prototype),g.apply(N,arguments),N;N=Error.apply(this,arguments),this.name="QtyError",this.message=N.message,this.stack=N.stack}g.prototype=Object.create(Error.prototype,{constructor:{value:g}});function x(N,C){throw new g("Incompatible units: "+N+" and "+C)}var y={"<googol>":[["googol"],1e100,"prefix"],"<kibi>":[["Ki","Kibi","kibi"],Math.pow(2,10),"prefix"],"<mebi>":[["Mi","Mebi","mebi"],Math.pow(2,20),"prefix"],"<gibi>":[["Gi","Gibi","gibi"],Math.pow(2,30),"prefix"],"<tebi>":[["Ti","Tebi","tebi"],Math.pow(2,40),"prefix"],"<pebi>":[["Pi","Pebi","pebi"],Math.pow(2,50),"prefix"],"<exi>":[["Ei","Exi","exi"],Math.pow(2,60),"prefix"],"<zebi>":[["Zi","Zebi","zebi"],Math.pow(2,70),"prefix"],"<yebi>":[["Yi","Yebi","yebi"],Math.pow(2,80),"prefix"],"<yotta>":[["Y","Yotta","yotta"],1e24,"prefix"],"<zetta>":[["Z","Zetta","zetta"],1e21,"prefix"],"<exa>":[["E","Exa","exa"],1e18,"prefix"],"<peta>":[["P","Peta","peta"],1e15,"prefix"],"<tera>":[["T","Tera","tera"],1e12,"prefix"],"<giga>":[["G","Giga","giga"],1e9,"prefix"],"<mega>":[["M","Mega","mega"],1e6,"prefix"],"<kilo>":[["k","kilo"],1e3,"prefix"],"<hecto>":[["h","Hecto","hecto"],100,"prefix"],"<deca>":[["da","Deca","deca","deka"],10,"prefix"],"<deci>":[["d","Deci","deci"],.1,"prefix"],"<centi>":[["c","Centi","centi"],.01,"prefix"],"<milli>":[["m","Milli","milli"],.001,"prefix"],"<micro>":[["u","μ","µ","Micro","mc","micro"],1e-6,"prefix"],"<nano>":[["n","Nano","nano"],1e-9,"prefix"],"<pico>":[["p","Pico","pico"],1e-12,"prefix"],"<femto>":[["f","Femto","femto"],1e-15,"prefix"],"<atto>":[["a","Atto","atto"],1e-18,"prefix"],"<zepto>":[["z","Zepto","zepto"],1e-21,"prefix"],"<yocto>":[["y","Yocto","yocto"],1e-24,"prefix"],"<1>":[["1","<1>"],1,""],"<meter>":[["m","meter","meters","metre","metres"],1,"length",["<meter>"]],"<inch>":[["in","inch","inches",'"'],.0254,"length",["<meter>"]],"<foot>":[["ft","foot","feet","'"],.3048,"length",["<meter>"]],"<yard>":[["yd","yard","yards"],.9144,"length",["<meter>"]],"<mile>":[["mi","mile","miles"],1609.344,"length",["<meter>"]],"<naut-mile>":[["nmi","naut-mile"],1852,"length",["<meter>"]],"<league>":[["league","leagues"],4828,"length",["<meter>"]],"<furlong>":[["furlong","furlongs"],201.2,"length",["<meter>"]],"<rod>":[["rd","rod","rods"],5.029,"length",["<meter>"]],"<mil>":[["mil","mils"],254e-7,"length",["<meter>"]],"<angstrom>":[["ang","angstrom","angstroms"],1e-10,"length",["<meter>"]],"<fathom>":[["fathom","fathoms"],1.829,"length",["<meter>"]],"<pica>":[["pica","picas"],.00423333333,"length",["<meter>"]],"<point>":[["pt","point","points"],.000352777778,"length",["<meter>"]],"<redshift>":[["z","red-shift","redshift"],1302773e20,"length",["<meter>"]],"<AU>":[["AU","astronomical-unit"],1495979e5,"length",["<meter>"]],"<light-second>":[["ls","light-second"],299792500,"length",["<meter>"]],"<light-minute>":[["lmin","light-minute"],1798755e4,"length",["<meter>"]],"<light-year>":[["ly","light-year"],9460528e9,"length",["<meter>"]],"<parsec>":[["pc","parsec","parsecs"],3085678e10,"length",["<meter>"]],"<datamile>":[["DM","datamile"],1828.8,"length",["<meter>"]],"<kilogram>":[["kg","kilogram","kilograms"],1,"mass",["<kilogram>"]],"<AMU>":[["u","AMU","amu"],1660538921e-36,"mass",["<kilogram>"]],"<dalton>":[["Da","Dalton","Daltons","dalton","daltons"],1660538921e-36,"mass",["<kilogram>"]],"<slug>":[["slug","slugs"],14.5939029,"mass",["<kilogram>"]],"<short-ton>":[["tn","ton","short-ton"],907.18474,"mass",["<kilogram>"]],"<metric-ton>":[["t","tonne","metric-ton"],1e3,"mass",["<kilogram>"]],"<carat>":[["ct","carat","carats"],2e-4,"mass",["<kilogram>"]],"<pound>":[["lbs","lb","pound","pounds","#"],.45359237,"mass",["<kilogram>"]],"<ounce>":[["oz","ounce","ounces"],.0283495231,"mass",["<kilogram>"]],"<gram>":[["g","gram","grams","gramme","grammes"],.001,"mass",["<kilogram>"]],"<grain>":[["grain","grains","gr"],6479891e-11,"mass",["<kilogram>"]],"<dram>":[["dram","drams","dr"],.0017718452,"mass",["<kilogram>"]],"<stone>":[["stone","stones","st"],6.35029318,"mass",["<kilogram>"]],"<hectare>":[["hectare"],1e4,"area",["<meter>","<meter>"]],"<acre>":[["acre","acres"],4046.85642,"area",["<meter>","<meter>"]],"<sqft>":[["sqft"],1,"area",["<foot>","<foot>"]],"<liter>":[["l","L","liter","liters","litre","litres"],.001,"volume",["<meter>","<meter>","<meter>"]],"<gallon>":[["gal","gallon","gallons"],.0037854118,"volume",["<meter>","<meter>","<meter>"]],"<gallon-imp>":[["galimp","gallon-imp","gallons-imp"],.00454609,"volume",["<meter>","<meter>","<meter>"]],"<quart>":[["qt","quart","quarts"],.00094635295,"volume",["<meter>","<meter>","<meter>"]],"<pint>":[["pt","pint","pints"],.000473176475,"volume",["<meter>","<meter>","<meter>"]],"<pint-imp>":[["ptimp","pint-imp","pints-imp"],.00056826125,"volume",["<meter>","<meter>","<meter>"]],"<cup>":[["cu","cup","cups"],.000236588238,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce>":[["floz","fluid-ounce","fluid-ounces"],295735297e-13,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce-imp>":[["flozimp","floz-imp","fluid-ounce-imp","fluid-ounces-imp"],284130625e-13,"volume",["<meter>","<meter>","<meter>"]],"<tablespoon>":[["tb","tbsp","tbs","tablespoon","tablespoons"],147867648e-13,"volume",["<meter>","<meter>","<meter>"]],"<teaspoon>":[["tsp","teaspoon","teaspoons"],492892161e-14,"volume",["<meter>","<meter>","<meter>"]],"<bushel>":[["bu","bsh","bushel","bushels"],.035239072,"volume",["<meter>","<meter>","<meter>"]],"<oilbarrel>":[["bbl","oilbarrel","oilbarrels","oil-barrel","oil-barrels"],.158987294928,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel>":[["bl","bl-us","beerbarrel","beerbarrels","beer-barrel","beer-barrels"],.1173477658,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel-imp>":[["blimp","bl-imp","beerbarrel-imp","beerbarrels-imp","beer-barrel-imp","beer-barrels-imp"],.16365924,"volume",["<meter>","<meter>","<meter>"]],"<kph>":[["kph"],.277777778,"speed",["<meter>"],["<second>"]],"<mph>":[["mph"],.44704,"speed",["<meter>"],["<second>"]],"<knot>":[["kt","kn","kts","knot","knots"],.514444444,"speed",["<meter>"],["<second>"]],"<fps>":[["fps"],.3048,"speed",["<meter>"],["<second>"]],"<gee>":[["gee"],9.80665,"acceleration",["<meter>"],["<second>","<second>"]],"<Gal>":[["Gal"],.01,"acceleration",["<meter>"],["<second>","<second>"]],"<kelvin>":[["degK","kelvin"],1,"temperature",["<kelvin>"]],"<celsius>":[["degC","celsius","celsius","centigrade"],1,"temperature",["<kelvin>"]],"<fahrenheit>":[["degF","fahrenheit"],5/9,"temperature",["<kelvin>"]],"<rankine>":[["degR","rankine"],5/9,"temperature",["<kelvin>"]],"<temp-K>":[["tempK","temp-K"],1,"temperature",["<temp-K>"]],"<temp-C>":[["tempC","temp-C"],1,"temperature",["<temp-K>"]],"<temp-F>":[["tempF","temp-F"],5/9,"temperature",["<temp-K>"]],"<temp-R>":[["tempR","temp-R"],5/9,"temperature",["<temp-K>"]],"<second>":[["s","sec","secs","second","seconds"],1,"time",["<second>"]],"<minute>":[["min","mins","minute","minutes"],60,"time",["<second>"]],"<hour>":[["h","hr","hrs","hour","hours"],3600,"time",["<second>"]],"<day>":[["d","day","days"],3600*24,"time",["<second>"]],"<week>":[["wk","week","weeks"],7*3600*24,"time",["<second>"]],"<fortnight>":[["fortnight","fortnights"],1209600,"time",["<second>"]],"<year>":[["y","yr","year","years","annum"],31556926,"time",["<second>"]],"<decade>":[["decade","decades"],315569260,"time",["<second>"]],"<century>":[["century","centuries"],3155692600,"time",["<second>"]],"<pascal>":[["Pa","pascal","Pascal"],1,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<bar>":[["bar","bars"],1e5,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<mmHg>":[["mmHg"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inHg>":[["inHg"],3386.3881472,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<torr>":[["torr"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<atm>":[["atm","ATM","atmosphere","atmospheres"],101325,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<psi>":[["psi"],6894.76,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<cmh2o>":[["cmH2O","cmh2o"],98.0638,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inh2o>":[["inH2O","inh2o"],249.082052,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<poise>":[["P","poise"],.1,"viscosity",["<kilogram>"],["<meter>","<second>"]],"<stokes>":[["St","stokes"],1e-4,"viscosity",["<meter>","<meter>"],["<second>"]],"<mole>":[["mol","mole"],1,"substance",["<mole>"]],"<molar>":[["M","molar"],1e3,"molar_concentration",["<mole>"],["<meter>","<meter>","<meter>"]],"<wtpercent>":[["wt%","wtpercent"],10,"molar_concentration",["<kilogram>"],["<meter>","<meter>","<meter>"]],"<katal>":[["kat","katal","Katal"],1,"activity",["<mole>"],["<second>"]],"<unit>":[["U","enzUnit","unit"],16667e-19,"activity",["<mole>"],["<second>"]],"<farad>":[["F","farad","Farad"],1,"capacitance",["<second>","<second>","<second>","<second>","<ampere>","<ampere>"],["<meter>","<meter>","<kilogram>"]],"<coulomb>":[["C","coulomb","Coulomb"],1,"charge",["<ampere>","<second>"]],"<Ah>":[["Ah"],3600,"charge",["<ampere>","<second>"]],"<ampere>":[["A","Ampere","ampere","amp","amps"],1,"current",["<ampere>"]],"<siemens>":[["S","Siemens","siemens"],1,"conductance",["<second>","<second>","<second>","<ampere>","<ampere>"],["<kilogram>","<meter>","<meter>"]],"<henry>":[["H","Henry","henry"],1,"inductance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>","<ampere>"]],"<volt>":[["V","Volt","volt","volts"],1,"potential",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>"]],"<ohm>":[["Ohm","ohm","Ω","Ω"],1,"resistance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>","<ampere>"]],"<weber>":[["Wb","weber","webers"],1,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<tesla>":[["T","tesla","teslas"],1,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<gauss>":[["G","gauss"],1e-4,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<maxwell>":[["Mx","maxwell","maxwells"],1e-8,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<oersted>":[["Oe","oersted","oersteds"],250/Math.PI,"magnetism",["<ampere>"],["<meter>"]],"<joule>":[["J","joule","Joule","joules","Joules"],1,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<erg>":[["erg","ergs"],1e-7,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<btu>":[["BTU","btu","BTUs"],1055.056,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<calorie>":[["cal","calorie","calories"],4.184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Calorie>":[["Cal","Calorie","Calories"],4184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<therm-US>":[["th","therm","therms","Therm","therm-US"],105480400,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Wh>":[["Wh"],3600,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<electronvolt>":[["eV","electronvolt","electronvolts"],1602176634e-28,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<newton>":[["N","Newton","newton"],1,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<dyne>":[["dyn","dyne"],1e-5,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<pound-force>":[["lbf","pound-force"],4.448222,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<hertz>":[["Hz","hertz","Hertz"],1,"frequency",["<1>"],["<second>"]],"<radian>":[["rad","radian","radians"],1,"angle",["<radian>"]],"<degree>":[["deg","degree","degrees"],Math.PI/180,"angle",["<radian>"]],"<arcminute>":[["arcmin","arcminute","arcminutes"],Math.PI/10800,"angle",["<radian>"]],"<arcsecond>":[["arcsec","arcsecond","arcseconds"],Math.PI/648e3,"angle",["<radian>"]],"<gradian>":[["gon","grad","gradian","grads"],Math.PI/200,"angle",["<radian>"]],"<steradian>":[["sr","steradian","steradians"],1,"solid_angle",["<steradian>"]],"<rotation>":[["rotation"],2*Math.PI,"angle",["<radian>"]],"<rpm>":[["rpm"],2*Math.PI/60,"angular_velocity",["<radian>"],["<second>"]],"<byte>":[["B","byte","bytes"],1,"information",["<byte>"]],"<bit>":[["b","bit","bits"],.125,"information",["<byte>"]],"<Bps>":[["Bps"],1,"information_rate",["<byte>"],["<second>"]],"<bps>":[["bps"],.125,"information_rate",["<byte>"],["<second>"]],"<dollar>":[["USD","dollar"],1,"currency",["<dollar>"]],"<cents>":[["cents"],.01,"currency",["<dollar>"]],"<candela>":[["cd","candela"],1,"luminosity",["<candela>"]],"<lumen>":[["lm","lumen"],1,"luminous_power",["<candela>","<steradian>"]],"<lux>":[["lux"],1,"illuminance",["<candela>","<steradian>"],["<meter>","<meter>"]],"<watt>":[["W","watt","watts"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere>":[["VA","volt-ampere"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere-reactive>":[["var","Var","VAr","VAR","volt-ampere-reactive"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<horsepower>":[["hp","horsepower"],745.699872,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<gray>":[["Gy","gray","grays"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<roentgen>":[["R","roentgen"],.00933,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<sievert>":[["Sv","sievert","sieverts"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<becquerel>":[["Bq","becquerel","becquerels"],1,"radiation",["<1>"],["<second>"]],"<curie>":[["Ci","curie","curies"],37e9,"radiation",["<1>"],["<second>"]],"<cpm>":[["cpm"],1/60,"rate",["<count>"],["<second>"]],"<dpm>":[["dpm"],1/60,"rate",["<count>"],["<second>"]],"<bpm>":[["bpm"],1/60,"rate",["<count>"],["<second>"]],"<dot>":[["dot","dots"],1,"resolution",["<each>"]],"<pixel>":[["pixel","px"],1,"resolution",["<each>"]],"<ppi>":[["ppi"],1,"resolution",["<pixel>"],["<inch>"]],"<dpi>":[["dpi"],1,"typography",["<dot>"],["<inch>"]],"<cell>":[["cells","cell"],1,"counting",["<each>"]],"<each>":[["each"],1,"counting",["<each>"]],"<count>":[["count"],1,"counting",["<each>"]],"<base-pair>":[["bp","base-pair"],1,"counting",["<each>"]],"<nucleotide>":[["nt","nucleotide"],1,"counting",["<each>"]],"<molecule>":[["molecule","molecules"],1,"counting",["<1>"]],"<dozen>":[["doz","dz","dozen"],12,"prefix_only",["<each>"]],"<percent>":[["%","percent"],.01,"prefix_only",["<1>"]],"<ppm>":[["ppm"],1e-6,"prefix_only",["<1>"]],"<ppb>":[["ppb"],1e-9,"prefix_only",["<1>"]],"<ppt>":[["ppt"],1e-12,"prefix_only",["<1>"]],"<ppq>":[["ppq"],1e-15,"prefix_only",["<1>"]],"<gross>":[["gr","gross"],144,"prefix_only",["<dozen>","<dozen>"]],"<decibel>":[["dB","decibel","decibels"],1,"logarithmic",["<decibel>"]]},w=["<meter>","<kilogram>","<second>","<mole>","<ampere>","<radian>","<kelvin>","<temp-K>","<byte>","<dollar>","<candela>","<each>","<steradian>","<decibel>"],$="<1>",S=[$];function _(N,C){var v=C[1],b=C[3]||[],I=C[4]||[];if(!s(v))throw new g(N+": Invalid unit definition. 'scalar' must be a number");b.forEach(function(A){if(y[A]===void 0)throw new g(N+": Invalid unit definition. Unit "+A+" in 'numerator' is not recognized")}),I.forEach(function(A){if(y[A]===void 0)throw new g(N+": Invalid unit definition. Unit "+A+" in 'denominator' is not recognized")})}var T={},k={},P={},L={},D={};for(var M in y)if(y.hasOwnProperty(M)){var O=y[M];if(O[2]==="prefix"){T[M]=O[1];for(var R=0;R<O[0].length;R++)k[O[0][R]]=M}else{_(M,O),P[M]={scalar:O[1],numerator:O[3],denominator:O[4]};for(var z=0;z<O[0].length;z++)L[O[0][z]]=M}D[M]=O[0][0]}function X(N){var C,v=[],b=Object.keys(y);if(typeof N>"u")for(C=0;C<b.length;C++)["","prefix"].indexOf(y[b[C]][2])===-1&&v.push(b[C].substr(1,b[C].length-2));else{if(this.getKinds().indexOf(N)===-1)throw new g("Kind not recognized");for(C=0;C<b.length;C++)y[b[C]][2]===N&&v.push(b[C].substr(1,b[C].length-2))}return v.sort(function(I,A){return I.toLowerCase()<A.toLowerCase()?-1:I.toLowerCase()>A.toLowerCase()?1:0})}function K(N){if(!L[N])throw new g("Unit not recognized");return y[L[N]][0]}var Y=["length","time","temperature","mass","current","substance","luminosity","currency","information","angle"];function te(){if(this.signature)return this.signature;for(var N=ie.call(this),C=0;C<N.length;C++)N[C]*=Math.pow(20,C);return N.reduce(function(v,b){return v+b},0)}function ie(){if(!this.isBase())return ie.call(this.toBase());for(var N=new Array(Y.length),C=0;C<N.length;C++)N[C]=0;for(var v,b,I=0;I<this.numerator.length;I++)(v=y[this.numerator[I]])&&(b=Y.indexOf(v[2]),b>=0&&(N[b]=N[b]+1));for(var A=0;A<this.denominator.length;A++)(v=y[this.denominator[A]])&&(b=Y.indexOf(v[2]),b>=0&&(N[b]=N[b]-1));return N}var Q="[+-]",se="\\d+",le=Q+"?"+se,he="\\."+se,re="(?:"+se+"(?:"+he+")?)|(?:"+he+")",fe="[Ee]"+le,ge="(?:"+re+")(?:"+fe+")?",j=Q+"?\\s*"+ge,xe="("+j+")?\\s*([^/]*)(?:/(.+))?",Ee=new RegExp("^"+xe+"$"),Se="\\^|\\*{2}",Ce="[01234]",Me=new RegExp("([^ \\*\\d]+?)(?:"+Se+")?(-?"+Ce+"(?![a-zA-Z]))"),Fe=new RegExp("([^ \\*\\d]+?)(?:"+Se+")?("+Ce+"(?![a-zA-Z]))");function Xe(N){t(N)||(N=N.toString()),N=N.trim();var C=Ee.exec(N);if(!C)throw new g(N+": Quantity not recognized");var v=C[1];v?(v=v.replace(/\s/g,""),this.scalar=parseFloat(v)):this.scalar=1;for(var b=C[2],I=C[3],A,G,U;C=Me.exec(b);){if(A=parseFloat(C[2]),isNaN(A))throw new g("Unit exponent is not a number");if(A===0&&!Oe.test(C[1]))throw new g("Unit not recognized");G=C[1]+" ",U="";for(var W=0;W<Math.abs(A);W++)U+=G;A>=0?b=b.replace(C[0],U):(I=I?I+U:U,b=b.replace(C[0],""))}for(;C=Fe.exec(I);){if(A=parseFloat(C[2]),isNaN(A))throw new g("Unit exponent is not a number");if(A===0&&!Oe.test(C[1]))throw new g("Unit not recognized");G=C[1]+" ",U="";for(var q=0;q<A;q++)U+=G;I=I.replace(C[0],U)}b&&(this.numerator=Pe(b.trim())),I&&(this.denominator=Pe(I.trim()))}var qe=Object.keys(k).sort(function(N,C){return C.length-N.length}).join("|"),ke=Object.keys(L).sort(function(N,C){return C.length-N.length}).join("|"),we="\\b|$",Ye="("+qe+")??("+ke+")(?:"+we+")",Oe=new RegExp("^\\s*("+Ye+"[\\s\\*]*)+$"),Ve=new RegExp(Ye,"g"),de={};function Pe(N){var C=de[N];if(C)return C;var v,b=[];if(!Oe.test(N))throw new g("Unit not recognized");for(;v=Ve.exec(N);)b.push(v.slice(1));return b=b.map(function(I){return k[I[0]]?[k[I[0]],L[I[1]]]:[L[I[1]]]}),b=b.reduce(function(I,A){return I.concat(A)},[]),b=b.filter(function(I){return I}),de[N]=b,b}function Le(N){if(!t(N))throw new g("Argument should be a string");try{return this(N)}catch{return null}}function Be(N){return N instanceof Te}function Te(N,C){if(rt.apply(null,arguments),!Be(this))return new Te(N,C);if(this.scalar=null,this.baseScalar=null,this.signature=null,this._conversionCache={},this.numerator=S,this.denominator=S,st(N)?(this.scalar=N.scalar,this.numerator=N.numerator&&N.numerator.length!==0?N.numerator:S,this.denominator=N.denominator&&N.denominator.length!==0?N.denominator:S):C?(Xe.call(this,C),this.scalar=N):Xe.call(this,N),this.denominator.join("*").indexOf("temp")>=0)throw new g("Cannot divide with temperatures");if(this.numerator.join("*").indexOf("temp")>=0){if(this.numerator.length>1)throw new g("Cannot multiply by temperatures");if(!a(this.denominator,S))throw new g("Cannot divide with temperatures")}if(this.initValue=N,Ue.call(this),this.isTemperature()&&this.baseScalar<0)throw new g("Temperatures must not be less than absolute zero")}Te.prototype={constructor:Te};function rt(N,C){if(C){if(!(s(N)&&t(C)))throw new g("Only number accepted as initialization value when units are explicitly provided")}else if(!(t(N)||s(N)||Be(N)||st(N)))throw new g("Only string, number or quantity accepted as single initialization value")}function st(N){return N&&typeof N=="object"&&N.hasOwnProperty("scalar")}function Ue(){if(this.baseScalar)return this.baseScalar;if(this.isBase())this.baseScalar=this.scalar,this.signature=te.call(this);else{var N=this.toBase();this.baseScalar=N.scalar,this.signature=N.signature}}var ze={"-312078":"elastance","-312058":"resistance","-312038":"inductance","-152058":"potential","-152040":"magnetism","-152038":"magnetism","-7997":"specific_volume","-79":"snap","-59":"jolt","-39":"acceleration","-38":"radiation","-20":"frequency","-19":"speed","-18":"viscosity","-17":"volumetric_flow","-1":"wavenumber",0:"unitless",1:"length",2:"area",3:"volume",20:"time",400:"temperature",7941:"yank",7942:"power",7959:"pressure",7961:"force",7962:"energy",7979:"viscosity",7981:"momentum",7982:"angular_momentum",7997:"density",7998:"area_density",8e3:"mass",152020:"radiation_exposure",159999:"magnetism",16e4:"current",160020:"charge",312058:"conductance",312078:"capacitance",3199980:"activity",3199997:"molar_concentration",32e5:"substance",63999998:"illuminance",64e6:"luminous_power",128e7:"currency","25599999980":"information_rate","25600000000":"information","511999999980":"angular_velocity","512000000000":"angle"};function Ze(){return o(Object.keys(ze).map(function(N){return ze[N]}))}Te.prototype.kind=function(){return ze[this.signature.toString()]},l(Te.prototype,{isDegrees:function(){return(this.signature===null||this.signature===400)&&this.numerator.length===1&&a(this.denominator,S)&&(this.numerator[0].match(/<temp-[CFRK]>/)||this.numerator[0].match(/<(kelvin|celsius|rankine|fahrenheit)>/))},isTemperature:function(){return this.isDegrees()&&this.numerator[0].match(/<temp-[CFRK]>/)}});function We(N,C){var v=N.units(),b=C.to(v),I=Te(nt(v));return Te({scalar:N.scalar-b.scalar,numerator:I.numerator,denominator:I.denominator})}function it(N,C){var v=C.to(nt(N.units()));return Te({scalar:N.scalar-v.scalar,numerator:N.numerator,denominator:N.denominator})}function dt(N,C){var v=C.to(nt(N.units()));return Te({scalar:N.scalar+v.scalar,numerator:N.numerator,denominator:N.denominator})}function nt(N){if(N==="tempK")return"degK";if(N==="tempC")return"degC";if(N==="tempF")return"degF";if(N==="tempR")return"degR";throw new g("Unknown type for temp conversion from: "+N)}function lt(N,C){var v=ft(N),b=C.units(),I;if(b==="degK")I=v.scalar;else if(b==="degC")I=v.scalar;else if(b==="degF")I=v.scalar*9/5;else if(b==="degR")I=v.scalar*9/5;else throw new g("Unknown type for degree conversion to: "+b);return Te({scalar:I,numerator:C.numerator,denominator:C.denominator})}function ft(N){var C=N.units(),v;if(C.match(/(deg)[CFRK]/))v=N.baseScalar;else if(C==="tempK")v=N.scalar;else if(C==="tempC")v=N.scalar;else if(C==="tempF")v=N.scalar*5/9;else if(C==="tempR")v=N.scalar*5/9;else throw new g("Unknown type for temp conversion from: "+C);return Te({scalar:v,numerator:["<kelvin>"],denominator:S})}function bt(N,C){var v=C.units(),b;if(v==="tempK")b=N.baseScalar;else if(v==="tempC")b=N.baseScalar-273.15;else if(v==="tempF")b=N.baseScalar*9/5-459.67;else if(v==="tempR")b=N.baseScalar*9/5;else throw new g("Unknown type for temp conversion to: "+v);return Te({scalar:b,numerator:C.numerator,denominator:C.denominator})}function Pt(N){var C=N.units(),v;if(C.match(/(deg)[CFRK]/))v=N.baseScalar;else if(C==="tempK")v=N.scalar;else if(C==="tempC")v=N.scalar+273.15;else if(C==="tempF")v=(N.scalar+459.67)*5/9;else if(C==="tempR")v=N.scalar*5/9;else throw new g("Unknown type for temp conversion from: "+C);return Te({scalar:v,numerator:["<temp-K>"],denominator:S})}l(Te.prototype,{to:function(N){var C,v;if(N==null)return this;if(!t(N))return this.to(N.units());if(C=this._conversionCache[N],C)return C;if(v=Te(N),v.units()===this.units())return this;if(!this.isCompatible(v))this.isInverse(v)?v=this.inverse().to(N):x(this.units(),v.units());else if(v.isTemperature())v=bt(this,v);else if(v.isDegrees())v=lt(this,v);else{var b=u(this.baseScalar,v.baseScalar);v=Te({scalar:b,numerator:v.numerator,denominator:v.denominator})}return this._conversionCache[N]=v,v},toBase:function(){if(this.isBase())return this;if(this.isTemperature())return Pt(this);var N=Kt[this.units()];return N||(N=xn(this.numerator,this.denominator),Kt[this.units()]=N),N.mul(this.scalar)},toFloat:function(){if(this.isUnitless())return this.scalar;throw new g("Can't convert to Float unless unitless.  Use Unit#scalar")},toPrec:function(N){if(t(N)&&(N=Te(N)),s(N)&&(N=Te(N+" "+this.units())),this.isUnitless()?N.isUnitless()||x(this.units(),N.units()):N=N.to(this.units()),N.scalar===0)throw new g("Divide by zero");var C=c(Math.round(this.scalar/N.scalar),N.scalar);return Te(C+this.units())}});function At(N,C){var v=Te(N),b=Te(C);if(v.eq(b))return i;var I;return v.isTemperature()?I=function(A){return v.mul(A).to(b).scalar}:I=function(A){return A*v.baseScalar/b.baseScalar},function(G){var U,W,q;if(Array.isArray(G)){for(W=G.length,q=[],U=0;U<W;U++)q.push(I(G[U]));return q}else return I(G)}}var Kt={};function xn(N,C){for(var v=[],b=[],I=1,A,G=0;G<N.length;G++)A=N[G],T[A]?I=c(I,T[A]):P[A]&&(I*=P[A].scalar,P[A].numerator&&v.push(P[A].numerator),P[A].denominator&&b.push(P[A].denominator));for(var U=0;U<C.length;U++)A=C[U],T[A]?I/=T[A]:P[A]&&(I/=P[A].scalar,P[A].numerator&&b.push(P[A].numerator),P[A].denominator&&v.push(P[A].denominator));return v=v.reduce(function(W,q){return W.concat(q)},[]),b=b.reduce(function(W,q){return W.concat(q)},[]),Te({scalar:I,numerator:v,denominator:b})}Te.parse=Le,Te.getUnits=X,Te.getAliases=K,Te.mulSafe=c,Te.divSafe=u,Te.getKinds=Ze,Te.swiftConverter=At,Te.Error=g,l(Te.prototype,{add:function(N){if(t(N)&&(N=Te(N)),this.isCompatible(N)||x(this.units(),N.units()),this.isTemperature()&&N.isTemperature())throw new g("Cannot add two temperatures");return this.isTemperature()?dt(this,N):N.isTemperature()?dt(N,this):Te({scalar:this.scalar+N.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},sub:function(N){if(t(N)&&(N=Te(N)),this.isCompatible(N)||x(this.units(),N.units()),this.isTemperature()&&N.isTemperature())return We(this,N);if(this.isTemperature())return it(this,N);if(N.isTemperature())throw new g("Cannot subtract a temperature from a differential degree unit");return Te({scalar:this.scalar-N.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},mul:function(N){if(s(N))return Te({scalar:c(this.scalar,N),numerator:this.numerator,denominator:this.denominator});if(t(N)&&(N=Te(N)),(this.isTemperature()||N.isTemperature())&&!(this.isUnitless()||N.isUnitless()))throw new g("Cannot multiply by temperatures");var C=this,v=N;C.isCompatible(v)&&C.signature!==400&&(v=v.to(C));var b=Fn(C.numerator,C.denominator,v.numerator,v.denominator);return Te({scalar:c(C.scalar,v.scalar,b[2]),numerator:b[0],denominator:b[1]})},div:function(N){if(s(N)){if(N===0)throw new g("Divide by zero");return Te({scalar:this.scalar/N,numerator:this.numerator,denominator:this.denominator})}else t(N)&&(N=Te(N));if(N.scalar===0)throw new g("Divide by zero");if(N.isTemperature())throw new g("Cannot divide with temperatures");if(this.isTemperature()&&!N.isUnitless())throw new g("Cannot divide with temperatures");var C=this,v=N;C.isCompatible(v)&&C.signature!==400&&(v=v.to(C));var b=Fn(C.numerator,C.denominator,v.denominator,v.numerator);return Te({scalar:c(C.scalar,b[2])/v.scalar,numerator:b[0],denominator:b[1]})},inverse:function(){if(this.isTemperature())throw new g("Cannot divide with temperatures");if(this.scalar===0)throw new g("Divide by zero");return Te({scalar:1/this.scalar,numerator:this.denominator,denominator:this.numerator})}});function Fn(N,C,v,b){function I(_e){return _e!==$}N=N.filter(I),v=v.filter(I),C=C.filter(I),b=b.filter(I);var A={};function G(_e,pe){for(var ye,Ge,ee,Ne=0;Ne<_e.length;Ne++)if(T[_e[Ne]]?(ye=_e[Ne+1],Ge=_e[Ne],ee=T[Ge],Ne++):(ye=_e[Ne],Ge=null,ee=1),ye&&ye!==$)if(A[ye]){A[ye][0]+=pe;var He=A[ye][2]?T[A[ye][2]]:1;A[ye][pe===1?3:4]*=u(ee,He)}else A[ye]=[pe,ye,Ge,1,1]}G(N,1),G(C,-1),G(v,1),G(b,-1);var U=[],W=[],q=1;for(var ae in A)if(A.hasOwnProperty(ae)){var Z=A[ae],me;if(Z[0]>0)for(me=0;me<Z[0];me++)U.push(Z[2]===null?Z[1]:[Z[2],Z[1]]);else if(Z[0]<0)for(me=0;me<-Z[0];me++)W.push(Z[2]===null?Z[1]:[Z[2],Z[1]]);q*=u(Z[3],Z[4])}return U.length===0&&(U=S),W.length===0&&(W=S),U=U.reduce(function(_e,pe){return _e.concat(pe)},[]),W=W.reduce(function(_e,pe){return _e.concat(pe)},[]),[U,W,q]}l(Te.prototype,{eq:function(N){return this.compareTo(N)===0},lt:function(N){return this.compareTo(N)===-1},lte:function(N){return this.eq(N)||this.lt(N)},gt:function(N){return this.compareTo(N)===1},gte:function(N){return this.eq(N)||this.gt(N)},compareTo:function(N){if(t(N))return this.compareTo(Te(N));if(this.isCompatible(N)||x(this.units(),N.units()),this.baseScalar<N.baseScalar)return-1;if(this.baseScalar===N.baseScalar)return 0;if(this.baseScalar>N.baseScalar)return 1},same:function(N){return this.scalar===N.scalar&&this.units()===N.units()}}),l(Te.prototype,{isUnitless:function(){return[this.numerator,this.denominator].every(function(N){return a(N,S)})},isCompatible:function(N){return t(N)?this.isCompatible(Te(N)):Be(N)&&N.signature!==void 0?this.signature===N.signature:!1},isInverse:function(N){return this.inverse().isCompatible(N)},isBase:function(){return this._isBase!==void 0?this._isBase:this.isDegrees()&&this.numerator[0].match(/<(kelvin|temp-K)>/)?(this._isBase=!0,this._isBase):(this.numerator.concat(this.denominator).forEach(function(N){N!==$&&w.indexOf(N)===-1&&(this._isBase=!1)},this),this._isBase===!1?this._isBase:(this._isBase=!0,this._isBase))}});function Zt(){}Zt.prototype.get=function(N){return arguments.length>1&&(N=Array.apply(null,arguments)),N.reduce(function(C,v,b){if(C){var I=C[v];return b===N.length-1?I?I.data:void 0:I}},this)},Zt.prototype.set=function(N,C){return arguments.length>2&&(N=Array.prototype.slice.call(arguments,0,-1),C=arguments[arguments.length-1]),N.reduce(function(v,b,I){var A=v[b];return A===void 0&&(A=v[b]={}),I===N.length-1?(A.data=C,C):A},this)};function en(N,C){return(N+" "+C).trim()}Te.formatter=en,l(Te.prototype,{units:function(){if(this._units!==void 0)return this._units;var N=a(this.numerator,S),C=a(this.denominator,S);if(N&&C)return this._units="",this._units;var v=tn(this.numerator),b=tn(this.denominator);return this._units=v+(C?"":"/"+b),this._units},toString:function(N,C){var v;if(s(N))v=this.units(),C=N;else if(t(N))v=N;else if(Be(N))return this.toPrec(N).toString(C);var b=this.to(v),I=C!==void 0?h(b.scalar,C):b.scalar;return b=(I+" "+b.units()).trim(),b},format:function(N,C){arguments.length===1&&typeof N=="function"&&(C=N,N=void 0),C=C||Te.formatter;var v=this.to(N);return C.call(this,v.scalar,v.units())}});var Mn=new Zt;function tn(N){var C=Mn.get(N);if(C)return C;var v=a(N,S);return v?C="1":C=hn(Ft(N)).join("*"),Mn.set(N,C),C}function Ft(N){for(var C=[],v,b,I=0;I<N.length;I++)v=N[I],b=N[I+1],T[v]?(C.push(D[v]+D[b]),I++):C.push(D[v]);return C}function hn(N){var C=N.reduce(function(v,b){var I=v[b];return I||v.push(I=v[b]=[b,0]),I[1]++,v},[]);return C.map(function(v){return v[0]+(v[1]>1?v[1]:"")})}return Te.version="1.8.0",Te})}(quantities$1)),quantities$1.exports}var quantitiesExports=requireQuantities(),Qty=getDefaultExportFromCjs(quantitiesExports);function deepValue(n,e=""){let t=e.split(".");for(let r of t){if(n[r]===void 0)return;n=n[r]}return n}var orientation={exports:{}},twoProduct_1,hasRequiredTwoProduct;function requireTwoProduct(){if(hasRequiredTwoProduct)return twoProduct_1;hasRequiredTwoProduct=1,twoProduct_1=e;var n=+(Math.pow(2,27)+1);function e(t,r,s){var i=t*r,o=n*t,a=o-t,l=o-a,c=t-l,u=n*r,h=u-r,d=u-h,g=r-d,x=i-l*d,y=x-c*d,w=y-l*g,$=c*g-w;return s?(s[0]=$,s[1]=i,s):[$,i]}return twoProduct_1}var robustSum,hasRequiredRobustSum;function requireRobustSum(){if(hasRequiredRobustSum)return robustSum;hasRequiredRobustSum=1,robustSum=e;function n(t,r){var s=t+r,i=s-t,o=s-i,a=r-i,l=t-o,c=l+a;return c?[c,s]:[s]}function e(t,r){var s=t.length|0,i=r.length|0;if(s===1&&i===1)return n(t[0],r[0]);var o=s+i,a=new Array(o),l=0,c=0,u=0,h=Math.abs,d=t[c],g=h(d),x=r[u],y=h(x),w,$;g<y?($=d,c+=1,c<s&&(d=t[c],g=h(d))):($=x,u+=1,u<i&&(x=r[u],y=h(x))),c<s&&g<y||u>=i?(w=d,c+=1,c<s&&(d=t[c],g=h(d))):(w=x,u+=1,u<i&&(x=r[u],y=h(x)));for(var S=w+$,_=S-w,T=$-_,k=T,P=S,L,D,M,O,R;c<s&&u<i;)g<y?(w=d,c+=1,c<s&&(d=t[c],g=h(d))):(w=x,u+=1,u<i&&(x=r[u],y=h(x))),$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L;for(;c<s;)w=d,$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L,c+=1,c<s&&(d=t[c]);for(;u<i;)w=x,$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L,u+=1,u<i&&(x=r[u]);return k&&(a[l++]=k),P&&(a[l++]=P),l||(a[l++]=0),a.length=l,a}return robustSum}var twoSum,hasRequiredTwoSum;function requireTwoSum(){if(hasRequiredTwoSum)return twoSum;hasRequiredTwoSum=1,twoSum=n;function n(e,t,r){var s=e+t,i=s-e,o=s-i,a=t-i,l=e-o;return r?(r[0]=l+a,r[1]=s,r):[l+a,s]}return twoSum}var robustScale,hasRequiredRobustScale;function requireRobustScale(){if(hasRequiredRobustScale)return robustScale;hasRequiredRobustScale=1;var n=requireTwoProduct(),e=requireTwoSum();robustScale=t;function t(r,s){var i=r.length;if(i===1){var o=n(r[0],s);return o[0]?o:[o[1]]}var a=new Array(2*i),l=[.1,.1],c=[.1,.1],u=0;n(r[0],s,l),l[0]&&(a[u++]=l[0]);for(var h=1;h<i;++h){n(r[h],s,c);var d=l[1];e(d,c[0],l),l[0]&&(a[u++]=l[0]);var g=c[1],x=l[1],y=g+x,w=y-g,$=x-w;l[1]=y,$&&(a[u++]=$)}return l[1]&&(a[u++]=l[1]),u===0&&(a[u++]=0),a.length=u,a}return robustScale}var robustDiff,hasRequiredRobustDiff;function requireRobustDiff(){if(hasRequiredRobustDiff)return robustDiff;hasRequiredRobustDiff=1,robustDiff=e;function n(t,r){var s=t+r,i=s-t,o=s-i,a=r-i,l=t-o,c=l+a;return c?[c,s]:[s]}function e(t,r){var s=t.length|0,i=r.length|0;if(s===1&&i===1)return n(t[0],-r[0]);var o=s+i,a=new Array(o),l=0,c=0,u=0,h=Math.abs,d=t[c],g=h(d),x=-r[u],y=h(x),w,$;g<y?($=d,c+=1,c<s&&(d=t[c],g=h(d))):($=x,u+=1,u<i&&(x=-r[u],y=h(x))),c<s&&g<y||u>=i?(w=d,c+=1,c<s&&(d=t[c],g=h(d))):(w=x,u+=1,u<i&&(x=-r[u],y=h(x)));for(var S=w+$,_=S-w,T=$-_,k=T,P=S,L,D,M,O,R;c<s&&u<i;)g<y?(w=d,c+=1,c<s&&(d=t[c],g=h(d))):(w=x,u+=1,u<i&&(x=-r[u],y=h(x))),$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L;for(;c<s;)w=d,$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L,c+=1,c<s&&(d=t[c]);for(;u<i;)w=x,$=k,S=w+$,_=S-w,T=$-_,T&&(a[l++]=T),L=P+S,D=L-P,M=L-D,O=S-D,R=P-M,k=R+O,P=L,u+=1,u<i&&(x=-r[u]);return k&&(a[l++]=k),P&&(a[l++]=P),l||(a[l++]=0),a.length=l,a}return robustDiff}var hasRequiredOrientation;function requireOrientation(){return hasRequiredOrientation||(hasRequiredOrientation=1,function(n){var e=requireTwoProduct(),t=requireRobustSum(),r=requireRobustScale(),s=requireRobustDiff(),i=5,o=11102230246251565e-32,a=(3+16*o)*o,l=(7+56*o)*o;function c(_,T,k,P){return function(D,M,O){var R=_(_(T(M[1],O[0]),T(-O[1],M[0])),_(T(D[1],M[0]),T(-M[1],D[0]))),z=_(T(D[1],O[0]),T(-O[1],D[0])),X=P(R,z);return X[X.length-1]}}function u(_,T,k,P){return function(D,M,O,R){var z=_(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),M[2]),_(k(_(T(M[1],R[0]),T(-R[1],M[0])),-O[2]),k(_(T(M[1],O[0]),T(-O[1],M[0])),R[2]))),_(k(_(T(M[1],R[0]),T(-R[1],M[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),R[2])))),X=_(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-O[2]),k(_(T(D[1],O[0]),T(-O[1],D[0])),R[2]))),_(k(_(T(M[1],O[0]),T(-O[1],M[0])),D[2]),_(k(_(T(D[1],O[0]),T(-O[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),O[2])))),K=P(z,X);return K[K.length-1]}}function h(_,T,k,P){return function(D,M,O,R,z){var X=_(_(_(k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),O[2]),_(k(_(T(O[1],z[0]),T(-z[1],O[0])),-R[2]),k(_(T(O[1],R[0]),T(-R[1],O[0])),z[2]))),M[3]),_(k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),M[2]),_(k(_(T(M[1],z[0]),T(-z[1],M[0])),-R[2]),k(_(T(M[1],R[0]),T(-R[1],M[0])),z[2]))),-O[3]),k(_(k(_(T(O[1],z[0]),T(-z[1],O[0])),M[2]),_(k(_(T(M[1],z[0]),T(-z[1],M[0])),-O[2]),k(_(T(M[1],O[0]),T(-O[1],M[0])),z[2]))),R[3]))),_(k(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),M[2]),_(k(_(T(M[1],R[0]),T(-R[1],M[0])),-O[2]),k(_(T(M[1],O[0]),T(-O[1],M[0])),R[2]))),-z[3]),_(k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),M[2]),_(k(_(T(M[1],z[0]),T(-z[1],M[0])),-R[2]),k(_(T(M[1],R[0]),T(-R[1],M[0])),z[2]))),D[3]),k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-R[2]),k(_(T(D[1],R[0]),T(-R[1],D[0])),z[2]))),-M[3])))),_(_(k(_(k(_(T(M[1],z[0]),T(-z[1],M[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),z[2]))),R[3]),_(k(_(k(_(T(M[1],R[0]),T(-R[1],M[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),R[2]))),-z[3]),k(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),M[2]),_(k(_(T(M[1],R[0]),T(-R[1],M[0])),-O[2]),k(_(T(M[1],O[0]),T(-O[1],M[0])),R[2]))),D[3]))),_(k(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-O[2]),k(_(T(D[1],O[0]),T(-O[1],D[0])),R[2]))),-M[3]),_(k(_(k(_(T(M[1],R[0]),T(-R[1],M[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),R[2]))),O[3]),k(_(k(_(T(M[1],O[0]),T(-O[1],M[0])),D[2]),_(k(_(T(D[1],O[0]),T(-O[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),O[2]))),-R[3]))))),K=_(_(_(k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),O[2]),_(k(_(T(O[1],z[0]),T(-z[1],O[0])),-R[2]),k(_(T(O[1],R[0]),T(-R[1],O[0])),z[2]))),D[3]),k(_(k(_(T(R[1],z[0]),T(-z[1],R[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-R[2]),k(_(T(D[1],R[0]),T(-R[1],D[0])),z[2]))),-O[3])),_(k(_(k(_(T(O[1],z[0]),T(-z[1],O[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-O[2]),k(_(T(D[1],O[0]),T(-O[1],D[0])),z[2]))),R[3]),k(_(k(_(T(O[1],R[0]),T(-R[1],O[0])),D[2]),_(k(_(T(D[1],R[0]),T(-R[1],D[0])),-O[2]),k(_(T(D[1],O[0]),T(-O[1],D[0])),R[2]))),-z[3]))),_(_(k(_(k(_(T(O[1],z[0]),T(-z[1],O[0])),M[2]),_(k(_(T(M[1],z[0]),T(-z[1],M[0])),-O[2]),k(_(T(M[1],O[0]),T(-O[1],M[0])),z[2]))),D[3]),k(_(k(_(T(O[1],z[0]),T(-z[1],O[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-O[2]),k(_(T(D[1],O[0]),T(-O[1],D[0])),z[2]))),-M[3])),_(k(_(k(_(T(M[1],z[0]),T(-z[1],M[0])),D[2]),_(k(_(T(D[1],z[0]),T(-z[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),z[2]))),O[3]),k(_(k(_(T(M[1],O[0]),T(-O[1],M[0])),D[2]),_(k(_(T(D[1],O[0]),T(-O[1],D[0])),-M[2]),k(_(T(D[1],M[0]),T(-M[1],D[0])),O[2]))),-z[3])))),Y=P(X,K);return Y[Y.length-1]}}function d(_){var T=_===3?c:_===4?u:h;return T(t,e,r,s)}var g=d(3),x=d(4),y=[function(){return 0},function(){return 0},function(T,k){return k[0]-T[0]},function(T,k,P){var L=(T[1]-P[1])*(k[0]-P[0]),D=(T[0]-P[0])*(k[1]-P[1]),M=L-D,O;if(L>0){if(D<=0)return M;O=L+D}else if(L<0){if(D>=0)return M;O=-(L+D)}else return M;var R=a*O;return M>=R||M<=-R?M:g(T,k,P)},function(T,k,P,L){var D=T[0]-L[0],M=k[0]-L[0],O=P[0]-L[0],R=T[1]-L[1],z=k[1]-L[1],X=P[1]-L[1],K=T[2]-L[2],Y=k[2]-L[2],te=P[2]-L[2],ie=M*X,Q=O*z,se=O*R,le=D*X,he=D*z,re=M*R,fe=K*(ie-Q)+Y*(se-le)+te*(he-re),ge=(Math.abs(ie)+Math.abs(Q))*Math.abs(K)+(Math.abs(se)+Math.abs(le))*Math.abs(Y)+(Math.abs(he)+Math.abs(re))*Math.abs(te),j=l*ge;return fe>j||-fe>j?fe:x(T,k,P,L)}];function w(_){var T=y[_.length];return T||(T=y[_.length]=d(_.length)),T.apply(void 0,_)}function $(_,T,k,P,L,D,M){return function(R,z,X,K,Y){switch(arguments.length){case 0:case 1:return 0;case 2:return P(R,z);case 3:return L(R,z,X);case 4:return D(R,z,X,K);case 5:return M(R,z,X,K,Y)}for(var te=new Array(arguments.length),ie=0;ie<arguments.length;++ie)te[ie]=arguments[ie];return _(te)}}function S(){for(;y.length<=i;)y.push(d(y.length));n.exports=$.apply(void 0,[w].concat(y));for(var _=0;_<=i;++_)n.exports[_]=y[_]}S()}(orientation)),orientation.exports}var robustPnp,hasRequiredRobustPnp;function requireRobustPnp(){if(hasRequiredRobustPnp)return robustPnp;hasRequiredRobustPnp=1,robustPnp=e;var n=requireOrientation();function e(t,r){for(var s=r[0],i=r[1],o=t.length,a=1,l=o,c=0,u=o-1;c<l;u=c++){var h=t[c],d=t[u],g=h[1],x=d[1];if(x<g){if(x<i&&i<g){var y=n(h,d,r);if(y===0)return 0;a^=0<y|0}else if(i===g){var w=t[(c+1)%o],$=w[1];if(g<$){var y=n(h,d,r);if(y===0)return 0;a^=0<y|0}}}else if(g<x){if(g<i&&i<x){var y=n(h,d,r);if(y===0)return 0;a^=y<0|0}else if(i===g){var w=t[(c+1)%o],$=w[1];if($<g){var y=n(h,d,r);if(y===0)return 0;a^=y<0|0}}}else if(i===g){var S=Math.min(h[0],d[0]),_=Math.max(h[0],d[0]);if(c===0){for(;u>0;){var T=(u+o-1)%o,k=t[T];if(k[1]!==i)break;var P=k[0];S=Math.min(S,P),_=Math.max(_,P),u=T}if(u===0)return S<=s&&s<=_?0:1;l=u+1}for(var L=t[(u+o-1)%o][1];c+1<l;){var k=t[c+1];if(k[1]!==i)break;var P=k[0];S=Math.min(S,P),_=Math.max(_,P),c+=1}if(S<=s&&s<=_)return 0;var D=t[(c+1)%o][1];s<S&&L<i!=D<i&&(a^=1)}}return 2*a-1}return robustPnp}var robustPnpExports=requireRobustPnp(),robustPointInPolygon=getDefaultExportFromCjs(robustPnpExports);function feretDiameters(n={}){const{originalPoints:e=monotoneChainConvexHull.call(this)}=n;if(e.length===0)return{min:0,max:0,minLine:[],maxLine:[],aspectRatio:1};if(e.length===1)return{min:1,max:1,minLine:[e[0],e[0]],maxLine:[e[0],e[0]],aspectRatio:1};const t=new Array(e.length);let r=1/0,s=0,i=[];for(let c=0;c<e.length;c++){let u=getAngle(e[c],e[(c+1)%e.length]);rotate(-u,e,t);let h=0,d=[];for(let g=0;g<e.length;g++){let x=Math.abs(t[c][1]-t[g][1]);x>h&&(h=x,d=[],d.push([t[g][0],t[c][1]],[t[g][0],t[g][1]]))}h<r&&(r=h,s=u,i=d)}rotate(s,i,i);let o=0,a=[],l=0;for(let c=0;c<e.length-1;c++)for(let u=c+1;u<e.length;u++){let h=(e[c][0]-e[u][0])**2+(e[c][1]-e[u][1])**2;h>l&&(l=h,o=Math.sqrt(h),a=[e[c],e[u]])}return{min:r,minLine:i,max:o,maxLine:a,aspectRatio:r/o}}function getAngle(n,e){let t=difference(e,n),r=normalize(t),s=Math.acos(r[0]);return r[1]<0?-s:s}class Roi{constructor(e,t){this.map=e,this.id=t,this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY,this.minY=Number.POSITIVE_INFINITY,this.maxY=Number.NEGATIVE_INFINITY,this.meanX=0,this.meanY=0,this.surface=0,this.computed={}}getMask(e={}){const{scale:t=1,kind:r=""}=e;let s;switch(r){case"contour":s=this.contourMask;break;case"box":s=this.boxMask;break;case"filled":s=this.filledMask;break;case"center":s=this.centerMask;break;case"mbr":s=this.mbrFilledMask;break;case"hull":s=this.convexHullFilledMask;break;case"hullContour":s=this.convexHullMask;break;case"mbrContour":s=this.mbrMask;break;case"feret":s=this.feretMask;break;default:s=this.mask}return t<1&&(s=s.resize({factor:t}),s.parent=this.mask.parent,s.position[0]+=this.minX,s.position[1]+=this.minY),s}get mean(){throw new Error("Roi mean not implemented yet")}get center(){return this.computed.center||(this.computed.center=[this.width/2>>0,this.height/2>>0]),this.computed.center}get ratio(){return this.width/this.height}get width(){return this.maxX-this.minX+1}get height(){return this.maxY-this.minY+1}_computExternalIDs(){let e=this.borderIDs,t=this.borderLengths;this.computed.externalIDs=[],this.computed.externalLengths=[];let r=this.internalIDs;for(let s=0;s<e.length;s++)r.includes(e[s])||(this.computed.externalIDs.push(e[s]),this.computed.externalLengths.push(t[s]))}get externalIDs(){return this.computed.externalIDs?this.computed.externalIDs:(this._computExternalIDs(),this.computed.externalIDs)}get externalLengths(){return this.computed.externalLengths?this.computed.externalLengths:(this._computExternalIDs(),this.computed.externalLengths)}_computeBorderIDs(){let e=getBorders(this);this.computed.borderIDs=e.ids,this.computed.borderLengths=e.lengths}get borderIDs(){return this.computed.borderIDs?this.computed.borderIDs:(this._computeBorderIDs(),this.computed.borderIDs)}get borderLengths(){return this.computed.borderLengths?this.computed.borderLengths:(this._computeBorderIDs(),this.computed.borderLengths)}get boxIDs(){return this.computed.boxIDs||(this.computed.boxIDs=getBoxIDs(this)),this.computed.boxIDs}get internalIDs(){return this.computed.internalIDs||(this.computed.internalIDs=getInternalIDs(this)),this.computed.internalIDs}get box(){return this.computed.box||(this.computed.box=getBox(this)),this.computed.box}get external(){return this.computed.external||(this.computed.external=getExternal(this)),this.computed.external}get holesInfo(){return this.computed.holesInfo||(this.computed.holesInfo=getHolesInfo(this)),this.computed.holesInfo}get border(){return this.computed.border||(this.computed.border=getBorder(this)),this.computed.border}get contourMask(){if(!this.computed.contourMask){let e=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});for(let t=0;t<this.width;t++)for(let r=0;r<this.height;r++)this.map.data[t+this.minX+(r+this.minY)*this.map.width]===this.id&&(t>0&&t<this.width-1&&r>0&&r<this.height-1?(this.map.data[t-1+this.minX+(r+this.minY)*this.map.width]!==this.id||this.map.data[t+1+this.minX+(r+this.minY)*this.map.width]!==this.id||this.map.data[t+this.minX+(r-1+this.minY)*this.map.width]!==this.id||this.map.data[t+this.minX+(r+1+this.minY)*this.map.width]!==this.id)&&e.setBitXY(t,r):e.setBitXY(t,r));this.computed.contourMask=e}return this.computed.contourMask}get boxMask(){if(!this.computed.boxMask){let e=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});for(let t=0;t<this.width;t++)e.setBitXY(t,0),e.setBitXY(t,this.height-1);for(let t=0;t<this.height;t++)e.setBitXY(0,t),e.setBitXY(this.width-1,t);this.computed.boxMask=e}return this.computed.boxMask}get mask(){if(!this.computed.mask){let e=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});for(let t=0;t<this.width;t++)for(let r=0;r<this.height;r++)this.map.data[t+this.minX+(r+this.minY)*this.map.width]===this.id&&e.setBitXY(t,r);this.computed.mask=e}return this.computed.mask}get filledMask(){if(!this.computed.filledMask){let e=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});for(let t=0;t<this.width;t++)for(let r=0;r<this.height;r++){let s=t+this.minX+(r+this.minY)*this.map.width;this.internalIDs.includes(this.map.data[s])&&e.setBitXY(t,r)}this.computed.filledMask=e}return this.computed.filledMask}get centerMask(){if(!this.computed.centerMask){let e=new Shape({kind:"smallCross"}).getMask();e.parent=this.map.parent,e.position=[this.minX+this.center[0]-1,this.minY+this.center[1]-1],this.computed.centerMask=e}return this.computed.centerMask}get convexHull(){if(!this.computed.convexHull){const e=[];for(let r=0;r<this.width;r++)for(let s=0;s<this.height;s++)this.map.data[r+this.minX+(s+this.minY)*this.map.width]===this.id&&(r>0&&r<this.width-1&&s>0&&s<this.height-1?(this.map.data[r-1+this.minX+(s+this.minY)*this.map.width]!==this.id||this.map.data[r+1+this.minX+(s+this.minY)*this.map.width]!==this.id||this.map.data[r+this.minX+(s-1+this.minY)*this.map.width]!==this.id||this.map.data[r+this.minX+(s+1+this.minY)*this.map.width]!==this.id)&&(e.push([r,s]),e.push([r+1,s]),e.push([r,s+1]),e.push([r+1,s+1])):(e.push([r,s]),e.push([r+1,s]),e.push([r,s+1]),e.push([r+1,s+1])));const t=monotoneChainConvexHull$1(e);this.computed.convexHull={polyline:t,surface:surface(t),perimeter:perimeter(t)}}return this.computed.convexHull}get convexHullMask(){if(!this.computed.convexHullMask){const e=this.convexHull,t=new Image(this.width+1,this.height+1,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});t.paintPolyline(e.polyline,{closed:!0}),this.computed.convexHullMask=t}return this.computed.convexHullMask}get convexHullFilledMask(){if(!this.computed.convexHullFilledMask){const e=this.convexHull,t=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});for(let r=0;r<this.width;r++)for(let s=0;s<this.height;s++)robustPointInPolygon(e.polyline,[r,s])!==1&&t.setBitXY(r,s);this.computed.convexHullFilledMask=t}return this.computed.convexHullFilledMask}get mbr(){if(!this.computed.mbr){let e=minimalBoundingRectangle({originalPoints:this.convexHull.polyline});if(e.length===0)this.computed.mbr={width:0,height:0,surface:0,perimeter:0,rectangle:e};else{let t=e[0],r=e[1],s=e[2],i=Math.sqrt((t[0]-r[0])**2+(t[1]-r[1])**2),o=Math.sqrt((s[0]-r[0])**2+(s[1]-r[1])**2);this.computed.mbr={width:i,height:o,elongation:1-i/o,aspectRatio:i/o,surface:i*o,perimeter:(i+o)*2,rectangle:e}}}return this.computed.mbr}get fillRatio(){return this.surface/(this.surface+this.holesInfo.surface)}get feretDiameters(){return this.computed.feretDiameters||(this.computed.feretDiameters=feretDiameters({originalPoints:this.convexHull.polyline})),this.computed.feretDiameters}get eqpc(){return this.computed.eqpc||(this.computed.eqpc=2*Math.sqrt(this.surface/Math.PI)),this.computed.eqpc}get perimeterInfo(){return this.computed.perimeterInfo||(this.computed.perimeterInfo=getPerimeterInfo(this)),this.computed.perimeterInfo}get perimeter(){let e=this.perimeterInfo,t=2-Math.sqrt(2);return e.one+e.two*2+e.three*3+e.four*4-t*(e.two+e.three*2+e.four)}get ped(){return this.computed.ped||(this.computed.ped=this.perimeter/Math.PI),this.computed.ped}get feretMask(){if(!this.computed.feretMask){const e=new Image(this.width+1,this.height+1,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent});e.paintPolyline(this.feretDiameters.minLine),e.paintPolyline(this.feretDiameters.maxLine),this.computed.feretMask=e}return this.computed.feretMask}get mbrMask(){if(!this.computed.mbrMask){let e=round(this.mbr.rectangle);if(e.length>0){const t=minMax(e),r=new Image(t[1][0]-t[0][0]+1,t[1][1]-t[0][1]+1,{kind:BINARY,position:[this.minX+t[0][0],this.minY+t[0][1]],parent:this.map.parent});e=moveToZeroZero(e),r.paintPolyline(e,{closed:!0}),this.computed.mbrMask=r}else this.computed.mbrMask=new Image(1,1,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent})}return this.computed.mbrMask}get mbrFilledMask(){if(!this.computed.mbrFilledMask){const e=new Image(this.width,this.height,{kind:BINARY,position:[this.minX,this.minY],parent:this.map.parent}),t=this.mask.minimalBoundingRectangle();for(let r=0;r<this.width;r++)for(let s=0;s<this.height;s++)robustPointInPolygon(t,[r,s])!==1&&e.setBitXY(r,s);this.computed.mbrFilledMask=e}return this.computed.mbrFilledMask}get points(){if(!this.computed.points){let e=[];for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++){let s=(t+this.minY)*this.map.width+r+this.minX;this.map.data[s]===this.id&&e.push([r,t])}this.computed.points=e}return this.computed.points}get maxLengthPoints(){if(!this.computed.maxLengthPoints){let e=0,t;const r=this.points;for(let s=0;s<r.length;s++)for(let i=s+1;i<r.length;i++){let o=Math.pow(r[s][0]-r[i][0],2)+Math.pow(r[s][1]-r[i][1],2);o>=e&&(e=o,t=[r[s],r[i]])}this.computed.maxLengthPoints=t}return this.computed.maxLengthPoints}get maxLength(){if(!this.computed.maxLength){let e=Math.sqrt(Math.pow(this.maxLengthPoints[0][0]-this.maxLengthPoints[1][0],2)+Math.pow(this.maxLengthPoints[0][1]-this.maxLengthPoints[1][1],2));this.computed.maxLength=e}return this.computed.maxLength}get roundness(){return 4*this.surface/(Math.PI*this.feretDiameters.max**2)}get sphericity(){return 2*Math.sqrt(this.surface*Math.PI)/this.perimeter}get solidity(){return this.surface/this.convexHull.surface}get angle(){if(!this.computed.angle){let e=this.maxLengthPoints,t=-Math.atan2(e[0][1]-e[1][1],e[0][0]-e[1][0])*180/Math.PI;this.computed.angle=t}return this.computed.angle}toJSON(){return{id:this.id,minX:this.minX,maxX:this.maxX,minY:this.minY,maxY:this.maxY,meanX:this.meanX,meanY:this.meanY,height:this.height,width:this.width,surface:this.surface,mbrWidth:this.mbr.width,mbrHeight:this.mbr.height,mbrSurface:this.mbr.surface,eqpc:this.eqpc,ped:this.ped,feretDiameterMin:this.feretDiameters.min,feretDiameterMax:this.feretDiameters.max,aspectRatio:this.feretDiameters.aspectRatio,fillRatio:this.fillRatio,sphericity:this.sphericity,roundness:this.roundness,solidity:this.solidity,perimeter:this.perimeter}}}function getBorders(n){let e=n.map,t=e.data,r=new Set,s=new Map,i=new Set,o=[1,0,-1,0],a=[0,1,0,-1];for(let u=n.minX;u<=n.maxX;u++)for(let h=n.minY;h<=n.maxY;h++){let d=u+h*e.width;if(t[d]===n.id)for(let g=0;g<4;g++){let x=u+o[g],y=h+a[g];if(x>=0&&y>=0&&x<e.width&&y<e.height){let w=x+y*e.width;if(t[w]!==n.id&&!i.has(w)){i.add(w),r.add(t[w]);let $=s.get(t[w]);$?s.set(t[w],++$):s.set(t[w],1)}}}}let l=Array.from(r),c=l.map(function(u){return s.get(u)});return{ids:l,lengths:c}}function getBoxIDs(n){let e=new Set,t=n.map,r=t.data;for(let s of[0,n.height-1])for(let i=0;i<n.width;i++){let o=(s+n.minY)*t.width+i+n.minX;if(i-n.minX>0&&r[o]===n.id&&r[o-1]!==n.id){let a=r[o-1];e.add(a)}if(t.width-i-n.minX>1&&r[o]===n.id&&r[o+1]!==n.id){let a=r[o+1];e.add(a)}}for(let s of[0,n.width-1])for(let i=0;i<n.height;i++){let o=(i+n.minY)*t.width+s+n.minX;if(i-n.minY>0&&r[o]===n.id&&r[o-t.width]!==n.id){let a=r[o-t.width];e.add(a)}if(t.height-i-n.minY>1&&r[o]===n.id&&r[o+t.width]!==n.id){let a=r[o+t.width];e.add(a)}}return Array.from(e)}function getBox(n){let e=0,t=n.map,r=t.data,s=[0];n.height>1&&(s[1]=n.height-1);for(let o of s)for(let a=1;a<n.width-1;a++){let l=(o+n.minY)*t.width+a+n.minX;r[l]===n.id&&e++}let i=[0];n.width>1&&(i[1]=n.width-1);for(let o of i)for(let a=0;a<n.height;a++){let l=(a+n.minY)*t.width+o+n.minX;r[l]===n.id&&e++}return e}function getBorder(n){let e=0,t=n.map,r=t.data;for(let s=1;s<n.width-1;s++)for(let i=1;i<n.height-1;i++){let o=(i+n.minY)*t.width+s+n.minX;r[o]===n.id&&(r[o-1]!==n.id||r[o+1]!==n.id||r[o-t.width]!==n.id||r[o+t.width]!==n.id)&&e++}return e+n.box}function getPerimeterInfo(n){let e=n.map,t=e.data,r=0,s=0,i=0,o=0;for(let a=0;a<n.width;a++)for(let l=0;l<n.height;l++){let c=(l+n.minY)*e.width+a+n.minX;if(t[c]===n.id){let u=0;switch((a===0||n.externalIDs.includes(t[c-1]))&&u++,(a===n.width-1||n.externalIDs.includes(t[c+1]))&&u++,(l===0||n.externalIDs.includes(t[c-e.width]))&&u++,(l===n.height-1||n.externalIDs.includes(t[c+e.width]))&&u++,u){case 1:r++;break;case 2:s++;break;case 3:i++;break;case 4:o++;break}}}return{one:r,two:s,three:i,four:o}}function getExternal(n){let e=0,t=n.map,r=t.data;for(let s=1;s<n.width-1;s++)for(let i=1;i<n.height-1;i++){let o=(i+n.minY)*t.width+s+n.minX;r[o]===n.id&&(n.externalIDs.includes(r[o-1])||n.externalIDs.includes(r[o+1])||n.externalIDs.includes(r[o-t.width])||n.externalIDs.includes(r[o+t.width]))&&e++}return e+n.box}function getHolesInfo(n){let e=0,t=n.map.width,r=n.map.data;for(let s=1;s<n.width-1;s++)for(let i=1;i<n.height-1;i++){let o=(i+n.minY)*t+s+n.minX;n.internalIDs.includes(r[o])&&r[o]!==n.id&&e++}return{number:n.internalIDs.length-1,surface:e}}function getInternalIDs(n){let e=[n.id],t=n.map,r=t.data;if(n.height>2)for(let i=0;i<n.width;i++){let o=n.minY*t.width+i+n.minX;if(e.includes(r[o])){let a=r[o+t.width];!e.includes(a)&&!n.boxIDs.includes(a)&&e.push(a)}}let s=new Array(4);for(let i=1;i<n.width-1;i++)for(let o=1;o<n.height-1;o++){let a=(o+n.minY)*t.width+i+n.minX;if(e.includes(r[a])){s[0]=r[a-1],s[1]=r[a+1],s[2]=r[a-t.width],s[3]=r[a+t.width];for(let l=0;l<4;l++){let c=s[l];!e.includes(c)&&!n.boxIDs.includes(c)&&e.push(c)}}}return e}class RoiLayer{constructor(e,t){this.roiMap=e,this.options=t,this.roi=this.createRoi()}createRoi(){let e=this.roiMap.data,t={};this.roiMap.positive=0,this.roiMap.negative=0;for(let a=0;a<e.length;a++)e[a]&&!t[e[a]]&&(t[e[a]]=!0,e[a]>0?this.roiMap.positive++:this.roiMap.negative++);let r={};for(let a in t)r[a]=new Roi(this.roiMap,a*1);let s=this.roiMap.width,i=this.roiMap.height;for(let a=0;a<i;a++)for(let l=0;l<s;l++){let c=a*s+l;if(e[c]!==0){const u=e[c],h=r[u];l<h.minX&&(h.minX=l),l>h.maxX&&(h.maxX=l),a<h.minY&&(h.minY=a),a>h.maxY&&(h.maxY=a),h.meanX+=l,h.meanY+=a,h.surface++}}let o=[];for(let a in t)r[a].meanX/=r[a].surface,r[a].meanY/=r[a].surface,o.push(r[a]);return o}}function commonBorderLength(n){let e=n.data,t=[1,0,-1,0],r=[0,1,0,-1],s=n.minMax,i=-s.min,o=s.max+i,a=[];for(let c=0;c<=o;c++)a.push(Object.create(null));for(let c=0;c<n.width;c++)for(let u=0;u<n.height;u++){let h=c+u*n.width,d=e[h];if(d!==0){let g=Object.create(null),x=!1;for(let y=0;y<4;y++){let w=c+t[y],$=u+r[y];if(w>=0&&$>=0&&w<n.width&&$<n.height){let S=e[w+$*n.width];d!==S&&(x=!0,S!==0&&g[S]===void 0&&(g[S]=!0,a[S+i][d]?a[S+i][d]++:a[S+i][d]=1))}else x=!0}x&&(a[d+i][d]?a[d+i][d]++:a[d+i][d]=1)}}let l={};for(let c=0;c<a.length;c++)Object.keys(a[c]).length>0&&(l[c-i]=a[c]);return l}function mergeRoi(n={}){const{algorithm:e="commonBorderLength",minCommonBorderLength:t=5,maxCommonBorderLength:r=100,minCommonBorderRatio:s=.3,maxCommonBorderRatio:i=1}=n;let o=function(w,$,S){return w[S]>=t&&w[S]<=r};typeof e=="function"&&(o=e),e.toLowerCase()==="commonborderratio"&&(o=function(w,$,S){let _=Math.min(w[S]/w[$],1);return _>=s&&_<=i});const a=this,l=a.commonBorderLength;let c={},u={};for(let w of Object.keys(l)){let $=l[w],S=Object.keys($);for(let _ of S)if(_!==w&&o($,w,_)){let T=_;u[_]&&(T=u[_]);let k=w;if(u[w]&&(k=u[w]),Number(T)!==k){let P=Math.min(T,k),L=Math.max(T,k);if(c[P]||(c[P]={}),c[P][L]=!0,u[L]=P,c[L]){for(let D of Object.keys(c[L]))c[P][D]=!0,u[D]=P;delete c[L]}}}}let h=a.minMax,d=-h.min,g=h.max+d,x=new Array(g+1).fill(0);for(let w of Object.keys(u))x[Number(w)+d]=u[w];let y=a.data;for(let w=0;w<y.length;w++){let $=y[w];if($!==0){let S=x[$+d];S!==0&&(y[w]=S)}}return a.computed={},a}class RoiMap{constructor(e,t){this.parent=e,this.width=e.width,this.height=e.height,this.data=t,this.negative=0,this.positive=0}get total(){return this.negative+this.positive}get minMax(){let e=Number.MAX_SAFE_INTEGER,t=Number.MIN_SAFE_INTEGER;for(let r=0;r<this.data.length;r++)this.data[r]<e&&(e=this.data[r]),this.data[r]>t&&(t=this.data[r]);return{min:e,max:t}}get commonBorderLength(){return commonBorderLength(this)}mergeRoi(e={}){return mergeRoi.call(this,e)}mergeRois(e){const t=e[0],r=e.slice(1);for(let s=0;s<this.data.length;s++)r.includes(this.data[s])&&(this.data[s]=t)}rowsInfo(){let e=new Array(this.height),t=0;for(let r=0;r<this.data.length;r+=this.width){let s={row:t,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};e[t++]=s;let i={},o={},a=[],l=this.data[r],c=0;for(let u=r;u<r+this.width;u++){let h=this.data[u];l!==h&&(l=h,a.push(c),c=0),c++,h>0?(s.positivePixel++,i[h]||(i[h]=!0)):h<0?(s.negativePixel++,o[h]||(o[h]=!0)):s.zeroPixel++}a.push(c),s.medianChange=a.sort((u,h)=>u-h)[Math.floor(a.length/2)],s.positiveRoiIDs=Object.keys(i),s.negativeRoiIDs=Object.keys(o),s.positiveRoi=s.positiveRoiIDs.length,s.negativeRoi=s.negativeRoiIDs.length}return e}colsInfo(){let e=new Array(this.width),t=0;for(let r=0;r<this.width;r++){let s={col:t,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};e[t++]=s;let i={},o={},a=[],l=this.data[r],c=0;for(let u=r;u<r+this.data.length;u+=this.width){let h=this.data[u];l!==h&&(l=h,a.push(c),c=0),c++,h>0?(s.positivePixel++,i[h]||(i[h]=!0)):h<0?(s.negativePixel++,o[h]||(o[h]=!0)):s.zeroPixel++}a.push(c),s.medianChange=a.sort((u,h)=>u-h)[Math.floor(a.length/2)],s.positiveRoiIDs=Object.keys(i),s.negativeRoiIDs=Object.keys(o),s.positiveRoi=s.positiveRoiIDs.length,s.negativeRoi=s.negativeRoiIDs.length}return e}}function fromMask(n,e={}){const{allowCorners:t=!1}=e,r=65535;let s=new Int16Array(n.size),i=0,o=0,a=new Uint16Array(r+1),l=new Uint16Array(r+1);for(let u=0;u<n.width;u++)for(let h=0;h<n.height;h++)s[h*n.width+u]===0&&c(u,h);function c(u,h){let d=0,g=0,x=n.getBitXY(u,h),y=x?++i:--o;if(i>32767||o<-32768)throw new Error("Too many regions of interest");for(a[0]=u,l[0]=h;d<=g;){let w=a[d&r],$=l[d&r];if(s[$*n.width+w]=y,w>0&&s[$*n.width+w-1]===0&&n.getBitXY(w-1,$)===x&&(g++,a[g&r]=w-1,l[g&r]=$,s[$*n.width+w-1]=-32768),$>0&&s[($-1)*n.width+w]===0&&n.getBitXY(w,$-1)===x&&(g++,a[g&r]=w,l[g&r]=$-1,s[($-1)*n.width+w]=-32768),w<n.width-1&&s[$*n.width+w+1]===0&&n.getBitXY(w+1,$)===x&&(g++,a[g&r]=w+1,l[g&r]=$,s[$*n.width+w+1]=-32768),$<n.height-1&&s[($+1)*n.width+w]===0&&n.getBitXY(w,$+1)===x&&(g++,a[g&r]=w,l[g&r]=$+1,s[($+1)*n.width+w]=-32768),t&&(w>0&&$>0&&s[($-1)*n.width+w-1]===0&&n.getBitXY(w-1,$-1)===x&&(g++,a[g&r]=w-1,l[g&r]=$-1,s[($-1)*n.width+w-1]=-32768),w<n.width-1&&$>0&&s[($-1)*n.width+w+1]===0&&n.getBitXY(w+1,$-1)===x&&(g++,a[g&r]=w+1,l[g&r]=$-1,s[($-1)*n.width+w+1]=-32768),w>0&&$<n.height-1&&s[($+1)*n.width+w-1]===0&&n.getBitXY(w-1,$+1)===x&&(g++,a[g&r]=w-1,l[g&r]=$+1,s[($+1)*n.width+w-1]=-32768),w<n.width-1&&$<n.height-1&&s[($+1)*n.width+w+1]===0&&n.getBitXY(w+1,$+1)===x&&(g++,a[g&r]=w+1,l[g&r]=$+1,s[($+1)*n.width+w+1]=-32768)),d++,g-d>r)throw new Error("analyseMask can not finish, the array to manage internal data is not big enough.You could improve mask by changing MAX_ARRAY")}}return new RoiMap(n,s)}var DisjointSet_1,hasRequiredDisjointSet;function requireDisjointSet(){if(hasRequiredDisjointSet)return DisjointSet_1;hasRequiredDisjointSet=1;class n{constructor(){this.nodes=new Map}add(r){var s=this.nodes.get(r);return s||(s=new e(r),this.nodes.set(r,s)),s}union(r,s){const i=this.find(r),o=this.find(s);i!==o&&(i.rank<o.rank?i.parent=o:i.rank>o.rank?o.parent=i:(o.parent=i,i.rank++))}find(r){for(var s=r;s.parent!==null;)s=s.parent;for(var i=r;i.parent!==null;){var o=i;i=i.parent,o.parent=s}return s}connected(r,s){return this.find(r)===this.find(s)}}DisjointSet_1=n;function e(t){this.value=t,this.parent=null,this.rank=0}return DisjointSet_1}var DisjointSetExports=requireDisjointSet(),DisjointSet=getDefaultExportFromCjs(DisjointSetExports);const direction4X=[-1,0],direction4Y=[0,-1],neighbours4=[null,null],direction8X=[-1,-1,0,1],direction8Y=[0,-1,-1,-1],neighbours8=[null,null,null,null];function fromMaskConnectedComponentLabelingAlgorithm(n,e={}){const{allowCorners:t=!1}=e;let r=4;t&&(r=8);let s,i,o;if(r===8)s=direction8X,i=direction8Y,o=neighbours8;else if(r===4)s=direction4X,i=direction4Y,o=neighbours4;else throw new RangeError(`unsupported neighbours count: ${r}`);const a=n.size,l=n.width,c=n.height,u=new Array(a),h=new Uint32Array(a),d=new DisjointSet;let g=1;for(let x=0;x<c;x++)for(let y=0;y<l;y++){const w=y+x*l;if(n.getBit(w)){let $=null;for(let S=0;S<o.length;S++){const _=y+s[S],T=x+i[S];if(_>=0&&T>=0&&_<l&&T<c){const k=_+T*l;let P=u[k];P?(o[S]=P,(!$||o[S].value<$.value)&&($=o[S])):o[S]=null}}if(!$)u[w]=d.add(g++);else{u[w]=$;for(let S=0;S<o.length;S++)o[S]&&o[S]!==$&&d.union($,o[S])}}}for(let x=0;x<c;x++)for(let y=0;y<l;y++){const w=y+x*l;n.getBit(w)&&(h[w]=d.find(u[w]).value)}return new RoiMap(n,h)}function fromMaxima(n={}){let{allowCorner:e=!0,onlyTop:t=!1,invert:r=!1}=n,s=this;s.checkProcessable("fromMaxima",{components:[1]});const i=1,o=2;let a=0,l=0,c=new Int16Array(s.size),u=new Int8Array(s.size),h=new Float32Array(s.size),d=1048575,g=new Uint16Array(d+1),x=new Uint16Array(d+1),y=0,w=0,$=new Uint16Array(d+1),S=new Uint16Array(d+1),_=0,T=0;for(k(s);y<w;){let D=g[y&d],M=x[y&d];L(D,M,o),y++}return new RoiMap(s,c);function k({maxima:D=!0}){for(let M=1;M<s.height-1;M++)for(let O=1;O<s.width-1;O++){let R=O+M*s.width;if(u[R]===0){let z=D?s.data[R]:-s.data[O+M*s.width];if(s.data[M*s.width+O-1]>z||s.data[M*s.width+O+1]>z||s.data[(M-1)*s.width+O]>z||s.data[(M+1)*s.width+O]>z||e&&(s.data[(M-1)*s.width+O-1]>z||s.data[(M-1)*s.width+O+1]>z||s.data[(M+1)*s.width+O-1]>z||s.data[(M+1)*s.width+O+1]>z))continue;c[R]=D?++a:--l,P(O,M)||(D?--a:++l)}}}function P(D,M){let O=w;_=0,T=1,$[0]=D,S[0]=M;let R=!0;for(;_<T;){let z=$[_&d],X=S[_&d];R&=L(z,X,i),_++}if(!R){for(let z=0;z<T;z++){let X=$[z&d],Y=S[z&d]*s.width+X;c[Y]=0}w=O}return R}function L(D,M,O){let R=c[M*s.width+D],z=s.data[M*s.width+D];for(let X=M-1;X<=M+1;X++)for(let K=D-1;K<=D+1;K++){let Y=X*s.width+K;if(u[Y]===0)switch(u[Y]=1,h[Y]=s.data[Y]-z,O){case i:if(h[Y]===0){if(K===0||X===0||K===s.width-1||X===s.height-1)return!1;c[Y]=R,$[T&d]=K,S[T&d]=X,T++}else{if(h[Y]>0)return!1;t||(c[Y]=R,g[w&d]=K,x[w&d]=X,w++)}break;case o:h[Y]<=0&&(c[Y]=R,g[w&d]=K,x[w&d]=X,w++);break;default:throw new Error("unreachable")}}return!0}}function fromPoints(n,e={}){let t=new Shape(e),r=new Int16Array(this.size),s=0,i=t.getPoints();for(let o=0;o<n.length;o++){s++;let a=n[o][0],l=n[o][1];for(let c=0;c<i.length;c++){let u=i[c][0],h=i[c][1];a+u>=0&&l+h>=0&&a+u<this.width&&l+h<this.height&&(r[a+u+(l+h)*this.width]=s)}}return new RoiMap(this,r)}function commonjsRequire(n){throw new Error('Could not dynamically require "'+n+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var priorityQueue={exports:{}},hasRequiredPriorityQueue;function requirePriorityQueue(){return hasRequiredPriorityQueue||(hasRequiredPriorityQueue=1,function(n,e){(function(t){n.exports=t()})(function(){return function t(r,s,i){function o(c,u){if(!s[c]){if(!r[c]){var h=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&h)return h(c,!0);if(a)return a(c,!0);var d=new Error("Cannot find module '"+c+"'");throw d.code="MODULE_NOT_FOUND",d}var g=s[c]={exports:{}};r[c][0].call(g.exports,function(x){var y=r[c][1][x];return o(y||x)},g,g.exports,t,r,s,i)}return s[c].exports}for(var a=typeof commonjsRequire=="function"&&commonjsRequire,l=0;l<i.length;l++)o(i[l]);return o}({1:[function(t,r,s){var i,o,a,l,c,u=function(d,g){for(var x in g)h.call(g,x)&&(d[x]=g[x]);function y(){this.constructor=d}return y.prototype=g.prototype,d.prototype=new y,d.__super__=g.prototype,d},h={}.hasOwnProperty;i=t("./PriorityQueue/AbstractPriorityQueue"),o=t("./PriorityQueue/ArrayStrategy"),l=t("./PriorityQueue/BinaryHeapStrategy"),a=t("./PriorityQueue/BHeapStrategy"),c=function(d){u(g,d);function g(x){x||(x={}),x.strategy||(x.strategy=l),x.comparator||(x.comparator=function(y,w){return(y||0)-(w||0)}),g.__super__.constructor.call(this,x)}return g}(i),c.ArrayStrategy=o,c.BinaryHeapStrategy=l,c.BHeapStrategy=a,r.exports=c},{"./PriorityQueue/AbstractPriorityQueue":2,"./PriorityQueue/ArrayStrategy":3,"./PriorityQueue/BHeapStrategy":4,"./PriorityQueue/BinaryHeapStrategy":5}],2:[function(t,r,s){r.exports=function(){function i(o){var a;if((o!=null?o.strategy:void 0)==null)throw"Must pass options.strategy, a strategy";if((o!=null?o.comparator:void 0)==null)throw"Must pass options.comparator, a comparator";this.priv=new o.strategy(o),this.length=(o!=null&&(a=o.initialValues)!=null?a.length:void 0)||0}return i.prototype.queue=function(o){this.length++,this.priv.queue(o)},i.prototype.dequeue=function(o){if(!this.length)throw"Empty queue";return this.length--,this.priv.dequeue()},i.prototype.peek=function(o){if(!this.length)throw"Empty queue";return this.priv.peek()},i.prototype.clear=function(){return this.length=0,this.priv.clear()},i}()},{}],3:[function(t,r,s){var i;i=function(o,a,l){var c,u,h;for(u=0,c=o.length;u<c;)h=u+c>>>1,l(o[h],a)>=0?u=h+1:c=h;return u},r.exports=function(){function o(a){var l;this.options=a,this.comparator=this.options.comparator,this.data=((l=this.options.initialValues)!=null?l.slice(0):void 0)||[],this.data.sort(this.comparator).reverse()}return o.prototype.queue=function(a){var l;l=i(this.data,a,this.comparator),this.data.splice(l,0,a)},o.prototype.dequeue=function(){return this.data.pop()},o.prototype.peek=function(){return this.data[this.data.length-1]},o.prototype.clear=function(){this.data.length=0},o}()},{}],4:[function(t,r,s){r.exports=function(){function i(o){var a,l,c,u,h,d,g,x;for(this.comparator=(o!=null?o.comparator:void 0)||function(y,w){return y-w},this.pageSize=(o!=null?o.pageSize:void 0)||512,this.length=0,g=0;1<<g<this.pageSize;)g+=1;if(1<<g!==this.pageSize)throw"pageSize must be a power of two";for(this._shift=g,this._emptyMemoryPageTemplate=a=[],l=0,h=this.pageSize;0<=h?l<h:l>h;0<=h?++l:--l)a.push(null);if(this._memory=[],this._mask=this.pageSize-1,o.initialValues)for(d=o.initialValues,c=0,u=d.length;c<u;c++)x=d[c],this.queue(x)}return i.prototype.queue=function(o){this.length+=1,this._write(this.length,o),this._bubbleUp(this.length,o)},i.prototype.dequeue=function(){var o,a;return o=this._read(1),a=this._read(this.length),this.length-=1,this.length>0&&(this._write(1,a),this._bubbleDown(1,a)),o},i.prototype.peek=function(){return this._read(1)},i.prototype.clear=function(){this.length=0,this._memory.length=0},i.prototype._write=function(o,a){var l;for(l=o>>this._shift;l>=this._memory.length;)this._memory.push(this._emptyMemoryPageTemplate.slice(0));return this._memory[l][o&this._mask]=a},i.prototype._read=function(o){return this._memory[o>>this._shift][o&this._mask]},i.prototype._bubbleUp=function(o,a){var l,c,u,h;for(l=this.comparator;o>1&&(c=o&this._mask,o<this.pageSize||c>3?u=o&~this._mask|c>>1:c<2?(u=o-this.pageSize>>this._shift,u+=u&~(this._mask>>1),u|=this.pageSize>>1):u=o-2,h=this._read(u),!(l(h,a)<0));)this._write(u,a),this._write(o,h),o=u},i.prototype._bubbleDown=function(o,a){var l,c,u,h,d;for(d=this.comparator;o<this.length;)if(o>this._mask&&!(o&this._mask-1)?l=c=o+2:o&this.pageSize>>1?(l=(o&~this._mask)>>1,l|=o&this._mask>>1,l=l+1<<this._shift,c=l+1):(l=o+(o&this._mask),c=l+1),l!==c&&c<=this.length)if(u=this._read(l),h=this._read(c),d(u,a)<0&&d(u,h)<=0)this._write(l,a),this._write(o,u),o=l;else if(d(h,a)<0)this._write(c,a),this._write(o,h),o=c;else break;else if(l<=this.length)if(u=this._read(l),d(u,a)<0)this._write(l,a),this._write(o,u),o=l;else break;else break},i}()},{}],5:[function(t,r,s){r.exports=function(){function i(o){var a;this.comparator=(o!=null?o.comparator:void 0)||function(l,c){return l-c},this.length=0,this.data=((a=o.initialValues)!=null?a.slice(0):void 0)||[],this._heapify()}return i.prototype._heapify=function(){var o,a,l;if(this.data.length>0)for(o=a=1,l=this.data.length;1<=l?a<l:a>l;o=1<=l?++a:--a)this._bubbleUp(o)},i.prototype.queue=function(o){this.data.push(o),this._bubbleUp(this.data.length-1)},i.prototype.dequeue=function(){var o,a;return a=this.data[0],o=this.data.pop(),this.data.length>0&&(this.data[0]=o,this._bubbleDown(0)),a},i.prototype.peek=function(){return this.data[0]},i.prototype.clear=function(){this.length=0,this.data.length=0},i.prototype._bubbleUp=function(o){for(var a,l;o>0&&(a=o-1>>>1,this.comparator(this.data[o],this.data[a])<0);)l=this.data[a],this.data[a]=this.data[o],this.data[o]=l,o=a},i.prototype._bubbleDown=function(o){var a,l,c,u,h;for(a=this.data.length-1;l=(o<<1)+1,u=l+1,c=o,l<=a&&this.comparator(this.data[l],this.data[c])<0&&(c=l),u<=a&&this.comparator(this.data[u],this.data[c])<0&&(c=u),c!==o;)h=this.data[c],this.data[c]=this.data[o],this.data[o]=h,o=c},i}()},{}]},{},[1])(1)})}(priorityQueue)),priorityQueue.exports}var priorityQueueExports=requirePriorityQueue(),PriorityQueue=getDefaultExportFromCjs(priorityQueueExports);const dxs=[1,0,-1,0,1,1,-1,-1],dys=[0,1,0,-1,1,-1,1,-1];function fromWaterShed(n={}){let{points:e,mask:t,image:r,fillMaxValue:s=this.maxValue,invert:i=!1}=n,o=r||this;o.checkProcessable("fromWaterShed",{bitDepth:[8,16],components:1}),i=!i,e||(e=o.getLocalMaxima({invert:i,mask:t}));let a=i?0:1,l=new Int16Array(o.size),c=o.width,u=o.height,h=new PriorityQueue({comparator:(d,g)=>d[2]-g[2],strategy:PriorityQueue.BinaryHeapStrategy});for(let d=0;d<e.length;d++){let g=e[d][0]+e[d][1]*c;l[g]=d+1;let x=o.data[g];(i&&x<=s||!i&&x>=s)&&h.queue([e[d][0],e[d][1],x])}for(;h.length>0;){let d=h.dequeue(),g=d[0]+d[1]*c;for(let x=0;x<4;x++){let y=d[0]+dxs[x],w=d[1]+dys[x];if(y>=0&&w>=0&&y<c&&w<u){let $=y+w*c;if(!t||t.getBit($)===a){let S=o.data[$];(i&&S<=s||!i&&S>=s)&&l[$]===0&&(l[$]=l[g],h.queue([d[0]+dxs[x],d[1]+dys[x],S]))}}}}return new RoiMap(o,l)}class RoiManager{constructor(e,t={}){this._image=e,this._options=t,this._options.label||(this._options.label="default"),this._layers={},this._painted=null}fromMaxima(e={}){let t=Object.assign({},this._options,e),r=fromMaxima.call(this._image,e);this._layers[t.label]=new RoiLayer(r,t)}fromPoints(e,t={}){let r=Object.assign({},this._options,t),s=fromPoints.call(this._image,e,t);return this._layers[r.label]=new RoiLayer(s,r),this}putMap(e,t={}){let r=new RoiMap(this._image,e),s=Object.assign({},this._options,t);return this._layers[s.label]=new RoiLayer(r,s),this}fromWaterShed(e={}){let t=Object.assign({},this._options,e),r=fromWaterShed.call(this._image,e);this._layers[t.label]=new RoiLayer(r,t)}fromMask(e,t={}){let r=Object.assign({},this._options,t),s=fromMask.call(this._image,e,t);return this._layers[r.label]=new RoiLayer(s,r),this}fromMaskConnectedComponentLabelingAlgorithm(e,t={}){let r=Object.assign({},this._options,t),s=fromMaskConnectedComponentLabelingAlgorithm.call(this._image,e,t);return this._layers[r.label]=new RoiLayer(s,r),this}getMap(e={}){let t=Object.assign({},this._options,e);return this._assertLayerWithLabel(t.label),this._layers[t.label].roiMap}rowsInfo(e={}){return this.getMap(e).rowsInfo()}colsInfo(e={}){return this.getMap(e).rowsInfo()}getRoiIds(e={}){let t=this.getRois(e);if(t){let r=new Array(t.length);for(let s=0;s<t.length;s++)r[s]=t[s].id;return r}throw new Error("ROIs not found")}getRois(e={}){let{label:t=this._options.label,positive:r=!0,negative:s=!0,minSurface:i=0,maxSurface:o=Number.POSITIVE_INFINITY,minWidth:a=0,maxWidth:l=Number.POSITIVE_INFINITY,minHeight:c=0,maxHeight:u=Number.POSITIVE_INFINITY,minRatio:h=0,maxRatio:d=Number.POSITIVE_INFINITY}=e;if(!this._layers[t])throw new Error(`this Roi layer (${t}) does not exist`);const g=this._layers[t].roi,x=[];for(const y of g)(y.id<0&&s||y.id>0&&r)&&y.surface>=i&&y.surface<=o&&y.width>=a&&y.width<=l&&y.height>=c&&y.height<=u&&y.ratio>=h&&y.ratio<=d&&x.push(y);return x}getRoi(e,t={}){const{label:r=this._options.label}=t;if(!this._layers[r])throw new Error(`this Roi layer (${r}) does not exist`);const s=this._layers[r].roi.find(i=>i.id===e);if(!s)throw new Error(`found no Roi with id ${e}`);return s}getMasks(e={}){let t=this.getRois(e),r=new Array(t.length);for(let s=0;s<t.length;s++)r[s]=t[s].getMask(e);return r}getAnalysisMasks(e={}){const{analysisProperty:t}=e;let r=`${t}Mask`,s=this.getRois(e);return s.length===0||!s[0][r]?[]:s.map(i=>i[r])}getData(e={}){let t=Object.assign({},this._options,e);return this._assertLayerWithLabel(t.label),this._layers[t.label].roiMap.data}paint(e={}){let{labelProperty:t,analysisProperty:r}=e;this._painted||(this._painted=this._image.rgba8());let s=this.getMasks(e);if(t){const i=this.getRois(e);e.labels=i.map(c=>deepValue(c,t));const o=Math.max(...e.labels);let a=!1,l=!1;if(t.includes("surface")?a=!0:/(?:perimeter|min|max|external|width|height|length)/.test(t)&&(l=!0),isFinite(o)){let c="";if(e.unit!=="pixel"&&e.pixelSize&&(l||a)){c=a?`${e.unit}^2`:e.unit;let u=a?"m^2":"m",h=a?e.pixelSize**2:e.pixelSize;const d=Qty.swiftConverter(u,c);e.labels=e.labels.map(g=>d(h*g))}o>50?e.labels=e.labels.map(u=>Math.round(u)+c):o>10?e.labels=e.labels.map(u=>u.toFixed(1)+c):e.labels=e.labels.map(u=>u.toFixed(2)+c)}e.labelsPosition=i.map(c=>[c.meanX,c.meanY])}if(this._painted.paintMasks(s,e),r){let i=this.getAnalysisMasks(e);this._painted.paintMasks(i,{color:e.analysisColor,alpha:e.analysisAlpha})}return this._painted}getMask(e={}){let t=new Image(this._image.width,this._image.height,{kind:"BINARY"}),r=this.getMasks(e);for(let s=0;s<r.length;s++){let i=r[s];for(let o=0;o<i.width;o++)for(let a=0;a<i.height;a++)i.getBitXY(o,a)&&t.setBitXY(o+i.position[0],a+i.position[1])}return t}resetPainted(e={}){const{image:t}=e;t?this._painted=this.image.rgba8():this._painted=this._image.rgba8()}mergeRoi(e={}){const t=this.getMap(e);return t.mergeRoi(e),this.putMap(t.data,e),this}mergeRois(e,t={}){if(!Array.isArray(e)||e.some(s=>!Number.isInteger(s)))throw new Error("Roi ids must be an array of integers");if(e.length<2)throw new Error("Roi ids must have at least two elements");if(new Set(e).size!==e.length)throw new Error("Roi ids must be all different");e.forEach(s=>this.getRoi(s));const r=this.getMap(t);return r.mergeRois(e),this.putMap(r.data,t),this}findCorrespondingRoi(e,t={}){let r=this.getRois(t),s=[];for(let i=0;i<r.length;i++){let o=r[i],a=o.minX,l=o.minY,c=o.points,u=Math.sign(o.id),h=correspondingRoisInformation(a,l,c,e,u);s.push(h)}return s}_assertLayerWithLabel(e){if(!this._layers[e])throw new Error(`no layer with label ${e}`)}}function correspondingRoisInformation(n,e,t,r,s){let i={id:[],surface:[],roiSurfaceCovered:[],same:0,opposite:0,total:0};for(let o=0;o<t.length;o++){let a=t[o],l=a[0],c=a[1],u=l+n+(c+e)*r.width,h=r.data[u];(h>0||h<0)&&(i.id.includes(h)?i.surface[i.id.indexOf(h)]+=1:(i.id.push(h),i.surface.push(1)))}for(let o=0;o<i.id.length;o++)Math.sign(i.id[o])===s?i.same+=i.surface[o]:i.opposite+=i.surface[o],i.roiSurfaceCovered[o]=i.surface[o]/t.length;return i.total=i.opposite+i.same,i}const objectToString=Object.prototype.toString;class Image{constructor(e,t,r,s){if(arguments.length===1?(s=e,{width:e,height:t,data:r}=s):r&&!r.length&&(s=r,{data:r}=s),e===void 0&&(e=1),t===void 0&&(t=1),s===void 0&&(s={}),typeof s!="object"||s===null)throw new TypeError("options must be an object");if(!Number.isInteger(e)||e<=0)throw new RangeError("width must be a positive integer");if(!Number.isInteger(t)||t<=0)throw new RangeError("height must be a positive integer");const{kind:i=RGBA}=s;if(typeof i!="string")throw new TypeError("kind must be a string");const o=getKind(i),a=Object.assign({},s);for(const y in o)a[y]===void 0&&(a[y]=o[y]);verifyKindDefinition(a);const{components:l,bitDepth:c,colorModel:u}=a,h=a.alpha+0,d=e*t,g=l+h,x=c===32?Number.MAX_VALUE:2**c-1;if(r===void 0)r=createPixelArray(d,l,h,g,c,x);else{const y=getTheoreticalPixelArraySize(d,g,c);if(r.length!==y)throw new RangeError(`incorrect data size: ${r.length}. Should be ${y}`)}this.width=e,this.height=t,this.data=r,this.size=d,this.components=l,this.alpha=h,this.bitDepth=c,this.maxValue=x,this.colorModel=u,this.channels=g,this.meta=s.meta||{},Object.defineProperty(this,"parent",{enumerable:!1,writable:!0,configurable:!0,value:s.parent||null}),this.position=s.position||[0,0],this.computed=null,this.sizes=[this.width,this.height],this.multiplierX=this.channels,this.multiplierY=this.channels*this.width,this.isClamped=this.bitDepth<32,this.borderSizes=[0,0]}get[Symbol.toStringTag](){return"IJSImage"}static isImage(e){return objectToString.call(e)==="[object IJSImage]"}static fromCanvas(e){const r=e.getContext("2d").getImageData(0,0,e.width,e.height);return new Image(r.width,r.height,r.data)}static createFrom(e,t){const r=getImageParameters(e);return Object.assign(r,{parent:e,position:[0,0]},t),new Image(r)}getRoiManager(e){return new RoiManager(this,e)}clone(){const e=this.data.slice();return new Image(this.width,this.height,e,this)}apply(e){for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++){let s=(t*this.width+r)*this.channels;e.call(this,s)}}}setValueMethods(Image),setBitMethods(Image),setExportMethods(Image),Image.prototype.checkProcessable=checkProcessable,Image.prototype.getRGBAData=getRGBAData,Image.load=load,Image.extendMethod=extendMethod,Image.extendProperty=extendProperty,extend$1(Image);var workerTemplate={},hasRequiredWorkerTemplate;function requireWorkerTemplate(){if(hasRequiredWorkerTemplate)return workerTemplate;hasRequiredWorkerTemplate=1;var n=function(){self.window=self;function t(){this._listeners={}}t.prototype.on=function(s,i){if(this._listeners[s])throw new RangeError("there is already a listener for "+s);if(typeof i!="function")throw new TypeError("callback argument must be a function");this._listeners[s]=i},t.prototype._send=function(s,i,o){o===void 0?o=[]:Array.isArray(o)||(o=[o]),self.postMessage({id:s,data:i},o)},t.prototype._trigger=function(s,i){if(!this._listeners[s])throw new Error("event "+s+" is not defined");this._listeners[s].apply(null,i)};var r=new t;self.onmessage=function(s){switch(s.data.action){case"exec":s.data.args.unshift(function(i,o){r._send(s.data.id,i,o)}),r._trigger(s.data.event,s.data.args);break;case"ping":r._send(s.data.id,"pong");break;default:throw new Error("unexpected action: "+s.data.action)}}},e=n.toString().split('"CODE";');return workerTemplate.newWorkerURL=function(r,s){var i=new Blob(["(",e[0],"importScripts.apply(self, "+JSON.stringify(s)+`);
`,"(",r,")();",e[1],")();"],{type:"application/javascript"});return URL.createObjectURL(i)},workerTemplate}var src,hasRequiredSrc;function requireSrc(){if(hasRequiredSrc)return src;hasRequiredSrc=1;var n=requireWorkerTemplate(),e=navigator.hardwareConcurrency||1;function t(r,s){if(typeof r!="string"&&typeof r!="function")throw new TypeError("func argument must be a function");if(s===void 0&&(s={}),typeof s!="object"||s===null)throw new TypeError("options argument must be an object");this._workerCode=r.toString(),s.maxWorkers===void 0||s.maxWorkers==="auto"?this._numWorkers=Math.min(e-1,1):s.maxWorkers>0?this._numWorkers=Math.min(s.maxWorkers,e):this._numWorkers=e,this._workers=new Map,this._timeout=s.timeout||0,this._terminateOnError=!!s.terminateOnError;var i=s.deps;typeof i=="string"&&(i=[i]),Array.isArray(i)||(i=void 0),this._id=0,this._terminated=!1,this._working=0,this._waiting=[],this._init(i)}return t.prototype._init=function(r){for(var s=n.newWorkerURL(this._workerCode,r),i=0;i<this._numWorkers;i++){var o=new Worker(s);o.onmessage=this._onmessage.bind(this,o),o.onerror=this._onerror.bind(this,o),o.running=!1,o.id=i,this._workers.set(o,null)}URL.revokeObjectURL(s)},t.prototype._onerror=function(r,s){if(!this._terminated){this._working--,r.running=!1;var i=this._workers.get(r);i&&i[1](s.message),this._workers.set(r,null),this._terminateOnError?this.terminate():this._exec()}},t.prototype._onmessage=function(r,s){if(!this._terminated){this._working--,r.running=!1;var i=this._workers.get(r);i&&i[0](s.data.data),this._workers.set(r,null),this._exec()}},t.prototype._exec=function(){for(var r of this._workers.keys()){if(this._working===this._numWorkers||this._waiting.length===0)return;if(!r.running)for(var s=0;s<this._waiting.length;s++){var i=this._waiting[s];if(!(typeof i[4]=="number"&&i[4]!==r.id)){this._waiting.splice(s,1),r.postMessage({action:"exec",event:i[0],args:i[1]},i[2]),r.running=!0,r.time=Date.now(),this._workers.set(r,i[3]),this._working++;break}}}},t.prototype.terminate=function(){if(!this._terminated){for(var r of this._workers)r[0].terminate(),r[1]&&r[1][1](new Error("Terminated"));this._workers.clear(),this._waiting=[],this._working=0,this._terminated=!0}},t.prototype.postAll=function(r,s){if(this._terminated)throw new Error("Cannot post (terminated)");var i=[];for(var o of this._workers.keys())i.push(this.post(r,s,[],o.id));return Promise.all(i)},t.prototype.post=function(r,s,i,o){s===void 0&&(s=[]),i===void 0&&(i=[]),Array.isArray(s)||(s=[s]),Array.isArray(i)||(i=[i]);var a=this;return new Promise(function(l,c){if(a._terminated)throw new Error("Cannot post (terminated)");a._waiting.push([r,s,i,[l,c],o]),a._exec()})},src=t,src}var srcExports=requireSrc(),WorkerManager=getDefaultExportFromCjs(srcExports);const defaultOptions={regression:{kernelType:"polynomial",kernelOptions:{degree:2,constant:1}},threshold:.02,roi:{minSurface:100,positive:!1},sampling:20,include:[]};function run(n,e,t){e=Object.assign({},defaultOptions,e);const r=this.manager;return Array.isArray(n)?Promise.all(n.map(function(s){const i=runOnce(r,s,e);return typeof t=="function"&&i.then(t),i})):runOnce(r,n,e)}function runOnce(n,e,t){return n.post("data",[e,t]).then(function(r){for(let s in r)r[s]=new Image(r[s]);return r})}function work(){worker.on("data",function(n,e,t){e=new IJS(e);const r={},s=[],i=e.grey(),o=i.sobelFilter();g("sobel",o);const a=o.level().mask({threshold:t.threshold});g("mask",a);const l=o.getRoiManager();l.fromMask(a);const c=l.getMask(t.roi);g("realMask",c);const u=i.getPixelsGrid({sampling:t.sampling,mask:c}),h=e.getBackground(u.xyS,u.zS,t.regression);g("background",h);const d=e.subtract(h);r.result=d,s.push(d.data.buffer),n(r,s);function g(x,y){t.include.includes(x)&&(r[x]=y,s.push(y.data.buffer))}})}const background={run,work};function extend(n){n.extendMethod("background",background)}let Worker$1=class pl{constructor(){this._url=null,this._deps=[null]}checkUrl(){if(this._url===null)throw new Error("image worker must be initialized with an URL")}get url(){return this._url}set url(e){if(typeof e!="string")throw new TypeError("worker URL must be a string");this._url=e,this._deps[0]=e}static extendMethod(e,t){let r,s,i={};function o(...a){return r||(this.checkUrl(),s=this.url,r=new WorkerManager(t.work,{deps:s}),i.manager=r),t.run.call(i,...a)}o.reset=function(){r&&(r.terminate(),r=new WorkerManager(t.work,{deps:s}),i.manager=r)},pl.prototype[e]=o}};extend(Worker$1);const decode=n=>{const e=[];let t=!0;for(let r=0;r<n.length;r++){for(let s=0;s<n[r];s++)e.push(t?0:255);t=!t}return new Uint8ClampedArray(e)},prepareChannels=n=>tidy(()=>{const[e,t,r,s]=n.shape,i=e*r*t,o=n.reshape([i,s]),a=[];for(let l=0;l<s;l++){const u=o.gather([l],1).flatten();a.push(u)}return stack(a)}),getObjectMaskData=async(n,e)=>{const t=Array.from(e),r=tensor1d(t,"bool"),s=await booleanMaskAsync(n,r,1);return r.dispose(),s},prepareThingData=async n=>{let e,t,r;if(n.decodedMask){const i=prepareChannels(n.data);e=await getObjectMaskData(i,n.decodedMask),i.dispose(),t=n.decodedMask,r={height:n.data.shape[1],width:n.data.shape[2]}}else if(n.encodedMask){const i=Uint8Array.from(decode(n.encodedMask)),o=prepareChannels(n.data);e=await getObjectMaskData(o,i),o.dispose(),t=i,r={height:n.data.shape[1],width:n.data.shape[2]}}else e=prepareChannels(n.data);const s={channels:e.arraySync(),maskData:t,maskShape:r};return e.dispose(),s};self.onmessage=async n=>{const e={},t=n.data.things.length;let r=0;for await(const s of n.data.things){const{id:i,data:o,encodedMask:a,decodedMask:l}=s,c=tensor4d(o),u=await prepareThingData({data:c,encodedMask:a,decodedMask:l});e[i]=u,self.postMessage({loadValue:Math.floor(r/t*100)}),r++}self.postMessage({kind:n.data.kind,data:e})}})();
