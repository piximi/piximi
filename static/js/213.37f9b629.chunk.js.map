{"version":3,"file":"static/js/213.37f9b629.chunk.js","mappings":"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","sources":["utils/measurements/helpers.ts","components/measurements/workers/measurementWorker.ts","utils/annotator/find-contours.ts","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import {\n  Tensor1D,\n  Tensor4D,\n  moments,\n  tidy,\n  topk,\n  stack,\n  Tensor2D,\n  tensor1d,\n  booleanMaskAsync,\n} from \"@tensorflow/tfjs\";\nimport { intersection } from \"lodash\";\nimport { MeasurementOption } from \"store/measurements/types\";\nimport { findContours } from \"utils/annotator\";\nimport { DataArray } from \"utils/file-io/types\";\n\n//TODO: Write tests\nexport const sortTensor = (tensor: Tensor1D): Tensor1D => {\n  return tidy(() => {\n    const negativeTensor = tensor.mul(-1);\n    const negativeOrdered = topk(negativeTensor, negativeTensor.size).values;\n    const ordered = negativeOrdered.mul(-1);\n    return ordered as Tensor1D;\n  });\n};\n\nexport const getTensorMedian = (\n  tensor: Tensor1D,\n  sorted?: boolean\n): Tensor1D => {\n  return tidy(() => {\n    if (!sorted) tensor = sortTensor(tensor);\n    const middle = tensor.size / 2;\n    const medianLeft = tensor.slice(middle, 1);\n    if (tensor.size % 2 === 0) {\n      const medianRight = tensor.slice(middle + 1, 1);\n      return medianLeft.add(medianRight).div(2);\n    } else {\n      return medianLeft;\n    }\n  });\n};\n\nexport const getTensorPercentile = (\n  tensor: Tensor1D,\n  percentile: number,\n  sorted?: boolean\n): Tensor1D => {\n  return tidy(() => {\n    if (!sorted) tensor = sortTensor(tensor);\n    const percentBelow = Math.floor(tensor.size * percentile);\n\n    return topk(tensor, percentBelow).values.min();\n  });\n};\n\nexport const getTensorStdDev = (tensor: Tensor1D): Tensor1D => {\n  return tidy(() => {\n    const variance = moments(tensor).variance;\n    return variance.sqrt() as Tensor1D;\n  });\n};\n\nexport const getTensorMAD = (tensor: Tensor1D, sorted?: boolean): Tensor1D => {\n  return tidy(() => {\n    const median = getTensorMedian(tensor, sorted);\n    const subtractedTensor = tensor.sub(median) as Tensor1D;\n    const absSubtracted = subtractedTensor.abs();\n    return getTensorMedian(absSubtracted);\n  });\n};\n\nexport const prepareChannels = (thingData: Tensor4D) => {\n  return tidy(() => {\n    const [planes, height, width, channels] = thingData.shape;\n    const numPixels = planes * width * height;\n    const squashedTensor = thingData.reshape([numPixels, channels]);\n\n    const channelTensors: Array<Tensor1D> = [];\n    for (let i = 0; i < channels; i++) {\n      const gatheredTensor = squashedTensor.gather([i], 1);\n      const channelTensor = gatheredTensor.flatten();\n      channelTensors.push(channelTensor);\n    }\n\n    return stack(channelTensors) as Tensor2D;\n  });\n};\nexport const getIntensityMeasurement = (\n  channelTensor: Tensor1D,\n  measurement: string\n) => {\n  const sortedChannelTensor = sortTensor(channelTensor);\n\n  let measurementResults: number | undefined = undefined;\n\n  switch (measurement) {\n    case \"intensity-total\":\n      const total = tidy(() => {\n        return channelTensor.sum().arraySync() as number;\n      });\n\n      measurementResults = total;\n      break;\n\n    case \"intensity-mean\":\n      const mean = tidy(() => {\n        return channelTensor.mean().arraySync() as number;\n      });\n\n      measurementResults = mean;\n      break;\n\n    case \"intensity-median\":\n      const median = tidy(() => {\n        return getTensorMedian(sortedChannelTensor, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(median) ? median[0] : median;\n      break;\n\n    case \"intensity-std\":\n      const std = tidy(() => {\n        return getTensorStdDev(sortedChannelTensor).arraySync();\n      });\n\n      measurementResults = Array.isArray(std) ? std[0] : std;\n      break;\n    case \"intensity-MAD\":\n      const mad = tidy(() => {\n        return getTensorMAD(sortedChannelTensor, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(mad) ? mad[0] : mad;\n      break;\n    case \"intensity-min\":\n      const min = tidy(() => {\n        return channelTensor.min().arraySync() as number;\n      });\n\n      measurementResults = min;\n      break;\n    case \"intensity-max\":\n      const max = tidy(() => {\n        return channelTensor.max().arraySync() as number;\n      });\n\n      measurementResults = max;\n      break;\n    case \"intensity-upper-quartile\":\n      const upperQuartile = tidy(() => {\n        return getTensorPercentile(sortedChannelTensor, 0.25, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(upperQuartile)\n        ? upperQuartile[0]\n        : upperQuartile;\n      break;\n    case \"intensity-lower-quartile\":\n      const lowerQuartile = tidy(() => {\n        return getTensorPercentile(sortedChannelTensor, 0.75, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(lowerQuartile)\n        ? lowerQuartile[0]\n        : lowerQuartile;\n      break;\n    default:\n      break;\n  }\n  sortedChannelTensor.dispose();\n  return measurementResults;\n};\n\nexport const getObjectMaskData = async (\n  channelData: Tensor2D,\n  objectMask: DataArray\n) => {\n  const maskArray = Array.from(objectMask);\n  const maskTensor = tensor1d(maskArray, \"bool\");\n\n  const maskedChannels = await booleanMaskAsync(channelData, maskTensor, 1);\n  maskTensor.dispose();\n  return maskedChannels as Tensor2D;\n};\n\nexport const getPerimeterFromMask = (\n  mask: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const nMask: number[] = [];\n  Array.from(mask).forEach((i) => {\n    nMask.push(i / 255);\n  });\n  const contourArray = findContours(\n    Int8Array.from(nMask),\n    maskShape.width,\n    maskShape.height\n  );\n  return contourArray.reduce((perimeter: number, contour) => {\n    return (\n      perimeter +\n      getPerimeter(contour.points.map((point) => [point.x, point.y]))\n    );\n  }, 0);\n};\n\nexport const getPerimeter = (vertices: Array<Array<number>>) => {\n  let total = 0;\n  for (let i = 0; i < vertices.length; i++) {\n    let fromX = vertices[i][0];\n    let fromY = vertices[i][1];\n    let toX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let toY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    total += Math.sqrt((toX - fromX) ** 2 + (toY - fromY) ** 2);\n  }\n  return total;\n};\nexport const getEQPC = (area: number) => {\n  return 2 * Math.sqrt(area / Math.PI);\n};\nexport const getPEQPC = (area: number) => {\n  return 2 * Math.sqrt(area * Math.PI);\n};\n\nexport const getObjectFormFactor = (\n  area: number,\n  maskData: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const peqpc = getPEQPC(area);\n\n  const per = getPerimeterFromMask(maskData, maskShape);\n\n  return peqpc / per;\n};\n\nexport const getPE = (\n  mask: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const perimeter = getPerimeterFromMask(mask, maskShape);\n  return perimeter / Math.PI;\n};\n\nexport const findSelected = (\n  parents: MeasurementOption[],\n  selectedMeasurements: string[]\n) => {\n  parents.forEach((parent) => {\n    const containedChildren = intersection(\n      parent.children!,\n      selectedMeasurements\n    );\n    if (\n      containedChildren.length === parent.children!.length &&\n      !selectedMeasurements.includes(parent.id)\n    ) {\n      selectedMeasurements.push(parent.id);\n      findSelected(parents, selectedMeasurements);\n    }\n  });\n};\n\nexport const getMean = (values: number[]) => {\n  return (\n    values.reduce((sum: number, value) => {\n      return sum + value;\n    }, 0) / values.length\n  );\n};\n\nexport const getMedian = (values: number[]) => {\n  const middleIndex = values.length / 2;\n  const flooredIndex = Math.floor(middleIndex);\n  let median: number;\n  if (flooredIndex === middleIndex) {\n    median = (values[middleIndex - 1] + values[middleIndex]) / 2;\n  } else {\n    median = values[flooredIndex];\n  }\n  return { median, index: flooredIndex };\n};\n\nexport const getSTD = (values: number[], mean: number) => {\n  const _std =\n    values.reduce((sqsum: number, value) => {\n      return sqsum + (value - mean) ** 2;\n    }, 0) / values.length;\n\n  return Math.sqrt(_std);\n};\n\nexport const getStatistics = (values: number[]) => {\n  const sortedValues = [...values];\n  sortedValues.sort(compareDecimals);\n  const mean = getMean(sortedValues);\n  const { median, index } = getMedian(sortedValues);\n  const std = getSTD(sortedValues, mean);\n  const lowerHalf = sortedValues.slice(0, index);\n  const upperHalf = sortedValues.slice(index);\n  const { median: lowerQuartile } = getMedian(lowerHalf);\n  const { median: upperQuartile } = getMedian(upperHalf);\n  const max = sortedValues.at(-1)!;\n  const min = sortedValues[0];\n\n  return { mean, median, std, min, max, lowerQuartile, upperQuartile };\n};\n\nfunction compareDecimals(a: number, b: number) {\n  if (a === b) return 0;\n\n  return a < b ? -1 : 1;\n}\n","import * as tf from \"@tensorflow/tfjs\";\nimport { MeasurementsData } from \"store/measurements/types\";\nimport {\n  getEQPC,\n  getIntensityMeasurement,\n  getObjectFormFactor,\n  getPerimeterFromMask,\n} from \"utils/measurements/helpers\";\n\n/* eslint-disable-next-line no-restricted-globals */\nself.onmessage = async (\n  e: MessageEvent<{\n    currentMeasurements: MeasurementsData;\n    activeMeasurements: string[];\n    thingIds: string[];\n  }>\n) => {\n  const { currentMeasurements, activeMeasurements, thingIds } = e.data;\n  const newMeasurements: Record<string, Record<string, number>> = {};\n  activeMeasurements.forEach((measurement) => {\n    if (measurement.includes(\"intensity\")) {\n      const measurementdetails = measurement.split(\"-channel-\");\n      const measurementName = measurementdetails[0];\n      const channel = +measurementdetails[1];\n\n      thingIds.forEach((thingId) => {\n        if (\n          thingId in currentMeasurements &&\n          measurement in currentMeasurements[thingId].measurements\n        ) {\n          return;\n        } else {\n          const thingChannelData = currentMeasurements[thingId].channelData!;\n          if (!thingChannelData) {\n          }\n          const measuredChannel = tf.tidy(() => {\n            return tf\n              .tensor2d(thingChannelData)\n              .slice(channel, 1)\n              .squeeze() as tf.Tensor1D;\n          });\n\n          const result = getIntensityMeasurement(\n            measuredChannel,\n            measurementName\n          );\n          if (result === undefined)\n            throw new Error(\n              `Error calculating ${measurementName} on channel ${channel}`\n            );\n          if (thingId in newMeasurements) {\n            newMeasurements[thingId][measurement] = result;\n          } else {\n            newMeasurements[thingId] = { [measurement]: result };\n          }\n          measuredChannel.dispose();\n        }\n      });\n    } else if (measurement.includes(\"geometry\")) {\n      if (measurement.includes(\"area\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const thingChannelData = currentMeasurements[thingId].channelData!;\n            const result = thingChannelData[0].length;\n\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"perimeter\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const result = getPerimeterFromMask(\n              currentMeasurements[thingId].maskData!,\n              currentMeasurements[thingId].maskShape!\n            );\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"extent\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const thingChannelData = currentMeasurements[thingId].channelData!;\n            const area = thingChannelData[0].length;\n            const shape = currentMeasurements[thingId].maskShape!;\n            const bboxArea = shape.width * shape.height;\n            const result = area / bboxArea;\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"bbox\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const shape = currentMeasurements[thingId].maskShape!;\n            const bboxArea = shape.width * shape.height;\n            const result = bboxArea;\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"eqpc\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const result = getEQPC(\n              currentMeasurements[thingId].channelData![0].length\n            );\n\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n\n      if (measurement.includes(\"ped\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const per = getPerimeterFromMask(\n              currentMeasurements[thingId].maskData!,\n              currentMeasurements[thingId].maskShape!\n            );\n\n            const result = per / Math.PI;\n\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"sphericity\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const result = getObjectFormFactor(\n              currentMeasurements[thingId].channelData![0].length,\n              currentMeasurements[thingId].maskData!,\n              currentMeasurements[thingId].maskShape!\n            );\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n      if (measurement.includes(\"compactness\")) {\n        thingIds.forEach((thingId) => {\n          if (\n            thingId in currentMeasurements &&\n            measurement in currentMeasurements[thingId].measurements\n          ) {\n            return;\n          } else {\n            const formFactor = getObjectFormFactor(\n              currentMeasurements[thingId].channelData![0].length,\n              currentMeasurements[thingId].maskData!,\n              currentMeasurements[thingId].maskShape!\n            );\n\n            const result = 1 / formFactor;\n            if (result === undefined)\n              throw new Error(`Error calculating area `);\n            if (thingId in newMeasurements) {\n              newMeasurements[thingId][measurement] = result;\n            } else {\n              newMeasurements[thingId] = { [measurement]: result };\n            }\n          }\n        });\n      }\n    }\n  });\n  /* eslint-disable-next-line no-restricted-globals */\n  self.postMessage(newMeasurements);\n};\n\nexport {};\n","/** Finding contours in binary images and approximating polylines.\n *  Implements the same algorithms as OpenCV's findContours and approxPolyDP.\n *  <p>\n *  Made possible with support from The Frank-Ratchye STUDIO For Creative Inquiry\n *  At Carnegie Mellon University. http://studioforcreativeinquiry.org/\n *  @author Lingdong Huang\n *\n * original source: https://gist.github.com/LingDong-/b99cdbe814e600d8152c0eefeef01ab3\n *\n * Modified for use in piximi 2/23/2023\n * @author Nodari Gogoberidze\n */\n\nimport { logger } from \"utils/common/helpers\";\nimport { Point } from \"./types\";\n\n// this can be extended with other types, eg. number[], Int32Array, Float32Array\n// but must be data array that can hold negative numbers\n// DO NOT USE Uint[8|16|32][Clamped]Array\ntype MaskData = Int8Array;\n\ntype Border = {\n  // sequential number\n  seqNum: number;\n  // (i,j) points belonging to the border\n  points: Array<Point>;\n  // whether or not the border constitutes a hole\n  isHole?: boolean;\n  // the sequential number of the parent border\n  parent?: number;\n};\n\nconst N_PIXEL_NEIGHBOR = 8;\n\n// returns a padded and binary mask of input mask\nexport function padMask(\n  unpaddedMask: Array<number> | Uint8Array | Uint8ClampedArray,\n  unPaddedWidth: number,\n  unPaddedHeight: number\n): MaskData {\n  const paddedWidth = unPaddedWidth + 2;\n  const paddedHeight = unPaddedHeight + 2;\n\n  const paddedMask = new Int8Array(paddedWidth * paddedHeight);\n\n  for (let y = 0; y < unPaddedHeight; y++) {\n    for (let x = 0; x < unPaddedWidth; x++) {\n      const unPaddedIdx = y * unPaddedWidth + x;\n      const paddedIdx = (y + 1) * paddedWidth + (x + 1);\n\n      paddedMask[paddedIdx] = unpaddedMask[unPaddedIdx] === 0 ? 0 : 1;\n    }\n  }\n\n  return paddedMask;\n}\n\n// realigns contours such that the points they contain are with respect\n// to the unpadded binary mask\nfunction unpadContours(contours: Array<Border>) {\n  const unpaddedContours: Array<Border> = [];\n\n  for (const contour of contours) {\n    unpaddedContours.push({\n      ...contour,\n      points: contour.points.map((p) => ({ x: p.x - 1, y: p.y - 1 })),\n    });\n  }\n\n  return unpaddedContours;\n}\n\nfunction _f_ij(F: MaskData, width: number, height: number) {\n  return {\n    get: (i: number, j: number) => F[i * width + j],\n    set: (i: number, j: number, value: number) => {\n      F[i * width + j] = value;\n    },\n  };\n}\n\n// give pixel neighborhood counter-clockwise ID's for\n// easier access with findContour algorithm\nfunction neighborIdxToCoord(i: number, j: number, id: number) {\n  switch (id) {\n    case 0:\n      return [i, j + 1];\n    case 1:\n      return [i - 1, j + 1];\n    case 2:\n      return [i - 1, j];\n    case 3:\n      return [i - 1, j - 1];\n    case 4:\n      return [i, j - 1];\n    case 5:\n      return [i + 1, j - 1];\n    case 6:\n      return [i + 1, j];\n    case 7:\n      return [i + 1, j + 1];\n    default:\n      // return null;\n      throw new Error(`Incorrect id, (${id}), must be in [0, 7]`);\n  }\n}\n\nfunction neighborCoordToIdx(\n  baseI: number,\n  baseJ: number,\n  neighborI: number,\n  neighborJ: number\n) {\n  let di = neighborI - baseI;\n  let dj = neighborJ - baseJ;\n\n  if (di === 0 && dj === 1) {\n    return 0;\n  }\n  if (di === -1 && dj === 1) {\n    return 1;\n  }\n  if (di === -1 && dj === 0) {\n    return 2;\n  }\n  if (di === -1 && dj === -1) {\n    return 3;\n  }\n  if (di === 0 && dj === -1) {\n    return 4;\n  }\n  if (di === 1 && dj === -1) {\n    return 5;\n  }\n  if (di === 1 && dj === 0) {\n    return 6;\n  }\n  if (di === 1 && dj === 1) {\n    return 7;\n  }\n  // return -1;\n  throw new Error(`Cannot find id with di ${di}, dj ${dj}`);\n}\n\nfunction logNeighbors(\n  fij: ReturnType<typeof _f_ij>,\n  baseI: number,\n  baseJ: number,\n  startIdx: number,\n  offset: number,\n  logMessage?: string\n) {\n  const neighborVals: Array<string | number> = [\n    \"_\",\n    \"_\",\n    \"_\",\n    \"_\",\n    \"_\",\n    \"_\",\n    \"_\",\n    \"_\",\n  ];\n\n  for (let ccwIdx = 0; ccwIdx < N_PIXEL_NEIGHBOR; ccwIdx++) {\n    let neighborIdx =\n      (ccwIdx + startIdx + offset + N_PIXEL_NEIGHBOR * 2) % N_PIXEL_NEIGHBOR;\n    let ij = neighborIdxToCoord(baseI, baseJ, neighborIdx);\n\n    neighborVals[neighborIdx] =\n      neighborIdx === startIdx + offset\n        ? `(${fij.get(ij[0], ij[1])})`\n        : ` ${fij.get(ij[0], ij[1])} `;\n  }\n\n  logMessage && logger(logMessage);\n  logger(`neighborhood: (${baseI}, ${baseJ})`);\n  logger(\n    `|${neighborVals[3]}|${neighborVals[2]}|${neighborVals[1]}|\\n|${\n      neighborVals[4]\n    }| ${fij.get(baseI, baseJ)} |${neighborVals[0]}|\\n|${neighborVals[5]}|${\n      neighborVals[6]\n    }|${neighborVals[7]}|`\n  );\n}\n\n/**\n * First counter-clockwise non-zero element in neighborhood\n * also responsible in determining if the neighbor directly to\n * the right of the base coordinate is crossed (inspected)\n *\n * @param baseI The i coordinate of the point to search the neighborhood of\n * @param baseJ The j coordinate of the point to search the neighbrohood of\n * @param neighborI The i coordinate of the first point in the neighborhood to search\n *                  should i + (1, 0, or -1)\n * @param neighborJ The j coordinate of the first point in the neighborhood to search\n *                  should j + (1, 0, or -1)\n * @param offset An offset counterclockwise from the base point\n * @return object\n * @parameter ij: The (i,j) coords of the non-zero neighbor or null if absent\n * @parameter rightExamined: wether or not the right neighbor was inspected\n **/\nfunction ccwNon0(\n  fij: ReturnType<typeof _f_ij>,\n  w: number,\n  h: number,\n  baseI: number,\n  baseJ: number,\n  neighborI: number,\n  neighborJ: number,\n  offset: number\n) {\n  let rightExamined = false;\n\n  let startIdx = neighborCoordToIdx(baseI, baseJ, neighborI, neighborJ);\n  for (let ccwIdx = 0; ccwIdx < N_PIXEL_NEIGHBOR; ccwIdx++) {\n    let neighborIdx =\n      (ccwIdx + startIdx + offset + N_PIXEL_NEIGHBOR * 2) % N_PIXEL_NEIGHBOR;\n\n    rightExamined = neighborIdx === 0 ? true : rightExamined;\n\n    let ij = neighborIdxToCoord(baseI, baseJ, neighborIdx);\n\n    if (fij.get(ij[0], ij[1]) !== 0) {\n      return { ij, rightExamined };\n    }\n  }\n  process.env.NODE_ENV !== \"production\" &&\n    logNeighbors(\n      fij,\n      baseI,\n      baseJ,\n      startIdx,\n      offset,\n      \"ccw scan - nothing found\"\n    );\n  return { ij: null, rightExamined };\n}\n\n/**\n * First clockwise non-zero element in neighborhood\n * @param baseI The i coordinate of the point to search the neighborhood of\n * @param baseJ The j coordinate of the point to search the neighbrohood of\n * @param neighborI The i coordinate of the first point in the neighborhood to search\n *                  should i + (1, 0, or -1)\n * @param neighborJ The j coordinate of the first point in the neighborhood to search\n *                  should j + (1, 0, or -1)\n * @param offset An offset counterclockwise from the base point\n * @return The (i,j) coords of the non-zero neighbor or null if absent\n **/\nfunction cwNon0(\n  fij: ReturnType<typeof _f_ij>,\n  w: number,\n  h: number,\n  baseI: number,\n  baseJ: number,\n  neighborI: number,\n  neighborJ: number,\n  offset: number\n) {\n  let startIdx = neighborCoordToIdx(baseI, baseJ, neighborI, neighborJ);\n  for (let ccwIdx = 0; ccwIdx < N_PIXEL_NEIGHBOR; ccwIdx++) {\n    let neighborIdx =\n      (-ccwIdx + startIdx - offset + N_PIXEL_NEIGHBOR * 2) % N_PIXEL_NEIGHBOR;\n    let ij = neighborIdxToCoord(baseI, baseJ, neighborIdx);\n    if (fij.get(ij[0], ij[1]) !== 0) {\n      return ij;\n    }\n  }\n  return null;\n}\n\n/**\n * Find contours in a binary image\n * <p>\n * Implements Suzuki, S. and Abe, K.\n * Topological Structural Analysis of Digitized Binary Images by Border Following.\n * <p>\n * See source code for step-by-step correspondence to the paper's algorithm\n * description.\n * @param  F    The \"Frame\" (bitmap), stored in 1-dimensional row-major form.\n *              0=background, 1=foreground, will be modified by the function\n *              to hold semantic information\n * @param  width    Width of the bitmap\n * @param  height    Height of the bitmap\n * @return      An array of contours found in the image.\n * @see         Contour\n */\nexport const findContours = (F: MaskData, width: number, height: number) => {\n  // Topological Structural Analysis of Digitized Binary Images by Border Following.\n  // Suzuki, S. and Abe, K., CVGIP 30 1, pp 32-46 (1985)\n\n  let contours: Array<Border> = [];\n\n  // Without loss of generality, we assume that 0-pixels fill the frame\n  // of a binary picture\n  for (let i = 1; i < height - 1; i++) {\n    F[i * width] = 0;\n    F[i * width + width - 1] = 0;\n  }\n  for (let i = 0; i < width; i++) {\n    F[i] = 0;\n    F[width * height - 1 - i] = 0;\n  }\n\n  // Set nitially NBD to 1\n  // (the frame of F forms a special hole border and gets the sequential number 1;\n  //  NBD stands for the sequential number of the current border)\n  let NBD = 1;\n\n  // Scan the picture with a TV raster and perform the following steps\n  // for each pixel such that fij != 0. Every time we begin to scan a\n  // new row of the picture, reset LNBD to 1.\n  // LNDB stands for the sequential number of the (outer or hole) border\n  // encountered most recently\n  let LNBD = 1;\n\n  // The pixel located in the ith row and jth column is represented by the\n  // row number (i, j)\n  // fij is the value at coord (i,j) => F[i * width + j]\n  const fij = _f_ij(F, width, height);\n\n  // the row number i increases from top to bottom\n  for (let iRaster = 1; iRaster < height - 1; iRaster++) {\n    LNBD = 1;\n\n    // the column number j from left to right\n    for (let jRaster = 1; jRaster < width - 1; jRaster++) {\n      let [i2CwStart, j2CwStart] = [0, 0];\n\n      // scan until fij != 0\n      if (fij.get(iRaster, jRaster) === 0) {\n        continue;\n      }\n\n      // current border 0 used in (2)\n      let B: Partial<Border> = {\n        isHole: undefined,\n        seqNum: undefined,\n        points: [{ y: iRaster, x: jRaster }],\n      };\n\n      // (1) Select one of the following (1-a, 1-b, or 1-c):\n\n      // (1-a) If fij = 1 and fi, j-1 = 0, then decide that the pixel\n      //     (i, j) is the border following starting point of an outer\n      //     border, increment NBD, and (i2, j2) <- (i, j - 1).\n      if (\n        fij.get(iRaster, jRaster) === 1 &&\n        fij.get(iRaster, jRaster - 1) === 0\n      ) {\n        NBD++;\n        [i2CwStart, j2CwStart] = [iRaster, jRaster - 1];\n        B.isHole = false;\n        B.seqNum = NBD;\n\n        // (1-b) Else if fij >= 1 and fi,j+1 = 0, then decide that the\n        //     pixel (i, j) is the border following starting point of a\n        //     hole border, increment NBD, (i2, j2) <- (i, j + 1), and\n        //     LNBD + fij in case fij > 1.\n      } else if (\n        fij.get(iRaster, jRaster) >= 1 &&\n        fij.get(iRaster, jRaster + 1) === 0\n        // not in original paper\n        // account for special case for outer border covered by hole border\n        // && fij.get(iRaster, jRaster - 1) !== 0\n      ) {\n        NBD++;\n        [i2CwStart, j2CwStart] = [iRaster, jRaster + 1];\n        if (fij.get(iRaster, jRaster) > 1) {\n          LNBD = fij.get(iRaster, jRaster);\n        }\n        B.isHole = true;\n        B.seqNum = NBD;\n      } else {\n        // (1-c) Otherwise, go to (4).\n        //\n        // (4) If fij != 1, then LNBD <- |fij| and resume the raster\n        //     scan from pixel (i,j+1). The algorithm terminates when the\n        //     scan reaches the lower right corner of the picture\n        if (fij.get(iRaster, jRaster) !== 1) {\n          LNBD = Math.abs(fij.get(iRaster, jRaster));\n        }\n        continue;\n      }\n\n      // (2) Depending on the types of the newly found border\n      //     and the border with the sequential number LNBD\n      //     (i.e., the last border met on the current row),\n      //     decide the parent of the current border as shown in Table 1.\n      //\n      // TABLE 1\n      // Decision Rule for the Parent Border of the Newly Found Border B\n      // ----------------------------------------------------------------\n      // Type of border B'\n      // \\    with the sequential\n      //     \\     number LNBD\n      // Type of B \\                Outer border         Hole border\n      // ---------------------------------------------------------------\n      // Outer border               The parent border    The border B'\n      //                            of the border B'\n      //\n      // Hole border                The border B'      The parent border\n      //                                               of the border B'\n      // ----------------------------------------------------------------\n\n      contours.push(B as Border);\n\n      // default Bprime\n      let Bprime: Border = {\n        seqNum: LNBD,\n        points: [],\n        parent: LNBD,\n      };\n\n      // replace Bprime with already found border of that seqNum,\n      // if available\n      for (let c = 0; c < contours.length; c++) {\n        if (contours[c].seqNum === LNBD) {\n          Bprime = contours[c];\n          break;\n        }\n      }\n\n      if (Bprime.isHole) {\n        if (B.isHole) {\n          B.parent = Bprime.parent;\n        } else {\n          B.parent = Bprime.seqNum;\n        }\n      } else {\n        if (B.isHole) {\n          B.parent = Bprime.seqNum;\n        } else {\n          B.parent = Bprime.parent;\n        }\n      }\n\n      // (3) From the starting point (i, j), follow the detected border:\n      //     this is done by the following substeps (3.1) through (3.5).\n\n      // (3.1) Starting from (i2, j2), look around clockwise the pixels\n      //       in the neigh- borhood of (i, j) and find a nonzero pixel.\n      //       Let (i1, j1) be the first found nonzero pixel. If no nonzero\n      //       pixel is found, assign -NBD to fij and go to (4).\n      let i1j1 = cwNon0(\n        fij,\n        width,\n        height,\n        iRaster,\n        jRaster,\n        i2CwStart,\n        j2CwStart,\n        0\n      );\n      if (i1j1 === null) {\n        fij.set(iRaster, jRaster, -NBD);\n        //go to (4)\n        if (fij.get(iRaster, jRaster) !== 1) {\n          LNBD = Math.abs(fij.get(iRaster, jRaster));\n        }\n        continue;\n      }\n      let [i1CwFound, j1CwFound] = i1j1;\n\n      // (3.2) (i2, j2) <- (i1, j1) and (i3,j3) <- (i, j).\n      let [i2PrevStep, j2PrevStep] = [i1CwFound, j1CwFound];\n      let [i3CurrStep, j3CurrStep] = [iRaster, jRaster];\n\n      // walk the border\n      while (true) {\n        // (3.3) Starting from the next elementof the pixel (i2, j2)\n        //       in the counterclockwise order, examine counterclockwise\n        //       the pixels in the neighborhood of the current pixel (i3, j3)\n        //       to find a nonzero pixel and let the first one be (i4, j4).\n\n        let { ij: i4j4, rightExamined } = ccwNon0(\n          fij,\n          width,\n          height,\n          i3CurrStep,\n          j3CurrStep,\n          i2PrevStep,\n          j2PrevStep,\n          1\n        );\n\n        if (i4j4 === null) {\n          process.env.NODE_ENV !== \"production\" &&\n            console.warn(\n              `i4j4 is invalid: i ${iRaster}, j ${jRaster}, i1 ${i1CwFound}, j1 ${j1CwFound}, i2 ${i2PrevStep}, j2 ${j2PrevStep}, i3 ${i3CurrStep}, j3 ${j3CurrStep}, i4j4j ${i4j4}`\n            );\n          // break;\n        }\n\n        var [i4CcwFound, j4CcwFound] = i4j4 as number[];\n\n        // save the point\n        contours[contours.length - 1].points.push({\n          y: i4CcwFound,\n          x: j4CcwFound,\n        });\n\n        // (3.4) Change the value fi3j3 of the pixel (i3, j3) as follows:\n\n        // (3.4-a) If the pixel (i3, j3 + 1) is a O-pixel examined in the\n        //     substep (3.3) then fi3, j3 <-  -NBD.\n        if (fij.get(i3CurrStep, j3CurrStep + 1) === 0) {\n          fij.set(\n            i3CurrStep,\n            j3CurrStep,\n            // B.isHole to account for donut, see find-contours.test.ts\n            rightExamined || B.isHole ? -NBD : NBD\n          );\n\n          // (3.4-b) If the pixel (i3, j3 + 1) is not a O-pixel examined\n          //     in the substep (3.3) and fi3j3 = 1, then fi3j3 <- NBD.\n        } else if (\n          fij.get(i3CurrStep, j3CurrStep + 1) !== 0 &&\n          fij.get(i3CurrStep, j3CurrStep) === 1\n        ) {\n          fij.set(i3CurrStep, j3CurrStep, NBD);\n        } else {\n          //(3.4-c) Otherwise, do not change fi3j3.\n        }\n\n        // (3.5) If (i4, j4) = (i, j) and (i3, j3) = (i1, j1)\n        //      (coming back to the starting point), then go to (4);\n        if (\n          i4CcwFound === iRaster &&\n          j4CcwFound === jRaster &&\n          i3CurrStep === i1CwFound &&\n          j3CurrStep === j1CwFound\n        ) {\n          if (fij.get(iRaster, jRaster) !== 1) {\n            LNBD = Math.abs(fij.get(iRaster, jRaster));\n          }\n          break;\n\n          // otherwise, (i2, j2) <- (i3, j3),(i3, j3) <- (i4, j4),\n          // and go back to (3.3).\n        } else {\n          [i2PrevStep, j2PrevStep] = [i3CurrStep, j3CurrStep];\n          [i3CurrStep, j3CurrStep] = [i4CcwFound, j4CcwFound];\n        }\n      }\n    }\n  }\n  return unpadContours(contours);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [803,84,739], function() { return __webpack_require__(73213); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"84\":\"1d757b56\",\"739\":\"117a753d\",\"803\":\"a6df8bfa\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t213: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkpiximi\"] = self[\"webpackChunkpiximi\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([803,84,739].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["sortTensor","tensor","tidy","negativeTensor","mul","topk","size","values","getTensorMedian","sorted","middle","medianLeft","slice","medianRight","add","div","getTensorPercentile","percentile","percentBelow","Math","floor","min","getIntensityMeasurement","channelTensor","measurement","sortedChannelTensor","measurementResults","undefined","sum","arraySync","mean","median","Array","isArray","std","moments","variance","sqrt","mad","absSubtracted","sub","abs","max","upperQuartile","lowerQuartile","dispose","getPerimeterFromMask","mask","maskShape","nMask","from","forEach","i","push","findContours","Int8Array","width","height","reduce","perimeter","contour","getPerimeter","points","map","point","x","y","vertices","total","length","fromX","fromY","toX","toY","pow","getObjectFormFactor","area","maskData","peqpc","PI","getPEQPC","self","onmessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_e$data","currentMeasurements","activeMeasurements","thingIds","newMeasurements","wrap","_context","prev","next","data","includes","measurementdetails","split","measurementName","channel","thingId","measurements","thingChannelData","channelData","measuredChannel","tf","squeeze","result","Error","concat","_defineProperty","shape","postMessage","stop","_x","apply","arguments","neighborIdxToCoord","j","id","neighborCoordToIdx","baseI","baseJ","neighborI","neighborJ","di","dj","ccwNon0","fij","w","h","offset","rightExamined","startIdx","ccwIdx","neighborIdx","N_PIXEL_NEIGHBOR","ij","get","cwNon0","F","contours","NBD","LNBD","set","value","_f_ij","iRaster","jRaster","i2CwStart","j2CwStart","B","isHole","seqNum","Bprime","parent","c","i1j1","_i1j","_slicedToArray","i1CwFound","j1CwFound","i2PrevStep","j2PrevStep","i3CurrStep","j3CurrStep","_ccwNon","i4j4","_ref2","i4CcwFound","j4CcwFound","_step","unpaddedContours","_iterator","_createForOfIteratorHelper","s","n","done","_objectSpread","p","err","f","unpadContours","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","__webpack_exports__","O","amdD","amdO","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","getter","__esModule","d","a","definition","o","defineProperty","enumerable","chunkId","Promise","all","promises","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}