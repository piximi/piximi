{"version":3,"file":"static/js/950.c388c3c8.chunk.js","mappings":"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","sources":["utils/measurements/helpers.ts","components/measurements/utils.ts","components/measurements/workers/prepareDataWorker.ts","utils/annotator/rle.ts","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import {\n  Tensor1D,\n  Tensor4D,\n  moments,\n  tidy,\n  topk,\n  stack,\n  Tensor2D,\n  tensor1d,\n  booleanMaskAsync,\n} from \"@tensorflow/tfjs\";\nimport { intersection } from \"lodash\";\nimport { MeasurementOption } from \"store/measurements/types\";\nimport { findContours } from \"utils/annotator\";\nimport { DataArray } from \"utils/file-io/types\";\n\n//TODO: Write tests\nexport const sortTensor = (tensor: Tensor1D): Tensor1D => {\n  return tidy(() => {\n    const negativeTensor = tensor.mul(-1);\n    const negativeOrdered = topk(negativeTensor, negativeTensor.size).values;\n    const ordered = negativeOrdered.mul(-1);\n    return ordered as Tensor1D;\n  });\n};\n\nexport const getTensorMedian = (\n  tensor: Tensor1D,\n  sorted?: boolean\n): Tensor1D => {\n  return tidy(() => {\n    if (!sorted) tensor = sortTensor(tensor);\n    const middle = tensor.size / 2;\n    const medianLeft = tensor.slice(middle, 1);\n    if (tensor.size % 2 === 0) {\n      const medianRight = tensor.slice(middle + 1, 1);\n      return medianLeft.add(medianRight).div(2);\n    } else {\n      return medianLeft;\n    }\n  });\n};\n\nexport const getTensorPercentile = (\n  tensor: Tensor1D,\n  percentile: number,\n  sorted?: boolean\n): Tensor1D => {\n  return tidy(() => {\n    if (!sorted) tensor = sortTensor(tensor);\n    const percentBelow = Math.floor(tensor.size * percentile);\n\n    return topk(tensor, percentBelow).values.min();\n  });\n};\n\nexport const getTensorStdDev = (tensor: Tensor1D): Tensor1D => {\n  return tidy(() => {\n    const variance = moments(tensor).variance;\n    return variance.sqrt() as Tensor1D;\n  });\n};\n\nexport const getTensorMAD = (tensor: Tensor1D, sorted?: boolean): Tensor1D => {\n  return tidy(() => {\n    const median = getTensorMedian(tensor, sorted);\n    const subtractedTensor = tensor.sub(median) as Tensor1D;\n    const absSubtracted = subtractedTensor.abs();\n    return getTensorMedian(absSubtracted);\n  });\n};\n\nexport const prepareChannels = (thingData: Tensor4D) => {\n  return tidy(() => {\n    const [planes, height, width, channels] = thingData.shape;\n    const numPixels = planes * width * height;\n    const squashedTensor = thingData.reshape([numPixels, channels]);\n\n    const channelTensors: Array<Tensor1D> = [];\n    for (let i = 0; i < channels; i++) {\n      const gatheredTensor = squashedTensor.gather([i], 1);\n      const channelTensor = gatheredTensor.flatten();\n      channelTensors.push(channelTensor);\n    }\n\n    return stack(channelTensors) as Tensor2D;\n  });\n};\nexport const getIntensityMeasurement = (\n  channelTensor: Tensor1D,\n  measurement: string\n) => {\n  const sortedChannelTensor = sortTensor(channelTensor);\n\n  let measurementResults: number | undefined = undefined;\n\n  switch (measurement) {\n    case \"intensity-total\":\n      const total = tidy(() => {\n        return channelTensor.sum().arraySync() as number;\n      });\n\n      measurementResults = total;\n      break;\n\n    case \"intensity-mean\":\n      const mean = tidy(() => {\n        return channelTensor.mean().arraySync() as number;\n      });\n\n      measurementResults = mean;\n      break;\n\n    case \"intensity-median\":\n      const median = tidy(() => {\n        return getTensorMedian(sortedChannelTensor, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(median) ? median[0] : median;\n      break;\n\n    case \"intensity-std\":\n      const std = tidy(() => {\n        return getTensorStdDev(sortedChannelTensor).arraySync();\n      });\n\n      measurementResults = Array.isArray(std) ? std[0] : std;\n      break;\n    case \"intensity-MAD\":\n      const mad = tidy(() => {\n        return getTensorMAD(sortedChannelTensor, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(mad) ? mad[0] : mad;\n      break;\n    case \"intensity-min\":\n      const min = tidy(() => {\n        return channelTensor.min().arraySync() as number;\n      });\n\n      measurementResults = min;\n      break;\n    case \"intensity-max\":\n      const max = tidy(() => {\n        return channelTensor.max().arraySync() as number;\n      });\n\n      measurementResults = max;\n      break;\n    case \"intensity-upper-quartile\":\n      const upperQuartile = tidy(() => {\n        return getTensorPercentile(sortedChannelTensor, 0.25, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(upperQuartile)\n        ? upperQuartile[0]\n        : upperQuartile;\n      break;\n    case \"intensity-lower-quartile\":\n      const lowerQuartile = tidy(() => {\n        return getTensorPercentile(sortedChannelTensor, 0.75, true).arraySync();\n      });\n\n      measurementResults = Array.isArray(lowerQuartile)\n        ? lowerQuartile[0]\n        : lowerQuartile;\n      break;\n    default:\n      break;\n  }\n  sortedChannelTensor.dispose();\n  return measurementResults;\n};\n\nexport const getObjectMaskData = async (\n  channelData: Tensor2D,\n  objectMask: DataArray\n) => {\n  const maskArray = Array.from(objectMask);\n  const maskTensor = tensor1d(maskArray, \"bool\");\n\n  const maskedChannels = await booleanMaskAsync(channelData, maskTensor, 1);\n  maskTensor.dispose();\n  return maskedChannels as Tensor2D;\n};\n\nexport const getPerimeterFromMask = (\n  mask: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const nMask: number[] = [];\n  Array.from(mask).forEach((i) => {\n    nMask.push(i / 255);\n  });\n  const contourArray = findContours(\n    Int8Array.from(nMask),\n    maskShape.width,\n    maskShape.height\n  );\n  return contourArray.reduce((perimeter: number, contour) => {\n    return (\n      perimeter +\n      getPerimeter(contour.points.map((point) => [point.x, point.y]))\n    );\n  }, 0);\n};\n\nexport const getPerimeter = (vertices: Array<Array<number>>) => {\n  let total = 0;\n  for (let i = 0; i < vertices.length; i++) {\n    let fromX = vertices[i][0];\n    let fromY = vertices[i][1];\n    let toX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let toY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    total += Math.sqrt((toX - fromX) ** 2 + (toY - fromY) ** 2);\n  }\n  return total;\n};\nexport const getEQPC = (area: number) => {\n  return 2 * Math.sqrt(area / Math.PI);\n};\nexport const getPEQPC = (area: number) => {\n  return 2 * Math.sqrt(area * Math.PI);\n};\n\nexport const getObjectFormFactor = (\n  area: number,\n  maskData: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const peqpc = getPEQPC(area);\n\n  const per = getPerimeterFromMask(maskData, maskShape);\n\n  return peqpc / per;\n};\n\nexport const getPE = (\n  mask: DataArray,\n  maskShape: { width: number; height: number }\n) => {\n  const perimeter = getPerimeterFromMask(mask, maskShape);\n  return perimeter / Math.PI;\n};\n\nexport const findSelected = (\n  parents: MeasurementOption[],\n  selectedMeasurements: string[]\n) => {\n  parents.forEach((parent) => {\n    const containedChildren = intersection(\n      parent.children!,\n      selectedMeasurements\n    );\n    if (\n      containedChildren.length === parent.children!.length &&\n      !selectedMeasurements.includes(parent.id)\n    ) {\n      selectedMeasurements.push(parent.id);\n      findSelected(parents, selectedMeasurements);\n    }\n  });\n};\n\nexport const getMean = (values: number[]) => {\n  return (\n    values.reduce((sum: number, value) => {\n      return sum + value;\n    }, 0) / values.length\n  );\n};\n\nexport const getMedian = (values: number[]) => {\n  const middleIndex = values.length / 2;\n  const flooredIndex = Math.floor(middleIndex);\n  let median: number;\n  if (flooredIndex === middleIndex) {\n    median = (values[middleIndex - 1] + values[middleIndex]) / 2;\n  } else {\n    median = values[flooredIndex];\n  }\n  return { median, index: flooredIndex };\n};\n\nexport const getSTD = (values: number[], mean: number) => {\n  const _std =\n    values.reduce((sqsum: number, value) => {\n      return sqsum + (value - mean) ** 2;\n    }, 0) / values.length;\n\n  return Math.sqrt(_std);\n};\n\nexport const getStatistics = (values: number[]) => {\n  const sortedValues = [...values];\n  sortedValues.sort(compareDecimals);\n  const mean = getMean(sortedValues);\n  const { median, index } = getMedian(sortedValues);\n  const std = getSTD(sortedValues, mean);\n  const lowerHalf = sortedValues.slice(0, index);\n  const upperHalf = sortedValues.slice(index);\n  const { median: lowerQuartile } = getMedian(lowerHalf);\n  const { median: upperQuartile } = getMedian(upperHalf);\n  const max = sortedValues.at(-1)!;\n  const min = sortedValues[0];\n\n  return { mean, median, std, min, max, lowerQuartile, upperQuartile };\n};\n\nfunction compareDecimals(a: number, b: number) {\n  if (a === b) return 0;\n\n  return a < b ? -1 : 1;\n}\n","import {\n  MeasurementDisplayTable,\n  MeasurementOptions,\n} from \"store/measurements/types\";\nimport { ChartValues } from \"./types\";\nimport { RecursivePartial } from \"utils/common/types\";\nimport { DataArray } from \"image-js\";\nimport { getObjectMaskData, prepareChannels } from \"utils/measurements/helpers\";\nimport { decode } from \"utils/annotator\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nexport const format = (value: string | number, sf: number = 2) => {\n  if (typeof value === \"number\") {\n    return value.toFixed(sf);\n  } else {\n    return value;\n  }\n};\n\nexport const formatChartItems = (\n  measurementTables: Record<string, MeasurementDisplayTable>\n): ChartValues => {\n  const items: ChartValues = {};\n  const measurementData = Object.values(measurementTables);\n  if (measurementData.length === 0) {\n    return items;\n  }\n\n  measurementData.forEach((data, idx) => {\n    const measurementType = data.measurementId;\n\n    items[measurementType] = {\n      measurementType,\n    };\n  });\n\n  return items;\n};\n\nexport const getHistogramData = (\n  rawData: number[],\n  numBins: number\n):\n  | { data: number[]; xAxis: number[]; binSize: number; min: number }\n  | undefined => {\n  if (rawData.length === 0) return;\n  let min = Infinity;\n  let max = -Infinity;\n\n  for (const item of rawData) {\n    if (item < min) min = item;\n    if (item > max) max = item;\n  }\n\n  const valueRange = max - min > 0 ? max - min : min;\n  const binSize = valueRange / numBins + 1;\n  const data = new Array(numBins).fill(0);\n\n  for (const item of rawData) {\n    const binIndex = Math.floor((item - min) / binSize);\n    data[binIndex]++;\n  }\n\n  let i = 0;\n  const xAxis: number[] = [];\n  while (i < numBins + 1) {\n    xAxis.push(+format(i * binSize));\n    i++;\n  }\n\n  return { data, xAxis, binSize, min };\n};\n\n/*\n  Given a selection tree item, updates the selection status of all of its children\n*/\nexport const selectTreeItemChildren = (\n  updates: RecursivePartial<MeasurementOptions>,\n  itemId: string,\n  items: MeasurementOptions,\n  selectionStatus: \"on\" | \"off\"\n) => {\n  const dataItem = items[itemId];\n  if (dataItem) {\n    // data item exists\n    updates[dataItem.id as keyof MeasurementOptions] = {\n      state: selectionStatus,\n      children: dataItem.children,\n    };\n    if (dataItem.children) {\n      // data item has children, select or deselect all children\n      dataItem.children.forEach((child) => {\n        selectTreeItemChildren(updates, child, items, selectionStatus);\n      });\n    }\n  }\n};\n\nexport const prepareThingData = async (thingData: {\n  data: tf.Tensor4D;\n  encodedMask?: number[];\n  decodedMask?: DataArray;\n}) => {\n  let channelData: tf.Tensor2D;\n  let maskData: DataArray | undefined = undefined;\n  let maskShape: { width: number; height: number } | undefined;\n  if (thingData.decodedMask) {\n    const fullChannelData = prepareChannels(thingData.data);\n    channelData = await getObjectMaskData(\n      fullChannelData,\n      thingData.decodedMask\n    );\n    fullChannelData.dispose();\n    maskData = thingData.decodedMask;\n    maskShape = {\n      height: thingData.data.shape[1],\n      width: thingData.data.shape[2],\n    };\n  } else if (thingData.encodedMask) {\n    const decodedMask = Uint8Array.from(decode(thingData.encodedMask));\n\n    const fullChannelData = prepareChannels(thingData.data);\n    channelData = await getObjectMaskData(fullChannelData, decodedMask);\n    fullChannelData.dispose();\n    maskData = decodedMask;\n    maskShape = {\n      height: thingData.data.shape[1],\n      width: thingData.data.shape[2],\n    };\n  } else {\n    channelData = prepareChannels(thingData.data);\n  }\n  const thingInfo = {\n    channels: channelData.arraySync(),\n    maskData,\n    maskShape,\n  };\n  channelData.dispose();\n\n  return thingInfo;\n};\n","import * as tf from \"@tensorflow/tfjs\";\nimport { DataArray } from \"utils/file-io/types\";\nimport { prepareThingData } from \"../utils\";\nimport { ThingData } from \"store/measurements/types\";\n\n/* eslint-disable-next-line no-restricted-globals */\nself.onmessage = async (\n  e: MessageEvent<{\n    kind: string;\n    things: {\n      id: string;\n      kind: string;\n      data: number[][][][];\n      encodedMask?: number[];\n      decodedMask?: DataArray;\n    }[];\n  }>\n) => {\n  const thingInfo: ThingData = {};\n  for await (const thingData of e.data.things) {\n    const { id, data: rawData, encodedMask, decodedMask } = thingData;\n\n    const data = tf.tensor4d(rawData);\n    const preparedThing = await prepareThingData({\n      data,\n      encodedMask,\n      decodedMask,\n    });\n    thingInfo[id] = preparedThing;\n  }\n  /* eslint-disable-next-line no-restricted-globals */\n  self.postMessage({ kind: e.data.kind, data: thingInfo });\n};\n\nexport {};\n","import { AnnotationObject, DecodedAnnotationObject } from \"store/data/types\";\n\n/**\n * Decode a Run-length encoded input array.\n * @param encoded Run-length encoded input array\n * @returns The decoded input array\n */\nexport const decode = (encoded: Array<number>): Uint8ClampedArray => {\n  let decoded = [];\n\n  let background = true;\n\n  for (let i = 0; i < encoded.length; i++) {\n    for (let j = 0; j < encoded[i]; j++) {\n      decoded.push(background ? 0 : 255);\n    }\n\n    background = !background;\n  }\n\n  return new Uint8ClampedArray(decoded);\n};\n\nexport const decodeAnnotation = (\n  encodedAnnotation: AnnotationObject\n): DecodedAnnotationObject => {\n  // TODO - serializtion: temporary measure, remove when done\n  if (!encodedAnnotation.encodedMask)\n    throw Error(`Annotation ${encodedAnnotation.id} has no encoded mask`);\n\n  const decodedAnnotation = {\n    ...encodedAnnotation,\n    decodedMask: Uint8Array.from(decode(encodedAnnotation.encodedMask)),\n  };\n\n  return decodedAnnotation;\n};\n\n/**\n * Compute the Run-length encoding of the input array.\n * @param decoded (decoded) input array\n * @param expectBinary true if decoded mask is binary array (only consists of the values 0 or 1)\n                       false if the two values are 0 and 26^bitDepth-1\n * @returns Encoded array\n */\nexport const encode = (\n  decoded: Uint8Array | Uint8ClampedArray | Uint16Array | Float32Array,\n  expectBinary: boolean = false\n): Array<number> => {\n  let highVal: number;\n\n  if (expectBinary) {\n    highVal = 1;\n  } else {\n    const bitDepth =\n      decoded.constructor === Uint16Array\n        ? 16\n        : decoded.constructor === Float32Array\n        ? 32\n        : 8; // Uint8[Clamped]Array\n\n    highVal = 2 ** bitDepth - 1;\n  }\n\n  let lastElement = decoded[0];\n\n  let lastSequenceSize = 1;\n\n  let encoded = [];\n\n  // Float32Array data usually holds normalized data between 0 and 1,\n  // in which case it must be denormalized before calling this func\n  // such that 0 -> 0 and 1 -> 2*16-1\n  // or expectBinary should be set true\n  if (decoded[0] === highVal) {\n    encoded.push(0);\n  }\n\n  for (let i = 1; i < decoded.length; i++) {\n    if (lastElement !== decoded[i]) {\n      encoded.push(lastSequenceSize);\n\n      lastElement = decoded[i];\n\n      lastSequenceSize = 1;\n    } else {\n      lastSequenceSize += 1;\n    }\n  }\n\n  encoded.push(lastSequenceSize);\n\n  return encoded;\n};\n\nexport const encodeAnnotation = (\n  decodedAnnotation: DecodedAnnotationObject\n): AnnotationObject => {\n  // TODO - serializtion: temporary measure, remove when done\n  if (!decodedAnnotation.decodedMask)\n    throw Error(`Annotation ${decodedAnnotation.id} has no decoded mask`);\n\n  const encodedAnnotation = {\n    ...decodedAnnotation,\n    encodedMask: encode(decodedAnnotation.decodedMask),\n  };\n\n  return encodedAnnotation;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [803,743,739], function() { return __webpack_require__(95950); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"739\":\"117a753d\",\"743\":\"89ae8f16\",\"803\":\"a6df8bfa\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t950: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkpiximi\"] = self[\"webpackChunkpiximi\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([803,743,739].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["prepareChannels","thingData","tidy","_thingData$shape","_slicedToArray","shape","planes","height","width","channels","numPixels","squashedTensor","reshape","channelTensors","i","channelTensor","gather","flatten","push","stack","getObjectMaskData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","channelData","objectMask","maskArray","maskTensor","maskedChannels","wrap","_context","prev","next","Array","from","tensor1d","booleanMaskAsync","sent","dispose","abrupt","stop","_x","_x2","apply","arguments","prepareThingData","maskData","maskShape","fullChannelData","decodedMask","_fullChannelData","thingInfo","undefined","data","encodedMask","Uint8Array","decode","arraySync","self","onmessage","e","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","id","rawData","preparedThing","_asyncIterator","things","done","value","tf","t0","return","finish","postMessage","kind","encoded","decoded","background","length","j","Uint8ClampedArray","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","x","__webpack_exports__","O","amdD","Error","amdO","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","map","then"],"sourceRoot":""}